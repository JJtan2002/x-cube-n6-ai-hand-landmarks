ARM GAS  /tmp/ccO2SMb7.s 			page 1


   1              		.arch armv8.1-m.main
   2              		.fpu fpv5-d16
   3              		.arch_extension dsp
   4              		.arch_extension fp
   5              		.arch_extension fp.dp
   6              		.arch_extension mve
   7              		.arch_extension mve.fp
   8              		.eabi_attribute 5, "cortex-m55"
   9              		.eabi_attribute 28, 1
  10              		.eabi_attribute 20, 1
  11              		.eabi_attribute 21, 1
  12              		.eabi_attribute 23, 3
  13              		.eabi_attribute 24, 1
  14              		.eabi_attribute 25, 1
  15              		.eabi_attribute 26, 1
  16              		.eabi_attribute 30, 4
  17              		.eabi_attribute 34, 1
  18              		.eabi_attribute 38, 1
  19              		.eabi_attribute 18, 4
  20              		.file	"stm32n6xx_hal_gfxmmu.c"
  21              		.text
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.file 1 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c"
  25              		.section	.text.HAL_GFXMMU_MspInit,"ax",%progbits
  26              		.align	1
  27              		.weak	HAL_GFXMMU_MspInit
  28              		.syntax unified
  29              		.thumb
  30              		.thumb_func
  32              	HAL_GFXMMU_MspInit:
  33              	.LVL0:
  34              	.LFB837:
   1:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
   2:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   ******************************************************************************
   3:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @file    stm32n6xx_hal_gfxmmu.c
   4:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @author  MCD Application Team
   5:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief   This file provides firmware functions to manage the following
   6:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *          functionalities of the Graphic MMU (GFXMMU) peripheral:
   7:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *           + Initialization and De-initialization.
   8:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *           + LUT configuration.
   9:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *           + Modify physical buffer addresses.
  10:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *           + Packing configuration.
  11:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *           + Error management.
  12:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *
  13:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   ******************************************************************************
  14:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @attention
  15:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *
  16:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * Copyright (c) 2023 STMicroelectronics.
  17:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * All rights reserved.
  18:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *
  19:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * This software is licensed under terms that can be found in the LICENSE file
  20:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * in the root directory of this software component.
  21:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  22:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *
  23:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   ******************************************************************************
  24:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   @verbatim
ARM GAS  /tmp/ccO2SMb7.s 			page 2


  25:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   ==============================================================================
  26:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                      ##### How to use this driver #####
  27:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   ==============================================================================
  28:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   [..]
  29:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     *** Initialization ***
  30:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     ======================
  31:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
  32:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (#) As prerequisite, fill in the HAL_GFXMMU_MspInit() :
  33:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         (++) Enable GFXMMU clock interface with __HAL_RCC_GFXMMU_CLK_ENABLE().
  34:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         (++) If interrupts are used, enable and configure GFXMMU global
  35:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****             interrupt with HAL_NVIC_SetPriority() and HAL_NVIC_EnableIRQ().
  36:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (#) Configure the number of blocks per line, default value, physical
  37:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           buffer addresses and interrupts using the HAL_GFXMMU_Init() function.
  38:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
  39:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     *** LUT configuration ***
  40:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     =========================
  41:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
  42:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (#) Use HAL_GFXMMU_DisableLutLines() to deactivate all LUT lines (or a
  43:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           range of lines).
  44:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (#) Use HAL_GFXMMU_ConfigLut() to copy LUT from flash to look up RAM.
  45:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (#) Use HAL_GFXMMU_ConfigLutLine() to configure one line of LUT.
  46:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
  47:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     *** Modify physical buffer addresses ***
  48:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     ========================================
  49:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
  50:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (#) Use HAL_GFXMMU_ModifyBuffers() to modify physical buffer addresses.
  51:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
  52:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     *** Packing configuration ***
  53:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     =============================
  54:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
  55:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (#) Use HAL_GFXMMU_ConfigPacking() to configure packing.
  56:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
  57:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     *** Error management ***
  58:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     ========================
  59:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
  60:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (#) If interrupts are used, HAL_GFXMMU_IRQHandler() will be called when
  61:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           an error occurs. This function will call HAL_GFXMMU_ErrorCallback().
  62:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           Use HAL_GFXMMU_GetError() to get the error code.
  63:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
  64:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     *** De-initialization ***
  65:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     =========================
  66:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
  67:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (#) As prerequisite, fill in the HAL_GFXMMU_MspDeInit() :
  68:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         (++) Disable GFXMMU clock interface with __HAL_RCC_GFXMMU_CLK_ENABLE().
  69:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         (++) If interrupts has been used, disable GFXMMU global interrupt with
  70:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****              HAL_NVIC_DisableIRQ().
  71:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (#) De-initialize GFXMMU using the HAL_GFXMMU_DeInit() function.
  72:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
  73:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     *** Callback registration ***
  74:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     =============================
  75:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
  76:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     The compilation define USE_HAL_GFXMMU_REGISTER_CALLBACKS when set to 1
  77:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     allows the user to configure dynamically the driver callbacks.
  78:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     Use functions HAL_GFXMMU_RegisterCallback() to register a user callback.
  79:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
  80:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
  81:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     Function HAL_GFXMMU_RegisterCallback() allows to register following callbacks:
ARM GAS  /tmp/ccO2SMb7.s 			page 3


  82:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) ErrorCallback      : GFXMMU error.
  83:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) MspInitCallback    : GFXMMU MspInit.
  84:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) MspDeInitCallback  : GFXMMU MspDeInit.
  85:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
  86:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     This function takes as parameters the HAL peripheral handle, the callback ID
  87:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     and a pointer to the user callback function.
  88:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
  89:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
  90:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     Use function HAL_GFXMMU_UnRegisterCallback() to reset a callback to the default
  91:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     weak (overridden) function.
  92:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     HAL_GFXMMU_UnRegisterCallback() takes as parameters the HAL peripheral handle,
  93:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     and the callback ID.
  94:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
  95:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     This function allows to reset following callbacks:
  96:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) ErrorCallback      : GFXMMU error.
  97:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) MspInitCallback    : GFXMMU MspInit.
  98:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) MspDeInitCallback  : GFXMMU MspDeInit.
  99:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 100:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
 101:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     By default, after the HAL_GFXMMU_Init and if the state is HAL_GFXMMU_STATE_RESET
 102:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     all callbacks are reset to the corresponding legacy weak (overridden) functions:
 103:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     examples HAL_GFXMMU_ErrorCallback().
 104:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     Exception done for MspInit and MspDeInit callbacks that are respectively
 105:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     reset to the legacy weak (overridden) functions in the HAL_GFXMMU_Init
 106:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     and HAL_GFXMMU_DeInit only when these callbacks are null (not registered beforehand).
 107:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     If not, MspInit or MspDeInit are not null, the HAL_GFXMMU_Init and HAL_GFXMMU_DeInit
 108:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     keep and use the user MspInit/MspDeInit callbacks (registered beforehand).
 109:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 110:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
 111:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     Callbacks can be registered/unregistered in READY state only.
 112:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     Exception done for MspInit/MspDeInit callbacks that can be registered/unregistered
 113:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     in READY or RESET state, thus registered (user) MspInit/DeInit callbacks can be used
 114:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     during the Init/DeInit.
 115:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     In that case first register the MspInit/MspDeInit user callbacks
 116:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     using HAL_GFXMMU_RegisterCallback before calling HAL_GFXMMU_DeInit
 117:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     or HAL_GFXMMU_Init function.
 118:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 119:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]
 120:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     When the compilation define USE_HAL_GFXMMU_REGISTER_CALLBACKS is set to 0 or
 121:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     not defined, the callback registering feature is not available
 122:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     and weak (overridden) callbacks are used.
 123:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 124:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   @endverbatim
 125:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   ******************************************************************************
 126:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 127:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 128:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /* Includes ------------------------------------------------------------------*/
 129:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #include "stm32n6xx_hal.h"
 130:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 131:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /** @addtogroup STM32N6xx_HAL_Driver
 132:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @{
 133:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 134:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #ifdef HAL_GFXMMU_MODULE_ENABLED
 135:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #if defined(GFXMMU)
 136:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /** @defgroup GFXMMU GFXMMU
 137:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief GFXMMU HAL driver module
 138:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @{
ARM GAS  /tmp/ccO2SMb7.s 			page 4


 139:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 140:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 141:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /* Private typedef -----------------------------------------------------------*/
 142:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /* Private define ------------------------------------------------------------*/
 143:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /** @defgroup GFXMMU_Private_Constants GFXMMU Private Constants
 144:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @{
 145:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 146:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #define GFXMMU_LUTXL_FVB_OFFSET     8U
 147:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #define GFXMMU_LUTXL_LVB_OFFSET     16U
 148:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #define GFXMMU_CR_ITS_MASK          0x1FU
 149:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 150:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @}
 151:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 152:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /* Private macro -------------------------------------------------------------*/
 153:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /* Private variables ---------------------------------------------------------*/
 154:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /* Private function prototypes -----------------------------------------------*/
 155:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /* Exported functions --------------------------------------------------------*/
 156:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /** @defgroup GFXMMU_Exported_Functions GFXMMU Exported Functions
 157:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @{
 158:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 159:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 160:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /** @defgroup GFXMMU_Exported_Functions_Group1 Initialization and de-initialization functions
 161:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *  @brief    Initialization and de-initialization functions
 162:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *
 163:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** @verbatim
 164:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   ==============================================================================
 165:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           ##### Initialization and de-initialization functions #####
 166:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   ==============================================================================
 167:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]  This section provides functions allowing to:
 168:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) Initialize the GFXMMU.
 169:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) De-initialize the GFXMMU.
 170:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** @endverbatim
 171:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @{
 172:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 173:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 174:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 175:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  Initialize the GFXMMU according to the specified parameters in the
 176:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *         GFXMMU_InitTypeDef structure and initialize the associated handle.
 177:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 178:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval HAL status.
 179:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 180:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** HAL_StatusTypeDef HAL_GFXMMU_Init(GFXMMU_HandleTypeDef *hgfxmmu)
 181:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 182:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 183:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 184:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check GFXMMU handle */
 185:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   if (hgfxmmu == NULL)
 186:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 187:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 188:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 189:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else
 190:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 191:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Check parameters */
 192:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
 193:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_BLOCK_SIZE(hgfxmmu->Init.BlockSize));
 194:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_FUNCTIONAL_STATE(hgfxmmu->Init.AddressTranslation));
 195:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_BUFFER_ADDRESS(hgfxmmu->Init.Buffers.Buf0Address));
ARM GAS  /tmp/ccO2SMb7.s 			page 5


 196:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_BUFFER_ADDRESS(hgfxmmu->Init.Buffers.Buf1Address));
 197:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_BUFFER_ADDRESS(hgfxmmu->Init.Buffers.Buf2Address));
 198:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_BUFFER_ADDRESS(hgfxmmu->Init.Buffers.Buf3Address));
 199:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_FUNCTIONAL_STATE(hgfxmmu->Init.Interrupts.Activation));
 200:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 201:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #if (USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1)
 202:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Reset callback pointers to the weak predefined callbacks */
 203:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->ErrorCallback = HAL_GFXMMU_ErrorCallback;
 204:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 205:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Call GFXMMU MSP init function */
 206:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     if (hgfxmmu->MspInitCallback == NULL)
 207:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 208:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       hgfxmmu->MspInitCallback = HAL_GFXMMU_MspInit;
 209:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 210:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->MspInitCallback(hgfxmmu);
 211:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #else
 212:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Call GFXMMU MSP init function */
 213:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     HAL_GFXMMU_MspInit(hgfxmmu);
 214:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */
 215:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 216:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Configure GFXMMU_CR register */
 217:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->CR = 0U;
 218:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->CR |= (hgfxmmu->Init.BlockSize);
 219:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     if (hgfxmmu->Init.AddressTranslation == ENABLE)
 220:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 221:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       hgfxmmu->Instance->CR |= GFXMMU_CR_ATE;
 222:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 223:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     if (hgfxmmu->Init.Interrupts.Activation == ENABLE)
 224:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 225:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       assert_param(IS_GFXMMU_INTERRUPTS(hgfxmmu->Init.Interrupts.UsedInterrupts));
 226:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       hgfxmmu->Instance->CR |= hgfxmmu->Init.Interrupts.UsedInterrupts;
 227:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 228:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 229:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Configure default value on GFXMMU_DVR register */
 230:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->DVR = hgfxmmu->Init.DefaultValue;
 231:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 232:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Configure physical buffer addresses on GFXMMU_BxCR registers */
 233:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B0CR = hgfxmmu->Init.Buffers.Buf0Address;
 234:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B1CR = hgfxmmu->Init.Buffers.Buf1Address;
 235:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B2CR = hgfxmmu->Init.Buffers.Buf2Address;
 236:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B3CR = hgfxmmu->Init.Buffers.Buf3Address;
 237:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 238:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Reset GFXMMU error code */
 239:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->ErrorCode = GFXMMU_ERROR_NONE;
 240:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 241:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Set GFXMMU to ready state */
 242:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->State = HAL_GFXMMU_STATE_READY;
 243:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 244:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Return function status */
 245:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   return status;
 246:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 247:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 248:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 249:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  De-initialize the GFXMMU.
 250:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 251:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval HAL status.
 252:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
ARM GAS  /tmp/ccO2SMb7.s 			page 6


 253:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** HAL_StatusTypeDef HAL_GFXMMU_DeInit(GFXMMU_HandleTypeDef *hgfxmmu)
 254:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 255:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 256:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 257:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check GFXMMU handle */
 258:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   if (hgfxmmu == NULL)
 259:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 260:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 261:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 262:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else
 263:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 264:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Check parameters */
 265:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
 266:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 267:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Disable all interrupts on GFXMMU_CR register */
 268:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->CR &= ~(GFXMMU_CR_B0OIE | GFXMMU_CR_B1OIE | GFXMMU_CR_B2OIE | GFXMMU_CR_B3OI
 269:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                GFXMMU_CR_AMEIE);
 270:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 271:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Call GFXMMU MSP de-init function */
 272:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #if (USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1)
 273:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     if (hgfxmmu->MspDeInitCallback == NULL)
 274:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 275:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       hgfxmmu->MspDeInitCallback = HAL_GFXMMU_MspDeInit;
 276:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 277:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->MspDeInitCallback(hgfxmmu);
 278:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #else
 279:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     HAL_GFXMMU_MspDeInit(hgfxmmu);
 280:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */
 281:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 282:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Set GFXMMU to reset state */
 283:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->State = HAL_GFXMMU_STATE_RESET;
 284:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 285:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Return function status */
 286:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   return status;
 287:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 288:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 289:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 290:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  Initialize the GFXMMU MSP.
 291:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 292:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval None.
 293:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 294:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** __weak void HAL_GFXMMU_MspInit(GFXMMU_HandleTypeDef *hgfxmmu)
 295:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
  35              		.loc 1 295 1 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
 296:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Prevent unused argument(s) compilation warning */
 297:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   UNUSED(hgfxmmu);
  40              		.loc 1 297 3 view .LVU1
 298:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 299:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* NOTE : This function should not be modified, when the function is needed,
 300:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****             the HAL_GFXMMU_MspInit could be implemented in the user file.
 301:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****    */
 302:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
  41              		.loc 1 302 1 is_stmt 0 view .LVU2
ARM GAS  /tmp/ccO2SMb7.s 			page 7


  42 0000 7047     		bx	lr
  43              		.cfi_endproc
  44              	.LFE837:
  46              		.section	.rodata.HAL_GFXMMU_Init.str1.1,"aMS",%progbits,1
  47              	.LC0:
  48 0000 53544D33 		.ascii	"STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/st"
  48      32437562 
  48      655F4657 
  48      5F4E362F 
  48      44726976 
  49 0033 6D33326E 		.ascii	"m32n6xx_hal_gfxmmu.c\000"
  49      3678785F 
  49      68616C5F 
  49      6766786D 
  49      6D752E63 
  50              		.section	.text.HAL_GFXMMU_Init,"ax",%progbits
  51              		.align	1
  52              		.global	HAL_GFXMMU_Init
  53              		.syntax unified
  54              		.thumb
  55              		.thumb_func
  57              	HAL_GFXMMU_Init:
  58              	.LVL1:
  59              	.LFB835:
 181:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
  60              		.loc 1 181 1 is_stmt 1 view -0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
 182:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
  64              		.loc 1 182 3 view .LVU4
 185:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
  65              		.loc 1 185 3 view .LVU5
 181:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
  66              		.loc 1 181 1 is_stmt 0 view .LVU6
  67 0000 10B5     		push	{r4, lr}
  68              		.cfi_def_cfa_offset 8
  69              		.cfi_offset 4, -8
  70              		.cfi_offset 14, -4
 185:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
  71              		.loc 1 185 6 view .LVU7
  72 0002 0446     		mov	r4, r0
  73 0004 0028     		cmp	r0, #0
  74 0006 70D0     		beq	.L15
 192:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_BLOCK_SIZE(hgfxmmu->Init.BlockSize));
  75              		.loc 1 192 5 is_stmt 1 view .LVU8
  76 0008 0368     		ldr	r3, [r0]
  77 000a 394A     		ldr	r2, .L31
  78 000c 9342     		cmp	r3, r2
  79 000e 07D0     		beq	.L4
 192:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_BLOCK_SIZE(hgfxmmu->Init.BlockSize));
  80              		.loc 1 192 5 is_stmt 0 discriminator 1 view .LVU9
  81 0010 02F17042 		add	r2, r2, #-268435456
  82 0014 9342     		cmp	r3, r2
  83 0016 03D0     		beq	.L4
 192:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_BLOCK_SIZE(hgfxmmu->Init.BlockSize));
  84              		.loc 1 192 5 discriminator 2 view .LVU10
ARM GAS  /tmp/ccO2SMb7.s 			page 8


  85 0018 C021     		movs	r1, #192
  86 001a 3648     		ldr	r0, .L31+4
  87              	.LVL2:
 192:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_BLOCK_SIZE(hgfxmmu->Init.BlockSize));
  88              		.loc 1 192 5 discriminator 2 view .LVU11
  89 001c FFF7FEFF 		bl	assert_failed
  90              	.LVL3:
  91              	.L4:
 193:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_FUNCTIONAL_STATE(hgfxmmu->Init.AddressTranslation));
  92              		.loc 1 193 5 is_stmt 1 view .LVU12
  93 0020 6368     		ldr	r3, [r4, #4]
  94 0022 33F04003 		bics	r3, r3, #64
  95 0026 03D0     		beq	.L5
 193:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_FUNCTIONAL_STATE(hgfxmmu->Init.AddressTranslation));
  96              		.loc 1 193 5 is_stmt 0 discriminator 2 view .LVU13
  97 0028 C121     		movs	r1, #193
  98 002a 3248     		ldr	r0, .L31+4
  99 002c FFF7FEFF 		bl	assert_failed
 100              	.LVL4:
 101              	.L5:
 194:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_BUFFER_ADDRESS(hgfxmmu->Init.Buffers.Buf0Address));
 102              		.loc 1 194 5 is_stmt 1 view .LVU14
 103 0030 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 104 0032 012B     		cmp	r3, #1
 105 0034 03D9     		bls	.L6
 194:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_BUFFER_ADDRESS(hgfxmmu->Init.Buffers.Buf0Address));
 106              		.loc 1 194 5 is_stmt 0 discriminator 1 view .LVU15
 107 0036 C221     		movs	r1, #194
 108 0038 2E48     		ldr	r0, .L31+4
 109 003a FFF7FEFF 		bl	assert_failed
 110              	.LVL5:
 111              	.L6:
 195:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_BUFFER_ADDRESS(hgfxmmu->Init.Buffers.Buf1Address));
 112              		.loc 1 195 5 is_stmt 1 view .LVU16
 113 003e 2369     		ldr	r3, [r4, #16]
 114 0040 1B07     		lsls	r3, r3, #28
 115 0042 03D0     		beq	.L7
 195:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_BUFFER_ADDRESS(hgfxmmu->Init.Buffers.Buf1Address));
 116              		.loc 1 195 5 is_stmt 0 discriminator 1 view .LVU17
 117 0044 C321     		movs	r1, #195
 118 0046 2B48     		ldr	r0, .L31+4
 119 0048 FFF7FEFF 		bl	assert_failed
 120              	.LVL6:
 121              	.L7:
 196:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_BUFFER_ADDRESS(hgfxmmu->Init.Buffers.Buf2Address));
 122              		.loc 1 196 5 is_stmt 1 view .LVU18
 123 004c 6369     		ldr	r3, [r4, #20]
 124 004e 1807     		lsls	r0, r3, #28
 125 0050 03D0     		beq	.L8
 196:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_BUFFER_ADDRESS(hgfxmmu->Init.Buffers.Buf2Address));
 126              		.loc 1 196 5 is_stmt 0 discriminator 1 view .LVU19
 127 0052 C421     		movs	r1, #196
 128 0054 2748     		ldr	r0, .L31+4
 129 0056 FFF7FEFF 		bl	assert_failed
 130              	.LVL7:
 131              	.L8:
 197:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_BUFFER_ADDRESS(hgfxmmu->Init.Buffers.Buf3Address));
ARM GAS  /tmp/ccO2SMb7.s 			page 9


 132              		.loc 1 197 5 is_stmt 1 view .LVU20
 133 005a A369     		ldr	r3, [r4, #24]
 134 005c 1907     		lsls	r1, r3, #28
 135 005e 03D0     		beq	.L9
 197:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_GFXMMU_BUFFER_ADDRESS(hgfxmmu->Init.Buffers.Buf3Address));
 136              		.loc 1 197 5 is_stmt 0 discriminator 1 view .LVU21
 137 0060 C521     		movs	r1, #197
 138 0062 2448     		ldr	r0, .L31+4
 139 0064 FFF7FEFF 		bl	assert_failed
 140              	.LVL8:
 141              	.L9:
 198:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_FUNCTIONAL_STATE(hgfxmmu->Init.Interrupts.Activation));
 142              		.loc 1 198 5 is_stmt 1 view .LVU22
 143 0068 E369     		ldr	r3, [r4, #28]
 144 006a 1A07     		lsls	r2, r3, #28
 145 006c 03D0     		beq	.L10
 198:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     assert_param(IS_FUNCTIONAL_STATE(hgfxmmu->Init.Interrupts.Activation));
 146              		.loc 1 198 5 is_stmt 0 discriminator 1 view .LVU23
 147 006e C621     		movs	r1, #198
 148 0070 2048     		ldr	r0, .L31+4
 149 0072 FFF7FEFF 		bl	assert_failed
 150              	.LVL9:
 151              	.L10:
 199:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 152              		.loc 1 199 5 is_stmt 1 view .LVU24
 153 0076 94F82030 		ldrb	r3, [r4, #32]	@ zero_extendqisi2
 154 007a 012B     		cmp	r3, #1
 155 007c 03D9     		bls	.L11
 199:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 156              		.loc 1 199 5 is_stmt 0 discriminator 1 view .LVU25
 157 007e C721     		movs	r1, #199
 158 0080 1C48     		ldr	r0, .L31+4
 159 0082 FFF7FEFF 		bl	assert_failed
 160              	.LVL10:
 161              	.L11:
 213:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */
 162              		.loc 1 213 5 is_stmt 1 view .LVU26
 163 0086 2046     		mov	r0, r4
 164 0088 FFF7FEFF 		bl	HAL_GFXMMU_MspInit
 165              	.LVL11:
 217:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->CR |= (hgfxmmu->Init.BlockSize);
 166              		.loc 1 217 5 view .LVU27
 217:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->CR |= (hgfxmmu->Init.BlockSize);
 167              		.loc 1 217 27 is_stmt 0 view .LVU28
 168 008c 0022     		movs	r2, #0
 217:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->CR |= (hgfxmmu->Init.BlockSize);
 169              		.loc 1 217 12 view .LVU29
 170 008e 2368     		ldr	r3, [r4]
 218:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     if (hgfxmmu->Init.AddressTranslation == ENABLE)
 171              		.loc 1 218 27 view .LVU30
 172 0090 6168     		ldr	r1, [r4, #4]
 217:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->CR |= (hgfxmmu->Init.BlockSize);
 173              		.loc 1 217 27 view .LVU31
 174 0092 1A60     		str	r2, [r3]
 218:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     if (hgfxmmu->Init.AddressTranslation == ENABLE)
 175              		.loc 1 218 5 is_stmt 1 view .LVU32
 218:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     if (hgfxmmu->Init.AddressTranslation == ENABLE)
ARM GAS  /tmp/ccO2SMb7.s 			page 10


 176              		.loc 1 218 22 is_stmt 0 view .LVU33
 177 0094 1A68     		ldr	r2, [r3]
 218:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     if (hgfxmmu->Init.AddressTranslation == ENABLE)
 178              		.loc 1 218 27 view .LVU34
 179 0096 0A43     		orrs	r2, r2, r1
 180 0098 1A60     		str	r2, [r3]
 219:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 181              		.loc 1 219 5 is_stmt 1 view .LVU35
 219:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 182              		.loc 1 219 8 is_stmt 0 view .LVU36
 183 009a 227B     		ldrb	r2, [r4, #12]	@ zero_extendqisi2
 184 009c 012A     		cmp	r2, #1
 221:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 185              		.loc 1 221 7 is_stmt 1 view .LVU37
 221:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 186              		.loc 1 221 24 is_stmt 0 view .LVU38
 187 009e 02BF     		ittt	eq
 188 00a0 1A68     		ldreq	r2, [r3]
 221:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 189              		.loc 1 221 29 view .LVU39
 190 00a2 42F40042 		orreq	r2, r2, #32768
 191 00a6 1A60     		streq	r2, [r3]
 223:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 192              		.loc 1 223 5 is_stmt 1 view .LVU40
 223:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 193              		.loc 1 223 8 is_stmt 0 view .LVU41
 194 00a8 94F82030 		ldrb	r3, [r4, #32]	@ zero_extendqisi2
 195 00ac 012B     		cmp	r3, #1
 196 00ae 0BD1     		bne	.L13
 225:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       hgfxmmu->Instance->CR |= hgfxmmu->Init.Interrupts.UsedInterrupts;
 197              		.loc 1 225 7 is_stmt 1 view .LVU42
 198 00b0 636A     		ldr	r3, [r4, #36]
 199 00b2 DB06     		lsls	r3, r3, #27
 200 00b4 03D1     		bne	.L14
 225:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       hgfxmmu->Instance->CR |= hgfxmmu->Init.Interrupts.UsedInterrupts;
 201              		.loc 1 225 7 is_stmt 0 discriminator 1 view .LVU43
 202 00b6 E121     		movs	r1, #225
 203 00b8 0E48     		ldr	r0, .L31+4
 204 00ba FFF7FEFF 		bl	assert_failed
 205              	.LVL12:
 206              	.L14:
 226:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 207              		.loc 1 226 7 is_stmt 1 view .LVU44
 226:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 208              		.loc 1 226 14 is_stmt 0 view .LVU45
 209 00be 2268     		ldr	r2, [r4]
 226:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 210              		.loc 1 226 29 view .LVU46
 211 00c0 616A     		ldr	r1, [r4, #36]
 226:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 212              		.loc 1 226 24 view .LVU47
 213 00c2 1368     		ldr	r3, [r2]
 226:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 214              		.loc 1 226 29 view .LVU48
 215 00c4 0B43     		orrs	r3, r3, r1
 216 00c6 1360     		str	r3, [r2]
 217              	.L13:
ARM GAS  /tmp/ccO2SMb7.s 			page 11


 230:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 218              		.loc 1 230 5 is_stmt 1 view .LVU49
 230:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 219              		.loc 1 230 12 is_stmt 0 view .LVU50
 220 00c8 2368     		ldr	r3, [r4]
 230:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 221              		.loc 1 230 43 view .LVU51
 222 00ca A268     		ldr	r2, [r4, #8]
 239:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 223              		.loc 1 239 24 view .LVU52
 224 00cc 0020     		movs	r0, #0
 230:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 225              		.loc 1 230 28 view .LVU53
 226 00ce 1A61     		str	r2, [r3, #16]
 233:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B1CR = hgfxmmu->Init.Buffers.Buf1Address;
 227              		.loc 1 233 5 is_stmt 1 view .LVU54
 233:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B1CR = hgfxmmu->Init.Buffers.Buf1Address;
 228              		.loc 1 233 52 is_stmt 0 view .LVU55
 229 00d0 2269     		ldr	r2, [r4, #16]
 233:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B1CR = hgfxmmu->Init.Buffers.Buf1Address;
 230              		.loc 1 233 29 view .LVU56
 231 00d2 1A62     		str	r2, [r3, #32]
 234:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B2CR = hgfxmmu->Init.Buffers.Buf2Address;
 232              		.loc 1 234 5 is_stmt 1 view .LVU57
 234:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B2CR = hgfxmmu->Init.Buffers.Buf2Address;
 233              		.loc 1 234 52 is_stmt 0 view .LVU58
 234 00d4 6269     		ldr	r2, [r4, #20]
 234:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B2CR = hgfxmmu->Init.Buffers.Buf2Address;
 235              		.loc 1 234 29 view .LVU59
 236 00d6 5A62     		str	r2, [r3, #36]
 235:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B3CR = hgfxmmu->Init.Buffers.Buf3Address;
 237              		.loc 1 235 5 is_stmt 1 view .LVU60
 235:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B3CR = hgfxmmu->Init.Buffers.Buf3Address;
 238              		.loc 1 235 52 is_stmt 0 view .LVU61
 239 00d8 A269     		ldr	r2, [r4, #24]
 235:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B3CR = hgfxmmu->Init.Buffers.Buf3Address;
 240              		.loc 1 235 29 view .LVU62
 241 00da 9A62     		str	r2, [r3, #40]
 236:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 242              		.loc 1 236 5 is_stmt 1 view .LVU63
 236:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 243              		.loc 1 236 52 is_stmt 0 view .LVU64
 244 00dc E269     		ldr	r2, [r4, #28]
 236:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 245              		.loc 1 236 29 view .LVU65
 246 00de DA62     		str	r2, [r3, #44]
 239:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 247              		.loc 1 239 5 is_stmt 1 view .LVU66
 242:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 248              		.loc 1 242 20 is_stmt 0 view .LVU67
 249 00e0 0123     		movs	r3, #1
 239:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 250              		.loc 1 239 24 view .LVU68
 251 00e2 E062     		str	r0, [r4, #44]
 242:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 252              		.loc 1 242 5 is_stmt 1 view .LVU69
 242:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
ARM GAS  /tmp/ccO2SMb7.s 			page 12


 253              		.loc 1 242 20 is_stmt 0 view .LVU70
 254 00e4 84F82830 		strb	r3, [r4, #40]
 255              	.L3:
 256              	.LVL13:
 245:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 257              		.loc 1 245 3 is_stmt 1 view .LVU71
 246:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 258              		.loc 1 246 1 is_stmt 0 view .LVU72
 259 00e8 10BD     		pop	{r4, pc}
 260              	.LVL14:
 261              	.L15:
 187:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 262              		.loc 1 187 12 view .LVU73
 263 00ea 0120     		movs	r0, #1
 264              	.LVL15:
 187:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 265              		.loc 1 187 12 view .LVU74
 266 00ec FCE7     		b	.L3
 267              	.L32:
 268 00ee 00BF     		.align	2
 269              	.L31:
 270 00f0 00000358 		.word	1476591616
 271 00f4 00000000 		.word	.LC0
 272              		.cfi_endproc
 273              	.LFE835:
 275              		.section	.text.HAL_GFXMMU_MspDeInit,"ax",%progbits
 276              		.align	1
 277              		.weak	HAL_GFXMMU_MspDeInit
 278              		.syntax unified
 279              		.thumb
 280              		.thumb_func
 282              	HAL_GFXMMU_MspDeInit:
 283              	.LFB849:
 284              		.cfi_startproc
 303:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 304:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 305:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  De-initialize the GFXMMU MSP.
 306:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 307:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval None.
 308:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 309:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** __weak void HAL_GFXMMU_MspDeInit(GFXMMU_HandleTypeDef *hgfxmmu)
 285              		.loc 1 309 13 is_stmt 1 view -0
 286              		@ args = 0, pretend = 0, frame = 0
 287              		@ frame_needed = 0, uses_anonymous_args = 0
 288              		@ link register save eliminated.
 289 0000 7047     		bx	lr
 290              		.cfi_endproc
 291              	.LFE849:
 293              		.section	.text.HAL_GFXMMU_DeInit,"ax",%progbits
 294              		.align	1
 295              		.global	HAL_GFXMMU_DeInit
 296              		.syntax unified
 297              		.thumb
 298              		.thumb_func
 300              	HAL_GFXMMU_DeInit:
 301              	.LVL16:
 302              	.LFB836:
ARM GAS  /tmp/ccO2SMb7.s 			page 13


 254:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 303              		.loc 1 254 1 view -0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 255:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 307              		.loc 1 255 3 view .LVU77
 258:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 308              		.loc 1 258 3 view .LVU78
 254:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 309              		.loc 1 254 1 is_stmt 0 view .LVU79
 310 0000 10B5     		push	{r4, lr}
 311              		.cfi_def_cfa_offset 8
 312              		.cfi_offset 4, -8
 313              		.cfi_offset 14, -4
 258:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 314              		.loc 1 258 6 view .LVU80
 315 0002 0446     		mov	r4, r0
 316 0004 C0B1     		cbz	r0, .L37
 265:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 317              		.loc 1 265 5 is_stmt 1 view .LVU81
 318 0006 0368     		ldr	r3, [r0]
 319 0008 0C4A     		ldr	r2, .L38
 320 000a 9342     		cmp	r3, r2
 321 000c 08D0     		beq	.L36
 265:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 322              		.loc 1 265 5 is_stmt 0 discriminator 1 view .LVU82
 323 000e 02F17042 		add	r2, r2, #-268435456
 324 0012 9342     		cmp	r3, r2
 325 0014 04D0     		beq	.L36
 265:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 326              		.loc 1 265 5 discriminator 2 view .LVU83
 327 0016 40F20911 		movw	r1, #265
 328 001a 0948     		ldr	r0, .L38+4
 329              	.LVL17:
 265:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 330              		.loc 1 265 5 discriminator 2 view .LVU84
 331 001c FFF7FEFF 		bl	assert_failed
 332              	.LVL18:
 333              	.L36:
 268:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                GFXMMU_CR_AMEIE);
 334              		.loc 1 268 5 is_stmt 1 view .LVU85
 268:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                GFXMMU_CR_AMEIE);
 335              		.loc 1 268 12 is_stmt 0 view .LVU86
 336 0020 2268     		ldr	r2, [r4]
 279:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */
 337              		.loc 1 279 5 view .LVU87
 338 0022 2046     		mov	r0, r4
 268:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                GFXMMU_CR_AMEIE);
 339              		.loc 1 268 22 view .LVU88
 340 0024 1368     		ldr	r3, [r2]
 268:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                GFXMMU_CR_AMEIE);
 341              		.loc 1 268 27 view .LVU89
 342 0026 23F01F03 		bic	r3, r3, #31
 343 002a 1360     		str	r3, [r2]
 279:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */
 344              		.loc 1 279 5 is_stmt 1 view .LVU90
ARM GAS  /tmp/ccO2SMb7.s 			page 14


 345 002c FFF7FEFF 		bl	HAL_GFXMMU_MspDeInit
 346              	.LVL19:
 283:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 347              		.loc 1 283 5 view .LVU91
 283:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 348              		.loc 1 283 20 is_stmt 0 view .LVU92
 349 0030 0020     		movs	r0, #0
 350 0032 84F82800 		strb	r0, [r4, #40]
 351              	.L35:
 352              	.LVL20:
 286:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 353              		.loc 1 286 3 is_stmt 1 view .LVU93
 287:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 354              		.loc 1 287 1 is_stmt 0 view .LVU94
 355 0036 10BD     		pop	{r4, pc}
 356              	.LVL21:
 357              	.L37:
 260:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 358              		.loc 1 260 12 view .LVU95
 359 0038 0120     		movs	r0, #1
 360              	.LVL22:
 260:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 361              		.loc 1 260 12 view .LVU96
 362 003a FCE7     		b	.L35
 363              	.L39:
 364              		.align	2
 365              	.L38:
 366 003c 00000358 		.word	1476591616
 367 0040 00000000 		.word	.LC0
 368              		.cfi_endproc
 369              	.LFE836:
 371              		.section	.text.HAL_GFXMMU_ConfigLut,"ax",%progbits
 372              		.align	1
 373              		.global	HAL_GFXMMU_ConfigLut
 374              		.syntax unified
 375              		.thumb
 376              		.thumb_func
 378              	HAL_GFXMMU_ConfigLut:
 379              	.LVL23:
 380              	.LFB839:
 310:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 311:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Prevent unused argument(s) compilation warning */
 312:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   UNUSED(hgfxmmu);
 313:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 314:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* NOTE : This function should not be modified, when the function is needed,
 315:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****             the HAL_GFXMMU_MspDeInit could be implemented in the user file.
 316:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****    */
 317:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 318:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 319:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #if (USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1)
 320:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 321:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  Register a user GFXMMU callback
 322:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *         to be used instead of the weak predefined callback.
 323:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 324:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  CallbackID ID of the callback to be registered.
 325:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *         This parameter can be one of the following values:
 326:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *           @arg @ref HAL_GFXMMU_ERROR_CB_ID error callback ID.
ARM GAS  /tmp/ccO2SMb7.s 			page 15


 327:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *           @arg @ref HAL_GFXMMU_MSPINIT_CB_ID MSP init callback ID.
 328:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *           @arg @ref HAL_GFXMMU_MSPDEINIT_CB_ID MSP de-init callback ID.
 329:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  pCallback pointer to the callback function.
 330:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval HAL status.
 331:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 332:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** HAL_StatusTypeDef HAL_GFXMMU_RegisterCallback(GFXMMU_HandleTypeDef        *hgfxmmu,
 333:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                               HAL_GFXMMU_CallbackIDTypeDef CallbackID,
 334:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                               pGFXMMU_CallbackTypeDef      pCallback)
 335:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 336:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 337:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 338:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   if (pCallback == NULL)
 339:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 340:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* update the error code */
 341:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->ErrorCode |= GFXMMU_ERROR_INVALID_CALLBACK;
 342:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* update return status */
 343:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 344:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 345:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else
 346:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 347:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     if (HAL_GFXMMU_STATE_READY == hgfxmmu->State)
 348:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 349:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       switch (CallbackID)
 350:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       {
 351:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         case HAL_GFXMMU_ERROR_CB_ID :
 352:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           hgfxmmu->ErrorCallback = pCallback;
 353:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           break;
 354:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         case HAL_GFXMMU_MSPINIT_CB_ID :
 355:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           hgfxmmu->MspInitCallback = pCallback;
 356:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           break;
 357:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         case HAL_GFXMMU_MSPDEINIT_CB_ID :
 358:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           hgfxmmu->MspDeInitCallback = pCallback;
 359:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           break;
 360:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         default :
 361:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           /* update the error code */
 362:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           hgfxmmu->ErrorCode |= GFXMMU_ERROR_INVALID_CALLBACK;
 363:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           /* update return status */
 364:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           status = HAL_ERROR;
 365:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           break;
 366:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       }
 367:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 368:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     else if (HAL_GFXMMU_STATE_RESET == hgfxmmu->State)
 369:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 370:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       switch (CallbackID)
 371:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       {
 372:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         case HAL_GFXMMU_MSPINIT_CB_ID :
 373:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           hgfxmmu->MspInitCallback = pCallback;
 374:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           break;
 375:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         case HAL_GFXMMU_MSPDEINIT_CB_ID :
 376:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           hgfxmmu->MspDeInitCallback = pCallback;
 377:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           break;
 378:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         default :
 379:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           /* update the error code */
 380:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           hgfxmmu->ErrorCode |= GFXMMU_ERROR_INVALID_CALLBACK;
 381:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           /* update return status */
 382:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           status = HAL_ERROR;
 383:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****           break;
ARM GAS  /tmp/ccO2SMb7.s 			page 16


 384:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       }
 385:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 386:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     else
 387:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 388:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       /* update the error code */
 389:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       hgfxmmu->ErrorCode |= GFXMMU_ERROR_INVALID_CALLBACK;
 390:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       /* update return status */
 391:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       status = HAL_ERROR;
 392:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 393:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 394:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   return status;
 395:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 396:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 397:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 398:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  Unregister a user GFXMMU callback.
 399:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *         GFXMMU callback is redirected to the weak predefined callback.
 400:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 401:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  CallbackID ID of the callback to be unregistered.
 402:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *         This parameter can be one of the following values:
 403:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *           @arg @ref HAL_GFXMMU_ERROR_CB_ID error callback ID.
 404:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *           @arg @ref HAL_GFXMMU_MSPINIT_CB_ID MSP init callback ID.
 405:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *           @arg @ref HAL_GFXMMU_MSPDEINIT_CB_ID MSP de-init callback ID.
 406:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval HAL status.
 407:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 408:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** HAL_StatusTypeDef HAL_GFXMMU_UnRegisterCallback(GFXMMU_HandleTypeDef        *hgfxmmu,
 409:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                                 HAL_GFXMMU_CallbackIDTypeDef CallbackID)
 410:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 411:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 412:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 413:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   if (HAL_GFXMMU_STATE_READY == hgfxmmu->State)
 414:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 415:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     switch (CallbackID)
 416:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 417:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       case HAL_GFXMMU_ERROR_CB_ID :
 418:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         hgfxmmu->ErrorCallback = HAL_GFXMMU_ErrorCallback;
 419:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         break;
 420:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       case HAL_GFXMMU_MSPINIT_CB_ID :
 421:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         hgfxmmu->MspInitCallback = HAL_GFXMMU_MspInit;
 422:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         break;
 423:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       case HAL_GFXMMU_MSPDEINIT_CB_ID :
 424:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         hgfxmmu->MspDeInitCallback = HAL_GFXMMU_MspDeInit;
 425:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         break;
 426:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       default :
 427:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         /* update the error code */
 428:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         hgfxmmu->ErrorCode |= GFXMMU_ERROR_INVALID_CALLBACK;
 429:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         /* update return status */
 430:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         status = HAL_ERROR;
 431:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         break;
 432:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 433:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 434:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else if (HAL_GFXMMU_STATE_RESET == hgfxmmu->State)
 435:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 436:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     switch (CallbackID)
 437:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 438:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       case HAL_GFXMMU_MSPINIT_CB_ID :
 439:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         hgfxmmu->MspInitCallback = HAL_GFXMMU_MspInit;
 440:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         break;
ARM GAS  /tmp/ccO2SMb7.s 			page 17


 441:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       case HAL_GFXMMU_MSPDEINIT_CB_ID :
 442:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         hgfxmmu->MspDeInitCallback = HAL_GFXMMU_MspDeInit;
 443:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         break;
 444:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       default :
 445:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         /* update the error code */
 446:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         hgfxmmu->ErrorCode |= GFXMMU_ERROR_INVALID_CALLBACK;
 447:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         /* update return status */
 448:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         status = HAL_ERROR;
 449:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****         break;
 450:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 451:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 452:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else
 453:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 454:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* update the error code */
 455:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->ErrorCode |= GFXMMU_ERROR_INVALID_CALLBACK;
 456:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* update return status */
 457:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 458:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 459:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   return status;
 460:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 461:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS */
 462:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 463:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 464:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @}
 465:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 466:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 467:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /** @defgroup GFXMMU_Exported_Functions_Group2 Operations functions
 468:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *  @brief    GFXMMU operation functions
 469:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *
 470:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** @verbatim
 471:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   ==============================================================================
 472:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                       ##### Operation functions #####
 473:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   ==============================================================================
 474:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]  This section provides functions allowing to:
 475:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) Configure LUT.
 476:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) Modify physical buffer addresses.
 477:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) Configure packing.
 478:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) Manage error.
 479:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** @endverbatim
 480:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @{
 481:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 482:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 483:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 484:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  This function allows to copy LUT from flash to look up RAM.
 485:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 486:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  FirstLine First line enabled on LUT.
 487:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *         This parameter must be a number between Min_Data = 0 and Max_Data = 1023.
 488:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  LinesNumber Number of lines enabled on LUT.
 489:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *         This parameter must be a number between Min_Data = 1 and Max_Data = 1024.
 490:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  Address Start address of LUT in flash.
 491:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval HAL status.
 492:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 493:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** HAL_StatusTypeDef HAL_GFXMMU_ConfigLut(const GFXMMU_HandleTypeDef *hgfxmmu,
 494:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                        uint32_t FirstLine,
 495:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                        uint32_t LinesNumber,
 496:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                        uint32_t Address)
 497:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
ARM GAS  /tmp/ccO2SMb7.s 			page 18


 381              		.loc 1 497 1 is_stmt 1 view -0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 0
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 498:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 385              		.loc 1 498 3 view .LVU98
 499:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 500:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check parameters */
 501:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
 386              		.loc 1 501 3 view .LVU99
 497:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 387              		.loc 1 497 1 is_stmt 0 view .LVU100
 388 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 389              		.cfi_def_cfa_offset 24
 390              		.cfi_offset 3, -24
 391              		.cfi_offset 4, -20
 392              		.cfi_offset 5, -16
 393              		.cfi_offset 6, -12
 394              		.cfi_offset 7, -8
 395              		.cfi_offset 14, -4
 497:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 396              		.loc 1 497 1 view .LVU101
 397 0002 1546     		mov	r5, r2
 398 0004 1E46     		mov	r6, r3
 399              		.loc 1 501 3 view .LVU102
 400 0006 234A     		ldr	r2, .L51
 401              	.LVL24:
 402              		.loc 1 501 3 view .LVU103
 403 0008 0368     		ldr	r3, [r0]
 404              	.LVL25:
 497:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 405              		.loc 1 497 1 view .LVU104
 406 000a 0746     		mov	r7, r0
 407              		.loc 1 501 3 view .LVU105
 408 000c 9342     		cmp	r3, r2
 497:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 409              		.loc 1 497 1 view .LVU106
 410 000e 0C46     		mov	r4, r1
 411              		.loc 1 501 3 view .LVU107
 412 0010 08D0     		beq	.L41
 413              		.loc 1 501 3 discriminator 1 view .LVU108
 414 0012 02F17042 		add	r2, r2, #-268435456
 415 0016 9342     		cmp	r3, r2
 416 0018 04D0     		beq	.L41
 417              		.loc 1 501 3 discriminator 2 view .LVU109
 418 001a 40F2F511 		movw	r1, #501
 419              	.LVL26:
 420              		.loc 1 501 3 discriminator 2 view .LVU110
 421 001e 1E48     		ldr	r0, .L51+4
 422              	.LVL27:
 423              		.loc 1 501 3 discriminator 2 view .LVU111
 424 0020 FFF7FEFF 		bl	assert_failed
 425              	.LVL28:
 426              	.L41:
 502:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_LUT_LINE(FirstLine));
 427              		.loc 1 502 3 is_stmt 1 view .LVU112
 428 0024 B4F5806F 		cmp	r4, #1024
ARM GAS  /tmp/ccO2SMb7.s 			page 19


 429 0028 04D3     		bcc	.L42
 430              		.loc 1 502 3 is_stmt 0 discriminator 1 view .LVU113
 431 002a 4FF4FB71 		mov	r1, #502
 432 002e 1A48     		ldr	r0, .L51+4
 433 0030 FFF7FEFF 		bl	assert_failed
 434              	.LVL29:
 435              	.L42:
 503:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_LUT_LINES_NUMBER(LinesNumber));
 436              		.loc 1 503 3 is_stmt 1 view .LVU114
 437 0034 6B1E     		subs	r3, r5, #1
 438 0036 B3F5806F 		cmp	r3, #1024
 439 003a 04D3     		bcc	.L43
 440              		.loc 1 503 3 is_stmt 0 discriminator 1 view .LVU115
 441 003c 40F2F711 		movw	r1, #503
 442 0040 1548     		ldr	r0, .L51+4
 443 0042 FFF7FEFF 		bl	assert_failed
 444              	.LVL30:
 445              	.L43:
 504:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 505:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check GFXMMU state and coherent parameters */
 506:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   if ((hgfxmmu->State != HAL_GFXMMU_STATE_READY) || ((FirstLine + LinesNumber) > 1024U))
 446              		.loc 1 506 3 is_stmt 1 view .LVU116
 447              		.loc 1 506 15 is_stmt 0 view .LVU117
 448 0046 97F82800 		ldrb	r0, [r7, #40]	@ zero_extendqisi2
 449              		.loc 1 506 6 view .LVU118
 450 004a 0128     		cmp	r0, #1
 451 004c 20D1     		bne	.L47
 452              		.loc 1 506 65 discriminator 1 view .LVU119
 453 004e 6319     		adds	r3, r4, r5
 454              		.loc 1 506 50 discriminator 1 view .LVU120
 455 0050 B3F5806F 		cmp	r3, #1024
 456 0054 11D8     		bhi	.L44
 507:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 508:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 509:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 510:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check address translation status */
 511:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else if ((hgfxmmu->Instance->CR & GFXMMU_CR_ATE) == 0U)
 457              		.loc 1 511 8 is_stmt 1 view .LVU121
 458              		.loc 1 511 20 is_stmt 0 view .LVU122
 459 0056 3B68     		ldr	r3, [r7]
 460              		.loc 1 511 30 view .LVU123
 461 0058 1A68     		ldr	r2, [r3]
 462              		.loc 1 511 11 view .LVU124
 463 005a 1204     		lsls	r2, r2, #16
 464 005c 0DD5     		bpl	.L44
 465              	.LBB6:
 512:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 513:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 514:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 515:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else
 516:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 517:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     uint32_t current_address;
 466              		.loc 1 517 5 is_stmt 1 view .LVU125
 518:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     uint32_t current_line;
 467              		.loc 1 518 5 view .LVU126
 519:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     uint32_t lutxl_address;
 468              		.loc 1 519 5 view .LVU127
ARM GAS  /tmp/ccO2SMb7.s 			page 20


 520:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     uint32_t lutxh_address;
 469              		.loc 1 520 5 view .LVU128
 521:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 522:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Initialize local variables */
 523:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     current_address = Address;
 470              		.loc 1 523 5 view .LVU129
 471              	.LVL31:
 524:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     current_line    = 0U;
 472              		.loc 1 524 5 view .LVU130
 525:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     lutxl_address   = (uint32_t) &(hgfxmmu->Instance->LUT[2U * FirstLine]);
 473              		.loc 1 525 5 view .LVU131
 524:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     current_line    = 0U;
 474              		.loc 1 524 21 is_stmt 0 view .LVU132
 475 005e 0022     		movs	r2, #0
 476              		.loc 1 525 62 view .LVU133
 477 0060 6400     		lsls	r4, r4, #1
 478              	.LVL32:
 479              		.loc 1 525 34 view .LVU134
 480 0062 04F58061 		add	r1, r4, #1024
 526:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     lutxh_address   = (uint32_t) &(hgfxmmu->Instance->LUT[(2U * FirstLine) + 1U]);
 481              		.loc 1 526 34 view .LVU135
 482 0066 04F20144 		addw	r4, r4, #1025
 525:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     lutxl_address   = (uint32_t) &(hgfxmmu->Instance->LUT[2U * FirstLine]);
 483              		.loc 1 525 34 view .LVU136
 484 006a 03EB8101 		add	r1, r3, r1, lsl #2
 485              	.LVL33:
 486              		.loc 1 526 5 is_stmt 1 view .LVU137
 524:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     current_line    = 0U;
 487              		.loc 1 524 21 is_stmt 0 view .LVU138
 488 006e 0135     		adds	r5, r5, #1
 489              	.LVL34:
 490              		.loc 1 526 34 view .LVU139
 491 0070 03EB8403 		add	r3, r3, r4, lsl #2
 492              	.LVL35:
 527:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 528:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Copy LUT from flash to look up RAM */
 529:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     while (current_line < LinesNumber)
 493              		.loc 1 529 5 is_stmt 1 view .LVU140
 494              	.L45:
 495              		.loc 1 529 25 view .LVU141
 496 0074 013D     		subs	r5, r5, #1
 497 0076 01D1     		bne	.L46
 498              		.loc 1 529 25 is_stmt 0 view .LVU142
 499              	.LBE6:
 498:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 500              		.loc 1 498 21 view .LVU143
 501 0078 0020     		movs	r0, #0
 502              	.LVL36:
 503              	.L44:
 530:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 531:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       *((uint32_t *)lutxl_address) = *((uint32_t *)current_address);
 532:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       current_address += 4U;
 533:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       *((uint32_t *)lutxh_address) = *((uint32_t *)current_address);
 534:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       current_address += 4U;
 535:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       lutxl_address += 8U;
 536:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       lutxh_address += 8U;
 537:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       current_line++;
ARM GAS  /tmp/ccO2SMb7.s 			page 21


 538:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 539:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 540:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Return function status */
 541:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   return status;
 504              		.loc 1 541 3 is_stmt 1 view .LVU144
 542:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 505              		.loc 1 542 1 is_stmt 0 view .LVU145
 506 007a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 507              	.LVL37:
 508              	.L46:
 509              	.LBB7:
 531:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       current_address += 4U;
 510              		.loc 1 531 7 is_stmt 1 view .LVU146
 531:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       current_address += 4U;
 511              		.loc 1 531 38 is_stmt 0 view .LVU147
 512 007c 3068     		ldr	r0, [r6]
 534:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       lutxl_address += 8U;
 513              		.loc 1 534 23 view .LVU148
 514 007e 0836     		adds	r6, r6, #8
 515              	.LVL38:
 531:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       current_address += 4U;
 516              		.loc 1 531 36 view .LVU149
 517 0080 41F83200 		str	r0, [r1, r2, lsl #3]
 532:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       *((uint32_t *)lutxh_address) = *((uint32_t *)current_address);
 518              		.loc 1 532 7 is_stmt 1 view .LVU150
 519              	.LVL39:
 533:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       current_address += 4U;
 520              		.loc 1 533 7 view .LVU151
 533:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       current_address += 4U;
 521              		.loc 1 533 38 is_stmt 0 view .LVU152
 522 0084 56F8040C 		ldr	r0, [r6, #-4]
 533:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       current_address += 4U;
 523              		.loc 1 533 36 view .LVU153
 524 0088 43F83200 		str	r0, [r3, r2, lsl #3]
 534:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       lutxl_address += 8U;
 525              		.loc 1 534 7 is_stmt 1 view .LVU154
 526              	.LVL40:
 535:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       lutxh_address += 8U;
 527              		.loc 1 535 7 view .LVU155
 536:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       current_line++;
 528              		.loc 1 536 7 view .LVU156
 537:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 529              		.loc 1 537 7 view .LVU157
 537:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 530              		.loc 1 537 19 is_stmt 0 view .LVU158
 531 008c 0132     		adds	r2, r2, #1
 532              	.LVL41:
 537:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 533              		.loc 1 537 19 view .LVU159
 534 008e F1E7     		b	.L45
 535              	.LVL42:
 536              	.L47:
 537:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 537              		.loc 1 537 19 view .LVU160
 538              	.LBE7:
 508:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 539              		.loc 1 508 12 view .LVU161
ARM GAS  /tmp/ccO2SMb7.s 			page 22


 540 0090 0120     		movs	r0, #1
 541 0092 F2E7     		b	.L44
 542              	.L52:
 543              		.align	2
 544              	.L51:
 545 0094 00000358 		.word	1476591616
 546 0098 00000000 		.word	.LC0
 547              		.cfi_endproc
 548              	.LFE839:
 550              		.section	.text.HAL_GFXMMU_DisableLutLines,"ax",%progbits
 551              		.align	1
 552              		.global	HAL_GFXMMU_DisableLutLines
 553              		.syntax unified
 554              		.thumb
 555              		.thumb_func
 557              	HAL_GFXMMU_DisableLutLines:
 558              	.LVL43:
 559              	.LFB840:
 543:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 544:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 545:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  This function allows to disable a range of LUT lines.
 546:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 547:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  FirstLine First line to disable on LUT.
 548:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *         This parameter must be a number between Min_Data = 0 and Max_Data = 1023.
 549:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  LinesNumber Number of lines to disable on LUT.
 550:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *         This parameter must be a number between Min_Data = 1 and Max_Data = 1024.
 551:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval HAL status.
 552:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 553:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** HAL_StatusTypeDef HAL_GFXMMU_DisableLutLines(const GFXMMU_HandleTypeDef *hgfxmmu,
 554:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                              uint32_t FirstLine,
 555:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                              uint32_t LinesNumber)
 556:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 560              		.loc 1 556 1 is_stmt 1 view -0
 561              		.cfi_startproc
 562              		@ args = 0, pretend = 0, frame = 0
 563              		@ frame_needed = 0, uses_anonymous_args = 0
 557:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 564              		.loc 1 557 3 view .LVU163
 558:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 559:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check parameters */
 560:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
 565              		.loc 1 560 3 view .LVU164
 556:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 566              		.loc 1 556 1 is_stmt 0 view .LVU165
 567 0000 70B5     		push	{r4, r5, r6, lr}
 568              		.cfi_def_cfa_offset 16
 569              		.cfi_offset 4, -16
 570              		.cfi_offset 5, -12
 571              		.cfi_offset 6, -8
 572              		.cfi_offset 14, -4
 573              		.loc 1 560 3 view .LVU166
 574 0002 0368     		ldr	r3, [r0]
 556:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 575              		.loc 1 556 1 view .LVU167
 576 0004 1546     		mov	r5, r2
 577              		.loc 1 560 3 view .LVU168
 578 0006 214A     		ldr	r2, .L64
ARM GAS  /tmp/ccO2SMb7.s 			page 23


 579              	.LVL44:
 556:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 580              		.loc 1 556 1 view .LVU169
 581 0008 0646     		mov	r6, r0
 582              		.loc 1 560 3 view .LVU170
 583 000a 9342     		cmp	r3, r2
 556:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 584              		.loc 1 556 1 view .LVU171
 585 000c 0C46     		mov	r4, r1
 586              		.loc 1 560 3 view .LVU172
 587 000e 08D0     		beq	.L54
 588              		.loc 1 560 3 discriminator 1 view .LVU173
 589 0010 02F17042 		add	r2, r2, #-268435456
 590 0014 9342     		cmp	r3, r2
 591 0016 04D0     		beq	.L54
 592              		.loc 1 560 3 discriminator 2 view .LVU174
 593 0018 4FF40C71 		mov	r1, #560
 594              	.LVL45:
 595              		.loc 1 560 3 discriminator 2 view .LVU175
 596 001c 1C48     		ldr	r0, .L64+4
 597              	.LVL46:
 598              		.loc 1 560 3 discriminator 2 view .LVU176
 599 001e FFF7FEFF 		bl	assert_failed
 600              	.LVL47:
 601              	.L54:
 561:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_LUT_LINE(FirstLine));
 602              		.loc 1 561 3 is_stmt 1 view .LVU177
 603 0022 B4F5806F 		cmp	r4, #1024
 604 0026 04D3     		bcc	.L55
 605              		.loc 1 561 3 is_stmt 0 discriminator 1 view .LVU178
 606 0028 40F23121 		movw	r1, #561
 607 002c 1848     		ldr	r0, .L64+4
 608 002e FFF7FEFF 		bl	assert_failed
 609              	.LVL48:
 610              	.L55:
 562:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_LUT_LINES_NUMBER(LinesNumber));
 611              		.loc 1 562 3 is_stmt 1 view .LVU179
 612 0032 6B1E     		subs	r3, r5, #1
 613 0034 B3F5806F 		cmp	r3, #1024
 614 0038 04D3     		bcc	.L56
 615              		.loc 1 562 3 is_stmt 0 discriminator 1 view .LVU180
 616 003a 40F23221 		movw	r1, #562
 617 003e 1448     		ldr	r0, .L64+4
 618 0040 FFF7FEFF 		bl	assert_failed
 619              	.LVL49:
 620              	.L56:
 563:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 564:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check GFXMMU state and coherent parameters */
 565:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   if ((hgfxmmu->State != HAL_GFXMMU_STATE_READY) || ((FirstLine + LinesNumber) > 1024U))
 621              		.loc 1 565 3 is_stmt 1 view .LVU181
 622              		.loc 1 565 15 is_stmt 0 view .LVU182
 623 0044 96F82800 		ldrb	r0, [r6, #40]	@ zero_extendqisi2
 624              		.loc 1 565 6 view .LVU183
 625 0048 0128     		cmp	r0, #1
 626 004a 1DD1     		bne	.L60
 627              		.loc 1 565 65 discriminator 1 view .LVU184
 628 004c 6319     		adds	r3, r4, r5
ARM GAS  /tmp/ccO2SMb7.s 			page 24


 629              		.loc 1 565 50 discriminator 1 view .LVU185
 630 004e B3F5806F 		cmp	r3, #1024
 631 0052 12D8     		bhi	.L57
 566:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 567:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 568:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 569:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check address translation status */
 570:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else if ((hgfxmmu->Instance->CR & GFXMMU_CR_ATE) == 0U)
 632              		.loc 1 570 8 is_stmt 1 view .LVU186
 633              		.loc 1 570 20 is_stmt 0 view .LVU187
 634 0054 3368     		ldr	r3, [r6]
 635              		.loc 1 570 30 view .LVU188
 636 0056 1A68     		ldr	r2, [r3]
 637              		.loc 1 570 11 view .LVU189
 638 0058 1204     		lsls	r2, r2, #16
 639 005a 0ED5     		bpl	.L57
 640              	.LBB8:
 571:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 572:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 573:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 574:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else
 575:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 576:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     uint32_t current_line;
 641              		.loc 1 576 5 is_stmt 1 view .LVU190
 577:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     uint32_t lutxl_address;
 642              		.loc 1 577 5 view .LVU191
 578:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     uint32_t lutxh_address;
 643              		.loc 1 578 5 view .LVU192
 579:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 580:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Initialize local variables */
 581:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     current_line    = 0U;
 644              		.loc 1 581 5 view .LVU193
 645              	.LVL50:
 582:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     lutxl_address   = (uint32_t) &(hgfxmmu->Instance->LUT[2U * FirstLine]);
 646              		.loc 1 582 5 view .LVU194
 581:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     lutxl_address   = (uint32_t) &(hgfxmmu->Instance->LUT[2U * FirstLine]);
 647              		.loc 1 581 21 is_stmt 0 view .LVU195
 648 005c 0022     		movs	r2, #0
 649 005e 1046     		mov	r0, r2
 650              		.loc 1 582 62 view .LVU196
 651 0060 6400     		lsls	r4, r4, #1
 652              	.LVL51:
 653              		.loc 1 582 34 view .LVU197
 654 0062 04F58061 		add	r1, r4, #1024
 583:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     lutxh_address   = (uint32_t) &(hgfxmmu->Instance->LUT[(2U * FirstLine) + 1U]);
 655              		.loc 1 583 34 view .LVU198
 656 0066 04F20144 		addw	r4, r4, #1025
 582:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     lutxl_address   = (uint32_t) &(hgfxmmu->Instance->LUT[2U * FirstLine]);
 657              		.loc 1 582 34 view .LVU199
 658 006a 03EB8101 		add	r1, r3, r1, lsl #2
 659              	.LVL52:
 660              		.loc 1 583 5 is_stmt 1 view .LVU200
 661 006e 0135     		adds	r5, r5, #1
 662              	.LVL53:
 663              		.loc 1 583 34 is_stmt 0 view .LVU201
 664 0070 03EB8403 		add	r3, r3, r4, lsl #2
 665              	.LVL54:
ARM GAS  /tmp/ccO2SMb7.s 			page 25


 584:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 585:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Disable LUT lines */
 586:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     while (current_line < LinesNumber)
 666              		.loc 1 586 5 is_stmt 1 view .LVU202
 667              	.L58:
 668              		.loc 1 586 25 view .LVU203
 669 0074 013D     		subs	r5, r5, #1
 670 0076 01D1     		bne	.L59
 671              	.LBE8:
 557:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 672              		.loc 1 557 21 is_stmt 0 view .LVU204
 673 0078 0020     		movs	r0, #0
 674              	.LVL55:
 675              	.L57:
 587:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 588:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       *((uint32_t *)lutxl_address) = 0U;
 589:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       *((uint32_t *)lutxh_address) = 0U;
 590:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       lutxl_address += 8U;
 591:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       lutxh_address += 8U;
 592:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       current_line++;
 593:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 594:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 595:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Return function status */
 596:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   return status;
 676              		.loc 1 596 3 is_stmt 1 view .LVU205
 597:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 677              		.loc 1 597 1 is_stmt 0 view .LVU206
 678 007a 70BD     		pop	{r4, r5, r6, pc}
 679              	.LVL56:
 680              	.L59:
 681              	.LBB9:
 588:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       *((uint32_t *)lutxh_address) = 0U;
 682              		.loc 1 588 7 is_stmt 1 view .LVU207
 588:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       *((uint32_t *)lutxh_address) = 0U;
 683              		.loc 1 588 36 is_stmt 0 view .LVU208
 684 007c 41F83200 		str	r0, [r1, r2, lsl #3]
 589:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       lutxl_address += 8U;
 685              		.loc 1 589 7 is_stmt 1 view .LVU209
 589:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       lutxl_address += 8U;
 686              		.loc 1 589 36 is_stmt 0 view .LVU210
 687 0080 43F83200 		str	r0, [r3, r2, lsl #3]
 590:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       lutxh_address += 8U;
 688              		.loc 1 590 7 is_stmt 1 view .LVU211
 689              	.LVL57:
 591:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       current_line++;
 690              		.loc 1 591 7 view .LVU212
 592:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 691              		.loc 1 592 7 view .LVU213
 592:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 692              		.loc 1 592 19 is_stmt 0 view .LVU214
 693 0084 0132     		adds	r2, r2, #1
 694              	.LVL58:
 592:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 695              		.loc 1 592 19 view .LVU215
 696 0086 F5E7     		b	.L58
 697              	.LVL59:
 698              	.L60:
ARM GAS  /tmp/ccO2SMb7.s 			page 26


 592:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 699              		.loc 1 592 19 view .LVU216
 700              	.LBE9:
 567:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 701              		.loc 1 567 12 view .LVU217
 702 0088 0120     		movs	r0, #1
 703 008a F6E7     		b	.L57
 704              	.L65:
 705              		.align	2
 706              	.L64:
 707 008c 00000358 		.word	1476591616
 708 0090 00000000 		.word	.LC0
 709              		.cfi_endproc
 710              	.LFE840:
 712              		.section	.text.HAL_GFXMMU_ConfigLutLine,"ax",%progbits
 713              		.align	1
 714              		.global	HAL_GFXMMU_ConfigLutLine
 715              		.syntax unified
 716              		.thumb
 717              		.thumb_func
 719              	HAL_GFXMMU_ConfigLutLine:
 720              	.LVL60:
 721              	.LFB841:
 598:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 599:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 600:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  This function allows to configure one line of LUT.
 601:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 602:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  lutLine LUT line parameters.
 603:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval HAL status.
 604:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 605:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** HAL_StatusTypeDef HAL_GFXMMU_ConfigLutLine(const GFXMMU_HandleTypeDef *hgfxmmu, const GFXMMU_LutLin
 606:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 722              		.loc 1 606 1 is_stmt 1 view -0
 723              		.cfi_startproc
 724              		@ args = 0, pretend = 0, frame = 0
 725              		@ frame_needed = 0, uses_anonymous_args = 0
 607:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 726              		.loc 1 607 3 view .LVU219
 608:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 609:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check parameters */
 610:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
 727              		.loc 1 610 3 view .LVU220
 606:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 728              		.loc 1 606 1 is_stmt 0 view .LVU221
 729 0000 38B5     		push	{r3, r4, r5, lr}
 730              		.cfi_def_cfa_offset 16
 731              		.cfi_offset 3, -16
 732              		.cfi_offset 4, -12
 733              		.cfi_offset 5, -8
 734              		.cfi_offset 14, -4
 735              		.loc 1 610 3 view .LVU222
 736 0002 2D4A     		ldr	r2, .L81
 737 0004 0368     		ldr	r3, [r0]
 606:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 738              		.loc 1 606 1 view .LVU223
 739 0006 0546     		mov	r5, r0
 740              		.loc 1 610 3 view .LVU224
ARM GAS  /tmp/ccO2SMb7.s 			page 27


 741 0008 9342     		cmp	r3, r2
 606:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 742              		.loc 1 606 1 view .LVU225
 743 000a 0C46     		mov	r4, r1
 744              		.loc 1 610 3 view .LVU226
 745 000c 08D0     		beq	.L67
 746              		.loc 1 610 3 discriminator 1 view .LVU227
 747 000e 02F17042 		add	r2, r2, #-268435456
 748 0012 9342     		cmp	r3, r2
 749 0014 04D0     		beq	.L67
 750              		.loc 1 610 3 discriminator 2 view .LVU228
 751 0016 40F26221 		movw	r1, #610
 752              	.LVL61:
 753              		.loc 1 610 3 discriminator 2 view .LVU229
 754 001a 2848     		ldr	r0, .L81+4
 755              	.LVL62:
 756              		.loc 1 610 3 discriminator 2 view .LVU230
 757 001c FFF7FEFF 		bl	assert_failed
 758              	.LVL63:
 759              	.L67:
 611:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_LUT_LINE(lutLine->LineNumber));
 760              		.loc 1 611 3 is_stmt 1 view .LVU231
 761 0020 2368     		ldr	r3, [r4]
 762 0022 B3F5806F 		cmp	r3, #1024
 763 0026 04D3     		bcc	.L68
 764              		.loc 1 611 3 is_stmt 0 discriminator 1 view .LVU232
 765 0028 40F26321 		movw	r1, #611
 766 002c 2348     		ldr	r0, .L81+4
 767 002e FFF7FEFF 		bl	assert_failed
 768              	.LVL64:
 769              	.L68:
 612:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_LUT_LINE_STATUS(lutLine->LineStatus));
 770              		.loc 1 612 3 is_stmt 1 view .LVU233
 771 0032 6368     		ldr	r3, [r4, #4]
 772 0034 012B     		cmp	r3, #1
 773 0036 04D9     		bls	.L69
 774              		.loc 1 612 3 is_stmt 0 discriminator 1 view .LVU234
 775 0038 4FF41971 		mov	r1, #612
 776 003c 1F48     		ldr	r0, .L81+4
 777 003e FFF7FEFF 		bl	assert_failed
 778              	.LVL65:
 779              	.L69:
 613:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_LUT_BLOCK(lutLine->FirstVisibleBlock));
 780              		.loc 1 613 3 is_stmt 1 view .LVU235
 781 0042 A368     		ldr	r3, [r4, #8]
 782 0044 FF2B     		cmp	r3, #255
 783 0046 04D9     		bls	.L70
 784              		.loc 1 613 3 is_stmt 0 discriminator 1 view .LVU236
 785 0048 40F26521 		movw	r1, #613
 786 004c 1B48     		ldr	r0, .L81+4
 787 004e FFF7FEFF 		bl	assert_failed
 788              	.LVL66:
 789              	.L70:
 614:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_LUT_BLOCK(lutLine->LastVisibleBlock));
 790              		.loc 1 614 3 is_stmt 1 view .LVU237
 791 0052 E368     		ldr	r3, [r4, #12]
 792 0054 FF2B     		cmp	r3, #255
ARM GAS  /tmp/ccO2SMb7.s 			page 28


 793 0056 04D9     		bls	.L71
 794              		.loc 1 614 3 is_stmt 0 discriminator 1 view .LVU238
 795 0058 40F26621 		movw	r1, #614
 796 005c 1748     		ldr	r0, .L81+4
 797 005e FFF7FEFF 		bl	assert_failed
 798              	.LVL67:
 799              	.L71:
 615:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_LUT_LINE_OFFSET(lutLine->LineOffset));
 800              		.loc 1 615 3 is_stmt 1 view .LVU239
 801 0062 2369     		ldr	r3, [r4, #16]
 802 0064 FF33     		adds	r3, r3, #255
 803 0066 B3F5802F 		cmp	r3, #262144
 804 006a 04D3     		bcc	.L72
 805              		.loc 1 615 3 is_stmt 0 discriminator 1 view .LVU240
 806 006c 40F26721 		movw	r1, #615
 807 0070 1248     		ldr	r0, .L81+4
 808 0072 FFF7FEFF 		bl	assert_failed
 809              	.LVL68:
 810              	.L72:
 616:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 617:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check GFXMMU state */
 618:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   if (hgfxmmu->State != HAL_GFXMMU_STATE_READY)
 811              		.loc 1 618 3 is_stmt 1 view .LVU241
 812              		.loc 1 618 14 is_stmt 0 view .LVU242
 813 0076 95F82800 		ldrb	r0, [r5, #40]	@ zero_extendqisi2
 814              		.loc 1 618 6 view .LVU243
 815 007a 0128     		cmp	r0, #1
 816 007c 1AD1     		bne	.L76
 619:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 620:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 621:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 622:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check address translation status */
 623:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else if ((hgfxmmu->Instance->CR & GFXMMU_CR_ATE) == 0U)
 817              		.loc 1 623 8 is_stmt 1 view .LVU244
 818              		.loc 1 623 20 is_stmt 0 view .LVU245
 819 007e 2B68     		ldr	r3, [r5]
 820              		.loc 1 623 30 view .LVU246
 821 0080 1A68     		ldr	r2, [r3]
 822              		.loc 1 623 11 view .LVU247
 823 0082 1204     		lsls	r2, r2, #16
 824 0084 12D5     		bpl	.L73
 825              	.LBB10:
 624:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 625:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 626:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 627:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else
 628:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 629:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     uint32_t lutxl_address;
 826              		.loc 1 629 5 is_stmt 1 view .LVU248
 630:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     uint32_t lutxh_address;
 827              		.loc 1 630 5 view .LVU249
 631:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 632:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Initialize local variables */
 633:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     lutxl_address   = (uint32_t) &(hgfxmmu->Instance->LUT[2U * lutLine->LineNumber]);
 828              		.loc 1 633 5 view .LVU250
 634:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     lutxh_address   = (uint32_t) &(hgfxmmu->Instance->LUT[(2U * lutLine->LineNumber) + 1U]);
 635:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
ARM GAS  /tmp/ccO2SMb7.s 			page 29


 636:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Configure LUT line */
 637:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     if (lutLine->LineStatus == GFXMMU_LUT_LINE_ENABLE)
 829              		.loc 1 637 8 is_stmt 0 view .LVU251
 830 0086 D4E90021 		ldrd	r2, r1, [r4]
 831 008a D200     		lsls	r2, r2, #3
 832 008c 1344     		add	r3, r3, r2
 833 008e 0129     		cmp	r1, #1
 638:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 639:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       /* Enable and configure LUT line */
 640:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       *((uint32_t *)lutxl_address) = (lutLine->LineStatus |
 834              		.loc 1 640 36 view .LVU252
 835 0090 03F58053 		add	r3, r3, #4096
 637:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 836              		.loc 1 637 8 view .LVU253
 837 0094 0BD1     		bne	.L74
 838              		.loc 1 640 7 is_stmt 1 view .LVU254
 641:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                       (lutLine->FirstVisibleBlock << GFXMMU_LUTXL_FVB_OFFSET) |
 642:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                       (lutLine->LastVisibleBlock << GFXMMU_LUTXL_LVB_OFFSET));
 839              		.loc 1 642 66 is_stmt 0 view .LVU255
 840 0096 D4E90212 		ldrd	r1, r2, [r4, #8]
 841 009a 1204     		lsls	r2, r2, #16
 641:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                       (lutLine->FirstVisibleBlock << GFXMMU_LUTXL_FVB_OFFSET) |
 842              		.loc 1 641 95 view .LVU256
 843 009c 42EA0122 		orr	r2, r2, r1, lsl #8
 844 00a0 42F00102 		orr	r2, r2, #1
 640:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                       (lutLine->FirstVisibleBlock << GFXMMU_LUTXL_FVB_OFFSET) |
 845              		.loc 1 640 36 view .LVU257
 846 00a4 1A60     		str	r2, [r3]
 643:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       *((uint32_t *)lutxh_address) = (uint32_t) lutLine->LineOffset;
 847              		.loc 1 643 7 is_stmt 1 view .LVU258
 848              		.loc 1 643 36 is_stmt 0 view .LVU259
 849 00a6 2269     		ldr	r2, [r4, #16]
 850              	.L80:
 851              	.LBE10:
 607:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 852              		.loc 1 607 21 view .LVU260
 853 00a8 0020     		movs	r0, #0
 854              	.LBB11:
 855              		.loc 1 643 36 view .LVU261
 856 00aa 5A60     		str	r2, [r3, #4]
 857              	.L73:
 858              	.LVL69:
 859              		.loc 1 643 36 view .LVU262
 860              	.LBE11:
 644:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 645:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     else
 646:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 647:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       /* Disable LUT line */
 648:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       *((uint32_t *)lutxl_address) = 0U;
 649:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       *((uint32_t *)lutxh_address) = 0U;
 650:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 651:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 652:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Return function status */
 653:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   return status;
 861              		.loc 1 653 3 is_stmt 1 view .LVU263
 654:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 862              		.loc 1 654 1 is_stmt 0 view .LVU264
ARM GAS  /tmp/ccO2SMb7.s 			page 30


 863 00ac 38BD     		pop	{r3, r4, r5, pc}
 864              	.LVL70:
 865              	.L74:
 866              	.LBB12:
 648:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       *((uint32_t *)lutxh_address) = 0U;
 867              		.loc 1 648 7 is_stmt 1 view .LVU265
 648:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       *((uint32_t *)lutxh_address) = 0U;
 868              		.loc 1 648 36 is_stmt 0 view .LVU266
 869 00ae 0022     		movs	r2, #0
 870 00b0 1A60     		str	r2, [r3]
 649:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 871              		.loc 1 649 7 is_stmt 1 view .LVU267
 872 00b2 F9E7     		b	.L80
 873              	.L76:
 649:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 874              		.loc 1 649 7 is_stmt 0 view .LVU268
 875              	.LBE12:
 620:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 876              		.loc 1 620 12 view .LVU269
 877 00b4 0120     		movs	r0, #1
 878 00b6 F9E7     		b	.L73
 879              	.L82:
 880              		.align	2
 881              	.L81:
 882 00b8 00000358 		.word	1476591616
 883 00bc 00000000 		.word	.LC0
 884              		.cfi_endproc
 885              	.LFE841:
 887              		.section	.text.HAL_GFXMMU_ModifyBuffers,"ax",%progbits
 888              		.align	1
 889              		.global	HAL_GFXMMU_ModifyBuffers
 890              		.syntax unified
 891              		.thumb
 892              		.thumb_func
 894              	HAL_GFXMMU_ModifyBuffers:
 895              	.LVL71:
 896              	.LFB842:
 655:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 656:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 657:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  This function allows to modify physical buffer addresses.
 658:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 659:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  Buffers Buffers parameters.
 660:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval HAL status.
 661:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 662:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** HAL_StatusTypeDef HAL_GFXMMU_ModifyBuffers(GFXMMU_HandleTypeDef *hgfxmmu, const GFXMMU_BuffersTypeD
 663:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 897              		.loc 1 663 1 is_stmt 1 view -0
 898              		.cfi_startproc
 899              		@ args = 0, pretend = 0, frame = 0
 900              		@ frame_needed = 0, uses_anonymous_args = 0
 664:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 901              		.loc 1 664 3 view .LVU271
 665:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 666:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check parameters */
 667:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
 902              		.loc 1 667 3 view .LVU272
 663:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
ARM GAS  /tmp/ccO2SMb7.s 			page 31


 903              		.loc 1 663 1 is_stmt 0 view .LVU273
 904 0000 38B5     		push	{r3, r4, r5, lr}
 905              		.cfi_def_cfa_offset 16
 906              		.cfi_offset 3, -16
 907              		.cfi_offset 4, -12
 908              		.cfi_offset 5, -8
 909              		.cfi_offset 14, -4
 910              		.loc 1 667 3 view .LVU274
 911 0002 204A     		ldr	r2, .L103
 912 0004 0368     		ldr	r3, [r0]
 663:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 913              		.loc 1 663 1 view .LVU275
 914 0006 0546     		mov	r5, r0
 915              		.loc 1 667 3 view .LVU276
 916 0008 9342     		cmp	r3, r2
 663:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 917              		.loc 1 663 1 view .LVU277
 918 000a 0C46     		mov	r4, r1
 919              		.loc 1 667 3 view .LVU278
 920 000c 08D0     		beq	.L84
 921              		.loc 1 667 3 discriminator 1 view .LVU279
 922 000e 02F17042 		add	r2, r2, #-268435456
 923 0012 9342     		cmp	r3, r2
 924 0014 04D0     		beq	.L84
 925              		.loc 1 667 3 discriminator 2 view .LVU280
 926 0016 40F29B21 		movw	r1, #667
 927              	.LVL72:
 928              		.loc 1 667 3 discriminator 2 view .LVU281
 929 001a 1B48     		ldr	r0, .L103+4
 930              	.LVL73:
 931              		.loc 1 667 3 discriminator 2 view .LVU282
 932 001c FFF7FEFF 		bl	assert_failed
 933              	.LVL74:
 934              	.L84:
 668:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_BUFFER_ADDRESS(Buffers->Buf0Address));
 935              		.loc 1 668 3 is_stmt 1 view .LVU283
 936 0020 2368     		ldr	r3, [r4]
 937 0022 1807     		lsls	r0, r3, #28
 938 0024 04D0     		beq	.L85
 939              		.loc 1 668 3 is_stmt 0 discriminator 1 view .LVU284
 940 0026 4FF42771 		mov	r1, #668
 941 002a 1748     		ldr	r0, .L103+4
 942 002c FFF7FEFF 		bl	assert_failed
 943              	.LVL75:
 944              	.L85:
 669:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_BUFFER_ADDRESS(Buffers->Buf1Address));
 945              		.loc 1 669 3 is_stmt 1 view .LVU285
 946 0030 6368     		ldr	r3, [r4, #4]
 947 0032 1907     		lsls	r1, r3, #28
 948 0034 04D0     		beq	.L86
 949              		.loc 1 669 3 is_stmt 0 discriminator 1 view .LVU286
 950 0036 40F29D21 		movw	r1, #669
 951 003a 1348     		ldr	r0, .L103+4
 952 003c FFF7FEFF 		bl	assert_failed
 953              	.LVL76:
 954              	.L86:
 670:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_BUFFER_ADDRESS(Buffers->Buf2Address));
ARM GAS  /tmp/ccO2SMb7.s 			page 32


 955              		.loc 1 670 3 is_stmt 1 view .LVU287
 956 0040 A368     		ldr	r3, [r4, #8]
 957 0042 1A07     		lsls	r2, r3, #28
 958 0044 04D0     		beq	.L87
 959              		.loc 1 670 3 is_stmt 0 discriminator 1 view .LVU288
 960 0046 40F29E21 		movw	r1, #670
 961 004a 0F48     		ldr	r0, .L103+4
 962 004c FFF7FEFF 		bl	assert_failed
 963              	.LVL77:
 964              	.L87:
 671:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_BUFFER_ADDRESS(Buffers->Buf3Address));
 965              		.loc 1 671 3 is_stmt 1 view .LVU289
 966 0050 E368     		ldr	r3, [r4, #12]
 967 0052 1B07     		lsls	r3, r3, #28
 968 0054 04D0     		beq	.L88
 969              		.loc 1 671 3 is_stmt 0 discriminator 1 view .LVU290
 970 0056 40F29F21 		movw	r1, #671
 971 005a 0B48     		ldr	r0, .L103+4
 972 005c FFF7FEFF 		bl	assert_failed
 973              	.LVL78:
 974              	.L88:
 672:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 673:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check GFXMMU state */
 674:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   if (hgfxmmu->State != HAL_GFXMMU_STATE_READY)
 975              		.loc 1 674 3 is_stmt 1 view .LVU291
 976              		.loc 1 674 6 is_stmt 0 view .LVU292
 977 0060 95F82830 		ldrb	r3, [r5, #40]	@ zero_extendqisi2
 978 0064 012B     		cmp	r3, #1
 979 0066 0AD1     		bne	.L90
 675:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 676:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 677:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 678:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else
 679:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 680:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Modify physical buffer addresses on GFXMMU_BxCR registers */
 681:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B0CR = Buffers->Buf0Address;
 980              		.loc 1 681 5 is_stmt 1 view .LVU293
 664:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 981              		.loc 1 664 21 is_stmt 0 view .LVU294
 982 0068 0020     		movs	r0, #0
 983              		.loc 1 681 38 view .LVU295
 984 006a 2268     		ldr	r2, [r4]
 985              		.loc 1 681 12 view .LVU296
 986 006c 2B68     		ldr	r3, [r5]
 987              		.loc 1 681 29 view .LVU297
 988 006e 1A62     		str	r2, [r3, #32]
 682:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B1CR = Buffers->Buf1Address;
 989              		.loc 1 682 5 is_stmt 1 view .LVU298
 990              		.loc 1 682 38 is_stmt 0 view .LVU299
 991 0070 6268     		ldr	r2, [r4, #4]
 992              		.loc 1 682 29 view .LVU300
 993 0072 5A62     		str	r2, [r3, #36]
 683:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B2CR = Buffers->Buf2Address;
 994              		.loc 1 683 5 is_stmt 1 view .LVU301
 995              		.loc 1 683 38 is_stmt 0 view .LVU302
 996 0074 A268     		ldr	r2, [r4, #8]
 997              		.loc 1 683 29 view .LVU303
ARM GAS  /tmp/ccO2SMb7.s 			page 33


 998 0076 9A62     		str	r2, [r3, #40]
 684:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->B3CR = Buffers->Buf3Address;
 999              		.loc 1 684 5 is_stmt 1 view .LVU304
 1000              		.loc 1 684 38 is_stmt 0 view .LVU305
 1001 0078 E268     		ldr	r2, [r4, #12]
 1002              		.loc 1 684 29 view .LVU306
 1003 007a DA62     		str	r2, [r3, #44]
 1004              	.L89:
 1005              	.LVL79:
 685:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 686:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Return function status */
 687:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   return status;
 1006              		.loc 1 687 3 is_stmt 1 view .LVU307
 688:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 1007              		.loc 1 688 1 is_stmt 0 view .LVU308
 1008 007c 38BD     		pop	{r3, r4, r5, pc}
 1009              	.LVL80:
 1010              	.L90:
 676:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 1011              		.loc 1 676 12 view .LVU309
 1012 007e 0120     		movs	r0, #1
 1013 0080 FCE7     		b	.L89
 1014              	.L104:
 1015 0082 00BF     		.align	2
 1016              	.L103:
 1017 0084 00000358 		.word	1476591616
 1018 0088 00000000 		.word	.LC0
 1019              		.cfi_endproc
 1020              	.LFE842:
 1022              		.section	.text.HAL_GFXMMU_ConfigPacking,"ax",%progbits
 1023              		.align	1
 1024              		.global	HAL_GFXMMU_ConfigPacking
 1025              		.syntax unified
 1026              		.thumb
 1027              		.thumb_func
 1029              	HAL_GFXMMU_ConfigPacking:
 1030              	.LVL81:
 1031              	.LFB843:
 689:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 690:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 691:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  This function allows to configure packing.
 692:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 693:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  pPacking Packing parameters.
 694:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval HAL status.
 695:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 696:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** HAL_StatusTypeDef HAL_GFXMMU_ConfigPacking(GFXMMU_HandleTypeDef *hgfxmmu, const GFXMMU_PackingTypeD
 697:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 1032              		.loc 1 697 1 is_stmt 1 view -0
 1033              		.cfi_startproc
 1034              		@ args = 0, pretend = 0, frame = 0
 1035              		@ frame_needed = 0, uses_anonymous_args = 0
 698:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 1036              		.loc 1 698 3 view .LVU311
 699:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 700:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check parameters */
 701:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
 1037              		.loc 1 701 3 view .LVU312
ARM GAS  /tmp/ccO2SMb7.s 			page 34


 697:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 1038              		.loc 1 697 1 is_stmt 0 view .LVU313
 1039 0000 38B5     		push	{r3, r4, r5, lr}
 1040              		.cfi_def_cfa_offset 16
 1041              		.cfi_offset 3, -16
 1042              		.cfi_offset 4, -12
 1043              		.cfi_offset 5, -8
 1044              		.cfi_offset 14, -4
 1045              		.loc 1 701 3 view .LVU314
 1046 0002 484A     		ldr	r2, .L126
 1047 0004 0368     		ldr	r3, [r0]
 697:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 1048              		.loc 1 697 1 view .LVU315
 1049 0006 0546     		mov	r5, r0
 1050              		.loc 1 701 3 view .LVU316
 1051 0008 9342     		cmp	r3, r2
 697:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   HAL_StatusTypeDef status = HAL_OK;
 1052              		.loc 1 697 1 view .LVU317
 1053 000a 0C46     		mov	r4, r1
 1054              		.loc 1 701 3 view .LVU318
 1055 000c 08D0     		beq	.L106
 1056              		.loc 1 701 3 discriminator 1 view .LVU319
 1057 000e 02F17042 		add	r2, r2, #-268435456
 1058 0012 9342     		cmp	r3, r2
 1059 0014 04D0     		beq	.L106
 1060              		.loc 1 701 3 discriminator 2 view .LVU320
 1061 0016 40F2BD21 		movw	r1, #701
 1062              	.LVL82:
 1063              		.loc 1 701 3 discriminator 2 view .LVU321
 1064 001a 4348     		ldr	r0, .L126+4
 1065              	.LVL83:
 1066              		.loc 1 701 3 discriminator 2 view .LVU322
 1067 001c FFF7FEFF 		bl	assert_failed
 1068              	.LVL84:
 1069              	.L106:
 702:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_FUNCTIONAL_STATE(pPacking->Buffer0Activation));
 1070              		.loc 1 702 3 is_stmt 1 view .LVU323
 1071 0020 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1072 0022 012B     		cmp	r3, #1
 1073 0024 04D9     		bls	.L107
 1074              		.loc 1 702 3 is_stmt 0 discriminator 1 view .LVU324
 1075 0026 40F2BE21 		movw	r1, #702
 1076 002a 3F48     		ldr	r0, .L126+4
 1077 002c FFF7FEFF 		bl	assert_failed
 1078              	.LVL85:
 1079              	.L107:
 703:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_FUNCTIONAL_STATE(pPacking->Buffer1Activation));
 1080              		.loc 1 703 3 is_stmt 1 view .LVU325
 1081 0030 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1082 0032 012B     		cmp	r3, #1
 1083 0034 04D9     		bls	.L108
 1084              		.loc 1 703 3 is_stmt 0 discriminator 1 view .LVU326
 1085 0036 40F2BF21 		movw	r1, #703
 1086 003a 3B48     		ldr	r0, .L126+4
 1087 003c FFF7FEFF 		bl	assert_failed
 1088              	.LVL86:
 1089              	.L108:
ARM GAS  /tmp/ccO2SMb7.s 			page 35


 704:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_FUNCTIONAL_STATE(pPacking->Buffer2Activation));
 1090              		.loc 1 704 3 is_stmt 1 view .LVU327
 1091 0040 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 1092 0042 012B     		cmp	r3, #1
 1093 0044 04D9     		bls	.L109
 1094              		.loc 1 704 3 is_stmt 0 discriminator 1 view .LVU328
 1095 0046 4FF43071 		mov	r1, #704
 1096 004a 3748     		ldr	r0, .L126+4
 1097 004c FFF7FEFF 		bl	assert_failed
 1098              	.LVL87:
 1099              	.L109:
 705:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_FUNCTIONAL_STATE(pPacking->Buffer3Activation));
 1100              		.loc 1 705 3 is_stmt 1 view .LVU329
 1101 0050 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 1102 0052 012B     		cmp	r3, #1
 1103 0054 04D9     		bls	.L110
 1104              		.loc 1 705 3 is_stmt 0 discriminator 1 view .LVU330
 1105 0056 40F2C121 		movw	r1, #705
 1106 005a 3348     		ldr	r0, .L126+4
 1107 005c FFF7FEFF 		bl	assert_failed
 1108              	.LVL88:
 1109              	.L110:
 706:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_PACKING_MODE(pPacking->Buffer0Mode));
 1110              		.loc 1 706 3 is_stmt 1 view .LVU331
 1111 0060 6368     		ldr	r3, [r4, #4]
 1112 0062 012B     		cmp	r3, #1
 1113 0064 04D9     		bls	.L111
 1114              		.loc 1 706 3 is_stmt 0 discriminator 1 view .LVU332
 1115 0066 40F2C221 		movw	r1, #706
 1116 006a 2F48     		ldr	r0, .L126+4
 1117 006c FFF7FEFF 		bl	assert_failed
 1118              	.LVL89:
 1119              	.L111:
 707:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_PACKING_MODE(pPacking->Buffer1Mode));
 1120              		.loc 1 707 3 is_stmt 1 view .LVU333
 1121 0070 E368     		ldr	r3, [r4, #12]
 1122 0072 012B     		cmp	r3, #1
 1123 0074 04D9     		bls	.L112
 1124              		.loc 1 707 3 is_stmt 0 discriminator 1 view .LVU334
 1125 0076 40F2C321 		movw	r1, #707
 1126 007a 2B48     		ldr	r0, .L126+4
 1127 007c FFF7FEFF 		bl	assert_failed
 1128              	.LVL90:
 1129              	.L112:
 708:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_PACKING_MODE(pPacking->Buffer2Mode));
 1130              		.loc 1 708 3 is_stmt 1 view .LVU335
 1131 0080 6369     		ldr	r3, [r4, #20]
 1132 0082 012B     		cmp	r3, #1
 1133 0084 04D9     		bls	.L113
 1134              		.loc 1 708 3 is_stmt 0 discriminator 1 view .LVU336
 1135 0086 4FF43171 		mov	r1, #708
 1136 008a 2748     		ldr	r0, .L126+4
 1137 008c FFF7FEFF 		bl	assert_failed
 1138              	.LVL91:
 1139              	.L113:
 709:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_PACKING_MODE(pPacking->Buffer3Mode));
 1140              		.loc 1 709 3 is_stmt 1 view .LVU337
ARM GAS  /tmp/ccO2SMb7.s 			page 36


 1141 0090 E369     		ldr	r3, [r4, #28]
 1142 0092 012B     		cmp	r3, #1
 1143 0094 04D9     		bls	.L114
 1144              		.loc 1 709 3 is_stmt 0 discriminator 1 view .LVU338
 1145 0096 40F2C521 		movw	r1, #709
 1146 009a 2348     		ldr	r0, .L126+4
 1147 009c FFF7FEFF 		bl	assert_failed
 1148              	.LVL92:
 1149              	.L114:
 710:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   assert_param(IS_GFXMMU_DEFAULT_ALPHA_VALUE(pPacking->DefaultAlpha));
 1150              		.loc 1 710 3 is_stmt 1 view .LVU339
 1151 00a0 236A     		ldr	r3, [r4, #32]
 1152 00a2 FF2B     		cmp	r3, #255
 1153 00a4 04D9     		bls	.L115
 1154              		.loc 1 710 3 is_stmt 0 discriminator 1 view .LVU340
 1155 00a6 40F2C621 		movw	r1, #710
 1156 00aa 1F48     		ldr	r0, .L126+4
 1157 00ac FFF7FEFF 		bl	assert_failed
 1158              	.LVL93:
 1159              	.L115:
 711:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 712:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check GFXMMU state */
 713:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   if (hgfxmmu->State != HAL_GFXMMU_STATE_READY)
 1160              		.loc 1 713 3 is_stmt 1 view .LVU341
 1161              		.loc 1 713 14 is_stmt 0 view .LVU342
 1162 00b0 95F82800 		ldrb	r0, [r5, #40]	@ zero_extendqisi2
 1163              		.loc 1 713 6 view .LVU343
 1164 00b4 0128     		cmp	r0, #1
 1165 00b6 32D1     		bne	.L121
 714:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 715:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 716:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 717:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Check block size is set to 12-byte*/
 718:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else if ((hgfxmmu->Instance->CR & GFXMMU_CR_BS) == 0U)
 1166              		.loc 1 718 8 is_stmt 1 view .LVU344
 1167              		.loc 1 718 20 is_stmt 0 view .LVU345
 1168 00b8 2A68     		ldr	r2, [r5]
 1169              		.loc 1 718 30 view .LVU346
 1170 00ba 1368     		ldr	r3, [r2]
 1171              		.loc 1 718 11 view .LVU347
 1172 00bc 5B06     		lsls	r3, r3, #25
 1173 00be 2DD5     		bpl	.L116
 1174              	.LBB13:
 719:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 720:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     status = HAL_ERROR;
 721:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 722:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   else
 723:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 724:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     uint32_t reg_value = 0U;
 1175              		.loc 1 724 5 is_stmt 1 view .LVU348
 1176              	.LVL94:
 725:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 726:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Configure packing for all buffers on GFXMMU_CR register */
 727:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     if (pPacking->Buffer0Activation == ENABLE)
 1177              		.loc 1 727 5 view .LVU349
 1178              		.loc 1 727 8 is_stmt 0 view .LVU350
 1179 00c0 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
ARM GAS  /tmp/ccO2SMb7.s 			page 37


 1180              	.LBE13:
 698:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 1181              		.loc 1 698 21 view .LVU351
 1182 00c2 0020     		movs	r0, #0
 1183              	.LBB14:
 1184              		.loc 1 727 8 view .LVU352
 1185 00c4 012B     		cmp	r3, #1
 728:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 729:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       reg_value |= ((pPacking->Buffer0Mode << GFXMMU_CR_B0PM_Pos) | GFXMMU_CR_B0PE);
 1186              		.loc 1 729 7 is_stmt 1 view .LVU353
 724:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 1187              		.loc 1 724 14 is_stmt 0 view .LVU354
 1188 00c6 14BF     		ite	ne
 1189 00c8 0023     		movne	r3, #0
 1190              		.loc 1 729 44 view .LVU355
 1191 00ca 6368     		ldreq	r3, [r4, #4]
 730:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 731:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     if (pPacking->Buffer1Activation == ENABLE)
 1192              		.loc 1 731 8 view .LVU356
 1193 00cc 217A     		ldrb	r1, [r4, #8]	@ zero_extendqisi2
 729:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 1194              		.loc 1 729 44 view .LVU357
 1195 00ce 04BF     		itt	eq
 1196 00d0 5B06     		lsleq	r3, r3, #25
 729:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 1197              		.loc 1 729 17 view .LVU358
 1198 00d2 43F08073 		orreq	r3, r3, #16777216
 1199              	.LVL95:
 1200              		.loc 1 731 5 is_stmt 1 view .LVU359
 1201              		.loc 1 731 8 is_stmt 0 view .LVU360
 1202 00d6 0129     		cmp	r1, #1
 732:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 733:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       reg_value |= ((pPacking->Buffer1Mode << GFXMMU_CR_B1PM_Pos) | GFXMMU_CR_B1PE);
 1203              		.loc 1 733 7 is_stmt 1 view .LVU361
 1204              		.loc 1 733 44 is_stmt 0 view .LVU362
 1205 00d8 04BF     		itt	eq
 1206 00da E168     		ldreq	r1, [r4, #12]
 1207              		.loc 1 733 17 view .LVU363
 1208 00dc 43EAC163 		orreq	r3, r3, r1, lsl #27
 1209              	.LVL96:
 734:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 735:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     if (pPacking->Buffer2Activation == ENABLE)
 1210              		.loc 1 735 8 view .LVU364
 1211 00e0 217C     		ldrb	r1, [r4, #16]	@ zero_extendqisi2
 733:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 1212              		.loc 1 733 17 view .LVU365
 1213 00e2 08BF     		it	eq
 1214 00e4 43F08063 		orreq	r3, r3, #67108864
 1215              	.LVL97:
 1216              		.loc 1 735 5 is_stmt 1 view .LVU366
 1217              		.loc 1 735 8 is_stmt 0 view .LVU367
 1218 00e8 0129     		cmp	r1, #1
 736:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 737:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       reg_value |= ((pPacking->Buffer2Mode << GFXMMU_CR_B2PM_Pos) | GFXMMU_CR_B2PE);
 1219              		.loc 1 737 7 is_stmt 1 view .LVU368
 1220              		.loc 1 737 44 is_stmt 0 view .LVU369
 1221 00ea 04BF     		itt	eq
ARM GAS  /tmp/ccO2SMb7.s 			page 38


 1222 00ec 6169     		ldreq	r1, [r4, #20]
 1223              		.loc 1 737 17 view .LVU370
 1224 00ee 43EA4173 		orreq	r3, r3, r1, lsl #29
 1225              	.LVL98:
 738:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 739:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     if (pPacking->Buffer3Activation == ENABLE)
 1226              		.loc 1 739 8 view .LVU371
 1227 00f2 217E     		ldrb	r1, [r4, #24]	@ zero_extendqisi2
 737:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 1228              		.loc 1 737 17 view .LVU372
 1229 00f4 08BF     		it	eq
 1230 00f6 43F08053 		orreq	r3, r3, #268435456
 1231              	.LVL99:
 1232              		.loc 1 739 5 is_stmt 1 view .LVU373
 1233              		.loc 1 739 8 is_stmt 0 view .LVU374
 1234 00fa 0129     		cmp	r1, #1
 740:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     {
 741:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       reg_value |= ((pPacking->Buffer3Mode << GFXMMU_CR_B3PM_Pos) | GFXMMU_CR_B3PE);
 1235              		.loc 1 741 7 is_stmt 1 view .LVU375
 1236              		.loc 1 741 44 is_stmt 0 view .LVU376
 1237 00fc 04BF     		itt	eq
 1238 00fe E169     		ldreq	r1, [r4, #28]
 1239              		.loc 1 741 17 view .LVU377
 1240 0100 43EAC173 		orreq	r3, r3, r1, lsl #31
 1241              	.LVL100:
 742:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 743:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->CR &= ~(GFXMMU_CR_B0PE_Msk | GFXMMU_CR_B0PM_Msk |
 1242              		.loc 1 743 22 view .LVU378
 1243 0104 1168     		ldr	r1, [r2]
 741:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     }
 1244              		.loc 1 741 17 view .LVU379
 1245 0106 08BF     		it	eq
 1246 0108 43F08043 		orreq	r3, r3, #1073741824
 1247              	.LVL101:
 1248              		.loc 1 743 5 is_stmt 1 view .LVU380
 1249              		.loc 1 743 27 is_stmt 0 view .LVU381
 1250 010c 21F07F41 		bic	r1, r1, #-16777216
 1251 0110 1160     		str	r1, [r2]
 744:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                GFXMMU_CR_B1PE_Msk | GFXMMU_CR_B1PM_Msk |
 745:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                GFXMMU_CR_B2PE_Msk | GFXMMU_CR_B2PM_Msk |
 746:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                                GFXMMU_CR_B3PE_Msk | GFXMMU_CR_B3PM_Msk);
 747:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->CR |= reg_value;
 1252              		.loc 1 747 5 is_stmt 1 view .LVU382
 1253              		.loc 1 747 22 is_stmt 0 view .LVU383
 1254 0112 1168     		ldr	r1, [r2]
 1255              		.loc 1 747 27 view .LVU384
 1256 0114 0B43     		orrs	r3, r3, r1
 1257              	.LVL102:
 1258              		.loc 1 747 27 view .LVU385
 1259 0116 1360     		str	r3, [r2]
 748:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 749:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Configure default alpha value on GFXMMU_DAR register */
 750:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->DAR = pPacking->DefaultAlpha;
 1260              		.loc 1 750 5 is_stmt 1 view .LVU386
 1261              		.loc 1 750 38 is_stmt 0 view .LVU387
 1262 0118 236A     		ldr	r3, [r4, #32]
 1263              		.loc 1 750 28 view .LVU388
ARM GAS  /tmp/ccO2SMb7.s 			page 39


 1264 011a 5361     		str	r3, [r2, #20]
 1265              	.LVL103:
 1266              	.L116:
 1267              		.loc 1 750 28 view .LVU389
 1268              	.LBE14:
 751:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 752:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Return function status */
 753:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   return status;
 1269              		.loc 1 753 3 is_stmt 1 view .LVU390
 754:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 1270              		.loc 1 754 1 is_stmt 0 view .LVU391
 1271 011c 38BD     		pop	{r3, r4, r5, pc}
 1272              	.LVL104:
 1273              	.L121:
 715:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 1274              		.loc 1 715 12 view .LVU392
 1275 011e 0120     		movs	r0, #1
 1276 0120 FCE7     		b	.L116
 1277              	.L127:
 1278 0122 00BF     		.align	2
 1279              	.L126:
 1280 0124 00000358 		.word	1476591616
 1281 0128 00000000 		.word	.LC0
 1282              		.cfi_endproc
 1283              	.LFE843:
 1285              		.section	.text.HAL_GFXMMU_ErrorCallback,"ax",%progbits
 1286              		.align	1
 1287              		.weak	HAL_GFXMMU_ErrorCallback
 1288              		.syntax unified
 1289              		.thumb
 1290              		.thumb_func
 1292              	HAL_GFXMMU_ErrorCallback:
 1293              	.LFB851:
 1294              		.cfi_startproc
 755:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 756:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 757:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  This function handles the GFXMMU interrupts.
 758:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 759:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval None.
 760:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 761:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** void HAL_GFXMMU_IRQHandler(GFXMMU_HandleTypeDef *hgfxmmu)
 762:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 763:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   uint32_t flags, interrupts, error;
 764:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 765:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Read current flags and interrupts and determine which error occurs */
 766:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   flags = hgfxmmu->Instance->SR;
 767:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   interrupts = (hgfxmmu->Instance->CR & GFXMMU_CR_ITS_MASK);
 768:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   error = (flags & interrupts);
 769:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 770:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   if (error != 0U)
 771:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 772:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Clear flags on GFXMMU_FCR register */
 773:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->Instance->FCR = error;
 774:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 775:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Update GFXMMU error code */
 776:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->ErrorCode |= error;
 777:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
ARM GAS  /tmp/ccO2SMb7.s 			page 40


 778:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     /* Call GFXMMU error callback */
 779:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #if (USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1)
 780:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     hgfxmmu->ErrorCallback(hgfxmmu);
 781:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #else
 782:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     HAL_GFXMMU_ErrorCallback(hgfxmmu);
 783:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */
 784:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   }
 785:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 786:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 787:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 788:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  Error callback.
 789:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 790:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval None.
 791:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 792:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** __weak void HAL_GFXMMU_ErrorCallback(GFXMMU_HandleTypeDef *hgfxmmu)
 1295              		.loc 1 792 13 is_stmt 1 view -0
 1296              		@ args = 0, pretend = 0, frame = 0
 1297              		@ frame_needed = 0, uses_anonymous_args = 0
 1298              		@ link register save eliminated.
 1299 0000 7047     		bx	lr
 1300              		.cfi_endproc
 1301              	.LFE851:
 1303              		.section	.text.HAL_GFXMMU_IRQHandler,"ax",%progbits
 1304              		.align	1
 1305              		.global	HAL_GFXMMU_IRQHandler
 1306              		.syntax unified
 1307              		.thumb
 1308              		.thumb_func
 1310              	HAL_GFXMMU_IRQHandler:
 1311              	.LVL105:
 1312              	.LFB844:
 762:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   uint32_t flags, interrupts, error;
 1313              		.loc 1 762 1 view -0
 1314              		.cfi_startproc
 1315              		@ args = 0, pretend = 0, frame = 0
 1316              		@ frame_needed = 0, uses_anonymous_args = 0
 763:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 1317              		.loc 1 763 3 view .LVU395
 766:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   interrupts = (hgfxmmu->Instance->CR & GFXMMU_CR_ITS_MASK);
 1318              		.loc 1 766 3 view .LVU396
 766:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   interrupts = (hgfxmmu->Instance->CR & GFXMMU_CR_ITS_MASK);
 1319              		.loc 1 766 18 is_stmt 0 view .LVU397
 1320 0000 0168     		ldr	r1, [r0]
 762:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   uint32_t flags, interrupts, error;
 1321              		.loc 1 762 1 view .LVU398
 1322 0002 10B5     		push	{r4, lr}
 1323              		.cfi_def_cfa_offset 8
 1324              		.cfi_offset 4, -8
 1325              		.cfi_offset 14, -4
 766:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   interrupts = (hgfxmmu->Instance->CR & GFXMMU_CR_ITS_MASK);
 1326              		.loc 1 766 9 view .LVU399
 1327 0004 4C68     		ldr	r4, [r1, #4]
 1328              	.LVL106:
 767:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   error = (flags & interrupts);
 1329              		.loc 1 767 3 is_stmt 1 view .LVU400
 767:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   error = (flags & interrupts);
 1330              		.loc 1 767 34 is_stmt 0 view .LVU401
ARM GAS  /tmp/ccO2SMb7.s 			page 41


 1331 0006 0B68     		ldr	r3, [r1]
 1332              	.LVL107:
 768:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 1333              		.loc 1 768 3 is_stmt 1 view .LVU402
 768:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 1334              		.loc 1 768 9 is_stmt 0 view .LVU403
 1335 0008 2340     		ands	r3, r3, r4
 1336              	.LVL108:
 770:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 1337              		.loc 1 770 3 is_stmt 1 view .LVU404
 770:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 1338              		.loc 1 770 6 is_stmt 0 view .LVU405
 1339 000a 13F01F03 		ands	r3, r3, #31
 1340              	.LVL109:
 770:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   {
 1341              		.loc 1 770 6 view .LVU406
 1342 000e 05D0     		beq	.L129
 773:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 1343              		.loc 1 773 5 is_stmt 1 view .LVU407
 773:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 1344              		.loc 1 773 28 is_stmt 0 view .LVU408
 1345 0010 8B60     		str	r3, [r1, #8]
 776:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 1346              		.loc 1 776 5 is_stmt 1 view .LVU409
 776:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 1347              		.loc 1 776 12 is_stmt 0 view .LVU410
 1348 0012 C16A     		ldr	r1, [r0, #44]
 776:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 1349              		.loc 1 776 24 view .LVU411
 1350 0014 0B43     		orrs	r3, r3, r1
 1351              	.LVL110:
 776:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 1352              		.loc 1 776 24 view .LVU412
 1353 0016 C362     		str	r3, [r0, #44]
 1354              	.LVL111:
 782:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** #endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */
 1355              		.loc 1 782 5 is_stmt 1 view .LVU413
 1356 0018 FFF7FEFF 		bl	HAL_GFXMMU_ErrorCallback
 1357              	.LVL112:
 1358              	.L129:
 785:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 1359              		.loc 1 785 1 is_stmt 0 view .LVU414
 1360 001c 10BD     		pop	{r4, pc}
 785:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 1361              		.loc 1 785 1 view .LVU415
 1362              		.cfi_endproc
 1363              	.LFE844:
 1365              		.section	.text.HAL_GFXMMU_GetState,"ax",%progbits
 1366              		.align	1
 1367              		.global	HAL_GFXMMU_GetState
 1368              		.syntax unified
 1369              		.thumb
 1370              		.thumb_func
 1372              	HAL_GFXMMU_GetState:
 1373              	.LVL113:
 1374              	.LFB846:
 793:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
ARM GAS  /tmp/ccO2SMb7.s 			page 42


 794:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Prevent unused argument(s) compilation warning */
 795:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   UNUSED(hgfxmmu);
 796:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 797:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 798:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****             the HAL_GFXMMU_ErrorCallback could be implemented in the user file.
 799:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****    */
 800:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 801:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 802:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 803:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @}
 804:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 805:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 806:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /** @defgroup GFXMMU_Exported_Functions_Group3 State functions
 807:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *  @brief    GFXMMU state functions
 808:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   *
 809:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** @verbatim
 810:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   ==============================================================================
 811:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****                          ##### State functions #####
 812:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   ==============================================================================
 813:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****     [..]  This section provides functions allowing to:
 814:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) Get GFXMMU handle state.
 815:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****       (+) Get GFXMMU error code.
 816:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** @endverbatim
 817:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @{
 818:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 819:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 820:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 821:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  This function allows to get the current GFXMMU handle state.
 822:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 823:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval GFXMMU state.
 824:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 825:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** HAL_GFXMMU_StateTypeDef HAL_GFXMMU_GetState(const GFXMMU_HandleTypeDef *hgfxmmu)
 826:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 1375              		.loc 1 826 1 is_stmt 1 view -0
 1376              		.cfi_startproc
 1377              		@ args = 0, pretend = 0, frame = 0
 1378              		@ frame_needed = 0, uses_anonymous_args = 0
 1379              		@ link register save eliminated.
 827:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Return GFXMMU handle state */
 828:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   return hgfxmmu->State;
 1380              		.loc 1 828 3 view .LVU417
 829:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 1381              		.loc 1 829 1 is_stmt 0 view .LVU418
 1382 0000 90F82800 		ldrb	r0, [r0, #40]	@ zero_extendqisi2
 1383              	.LVL114:
 1384              		.loc 1 829 1 view .LVU419
 1385 0004 7047     		bx	lr
 1386              		.cfi_endproc
 1387              	.LFE846:
 1389              		.section	.text.HAL_GFXMMU_GetError,"ax",%progbits
 1390              		.align	1
 1391              		.global	HAL_GFXMMU_GetError
 1392              		.syntax unified
 1393              		.thumb
 1394              		.thumb_func
 1396              	HAL_GFXMMU_GetError:
 1397              	.LVL115:
ARM GAS  /tmp/ccO2SMb7.s 			page 43


 1398              	.LFB847:
 830:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 831:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** /**
 832:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @brief  This function allows to get the current GFXMMU error code.
 833:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @param  hgfxmmu GFXMMU handle.
 834:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   * @retval GFXMMU error code.
 835:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   */
 836:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** uint32_t HAL_GFXMMU_GetError(GFXMMU_HandleTypeDef *hgfxmmu)
 837:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** {
 1399              		.loc 1 837 1 is_stmt 1 view -0
 1400              		.cfi_startproc
 1401              		@ args = 0, pretend = 0, frame = 0
 1402              		@ frame_needed = 0, uses_anonymous_args = 0
 1403              		@ link register save eliminated.
 838:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   uint32_t error_code;
 1404              		.loc 1 838 3 view .LVU421
 839:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 840:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Enter in critical section */
 841:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   __disable_irq();
 1405              		.loc 1 841 3 view .LVU422
 1406              	.LBB15:
 1407              	.LBI15:
 1408              		.file 2 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h"
   1:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
ARM GAS  /tmp/ccO2SMb7.s 			page 44


  35:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  /tmp/ccO2SMb7.s 			page 45


  92:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
ARM GAS  /tmp/ccO2SMb7.s 			page 46


 149:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
ARM GAS  /tmp/ccO2SMb7.s 			page 47


 206:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccO2SMb7.s 			page 48


 263:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccO2SMb7.s 			page 49


 320:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccO2SMb7.s 			page 50


 377:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccO2SMb7.s 			page 51


 434:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
ARM GAS  /tmp/ccO2SMb7.s 			page 52


 491:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
ARM GAS  /tmp/ccO2SMb7.s 			page 53


 548:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
ARM GAS  /tmp/ccO2SMb7.s 			page 54


 605:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccO2SMb7.s 			page 55


 662:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     {
ARM GAS  /tmp/ccO2SMb7.s 			page 56


 719:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
ARM GAS  /tmp/ccO2SMb7.s 			page 57


 776:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccO2SMb7.s 			page 58


 833:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccO2SMb7.s 			page 59


 890:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
ARM GAS  /tmp/ccO2SMb7.s 			page 60


 947:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1409              		.loc 2 960 27 view .LVU423
 1410              	.LBB16:
 961:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1411              		.loc 2 962 3 view .LVU424
 1412              	.LBE16:
 1413              	.LBE15:
 837:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   uint32_t error_code;
 1414              		.loc 1 837 1 is_stmt 0 view .LVU425
 1415 0000 0346     		mov	r3, r0
 1416              	.LBB18:
 1417              	.LBB17:
 1418              		.loc 2 962 3 view .LVU426
 1419              		.syntax unified
 1420              	@ 962 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1421 0002 72B6     		cpsid i
 1422              	@ 0 "" 2
 1423              		.thumb
 1424              		.syntax unified
 1425              	.LBE17:
 1426              	.LBE18:
 842:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 843:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Store and reset GFXMMU error code */
 844:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   error_code = hgfxmmu->ErrorCode;
 1427              		.loc 1 844 3 is_stmt 1 view .LVU427
 845:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   hgfxmmu->ErrorCode = GFXMMU_ERROR_NONE;
 1428              		.loc 1 845 22 is_stmt 0 view .LVU428
 1429 0004 0022     		movs	r2, #0
 844:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   hgfxmmu->ErrorCode = GFXMMU_ERROR_NONE;
 1430              		.loc 1 844 14 view .LVU429
 1431 0006 C06A     		ldr	r0, [r0, #44]
 1432              	.LVL116:
 1433              		.loc 1 845 3 is_stmt 1 view .LVU430
 1434              		.loc 1 845 22 is_stmt 0 view .LVU431
 1435 0008 DA62     		str	r2, [r3, #44]
 846:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 847:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Exit from critical section */
 848:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   __enable_irq();
 1436              		.loc 1 848 3 is_stmt 1 view .LVU432
 1437              	.LBB19:
 1438              	.LBI19:
 949:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1439              		.loc 2 949 27 view .LVU433
ARM GAS  /tmp/ccO2SMb7.s 			page 61


 1440              	.LBB20:
 951:STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1441              		.loc 2 951 3 view .LVU434
 1442              		.syntax unified
 1443              	@ 951 "STM32Cube_FW_N6/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1444 000a 62B6     		cpsie i
 1445              	@ 0 "" 2
 1446              		.thumb
 1447              		.syntax unified
 1448              	.LBE20:
 1449              	.LBE19:
 849:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** 
 850:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   /* Return GFXMMU error code */
 851:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c ****   return error_code;
 1450              		.loc 1 851 3 view .LVU435
 852:STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Src/stm32n6xx_hal_gfxmmu.c **** }
 1451              		.loc 1 852 1 is_stmt 0 view .LVU436
 1452 000c 7047     		bx	lr
 1453              		.cfi_endproc
 1454              	.LFE847:
 1456              		.text
 1457              	.Letext0:
 1458              		.file 3 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 1459              		.file 4 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 1460              		.file 5 "STM32Cube_FW_N6/Drivers/CMSIS/Device/ST/STM32N6xx/Include/stm32n657xx.h"
 1461              		.file 6 "STM32Cube_FW_N6/Drivers/CMSIS/Device/ST/STM32N6xx/Include/stm32n6xx.h"
 1462              		.file 7 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal_def.h"
 1463              		.file 8 "STM32Cube_FW_N6/Drivers/STM32N6xx_HAL_Driver/Inc/stm32n6xx_hal_gfxmmu.h"
 1464              		.file 9 "Inc/stm32n6xx_hal_conf.h"
ARM GAS  /tmp/ccO2SMb7.s 			page 62


DEFINED SYMBOLS
                            *ABS*:00000000 stm32n6xx_hal_gfxmmu.c
     /tmp/ccO2SMb7.s:26     .text.HAL_GFXMMU_MspInit:00000000 $t
     /tmp/ccO2SMb7.s:32     .text.HAL_GFXMMU_MspInit:00000000 HAL_GFXMMU_MspInit
     /tmp/ccO2SMb7.s:51     .text.HAL_GFXMMU_Init:00000000 $t
     /tmp/ccO2SMb7.s:57     .text.HAL_GFXMMU_Init:00000000 HAL_GFXMMU_Init
     /tmp/ccO2SMb7.s:270    .text.HAL_GFXMMU_Init:000000f0 $d
     /tmp/ccO2SMb7.s:276    .text.HAL_GFXMMU_MspDeInit:00000000 $t
     /tmp/ccO2SMb7.s:282    .text.HAL_GFXMMU_MspDeInit:00000000 HAL_GFXMMU_MspDeInit
     /tmp/ccO2SMb7.s:294    .text.HAL_GFXMMU_DeInit:00000000 $t
     /tmp/ccO2SMb7.s:300    .text.HAL_GFXMMU_DeInit:00000000 HAL_GFXMMU_DeInit
     /tmp/ccO2SMb7.s:366    .text.HAL_GFXMMU_DeInit:0000003c $d
     /tmp/ccO2SMb7.s:372    .text.HAL_GFXMMU_ConfigLut:00000000 $t
     /tmp/ccO2SMb7.s:378    .text.HAL_GFXMMU_ConfigLut:00000000 HAL_GFXMMU_ConfigLut
     /tmp/ccO2SMb7.s:545    .text.HAL_GFXMMU_ConfigLut:00000094 $d
     /tmp/ccO2SMb7.s:551    .text.HAL_GFXMMU_DisableLutLines:00000000 $t
     /tmp/ccO2SMb7.s:557    .text.HAL_GFXMMU_DisableLutLines:00000000 HAL_GFXMMU_DisableLutLines
     /tmp/ccO2SMb7.s:707    .text.HAL_GFXMMU_DisableLutLines:0000008c $d
     /tmp/ccO2SMb7.s:713    .text.HAL_GFXMMU_ConfigLutLine:00000000 $t
     /tmp/ccO2SMb7.s:719    .text.HAL_GFXMMU_ConfigLutLine:00000000 HAL_GFXMMU_ConfigLutLine
     /tmp/ccO2SMb7.s:882    .text.HAL_GFXMMU_ConfigLutLine:000000b8 $d
     /tmp/ccO2SMb7.s:888    .text.HAL_GFXMMU_ModifyBuffers:00000000 $t
     /tmp/ccO2SMb7.s:894    .text.HAL_GFXMMU_ModifyBuffers:00000000 HAL_GFXMMU_ModifyBuffers
     /tmp/ccO2SMb7.s:1017   .text.HAL_GFXMMU_ModifyBuffers:00000084 $d
     /tmp/ccO2SMb7.s:1023   .text.HAL_GFXMMU_ConfigPacking:00000000 $t
     /tmp/ccO2SMb7.s:1029   .text.HAL_GFXMMU_ConfigPacking:00000000 HAL_GFXMMU_ConfigPacking
     /tmp/ccO2SMb7.s:1280   .text.HAL_GFXMMU_ConfigPacking:00000124 $d
     /tmp/ccO2SMb7.s:1286   .text.HAL_GFXMMU_ErrorCallback:00000000 $t
     /tmp/ccO2SMb7.s:1292   .text.HAL_GFXMMU_ErrorCallback:00000000 HAL_GFXMMU_ErrorCallback
     /tmp/ccO2SMb7.s:1304   .text.HAL_GFXMMU_IRQHandler:00000000 $t
     /tmp/ccO2SMb7.s:1310   .text.HAL_GFXMMU_IRQHandler:00000000 HAL_GFXMMU_IRQHandler
     /tmp/ccO2SMb7.s:1366   .text.HAL_GFXMMU_GetState:00000000 $t
     /tmp/ccO2SMb7.s:1372   .text.HAL_GFXMMU_GetState:00000000 HAL_GFXMMU_GetState
     /tmp/ccO2SMb7.s:1390   .text.HAL_GFXMMU_GetError:00000000 $t
     /tmp/ccO2SMb7.s:1396   .text.HAL_GFXMMU_GetError:00000000 HAL_GFXMMU_GetError
                           .group:00000000 wm4.0.c552ae9005b0f2cca11872fae5d4b7f2
                           .group:00000000 wm4.stm32n6xx_hal_conf.h.21.004a06df6e15ac197e03f723792da58a
                           .group:00000000 wm4.stddef.h.39.0dc9006b34572d4d9cae4c8b422c4971
                           .group:00000000 wm4.arm_cmse.h.103.a0d15a79c4c9a67da8d5831704d7248e
                           .group:00000000 wm4.stm32n6xx.h.34.80585dd08aa426c932f6311fdb7386da
                           .group:00000000 wm4.stm32n657xx.h.26.acd272cb67318cc1a4791ce2f0720ca6
                           .group:00000000 wm4._newlib_version.h.4.411db44ea2338a62eca2f0777f81481b
                           .group:00000000 wm4.features.h.33.e0c9f337c65cb9f22ed5f23d082bc78b
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.cmsis_version.h.32.0ac195c83bb4537824e6ad1c47474b79
                           .group:00000000 wm4.core_cm55.h.68.832d5cf835639cc0d28219c3d2867330
                           .group:00000000 wm4.cmsis_gcc.h.26.7a5fd1a99dbedde687044a4433ab3e15
                           .group:00000000 wm4.core_cm55.h.196.52e437a270752da561676e507b35baeb
                           .group:00000000 wm4.mpu_armv8.h.32.9d72426c8e2b47753456dcb84802c5b3
                           .group:00000000 wm4.pmu_armv8.h.32.eaa95f88a71b29390b135fd81c071b6b
                           .group:00000000 wm4.core_cm55.h.4411.860dad8650880893dd57b815844f7186
                           .group:00000000 wm4.cachel1_armv7.h.32.abd77761a989e008b0c60891114a33c7
                           .group:00000000 wm4.stm32n657xx.h.575.1c2a5e6bedffc6f9083dcc857bc6d09d
                           .group:00000000 wm4.stm32n6xx.h.114.5cf793d8af485e14f110e3e24bde1aa5
ARM GAS  /tmp/ccO2SMb7.s 			page 63


                           .group:00000000 wm4.stm32_hal_legacy.h.22.87fb12bf5a1a1e00fc134f22bc9aa8c4
                           .group:00000000 wm4.newlib.h.7.591ac1bd65c1f5b34864757667a05252
                           .group:00000000 wm4.ieeefp.h.77.bd5feb87d9990dd328793ced294f6a87
                           .group:00000000 wm4.config.h.224.10ee1ad185d877c6e334e6581faab44d
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.cdefs.h.49.70fc7af612f78ddcace70fdd90b5623b
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.158.6f8e08a347b1cff664332fa350bfceb3
                           .group:00000000 wm4._types.h.127.3bdfe3ff8ea2d0985b03d9cbe93480e3
                           .group:00000000 wm4.reent.h.18.25503cdc8b7e55dd0d6ea7b3e5af7a03
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.78.6b87466b04591b1f1cb88c14fdf2ba9e
                           .group:00000000 wm4.math.h.13.47cfc34cae8a1153323939c4d32cf7c2
                           .group:00000000 wm4.stm32n6xx_hal_def.h.63.3a8f01490e8852464e9fcb69092e9c75
                           .group:00000000 wm4.stm32n6xx_ll_bus.h.38.2366a295ee4cdb04833997d3787fcd2d
                           .group:00000000 wm4.stm32n6xx_ll_rcc.h.21.002e22a16fd7f67dde6dce41e8ba9620
                           .group:00000000 wm4.stm32n6xx_hal_rcc.h.194.1cb1283e40f9bebcd3fba2a9a961838e
                           .group:00000000 wm4.stm32n6xx_hal_rcc_ex.h.21.79aa32178dfef625fbd20d362449acfa
                           .group:00000000 wm4.stm32n6xx_hal_rcc.h.4359.3f0b7ad33826d95438602c9aebc08af9
                           .group:00000000 wm4.stm32n6xx_hal_gpio.h.21.89d54af663b98eb8fc098192053f7eeb
                           .group:00000000 wm4.stm32n6xx_hal_gpio_ex.h.22.4acb2e3511a98bb48b81cfc8e09fd59e
                           .group:00000000 wm4.stm32n6xx_hal_rif.h.21.424d0bafb874a777dee3742a22e13037
                           .group:00000000 wm4.stm32n6xx_hal_dma.h.21.61e48c5c2e8d25d22177834b232fe45c
                           .group:00000000 wm4.stm32n6xx_hal_dma_ex.h.21.66e597beb090a165329d6ccf665e41bc
                           .group:00000000 wm4.stm32n6xx_hal_dma.h.1020.87e2180c009560b617c1f8208140c950
                           .group:00000000 wm4.stm32n6xx_hal_cortex.h.21.f493623cc58f9454ab4eae41e395c5cc
                           .group:00000000 wm4.stm32n6xx_hal_bsec.h.21.61b309e67dd810e28897a01b1b21a97f
                           .group:00000000 wm4.stm32n6xx_hal_dcmipp.h.21.f538bfd785c6469670251ac9bc7af55d
                           .group:00000000 wm4.stm32n6xx_hal_dma2d.h.21.75c8d46cdbb72970123b3f34ae2043d7
                           .group:00000000 wm4.stm32n6xx_hal_exti.h.21.fda87e715ea6b98239ec30171d1df594
                           .group:00000000 wm4.stm32n6xx_hal_gfxmmu.h.21.9784a9103143d48bd3c37389d0e0b8e6
                           .group:00000000 wm4.stm32n6xx_hal_i2c.h.21.3f483626ff64c5bf027265bb2e1d1331
                           .group:00000000 wm4.stm32n6xx_hal_i2c_ex.h.21.79e9196c22282cdaf6b4047893638c45
                           .group:00000000 wm4.stm32n6xx_hal_i2c.h.741.1084702632703acc669e4282b3043372
                           .group:00000000 wm4.stm32n6xx_hal_icache.h.21.194b4ec6e76f32b14f65c85616854850
                           .group:00000000 wm4.stm32n6xx_hal_ltdc.h.21.ae1eb09930e7e550e48e418ac5849e4d
                           .group:00000000 wm4.stm32n6xx_hal_ltdc.h.1002.b13ede7fc94ed5ad1c6768a157d2149a
                           .group:00000000 wm4.stm32n6xx_ll_usb.h.21.d518a5d97876c2ff49040c20a2c4a120
                           .group:00000000 wm4.stm32n6xx_hal_pcd.h.155.27040aac6844effe2af8c180caf1dd2e
                           .group:00000000 wm4.stm32n6xx_hal_pwr.h.21.cdb73e4869c3fed3fc84f901ec0e5f0a
                           .group:00000000 wm4.stm32n6xx_hal_pwr_ex.h.21.1a673224a58b0c1e5fad8eeda6514208
                           .group:00000000 wm4.stm32n6xx_hal_ramcfg.h.21.a62dfbb4d2c14e9a8c634a215e37bd3d
                           .group:00000000 wm4.stm32n6xx_hal_spi.h.21.9f810303326e2d91749800e9911f8e4d
                           .group:00000000 wm4.stm32n6xx_hal_spi.h.906.93ec0695066db4253cdbcb7d84358a0b
                           .group:00000000 wm4.stm32n6xx_hal_tim.h.21.839dd2b2a70382fb2c44f8f293a84d5f
                           .group:00000000 wm4.stm32n6xx_hal_tim_ex.h.21.e372d5ac63c13441211ea4ecbd353150
                           .group:00000000 wm4.stm32n6xx_hal_uart.h.21.230f549bfa0d5ebfd77bfb311b2aca15
                           .group:00000000 wm4.stm32n6xx_hal_uart_ex.h.21.a0d5511e1d0703b7b5278c8f5472b96d
                           .group:00000000 wm4.stm32n6xx_hal_xspi.h.21.e17898be2073b6b6b19faf30b4e304e9
                           .group:00000000 wm4.stm32n6xx_hal_cacheaxi.h.21.7c3375b7903ec42376e4883320997f74
                           .group:00000000 wm4.stm32n6xx_hal_gpu2d.h.21.48d0249122abad294a630c39cc4ebaed
                           .group:00000000 wm4.stm32n6xx_hal.h.81.5e59143eba07faca3e9aeaa5470826c8

UNDEFINED SYMBOLS
assert_failed
