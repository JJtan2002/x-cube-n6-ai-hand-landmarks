ARM GAS  /tmp/cc6xdUDh.s 			page 1


   1              		.arch armv8.1-m.main
   2              		.fpu fpv5-d16
   3              		.arch_extension dsp
   4              		.arch_extension fp
   5              		.arch_extension fp.dp
   6              		.arch_extension mve
   7              		.arch_extension mve.fp
   8              		.eabi_attribute 5, "cortex-m55"
   9              		.eabi_attribute 28, 1
  10              		.eabi_attribute 20, 1
  11              		.eabi_attribute 21, 1
  12              		.eabi_attribute 23, 3
  13              		.eabi_attribute 24, 1
  14              		.eabi_attribute 25, 1
  15              		.eabi_attribute 26, 1
  16              		.eabi_attribute 30, 4
  17              		.eabi_attribute 34, 1
  18              		.eabi_attribute 38, 1
  19              		.eabi_attribute 18, 4
  20              		.file	"timers.c"
  21              		.text
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.file 1 "Lib/FreeRTOS/Source/timers.c"
  25              		.section	.text.prvInsertTimerInActiveList,"ax",%progbits
  26              		.align	1
  27              		.syntax unified
  28              		.thumb
  29              		.thumb_func
  31              	prvInsertTimerInActiveList:
  32              	.LVL0:
  33              	.LFB18:
   1:Lib/FreeRTOS/Source/timers.c **** /*
   2:Lib/FreeRTOS/Source/timers.c ****  * FreeRTOS Kernel V10.6.2
   3:Lib/FreeRTOS/Source/timers.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Lib/FreeRTOS/Source/timers.c ****  *
   5:Lib/FreeRTOS/Source/timers.c ****  * SPDX-License-Identifier: MIT
   6:Lib/FreeRTOS/Source/timers.c ****  *
   7:Lib/FreeRTOS/Source/timers.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:Lib/FreeRTOS/Source/timers.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:Lib/FreeRTOS/Source/timers.c ****  * the Software without restriction, including without limitation the rights to
  10:Lib/FreeRTOS/Source/timers.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:Lib/FreeRTOS/Source/timers.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:Lib/FreeRTOS/Source/timers.c ****  * subject to the following conditions:
  13:Lib/FreeRTOS/Source/timers.c ****  *
  14:Lib/FreeRTOS/Source/timers.c ****  * The above copyright notice and this permission notice shall be included in all
  15:Lib/FreeRTOS/Source/timers.c ****  * copies or substantial portions of the Software.
  16:Lib/FreeRTOS/Source/timers.c ****  *
  17:Lib/FreeRTOS/Source/timers.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:Lib/FreeRTOS/Source/timers.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:Lib/FreeRTOS/Source/timers.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:Lib/FreeRTOS/Source/timers.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:Lib/FreeRTOS/Source/timers.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:Lib/FreeRTOS/Source/timers.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:Lib/FreeRTOS/Source/timers.c ****  *
  24:Lib/FreeRTOS/Source/timers.c ****  * https://www.FreeRTOS.org
  25:Lib/FreeRTOS/Source/timers.c ****  * https://github.com/FreeRTOS
ARM GAS  /tmp/cc6xdUDh.s 			page 2


  26:Lib/FreeRTOS/Source/timers.c ****  *
  27:Lib/FreeRTOS/Source/timers.c ****  */
  28:Lib/FreeRTOS/Source/timers.c **** 
  29:Lib/FreeRTOS/Source/timers.c **** /* Standard includes. */
  30:Lib/FreeRTOS/Source/timers.c **** #include <stdlib.h>
  31:Lib/FreeRTOS/Source/timers.c **** 
  32:Lib/FreeRTOS/Source/timers.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Lib/FreeRTOS/Source/timers.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  34:Lib/FreeRTOS/Source/timers.c ****  * task.h is included from an application file. */
  35:Lib/FreeRTOS/Source/timers.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Lib/FreeRTOS/Source/timers.c **** 
  37:Lib/FreeRTOS/Source/timers.c **** #include "FreeRTOS.h"
  38:Lib/FreeRTOS/Source/timers.c **** #include "task.h"
  39:Lib/FreeRTOS/Source/timers.c **** #include "queue.h"
  40:Lib/FreeRTOS/Source/timers.c **** #include "timers.h"
  41:Lib/FreeRTOS/Source/timers.c **** 
  42:Lib/FreeRTOS/Source/timers.c **** #if ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 0 )
  43:Lib/FreeRTOS/Source/timers.c ****     #error configUSE_TIMERS must be set to 1 to make the xTimerPendFunctionCall() function availabl
  44:Lib/FreeRTOS/Source/timers.c **** #endif
  45:Lib/FreeRTOS/Source/timers.c **** 
  46:Lib/FreeRTOS/Source/timers.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  47:Lib/FreeRTOS/Source/timers.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  48:Lib/FreeRTOS/Source/timers.c ****  * for the header files above, but not in this file, in order to generate the
  49:Lib/FreeRTOS/Source/timers.c ****  * correct privileged Vs unprivileged linkage and placement. */
  50:Lib/FreeRTOS/Source/timers.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e9021 !e961 !e750. */
  51:Lib/FreeRTOS/Source/timers.c **** 
  52:Lib/FreeRTOS/Source/timers.c **** 
  53:Lib/FreeRTOS/Source/timers.c **** /* This entire source file will be skipped if the application is not configured
  54:Lib/FreeRTOS/Source/timers.c ****  * to include software timer functionality.  This #if is closed at the very bottom
  55:Lib/FreeRTOS/Source/timers.c ****  * of this file.  If you want to include software timer functionality then ensure
  56:Lib/FreeRTOS/Source/timers.c ****  * configUSE_TIMERS is set to 1 in FreeRTOSConfig.h. */
  57:Lib/FreeRTOS/Source/timers.c **** #if ( configUSE_TIMERS == 1 )
  58:Lib/FreeRTOS/Source/timers.c **** 
  59:Lib/FreeRTOS/Source/timers.c **** /* Misc definitions. */
  60:Lib/FreeRTOS/Source/timers.c ****     #define tmrNO_DELAY                    ( ( TickType_t ) 0U )
  61:Lib/FreeRTOS/Source/timers.c ****     #define tmrMAX_TIME_BEFORE_OVERFLOW    ( ( TickType_t ) -1 )
  62:Lib/FreeRTOS/Source/timers.c **** 
  63:Lib/FreeRTOS/Source/timers.c **** /* The name assigned to the timer service task.  This can be overridden by
  64:Lib/FreeRTOS/Source/timers.c ****  * defining trmTIMER_SERVICE_TASK_NAME in FreeRTOSConfig.h. */
  65:Lib/FreeRTOS/Source/timers.c ****     #ifndef configTIMER_SERVICE_TASK_NAME
  66:Lib/FreeRTOS/Source/timers.c ****         #define configTIMER_SERVICE_TASK_NAME    "Tmr Svc"
  67:Lib/FreeRTOS/Source/timers.c ****     #endif
  68:Lib/FreeRTOS/Source/timers.c **** 
  69:Lib/FreeRTOS/Source/timers.c **** /* Bit definitions used in the ucStatus member of a timer structure. */
  70:Lib/FreeRTOS/Source/timers.c ****     #define tmrSTATUS_IS_ACTIVE                  ( ( uint8_t ) 0x01 )
  71:Lib/FreeRTOS/Source/timers.c ****     #define tmrSTATUS_IS_STATICALLY_ALLOCATED    ( ( uint8_t ) 0x02 )
  72:Lib/FreeRTOS/Source/timers.c ****     #define tmrSTATUS_IS_AUTORELOAD              ( ( uint8_t ) 0x04 )
  73:Lib/FreeRTOS/Source/timers.c **** 
  74:Lib/FreeRTOS/Source/timers.c **** /* The definition of the timers themselves. */
  75:Lib/FreeRTOS/Source/timers.c ****     typedef struct tmrTimerControl                  /* The old naming convention is used to prevent
  76:Lib/FreeRTOS/Source/timers.c ****     {
  77:Lib/FreeRTOS/Source/timers.c ****         const char * pcTimerName;                   /**< Text name.  This is not used by the kernel
  78:Lib/FreeRTOS/Source/timers.c ****         ListItem_t xTimerListItem;                  /**< Standard linked list item as used by all k
  79:Lib/FreeRTOS/Source/timers.c ****         TickType_t xTimerPeriodInTicks;             /**< How quickly and often the timer expires. *
  80:Lib/FreeRTOS/Source/timers.c ****         void * pvTimerID;                           /**< An ID to identify the timer.  This allows 
  81:Lib/FreeRTOS/Source/timers.c ****         TimerCallbackFunction_t pxCallbackFunction; /**< The function that will be called when the 
  82:Lib/FreeRTOS/Source/timers.c ****         #if ( configUSE_TRACE_FACILITY == 1 )
ARM GAS  /tmp/cc6xdUDh.s 			page 3


  83:Lib/FreeRTOS/Source/timers.c ****             UBaseType_t uxTimerNumber;              /**< An ID assigned by trace tools such as Free
  84:Lib/FreeRTOS/Source/timers.c ****         #endif
  85:Lib/FreeRTOS/Source/timers.c ****         uint8_t ucStatus;                           /**< Holds bits to say if the timer was statica
  86:Lib/FreeRTOS/Source/timers.c ****     } xTIMER;
  87:Lib/FreeRTOS/Source/timers.c **** 
  88:Lib/FreeRTOS/Source/timers.c **** /* The old xTIMER name is maintained above then typedefed to the new Timer_t
  89:Lib/FreeRTOS/Source/timers.c ****  * name below to enable the use of older kernel aware debuggers. */
  90:Lib/FreeRTOS/Source/timers.c ****     typedef xTIMER Timer_t;
  91:Lib/FreeRTOS/Source/timers.c **** 
  92:Lib/FreeRTOS/Source/timers.c **** /* The definition of messages that can be sent and received on the timer queue.
  93:Lib/FreeRTOS/Source/timers.c ****  * Two types of message can be queued - messages that manipulate a software timer,
  94:Lib/FreeRTOS/Source/timers.c ****  * and messages that request the execution of a non-timer related callback.  The
  95:Lib/FreeRTOS/Source/timers.c ****  * two message types are defined in two separate structures, xTimerParametersType
  96:Lib/FreeRTOS/Source/timers.c ****  * and xCallbackParametersType respectively. */
  97:Lib/FreeRTOS/Source/timers.c ****     typedef struct tmrTimerParameters
  98:Lib/FreeRTOS/Source/timers.c ****     {
  99:Lib/FreeRTOS/Source/timers.c ****         TickType_t xMessageValue; /**< An optional value used by a subset of commands, for example,
 100:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer;        /**< The timer to which the command will be applied. */
 101:Lib/FreeRTOS/Source/timers.c ****     } TimerParameter_t;
 102:Lib/FreeRTOS/Source/timers.c **** 
 103:Lib/FreeRTOS/Source/timers.c **** 
 104:Lib/FreeRTOS/Source/timers.c ****     typedef struct tmrCallbackParameters
 105:Lib/FreeRTOS/Source/timers.c ****     {
 106:Lib/FreeRTOS/Source/timers.c ****         PendedFunction_t pxCallbackFunction; /* << The callback function to execute. */
 107:Lib/FreeRTOS/Source/timers.c ****         void * pvParameter1;                 /* << The value that will be used as the callback func
 108:Lib/FreeRTOS/Source/timers.c ****         uint32_t ulParameter2;               /* << The value that will be used as the callback func
 109:Lib/FreeRTOS/Source/timers.c ****     } CallbackParameters_t;
 110:Lib/FreeRTOS/Source/timers.c **** 
 111:Lib/FreeRTOS/Source/timers.c **** /* The structure that contains the two message types, along with an identifier
 112:Lib/FreeRTOS/Source/timers.c ****  * that is used to determine which message type is valid. */
 113:Lib/FreeRTOS/Source/timers.c ****     typedef struct tmrTimerQueueMessage
 114:Lib/FreeRTOS/Source/timers.c ****     {
 115:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xMessageID; /**< The command being sent to the timer service task. */
 116:Lib/FreeRTOS/Source/timers.c ****         union
 117:Lib/FreeRTOS/Source/timers.c ****         {
 118:Lib/FreeRTOS/Source/timers.c ****             TimerParameter_t xTimerParameters;
 119:Lib/FreeRTOS/Source/timers.c **** 
 120:Lib/FreeRTOS/Source/timers.c ****             /* Don't include xCallbackParameters if it is not going to be used as
 121:Lib/FreeRTOS/Source/timers.c ****              * it makes the structure (and therefore the timer queue) larger. */
 122:Lib/FreeRTOS/Source/timers.c ****             #if ( INCLUDE_xTimerPendFunctionCall == 1 )
 123:Lib/FreeRTOS/Source/timers.c ****                 CallbackParameters_t xCallbackParameters;
 124:Lib/FreeRTOS/Source/timers.c ****             #endif /* INCLUDE_xTimerPendFunctionCall */
 125:Lib/FreeRTOS/Source/timers.c ****         } u;
 126:Lib/FreeRTOS/Source/timers.c ****     } DaemonTaskMessage_t;
 127:Lib/FreeRTOS/Source/timers.c **** 
 128:Lib/FreeRTOS/Source/timers.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 129:Lib/FreeRTOS/Source/timers.c ****  * which static variables must be declared volatile. */
 130:Lib/FreeRTOS/Source/timers.c **** 
 131:Lib/FreeRTOS/Source/timers.c **** /* The list in which active timers are stored.  Timers are referenced in expire
 132:Lib/FreeRTOS/Source/timers.c ****  * time order, with the nearest expiry time at the front of the list.  Only the
 133:Lib/FreeRTOS/Source/timers.c ****  * timer service task is allowed to access these lists.
 134:Lib/FreeRTOS/Source/timers.c ****  * xActiveTimerList1 and xActiveTimerList2 could be at function scope but that
 135:Lib/FreeRTOS/Source/timers.c ****  * breaks some kernel aware debuggers, and debuggers that reply on removing the
 136:Lib/FreeRTOS/Source/timers.c ****  * static qualifier. */
 137:Lib/FreeRTOS/Source/timers.c ****     PRIVILEGED_DATA static List_t xActiveTimerList1;
 138:Lib/FreeRTOS/Source/timers.c ****     PRIVILEGED_DATA static List_t xActiveTimerList2;
 139:Lib/FreeRTOS/Source/timers.c ****     PRIVILEGED_DATA static List_t * pxCurrentTimerList;
ARM GAS  /tmp/cc6xdUDh.s 			page 4


 140:Lib/FreeRTOS/Source/timers.c ****     PRIVILEGED_DATA static List_t * pxOverflowTimerList;
 141:Lib/FreeRTOS/Source/timers.c **** 
 142:Lib/FreeRTOS/Source/timers.c **** /* A queue that is used to send commands to the timer service task. */
 143:Lib/FreeRTOS/Source/timers.c ****     PRIVILEGED_DATA static QueueHandle_t xTimerQueue = NULL;
 144:Lib/FreeRTOS/Source/timers.c ****     PRIVILEGED_DATA static TaskHandle_t xTimerTaskHandle = NULL;
 145:Lib/FreeRTOS/Source/timers.c **** 
 146:Lib/FreeRTOS/Source/timers.c **** /*lint -restore */
 147:Lib/FreeRTOS/Source/timers.c **** 
 148:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 149:Lib/FreeRTOS/Source/timers.c **** 
 150:Lib/FreeRTOS/Source/timers.c **** /*
 151:Lib/FreeRTOS/Source/timers.c ****  * Initialise the infrastructure used by the timer service task if it has not
 152:Lib/FreeRTOS/Source/timers.c ****  * been initialised already.
 153:Lib/FreeRTOS/Source/timers.c ****  */
 154:Lib/FreeRTOS/Source/timers.c ****     static void prvCheckForValidListAndQueue( void ) PRIVILEGED_FUNCTION;
 155:Lib/FreeRTOS/Source/timers.c **** 
 156:Lib/FreeRTOS/Source/timers.c **** /*
 157:Lib/FreeRTOS/Source/timers.c ****  * The timer service task (daemon).  Timer functionality is controlled by this
 158:Lib/FreeRTOS/Source/timers.c ****  * task.  Other tasks communicate with the timer service task using the
 159:Lib/FreeRTOS/Source/timers.c ****  * xTimerQueue queue.
 160:Lib/FreeRTOS/Source/timers.c ****  */
 161:Lib/FreeRTOS/Source/timers.c ****     static portTASK_FUNCTION_PROTO( prvTimerTask, pvParameters ) PRIVILEGED_FUNCTION;
 162:Lib/FreeRTOS/Source/timers.c **** 
 163:Lib/FreeRTOS/Source/timers.c **** /*
 164:Lib/FreeRTOS/Source/timers.c ****  * Called by the timer service task to interpret and process a command it
 165:Lib/FreeRTOS/Source/timers.c ****  * received on the timer queue.
 166:Lib/FreeRTOS/Source/timers.c ****  */
 167:Lib/FreeRTOS/Source/timers.c ****     static void prvProcessReceivedCommands( void ) PRIVILEGED_FUNCTION;
 168:Lib/FreeRTOS/Source/timers.c **** 
 169:Lib/FreeRTOS/Source/timers.c **** /*
 170:Lib/FreeRTOS/Source/timers.c ****  * Insert the timer into either xActiveTimerList1, or xActiveTimerList2,
 171:Lib/FreeRTOS/Source/timers.c ****  * depending on if the expire time causes a timer counter overflow.
 172:Lib/FreeRTOS/Source/timers.c ****  */
 173:Lib/FreeRTOS/Source/timers.c ****     static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
 174:Lib/FreeRTOS/Source/timers.c ****                                                   const TickType_t xNextExpiryTime,
 175:Lib/FreeRTOS/Source/timers.c ****                                                   const TickType_t xTimeNow,
 176:Lib/FreeRTOS/Source/timers.c ****                                                   const TickType_t xCommandTime ) PRIVILEGED_FUNCTI
 177:Lib/FreeRTOS/Source/timers.c **** 
 178:Lib/FreeRTOS/Source/timers.c **** /*
 179:Lib/FreeRTOS/Source/timers.c ****  * Reload the specified auto-reload timer.  If the reloading is backlogged,
 180:Lib/FreeRTOS/Source/timers.c ****  * clear the backlog, calling the callback for each additional reload.  When
 181:Lib/FreeRTOS/Source/timers.c ****  * this function returns, the next expiry time is after xTimeNow.
 182:Lib/FreeRTOS/Source/timers.c ****  */
 183:Lib/FreeRTOS/Source/timers.c ****     static void prvReloadTimer( Timer_t * const pxTimer,
 184:Lib/FreeRTOS/Source/timers.c ****                                 TickType_t xExpiredTime,
 185:Lib/FreeRTOS/Source/timers.c ****                                 const TickType_t xTimeNow ) PRIVILEGED_FUNCTION;
 186:Lib/FreeRTOS/Source/timers.c **** 
 187:Lib/FreeRTOS/Source/timers.c **** /*
 188:Lib/FreeRTOS/Source/timers.c ****  * An active timer has reached its expire time.  Reload the timer if it is an
 189:Lib/FreeRTOS/Source/timers.c ****  * auto-reload timer, then call its callback.
 190:Lib/FreeRTOS/Source/timers.c ****  */
 191:Lib/FreeRTOS/Source/timers.c ****     static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
 192:Lib/FreeRTOS/Source/timers.c ****                                         const TickType_t xTimeNow ) PRIVILEGED_FUNCTION;
 193:Lib/FreeRTOS/Source/timers.c **** 
 194:Lib/FreeRTOS/Source/timers.c **** /*
 195:Lib/FreeRTOS/Source/timers.c ****  * The tick count has overflowed.  Switch the timer lists after ensuring the
 196:Lib/FreeRTOS/Source/timers.c ****  * current timer list does not still reference some timers.
ARM GAS  /tmp/cc6xdUDh.s 			page 5


 197:Lib/FreeRTOS/Source/timers.c ****  */
 198:Lib/FreeRTOS/Source/timers.c ****     static void prvSwitchTimerLists( void ) PRIVILEGED_FUNCTION;
 199:Lib/FreeRTOS/Source/timers.c **** 
 200:Lib/FreeRTOS/Source/timers.c **** /*
 201:Lib/FreeRTOS/Source/timers.c ****  * Obtain the current tick count, setting *pxTimerListsWereSwitched to pdTRUE
 202:Lib/FreeRTOS/Source/timers.c ****  * if a tick count overflow occurred since prvSampleTimeNow() was last called.
 203:Lib/FreeRTOS/Source/timers.c ****  */
 204:Lib/FreeRTOS/Source/timers.c ****     static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched ) PRIVILEGED_FU
 205:Lib/FreeRTOS/Source/timers.c **** 
 206:Lib/FreeRTOS/Source/timers.c **** /*
 207:Lib/FreeRTOS/Source/timers.c ****  * If the timer list contains any active timers then return the expire time of
 208:Lib/FreeRTOS/Source/timers.c ****  * the timer that will expire first and set *pxListWasEmpty to false.  If the
 209:Lib/FreeRTOS/Source/timers.c ****  * timer list does not contain any timers then return 0 and set *pxListWasEmpty
 210:Lib/FreeRTOS/Source/timers.c ****  * to pdTRUE.
 211:Lib/FreeRTOS/Source/timers.c ****  */
 212:Lib/FreeRTOS/Source/timers.c ****     static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty ) PRIVILEGED_FUNCTION
 213:Lib/FreeRTOS/Source/timers.c **** 
 214:Lib/FreeRTOS/Source/timers.c **** /*
 215:Lib/FreeRTOS/Source/timers.c ****  * If a timer has expired, process it.  Otherwise, block the timer service task
 216:Lib/FreeRTOS/Source/timers.c ****  * until either a timer does expire or a command is received.
 217:Lib/FreeRTOS/Source/timers.c ****  */
 218:Lib/FreeRTOS/Source/timers.c ****     static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
 219:Lib/FreeRTOS/Source/timers.c ****                                             BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;
 220:Lib/FreeRTOS/Source/timers.c **** 
 221:Lib/FreeRTOS/Source/timers.c **** /*
 222:Lib/FreeRTOS/Source/timers.c ****  * Called after a Timer_t structure has been allocated either statically or
 223:Lib/FreeRTOS/Source/timers.c ****  * dynamically to fill in the structure's members.
 224:Lib/FreeRTOS/Source/timers.c ****  */
 225:Lib/FreeRTOS/Source/timers.c ****     static void prvInitialiseNewTimer( const char * const pcTimerName, /*lint !e971 Unqualified cha
 226:Lib/FreeRTOS/Source/timers.c ****                                        const TickType_t xTimerPeriodInTicks,
 227:Lib/FreeRTOS/Source/timers.c ****                                        const BaseType_t xAutoReload,
 228:Lib/FreeRTOS/Source/timers.c ****                                        void * const pvTimerID,
 229:Lib/FreeRTOS/Source/timers.c ****                                        TimerCallbackFunction_t pxCallbackFunction,
 230:Lib/FreeRTOS/Source/timers.c ****                                        Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
 231:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 232:Lib/FreeRTOS/Source/timers.c **** 
 233:Lib/FreeRTOS/Source/timers.c ****     BaseType_t xTimerCreateTimerTask( void )
 234:Lib/FreeRTOS/Source/timers.c ****     {
 235:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xReturn = pdFAIL;
 236:Lib/FreeRTOS/Source/timers.c **** 
 237:Lib/FreeRTOS/Source/timers.c ****         /* This function is called when the scheduler is started if
 238:Lib/FreeRTOS/Source/timers.c ****          * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
 239:Lib/FreeRTOS/Source/timers.c ****          * timer service task has been created/initialised.  If timers have already
 240:Lib/FreeRTOS/Source/timers.c ****          * been created then the initialisation will already have been performed. */
 241:Lib/FreeRTOS/Source/timers.c ****         prvCheckForValidListAndQueue();
 242:Lib/FreeRTOS/Source/timers.c **** 
 243:Lib/FreeRTOS/Source/timers.c ****         if( xTimerQueue != NULL )
 244:Lib/FreeRTOS/Source/timers.c ****         {
 245:Lib/FreeRTOS/Source/timers.c ****             #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 246:Lib/FreeRTOS/Source/timers.c ****             {
 247:Lib/FreeRTOS/Source/timers.c ****                 StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 248:Lib/FreeRTOS/Source/timers.c ****                 StackType_t * pxTimerTaskStackBuffer = NULL;
 249:Lib/FreeRTOS/Source/timers.c ****                 uint32_t ulTimerTaskStackSize;
 250:Lib/FreeRTOS/Source/timers.c **** 
 251:Lib/FreeRTOS/Source/timers.c ****                 vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ul
 252:Lib/FreeRTOS/Source/timers.c ****                 xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 253:Lib/FreeRTOS/Source/timers.c ****                                                       configTIMER_SERVICE_TASK_NAME,
ARM GAS  /tmp/cc6xdUDh.s 			page 6


 254:Lib/FreeRTOS/Source/timers.c ****                                                       ulTimerTaskStackSize,
 255:Lib/FreeRTOS/Source/timers.c ****                                                       NULL,
 256:Lib/FreeRTOS/Source/timers.c ****                                                       ( ( UBaseType_t ) configTIMER_TASK_PRIORITY )
 257:Lib/FreeRTOS/Source/timers.c ****                                                       pxTimerTaskStackBuffer,
 258:Lib/FreeRTOS/Source/timers.c ****                                                       pxTimerTaskTCBBuffer );
 259:Lib/FreeRTOS/Source/timers.c **** 
 260:Lib/FreeRTOS/Source/timers.c ****                 if( xTimerTaskHandle != NULL )
 261:Lib/FreeRTOS/Source/timers.c ****                 {
 262:Lib/FreeRTOS/Source/timers.c ****                     xReturn = pdPASS;
 263:Lib/FreeRTOS/Source/timers.c ****                 }
 264:Lib/FreeRTOS/Source/timers.c ****             }
 265:Lib/FreeRTOS/Source/timers.c ****             #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 266:Lib/FreeRTOS/Source/timers.c ****             {
 267:Lib/FreeRTOS/Source/timers.c ****                 xReturn = xTaskCreate( prvTimerTask,
 268:Lib/FreeRTOS/Source/timers.c ****                                        configTIMER_SERVICE_TASK_NAME,
 269:Lib/FreeRTOS/Source/timers.c ****                                        configTIMER_TASK_STACK_DEPTH,
 270:Lib/FreeRTOS/Source/timers.c ****                                        NULL,
 271:Lib/FreeRTOS/Source/timers.c ****                                        ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEG
 272:Lib/FreeRTOS/Source/timers.c ****                                        &xTimerTaskHandle );
 273:Lib/FreeRTOS/Source/timers.c ****             }
 274:Lib/FreeRTOS/Source/timers.c ****             #endif /* configSUPPORT_STATIC_ALLOCATION */
 275:Lib/FreeRTOS/Source/timers.c ****         }
 276:Lib/FreeRTOS/Source/timers.c ****         else
 277:Lib/FreeRTOS/Source/timers.c ****         {
 278:Lib/FreeRTOS/Source/timers.c ****             mtCOVERAGE_TEST_MARKER();
 279:Lib/FreeRTOS/Source/timers.c ****         }
 280:Lib/FreeRTOS/Source/timers.c **** 
 281:Lib/FreeRTOS/Source/timers.c ****         configASSERT( xReturn );
 282:Lib/FreeRTOS/Source/timers.c ****         return xReturn;
 283:Lib/FreeRTOS/Source/timers.c ****     }
 284:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 285:Lib/FreeRTOS/Source/timers.c **** 
 286:Lib/FreeRTOS/Source/timers.c ****     #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 287:Lib/FreeRTOS/Source/timers.c **** 
 288:Lib/FreeRTOS/Source/timers.c ****         TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char t
 289:Lib/FreeRTOS/Source/timers.c ****                                     const TickType_t xTimerPeriodInTicks,
 290:Lib/FreeRTOS/Source/timers.c ****                                     const BaseType_t xAutoReload,
 291:Lib/FreeRTOS/Source/timers.c ****                                     void * const pvTimerID,
 292:Lib/FreeRTOS/Source/timers.c ****                                     TimerCallbackFunction_t pxCallbackFunction )
 293:Lib/FreeRTOS/Source/timers.c ****         {
 294:Lib/FreeRTOS/Source/timers.c ****             Timer_t * pxNewTimer;
 295:Lib/FreeRTOS/Source/timers.c **** 
 296:Lib/FreeRTOS/Source/timers.c ****             pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All 
 297:Lib/FreeRTOS/Source/timers.c **** 
 298:Lib/FreeRTOS/Source/timers.c ****             if( pxNewTimer != NULL )
 299:Lib/FreeRTOS/Source/timers.c ****             {
 300:Lib/FreeRTOS/Source/timers.c ****                 /* Status is thus far zero as the timer is not created statically
 301:Lib/FreeRTOS/Source/timers.c ****                  * and has not been started.  The auto-reload bit may get set in
 302:Lib/FreeRTOS/Source/timers.c ****                  * prvInitialiseNewTimer. */
 303:Lib/FreeRTOS/Source/timers.c ****                 pxNewTimer->ucStatus = 0x00;
 304:Lib/FreeRTOS/Source/timers.c ****                 prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, px
 305:Lib/FreeRTOS/Source/timers.c ****             }
 306:Lib/FreeRTOS/Source/timers.c **** 
 307:Lib/FreeRTOS/Source/timers.c ****             return pxNewTimer;
 308:Lib/FreeRTOS/Source/timers.c ****         }
 309:Lib/FreeRTOS/Source/timers.c **** 
 310:Lib/FreeRTOS/Source/timers.c ****     #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
ARM GAS  /tmp/cc6xdUDh.s 			page 7


 311:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 312:Lib/FreeRTOS/Source/timers.c **** 
 313:Lib/FreeRTOS/Source/timers.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 314:Lib/FreeRTOS/Source/timers.c **** 
 315:Lib/FreeRTOS/Source/timers.c ****         TimerHandle_t xTimerCreateStatic( const char * const pcTimerName, /*lint !e971 Unqualified 
 316:Lib/FreeRTOS/Source/timers.c ****                                           const TickType_t xTimerPeriodInTicks,
 317:Lib/FreeRTOS/Source/timers.c ****                                           const BaseType_t xAutoReload,
 318:Lib/FreeRTOS/Source/timers.c ****                                           void * const pvTimerID,
 319:Lib/FreeRTOS/Source/timers.c ****                                           TimerCallbackFunction_t pxCallbackFunction,
 320:Lib/FreeRTOS/Source/timers.c ****                                           StaticTimer_t * pxTimerBuffer )
 321:Lib/FreeRTOS/Source/timers.c ****         {
 322:Lib/FreeRTOS/Source/timers.c ****             Timer_t * pxNewTimer;
 323:Lib/FreeRTOS/Source/timers.c **** 
 324:Lib/FreeRTOS/Source/timers.c ****             #if ( configASSERT_DEFINED == 1 )
 325:Lib/FreeRTOS/Source/timers.c ****             {
 326:Lib/FreeRTOS/Source/timers.c ****                 /* Sanity check that the size of the structure used to declare a
 327:Lib/FreeRTOS/Source/timers.c ****                  * variable of type StaticTimer_t equals the size of the real timer
 328:Lib/FreeRTOS/Source/timers.c ****                  * structure. */
 329:Lib/FreeRTOS/Source/timers.c ****                 volatile size_t xSize = sizeof( StaticTimer_t );
 330:Lib/FreeRTOS/Source/timers.c ****                 configASSERT( xSize == sizeof( Timer_t ) );
 331:Lib/FreeRTOS/Source/timers.c ****                 ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 332:Lib/FreeRTOS/Source/timers.c ****             }
 333:Lib/FreeRTOS/Source/timers.c ****             #endif /* configASSERT_DEFINED */
 334:Lib/FreeRTOS/Source/timers.c **** 
 335:Lib/FreeRTOS/Source/timers.c ****             /* A pointer to a StaticTimer_t structure MUST be provided, use it. */
 336:Lib/FreeRTOS/Source/timers.c ****             configASSERT( pxTimerBuffer );
 337:Lib/FreeRTOS/Source/timers.c ****             pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointe
 338:Lib/FreeRTOS/Source/timers.c **** 
 339:Lib/FreeRTOS/Source/timers.c ****             if( pxNewTimer != NULL )
 340:Lib/FreeRTOS/Source/timers.c ****             {
 341:Lib/FreeRTOS/Source/timers.c ****                 /* Timers can be created statically or dynamically so note this
 342:Lib/FreeRTOS/Source/timers.c ****                  * timer was created statically in case it is later deleted.  The
 343:Lib/FreeRTOS/Source/timers.c ****                  * auto-reload bit may get set in prvInitialiseNewTimer(). */
 344:Lib/FreeRTOS/Source/timers.c ****                 pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 345:Lib/FreeRTOS/Source/timers.c **** 
 346:Lib/FreeRTOS/Source/timers.c ****                 prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, px
 347:Lib/FreeRTOS/Source/timers.c ****             }
 348:Lib/FreeRTOS/Source/timers.c **** 
 349:Lib/FreeRTOS/Source/timers.c ****             return pxNewTimer;
 350:Lib/FreeRTOS/Source/timers.c ****         }
 351:Lib/FreeRTOS/Source/timers.c **** 
 352:Lib/FreeRTOS/Source/timers.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
 353:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 354:Lib/FreeRTOS/Source/timers.c **** 
 355:Lib/FreeRTOS/Source/timers.c ****     static void prvInitialiseNewTimer( const char * const pcTimerName, /*lint !e971 Unqualified cha
 356:Lib/FreeRTOS/Source/timers.c ****                                        const TickType_t xTimerPeriodInTicks,
 357:Lib/FreeRTOS/Source/timers.c ****                                        const BaseType_t xAutoReload,
 358:Lib/FreeRTOS/Source/timers.c ****                                        void * const pvTimerID,
 359:Lib/FreeRTOS/Source/timers.c ****                                        TimerCallbackFunction_t pxCallbackFunction,
 360:Lib/FreeRTOS/Source/timers.c ****                                        Timer_t * pxNewTimer )
 361:Lib/FreeRTOS/Source/timers.c ****     {
 362:Lib/FreeRTOS/Source/timers.c ****         /* 0 is not a valid value for xTimerPeriodInTicks. */
 363:Lib/FreeRTOS/Source/timers.c ****         configASSERT( ( xTimerPeriodInTicks > 0 ) );
 364:Lib/FreeRTOS/Source/timers.c **** 
 365:Lib/FreeRTOS/Source/timers.c ****         /* Ensure the infrastructure used by the timer service task has been
 366:Lib/FreeRTOS/Source/timers.c ****          * created/initialised. */
 367:Lib/FreeRTOS/Source/timers.c ****         prvCheckForValidListAndQueue();
ARM GAS  /tmp/cc6xdUDh.s 			page 8


 368:Lib/FreeRTOS/Source/timers.c **** 
 369:Lib/FreeRTOS/Source/timers.c ****         /* Initialise the timer structure members using the function
 370:Lib/FreeRTOS/Source/timers.c ****          * parameters. */
 371:Lib/FreeRTOS/Source/timers.c ****         pxNewTimer->pcTimerName = pcTimerName;
 372:Lib/FreeRTOS/Source/timers.c ****         pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 373:Lib/FreeRTOS/Source/timers.c ****         pxNewTimer->pvTimerID = pvTimerID;
 374:Lib/FreeRTOS/Source/timers.c ****         pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 375:Lib/FreeRTOS/Source/timers.c ****         vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 376:Lib/FreeRTOS/Source/timers.c **** 
 377:Lib/FreeRTOS/Source/timers.c ****         if( xAutoReload != pdFALSE )
 378:Lib/FreeRTOS/Source/timers.c ****         {
 379:Lib/FreeRTOS/Source/timers.c ****             pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 380:Lib/FreeRTOS/Source/timers.c ****         }
 381:Lib/FreeRTOS/Source/timers.c **** 
 382:Lib/FreeRTOS/Source/timers.c ****         traceTIMER_CREATE( pxNewTimer );
 383:Lib/FreeRTOS/Source/timers.c ****     }
 384:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 385:Lib/FreeRTOS/Source/timers.c **** 
 386:Lib/FreeRTOS/Source/timers.c ****     BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
 387:Lib/FreeRTOS/Source/timers.c ****                                      const BaseType_t xCommandID,
 388:Lib/FreeRTOS/Source/timers.c ****                                      const TickType_t xOptionalValue,
 389:Lib/FreeRTOS/Source/timers.c ****                                      BaseType_t * const pxHigherPriorityTaskWoken,
 390:Lib/FreeRTOS/Source/timers.c ****                                      const TickType_t xTicksToWait )
 391:Lib/FreeRTOS/Source/timers.c ****     {
 392:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xReturn = pdFAIL;
 393:Lib/FreeRTOS/Source/timers.c ****         DaemonTaskMessage_t xMessage;
 394:Lib/FreeRTOS/Source/timers.c **** 
 395:Lib/FreeRTOS/Source/timers.c ****         configASSERT( xTimer );
 396:Lib/FreeRTOS/Source/timers.c **** 
 397:Lib/FreeRTOS/Source/timers.c ****         /* Send a message to the timer service task to perform a particular action
 398:Lib/FreeRTOS/Source/timers.c ****          * on a particular timer definition. */
 399:Lib/FreeRTOS/Source/timers.c ****         if( xTimerQueue != NULL )
 400:Lib/FreeRTOS/Source/timers.c ****         {
 401:Lib/FreeRTOS/Source/timers.c ****             /* Send a command to the timer service task to start the xTimer timer. */
 402:Lib/FreeRTOS/Source/timers.c ****             xMessage.xMessageID = xCommandID;
 403:Lib/FreeRTOS/Source/timers.c ****             xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 404:Lib/FreeRTOS/Source/timers.c ****             xMessage.u.xTimerParameters.pxTimer = xTimer;
 405:Lib/FreeRTOS/Source/timers.c **** 
 406:Lib/FreeRTOS/Source/timers.c ****             if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 407:Lib/FreeRTOS/Source/timers.c ****             {
 408:Lib/FreeRTOS/Source/timers.c ****                 if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 409:Lib/FreeRTOS/Source/timers.c ****                 {
 410:Lib/FreeRTOS/Source/timers.c ****                     xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 411:Lib/FreeRTOS/Source/timers.c ****                 }
 412:Lib/FreeRTOS/Source/timers.c ****                 else
 413:Lib/FreeRTOS/Source/timers.c ****                 {
 414:Lib/FreeRTOS/Source/timers.c ****                     xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 415:Lib/FreeRTOS/Source/timers.c ****                 }
 416:Lib/FreeRTOS/Source/timers.c ****             }
 417:Lib/FreeRTOS/Source/timers.c ****             else
 418:Lib/FreeRTOS/Source/timers.c ****             {
 419:Lib/FreeRTOS/Source/timers.c ****                 xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoke
 420:Lib/FreeRTOS/Source/timers.c ****             }
 421:Lib/FreeRTOS/Source/timers.c **** 
 422:Lib/FreeRTOS/Source/timers.c ****             traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 423:Lib/FreeRTOS/Source/timers.c ****         }
 424:Lib/FreeRTOS/Source/timers.c ****         else
ARM GAS  /tmp/cc6xdUDh.s 			page 9


 425:Lib/FreeRTOS/Source/timers.c ****         {
 426:Lib/FreeRTOS/Source/timers.c ****             mtCOVERAGE_TEST_MARKER();
 427:Lib/FreeRTOS/Source/timers.c ****         }
 428:Lib/FreeRTOS/Source/timers.c **** 
 429:Lib/FreeRTOS/Source/timers.c ****         return xReturn;
 430:Lib/FreeRTOS/Source/timers.c ****     }
 431:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 432:Lib/FreeRTOS/Source/timers.c **** 
 433:Lib/FreeRTOS/Source/timers.c ****     TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
 434:Lib/FreeRTOS/Source/timers.c ****     {
 435:Lib/FreeRTOS/Source/timers.c ****         /* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 436:Lib/FreeRTOS/Source/timers.c ****          * started, then xTimerTaskHandle will be NULL. */
 437:Lib/FreeRTOS/Source/timers.c ****         configASSERT( ( xTimerTaskHandle != NULL ) );
 438:Lib/FreeRTOS/Source/timers.c ****         return xTimerTaskHandle;
 439:Lib/FreeRTOS/Source/timers.c ****     }
 440:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 441:Lib/FreeRTOS/Source/timers.c **** 
 442:Lib/FreeRTOS/Source/timers.c ****     TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
 443:Lib/FreeRTOS/Source/timers.c ****     {
 444:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer = xTimer;
 445:Lib/FreeRTOS/Source/timers.c **** 
 446:Lib/FreeRTOS/Source/timers.c ****         configASSERT( xTimer );
 447:Lib/FreeRTOS/Source/timers.c ****         return pxTimer->xTimerPeriodInTicks;
 448:Lib/FreeRTOS/Source/timers.c ****     }
 449:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 450:Lib/FreeRTOS/Source/timers.c **** 
 451:Lib/FreeRTOS/Source/timers.c ****     void vTimerSetReloadMode( TimerHandle_t xTimer,
 452:Lib/FreeRTOS/Source/timers.c ****                               const BaseType_t xAutoReload )
 453:Lib/FreeRTOS/Source/timers.c ****     {
 454:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer = xTimer;
 455:Lib/FreeRTOS/Source/timers.c **** 
 456:Lib/FreeRTOS/Source/timers.c ****         configASSERT( xTimer );
 457:Lib/FreeRTOS/Source/timers.c ****         taskENTER_CRITICAL();
 458:Lib/FreeRTOS/Source/timers.c ****         {
 459:Lib/FreeRTOS/Source/timers.c ****             if( xAutoReload != pdFALSE )
 460:Lib/FreeRTOS/Source/timers.c ****             {
 461:Lib/FreeRTOS/Source/timers.c ****                 pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 462:Lib/FreeRTOS/Source/timers.c ****             }
 463:Lib/FreeRTOS/Source/timers.c ****             else
 464:Lib/FreeRTOS/Source/timers.c ****             {
 465:Lib/FreeRTOS/Source/timers.c ****                 pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_AUTORELOAD );
 466:Lib/FreeRTOS/Source/timers.c ****             }
 467:Lib/FreeRTOS/Source/timers.c ****         }
 468:Lib/FreeRTOS/Source/timers.c ****         taskEXIT_CRITICAL();
 469:Lib/FreeRTOS/Source/timers.c ****     }
 470:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 471:Lib/FreeRTOS/Source/timers.c **** 
 472:Lib/FreeRTOS/Source/timers.c ****     BaseType_t xTimerGetReloadMode( TimerHandle_t xTimer )
 473:Lib/FreeRTOS/Source/timers.c ****     {
 474:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer = xTimer;
 475:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xReturn;
 476:Lib/FreeRTOS/Source/timers.c **** 
 477:Lib/FreeRTOS/Source/timers.c ****         configASSERT( xTimer );
 478:Lib/FreeRTOS/Source/timers.c ****         taskENTER_CRITICAL();
 479:Lib/FreeRTOS/Source/timers.c ****         {
 480:Lib/FreeRTOS/Source/timers.c ****             if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0 )
 481:Lib/FreeRTOS/Source/timers.c ****             {
ARM GAS  /tmp/cc6xdUDh.s 			page 10


 482:Lib/FreeRTOS/Source/timers.c ****                 /* Not an auto-reload timer. */
 483:Lib/FreeRTOS/Source/timers.c ****                 xReturn = pdFALSE;
 484:Lib/FreeRTOS/Source/timers.c ****             }
 485:Lib/FreeRTOS/Source/timers.c ****             else
 486:Lib/FreeRTOS/Source/timers.c ****             {
 487:Lib/FreeRTOS/Source/timers.c ****                 /* Is an auto-reload timer. */
 488:Lib/FreeRTOS/Source/timers.c ****                 xReturn = pdTRUE;
 489:Lib/FreeRTOS/Source/timers.c ****             }
 490:Lib/FreeRTOS/Source/timers.c ****         }
 491:Lib/FreeRTOS/Source/timers.c ****         taskEXIT_CRITICAL();
 492:Lib/FreeRTOS/Source/timers.c **** 
 493:Lib/FreeRTOS/Source/timers.c ****         return xReturn;
 494:Lib/FreeRTOS/Source/timers.c ****     }
 495:Lib/FreeRTOS/Source/timers.c **** 
 496:Lib/FreeRTOS/Source/timers.c ****     UBaseType_t uxTimerGetReloadMode( TimerHandle_t xTimer )
 497:Lib/FreeRTOS/Source/timers.c ****     {
 498:Lib/FreeRTOS/Source/timers.c ****         return ( UBaseType_t ) xTimerGetReloadMode( xTimer );
 499:Lib/FreeRTOS/Source/timers.c ****     }
 500:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 501:Lib/FreeRTOS/Source/timers.c **** 
 502:Lib/FreeRTOS/Source/timers.c ****     TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
 503:Lib/FreeRTOS/Source/timers.c ****     {
 504:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer = xTimer;
 505:Lib/FreeRTOS/Source/timers.c ****         TickType_t xReturn;
 506:Lib/FreeRTOS/Source/timers.c **** 
 507:Lib/FreeRTOS/Source/timers.c ****         configASSERT( xTimer );
 508:Lib/FreeRTOS/Source/timers.c ****         xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 509:Lib/FreeRTOS/Source/timers.c ****         return xReturn;
 510:Lib/FreeRTOS/Source/timers.c ****     }
 511:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 512:Lib/FreeRTOS/Source/timers.c **** 
 513:Lib/FreeRTOS/Source/timers.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 514:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xTimerGetStaticBuffer( TimerHandle_t xTimer,
 515:Lib/FreeRTOS/Source/timers.c ****                                           StaticTimer_t ** ppxTimerBuffer )
 516:Lib/FreeRTOS/Source/timers.c ****         {
 517:Lib/FreeRTOS/Source/timers.c ****             BaseType_t xReturn;
 518:Lib/FreeRTOS/Source/timers.c ****             Timer_t * pxTimer = xTimer;
 519:Lib/FreeRTOS/Source/timers.c **** 
 520:Lib/FreeRTOS/Source/timers.c ****             configASSERT( ppxTimerBuffer != NULL );
 521:Lib/FreeRTOS/Source/timers.c **** 
 522:Lib/FreeRTOS/Source/timers.c ****             if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) != 0 )
 523:Lib/FreeRTOS/Source/timers.c ****             {
 524:Lib/FreeRTOS/Source/timers.c ****                 *ppxTimerBuffer = ( StaticTimer_t * ) pxTimer;
 525:Lib/FreeRTOS/Source/timers.c ****                 xReturn = pdTRUE;
 526:Lib/FreeRTOS/Source/timers.c ****             }
 527:Lib/FreeRTOS/Source/timers.c ****             else
 528:Lib/FreeRTOS/Source/timers.c ****             {
 529:Lib/FreeRTOS/Source/timers.c ****                 xReturn = pdFALSE;
 530:Lib/FreeRTOS/Source/timers.c ****             }
 531:Lib/FreeRTOS/Source/timers.c **** 
 532:Lib/FreeRTOS/Source/timers.c ****             return xReturn;
 533:Lib/FreeRTOS/Source/timers.c ****         }
 534:Lib/FreeRTOS/Source/timers.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
 535:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 536:Lib/FreeRTOS/Source/timers.c **** 
 537:Lib/FreeRTOS/Source/timers.c ****     const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are all
 538:Lib/FreeRTOS/Source/timers.c ****     {
ARM GAS  /tmp/cc6xdUDh.s 			page 11


 539:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer = xTimer;
 540:Lib/FreeRTOS/Source/timers.c **** 
 541:Lib/FreeRTOS/Source/timers.c ****         configASSERT( xTimer );
 542:Lib/FreeRTOS/Source/timers.c ****         return pxTimer->pcTimerName;
 543:Lib/FreeRTOS/Source/timers.c ****     }
 544:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 545:Lib/FreeRTOS/Source/timers.c **** 
 546:Lib/FreeRTOS/Source/timers.c ****     static void prvReloadTimer( Timer_t * const pxTimer,
 547:Lib/FreeRTOS/Source/timers.c ****                                 TickType_t xExpiredTime,
 548:Lib/FreeRTOS/Source/timers.c ****                                 const TickType_t xTimeNow )
 549:Lib/FreeRTOS/Source/timers.c ****     {
 550:Lib/FreeRTOS/Source/timers.c ****         /* Insert the timer into the appropriate list for the next expiry time.
 551:Lib/FreeRTOS/Source/timers.c ****          * If the next expiry time has already passed, advance the expiry time,
 552:Lib/FreeRTOS/Source/timers.c ****          * call the callback function, and try again. */
 553:Lib/FreeRTOS/Source/timers.c ****         while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks )
 554:Lib/FreeRTOS/Source/timers.c ****         {
 555:Lib/FreeRTOS/Source/timers.c ****             /* Advance the expiry time. */
 556:Lib/FreeRTOS/Source/timers.c ****             xExpiredTime += pxTimer->xTimerPeriodInTicks;
 557:Lib/FreeRTOS/Source/timers.c **** 
 558:Lib/FreeRTOS/Source/timers.c ****             /* Call the timer callback. */
 559:Lib/FreeRTOS/Source/timers.c ****             traceTIMER_EXPIRED( pxTimer );
 560:Lib/FreeRTOS/Source/timers.c ****             pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 561:Lib/FreeRTOS/Source/timers.c ****         }
 562:Lib/FreeRTOS/Source/timers.c ****     }
 563:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 564:Lib/FreeRTOS/Source/timers.c **** 
 565:Lib/FreeRTOS/Source/timers.c ****     static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
 566:Lib/FreeRTOS/Source/timers.c ****                                         const TickType_t xTimeNow )
 567:Lib/FreeRTOS/Source/timers.c ****     {
 568:Lib/FreeRTOS/Source/timers.c ****         Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); 
 569:Lib/FreeRTOS/Source/timers.c **** 
 570:Lib/FreeRTOS/Source/timers.c ****         /* Remove the timer from the list of active timers.  A check has already
 571:Lib/FreeRTOS/Source/timers.c ****          * been performed to ensure the list is not empty. */
 572:Lib/FreeRTOS/Source/timers.c **** 
 573:Lib/FreeRTOS/Source/timers.c ****         ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 574:Lib/FreeRTOS/Source/timers.c **** 
 575:Lib/FreeRTOS/Source/timers.c ****         /* If the timer is an auto-reload timer then calculate the next
 576:Lib/FreeRTOS/Source/timers.c ****          * expiry time and re-insert the timer in the list of active timers. */
 577:Lib/FreeRTOS/Source/timers.c ****         if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 578:Lib/FreeRTOS/Source/timers.c ****         {
 579:Lib/FreeRTOS/Source/timers.c ****             prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 580:Lib/FreeRTOS/Source/timers.c ****         }
 581:Lib/FreeRTOS/Source/timers.c ****         else
 582:Lib/FreeRTOS/Source/timers.c ****         {
 583:Lib/FreeRTOS/Source/timers.c ****             pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 584:Lib/FreeRTOS/Source/timers.c ****         }
 585:Lib/FreeRTOS/Source/timers.c **** 
 586:Lib/FreeRTOS/Source/timers.c ****         /* Call the timer callback. */
 587:Lib/FreeRTOS/Source/timers.c ****         traceTIMER_EXPIRED( pxTimer );
 588:Lib/FreeRTOS/Source/timers.c ****         pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 589:Lib/FreeRTOS/Source/timers.c ****     }
 590:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 591:Lib/FreeRTOS/Source/timers.c **** 
 592:Lib/FreeRTOS/Source/timers.c ****     static portTASK_FUNCTION( prvTimerTask, pvParameters )
 593:Lib/FreeRTOS/Source/timers.c ****     {
 594:Lib/FreeRTOS/Source/timers.c ****         TickType_t xNextExpireTime;
 595:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xListWasEmpty;
ARM GAS  /tmp/cc6xdUDh.s 			page 12


 596:Lib/FreeRTOS/Source/timers.c **** 
 597:Lib/FreeRTOS/Source/timers.c ****         /* Just to avoid compiler warnings. */
 598:Lib/FreeRTOS/Source/timers.c ****         ( void ) pvParameters;
 599:Lib/FreeRTOS/Source/timers.c **** 
 600:Lib/FreeRTOS/Source/timers.c ****         #if ( configUSE_DAEMON_TASK_STARTUP_HOOK == 1 )
 601:Lib/FreeRTOS/Source/timers.c ****         {
 602:Lib/FreeRTOS/Source/timers.c ****             /* Allow the application writer to execute some code in the context of
 603:Lib/FreeRTOS/Source/timers.c ****              * this task at the point the task starts executing.  This is useful if the
 604:Lib/FreeRTOS/Source/timers.c ****              * application includes initialisation code that would benefit from
 605:Lib/FreeRTOS/Source/timers.c ****              * executing after the scheduler has been started. */
 606:Lib/FreeRTOS/Source/timers.c ****             vApplicationDaemonTaskStartupHook();
 607:Lib/FreeRTOS/Source/timers.c ****         }
 608:Lib/FreeRTOS/Source/timers.c ****         #endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */
 609:Lib/FreeRTOS/Source/timers.c **** 
 610:Lib/FreeRTOS/Source/timers.c ****         for( ; ; )
 611:Lib/FreeRTOS/Source/timers.c ****         {
 612:Lib/FreeRTOS/Source/timers.c ****             /* Query the timers list to see if it contains any timers, and if so,
 613:Lib/FreeRTOS/Source/timers.c ****              * obtain the time at which the next timer will expire. */
 614:Lib/FreeRTOS/Source/timers.c ****             xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 615:Lib/FreeRTOS/Source/timers.c **** 
 616:Lib/FreeRTOS/Source/timers.c ****             /* If a timer has expired, process it.  Otherwise, block this task
 617:Lib/FreeRTOS/Source/timers.c ****              * until either a timer does expire, or a command is received. */
 618:Lib/FreeRTOS/Source/timers.c ****             prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 619:Lib/FreeRTOS/Source/timers.c **** 
 620:Lib/FreeRTOS/Source/timers.c ****             /* Empty the command queue. */
 621:Lib/FreeRTOS/Source/timers.c ****             prvProcessReceivedCommands();
 622:Lib/FreeRTOS/Source/timers.c ****         }
 623:Lib/FreeRTOS/Source/timers.c ****     }
 624:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 625:Lib/FreeRTOS/Source/timers.c **** 
 626:Lib/FreeRTOS/Source/timers.c ****     static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
 627:Lib/FreeRTOS/Source/timers.c ****                                             BaseType_t xListWasEmpty )
 628:Lib/FreeRTOS/Source/timers.c ****     {
 629:Lib/FreeRTOS/Source/timers.c ****         TickType_t xTimeNow;
 630:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xTimerListsWereSwitched;
 631:Lib/FreeRTOS/Source/timers.c **** 
 632:Lib/FreeRTOS/Source/timers.c ****         vTaskSuspendAll();
 633:Lib/FreeRTOS/Source/timers.c ****         {
 634:Lib/FreeRTOS/Source/timers.c ****             /* Obtain the time now to make an assessment as to whether the timer
 635:Lib/FreeRTOS/Source/timers.c ****              * has expired or not.  If obtaining the time causes the lists to switch
 636:Lib/FreeRTOS/Source/timers.c ****              * then don't process this timer as any timers that remained in the list
 637:Lib/FreeRTOS/Source/timers.c ****              * when the lists were switched will have been processed within the
 638:Lib/FreeRTOS/Source/timers.c ****              * prvSampleTimeNow() function. */
 639:Lib/FreeRTOS/Source/timers.c ****             xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 640:Lib/FreeRTOS/Source/timers.c **** 
 641:Lib/FreeRTOS/Source/timers.c ****             if( xTimerListsWereSwitched == pdFALSE )
 642:Lib/FreeRTOS/Source/timers.c ****             {
 643:Lib/FreeRTOS/Source/timers.c ****                 /* The tick count has not overflowed, has the timer expired? */
 644:Lib/FreeRTOS/Source/timers.c ****                 if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 645:Lib/FreeRTOS/Source/timers.c ****                 {
 646:Lib/FreeRTOS/Source/timers.c ****                     ( void ) xTaskResumeAll();
 647:Lib/FreeRTOS/Source/timers.c ****                     prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 648:Lib/FreeRTOS/Source/timers.c ****                 }
 649:Lib/FreeRTOS/Source/timers.c ****                 else
 650:Lib/FreeRTOS/Source/timers.c ****                 {
 651:Lib/FreeRTOS/Source/timers.c ****                     /* The tick count has not overflowed, and the next expire
 652:Lib/FreeRTOS/Source/timers.c ****                      * time has not been reached yet.  This task should therefore
ARM GAS  /tmp/cc6xdUDh.s 			page 13


 653:Lib/FreeRTOS/Source/timers.c ****                      * block to wait for the next expire time or a command to be
 654:Lib/FreeRTOS/Source/timers.c ****                      * received - whichever comes first.  The following line cannot
 655:Lib/FreeRTOS/Source/timers.c ****                      * be reached unless xNextExpireTime > xTimeNow, except in the
 656:Lib/FreeRTOS/Source/timers.c ****                      * case when the current timer list is empty. */
 657:Lib/FreeRTOS/Source/timers.c ****                     if( xListWasEmpty != pdFALSE )
 658:Lib/FreeRTOS/Source/timers.c ****                     {
 659:Lib/FreeRTOS/Source/timers.c ****                         /* The current timer list is empty - is the overflow list
 660:Lib/FreeRTOS/Source/timers.c ****                          * also empty? */
 661:Lib/FreeRTOS/Source/timers.c ****                         xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 662:Lib/FreeRTOS/Source/timers.c ****                     }
 663:Lib/FreeRTOS/Source/timers.c **** 
 664:Lib/FreeRTOS/Source/timers.c ****                     vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xL
 665:Lib/FreeRTOS/Source/timers.c **** 
 666:Lib/FreeRTOS/Source/timers.c ****                     if( xTaskResumeAll() == pdFALSE )
 667:Lib/FreeRTOS/Source/timers.c ****                     {
 668:Lib/FreeRTOS/Source/timers.c ****                         /* Yield to wait for either a command to arrive, or the
 669:Lib/FreeRTOS/Source/timers.c ****                          * block time to expire.  If a command arrived between the
 670:Lib/FreeRTOS/Source/timers.c ****                          * critical section being exited and this yield then the yield
 671:Lib/FreeRTOS/Source/timers.c ****                          * will not cause the task to block. */
 672:Lib/FreeRTOS/Source/timers.c ****                         portYIELD_WITHIN_API();
 673:Lib/FreeRTOS/Source/timers.c ****                     }
 674:Lib/FreeRTOS/Source/timers.c ****                     else
 675:Lib/FreeRTOS/Source/timers.c ****                     {
 676:Lib/FreeRTOS/Source/timers.c ****                         mtCOVERAGE_TEST_MARKER();
 677:Lib/FreeRTOS/Source/timers.c ****                     }
 678:Lib/FreeRTOS/Source/timers.c ****                 }
 679:Lib/FreeRTOS/Source/timers.c ****             }
 680:Lib/FreeRTOS/Source/timers.c ****             else
 681:Lib/FreeRTOS/Source/timers.c ****             {
 682:Lib/FreeRTOS/Source/timers.c ****                 ( void ) xTaskResumeAll();
 683:Lib/FreeRTOS/Source/timers.c ****             }
 684:Lib/FreeRTOS/Source/timers.c ****         }
 685:Lib/FreeRTOS/Source/timers.c ****     }
 686:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 687:Lib/FreeRTOS/Source/timers.c **** 
 688:Lib/FreeRTOS/Source/timers.c ****     static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
 689:Lib/FreeRTOS/Source/timers.c ****     {
 690:Lib/FreeRTOS/Source/timers.c ****         TickType_t xNextExpireTime;
 691:Lib/FreeRTOS/Source/timers.c **** 
 692:Lib/FreeRTOS/Source/timers.c ****         /* Timers are listed in expiry time order, with the head of the list
 693:Lib/FreeRTOS/Source/timers.c ****          * referencing the task that will expire first.  Obtain the time at which
 694:Lib/FreeRTOS/Source/timers.c ****          * the timer with the nearest expiry time will expire.  If there are no
 695:Lib/FreeRTOS/Source/timers.c ****          * active timers then just set the next expire time to 0.  That will cause
 696:Lib/FreeRTOS/Source/timers.c ****          * this task to unblock when the tick count overflows, at which point the
 697:Lib/FreeRTOS/Source/timers.c ****          * timer lists will be switched and the next expiry time can be
 698:Lib/FreeRTOS/Source/timers.c ****          * re-assessed.  */
 699:Lib/FreeRTOS/Source/timers.c ****         *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 700:Lib/FreeRTOS/Source/timers.c **** 
 701:Lib/FreeRTOS/Source/timers.c ****         if( *pxListWasEmpty == pdFALSE )
 702:Lib/FreeRTOS/Source/timers.c ****         {
 703:Lib/FreeRTOS/Source/timers.c ****             xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 704:Lib/FreeRTOS/Source/timers.c ****         }
 705:Lib/FreeRTOS/Source/timers.c ****         else
 706:Lib/FreeRTOS/Source/timers.c ****         {
 707:Lib/FreeRTOS/Source/timers.c ****             /* Ensure the task unblocks when the tick count rolls over. */
 708:Lib/FreeRTOS/Source/timers.c ****             xNextExpireTime = ( TickType_t ) 0U;
 709:Lib/FreeRTOS/Source/timers.c ****         }
ARM GAS  /tmp/cc6xdUDh.s 			page 14


 710:Lib/FreeRTOS/Source/timers.c **** 
 711:Lib/FreeRTOS/Source/timers.c ****         return xNextExpireTime;
 712:Lib/FreeRTOS/Source/timers.c ****     }
 713:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 714:Lib/FreeRTOS/Source/timers.c **** 
 715:Lib/FreeRTOS/Source/timers.c ****     static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
 716:Lib/FreeRTOS/Source/timers.c ****     {
 717:Lib/FreeRTOS/Source/timers.c ****         TickType_t xTimeNow;
 718:Lib/FreeRTOS/Source/timers.c ****         PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is o
 719:Lib/FreeRTOS/Source/timers.c **** 
 720:Lib/FreeRTOS/Source/timers.c ****         xTimeNow = xTaskGetTickCount();
 721:Lib/FreeRTOS/Source/timers.c **** 
 722:Lib/FreeRTOS/Source/timers.c ****         if( xTimeNow < xLastTime )
 723:Lib/FreeRTOS/Source/timers.c ****         {
 724:Lib/FreeRTOS/Source/timers.c ****             prvSwitchTimerLists();
 725:Lib/FreeRTOS/Source/timers.c ****             *pxTimerListsWereSwitched = pdTRUE;
 726:Lib/FreeRTOS/Source/timers.c ****         }
 727:Lib/FreeRTOS/Source/timers.c ****         else
 728:Lib/FreeRTOS/Source/timers.c ****         {
 729:Lib/FreeRTOS/Source/timers.c ****             *pxTimerListsWereSwitched = pdFALSE;
 730:Lib/FreeRTOS/Source/timers.c ****         }
 731:Lib/FreeRTOS/Source/timers.c **** 
 732:Lib/FreeRTOS/Source/timers.c ****         xLastTime = xTimeNow;
 733:Lib/FreeRTOS/Source/timers.c **** 
 734:Lib/FreeRTOS/Source/timers.c ****         return xTimeNow;
 735:Lib/FreeRTOS/Source/timers.c ****     }
 736:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 737:Lib/FreeRTOS/Source/timers.c **** 
 738:Lib/FreeRTOS/Source/timers.c ****     static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
 739:Lib/FreeRTOS/Source/timers.c ****                                                   const TickType_t xNextExpiryTime,
 740:Lib/FreeRTOS/Source/timers.c ****                                                   const TickType_t xTimeNow,
 741:Lib/FreeRTOS/Source/timers.c ****                                                   const TickType_t xCommandTime )
 742:Lib/FreeRTOS/Source/timers.c ****     {
  34              		.loc 1 742 5 view -0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 0, uses_anonymous_args = 0
 743:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xProcessTimerNow = pdFALSE;
  38              		.loc 1 743 9 view .LVU1
 744:Lib/FreeRTOS/Source/timers.c **** 
 745:Lib/FreeRTOS/Source/timers.c ****         listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  39              		.loc 1 745 9 view .LVU2
 746:Lib/FreeRTOS/Source/timers.c ****         listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 747:Lib/FreeRTOS/Source/timers.c **** 
 748:Lib/FreeRTOS/Source/timers.c ****         if( xNextExpiryTime <= xTimeNow )
  40              		.loc 1 748 11 is_stmt 0 view .LVU3
  41 0000 9142     		cmp	r1, r2
 742:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xProcessTimerNow = pdFALSE;
  42              		.loc 1 742 5 view .LVU4
  43 0002 08B5     		push	{r3, lr}
  44              		.cfi_def_cfa_offset 8
  45              		.cfi_offset 3, -8
  46              		.cfi_offset 14, -4
 745:Lib/FreeRTOS/Source/timers.c ****         listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  47              		.loc 1 745 9 view .LVU5
  48 0004 4160     		str	r1, [r0, #4]
 746:Lib/FreeRTOS/Source/timers.c ****         listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
ARM GAS  /tmp/cc6xdUDh.s 			page 15


  49              		.loc 1 746 9 is_stmt 1 view .LVU6
  50 0006 0061     		str	r0, [r0, #16]
  51              		.loc 1 748 9 view .LVU7
  52              		.loc 1 748 11 is_stmt 0 view .LVU8
  53 0008 0AD8     		bhi	.L2
 749:Lib/FreeRTOS/Source/timers.c ****         {
 750:Lib/FreeRTOS/Source/timers.c ****             /* Has the expiry time elapsed between the command to start/reset a
 751:Lib/FreeRTOS/Source/timers.c ****              * timer was issued, and the time the command was processed? */
 752:Lib/FreeRTOS/Source/timers.c ****             if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*
  54              		.loc 1 752 13 is_stmt 1 view .LVU9
  55              		.loc 1 752 45 is_stmt 0 view .LVU10
  56 000a D21A     		subs	r2, r2, r3
  57              	.LVL1:
  58              		.loc 1 752 15 view .LVU11
  59 000c 8369     		ldr	r3, [r0, #24]
  60              	.LVL2:
  61              		.loc 1 752 15 view .LVU12
  62 000e 9A42     		cmp	r2, r3
  63 0010 0DD2     		bcs	.L7
 753:Lib/FreeRTOS/Source/timers.c ****             {
 754:Lib/FreeRTOS/Source/timers.c ****                 /* The time between a command being issued and the command being
 755:Lib/FreeRTOS/Source/timers.c ****                  * processed actually exceeds the timers period.  */
 756:Lib/FreeRTOS/Source/timers.c ****                 xProcessTimerNow = pdTRUE;
 757:Lib/FreeRTOS/Source/timers.c ****             }
 758:Lib/FreeRTOS/Source/timers.c ****             else
 759:Lib/FreeRTOS/Source/timers.c ****             {
 760:Lib/FreeRTOS/Source/timers.c ****                 vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  64              		.loc 1 760 17 is_stmt 1 view .LVU13
  65 0012 084B     		ldr	r3, .L9
  66 0014 011D     		adds	r1, r0, #4
  67              	.LVL3:
  68              	.L8:
 761:Lib/FreeRTOS/Source/timers.c ****             }
 762:Lib/FreeRTOS/Source/timers.c ****         }
 763:Lib/FreeRTOS/Source/timers.c ****         else
 764:Lib/FreeRTOS/Source/timers.c ****         {
 765:Lib/FreeRTOS/Source/timers.c ****             if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 766:Lib/FreeRTOS/Source/timers.c ****             {
 767:Lib/FreeRTOS/Source/timers.c ****                 /* If, since the command was issued, the tick count has overflowed
 768:Lib/FreeRTOS/Source/timers.c ****                  * but the expiry time has not, then the timer must have already passed
 769:Lib/FreeRTOS/Source/timers.c ****                  * its expiry time and should be processed immediately. */
 770:Lib/FreeRTOS/Source/timers.c ****                 xProcessTimerNow = pdTRUE;
 771:Lib/FreeRTOS/Source/timers.c ****             }
 772:Lib/FreeRTOS/Source/timers.c ****             else
 773:Lib/FreeRTOS/Source/timers.c ****             {
 774:Lib/FreeRTOS/Source/timers.c ****                 vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  69              		.loc 1 774 17 is_stmt 0 view .LVU14
  70 0016 1868     		ldr	r0, [r3]
  71              	.LVL4:
  72              		.loc 1 774 17 view .LVU15
  73 0018 FFF7FEFF 		bl	vListInsert
  74              	.LVL5:
 743:Lib/FreeRTOS/Source/timers.c **** 
  75              		.loc 1 743 20 view .LVU16
  76 001c 0020     		movs	r0, #0
  77              	.LVL6:
  78              	.L1:
ARM GAS  /tmp/cc6xdUDh.s 			page 16


 775:Lib/FreeRTOS/Source/timers.c ****             }
 776:Lib/FreeRTOS/Source/timers.c ****         }
 777:Lib/FreeRTOS/Source/timers.c **** 
 778:Lib/FreeRTOS/Source/timers.c ****         return xProcessTimerNow;
 779:Lib/FreeRTOS/Source/timers.c ****     }
  79              		.loc 1 779 5 view .LVU17
  80 001e 08BD     		pop	{r3, pc}
  81              	.LVL7:
  82              	.L2:
 765:Lib/FreeRTOS/Source/timers.c ****             {
  83              		.loc 1 765 13 is_stmt 1 view .LVU18
 765:Lib/FreeRTOS/Source/timers.c ****             {
  84              		.loc 1 765 15 is_stmt 0 view .LVU19
  85 0020 9A42     		cmp	r2, r3
  86 0022 01D2     		bcs	.L5
 765:Lib/FreeRTOS/Source/timers.c ****             {
  87              		.loc 1 765 45 discriminator 1 view .LVU20
  88 0024 9942     		cmp	r1, r3
  89 0026 02D2     		bcs	.L7
  90              	.L5:
 774:Lib/FreeRTOS/Source/timers.c ****             }
  91              		.loc 1 774 17 is_stmt 1 view .LVU21
  92 0028 034B     		ldr	r3, .L9+4
  93              	.LVL8:
 774:Lib/FreeRTOS/Source/timers.c ****             }
  94              		.loc 1 774 17 is_stmt 0 view .LVU22
  95 002a 011D     		adds	r1, r0, #4
  96              	.LVL9:
 774:Lib/FreeRTOS/Source/timers.c ****             }
  97              		.loc 1 774 17 view .LVU23
  98 002c F3E7     		b	.L8
  99              	.LVL10:
 100              	.L7:
 770:Lib/FreeRTOS/Source/timers.c ****             }
 101              		.loc 1 770 34 view .LVU24
 102 002e 0120     		movs	r0, #1
 103              	.LVL11:
 778:Lib/FreeRTOS/Source/timers.c ****     }
 104              		.loc 1 778 9 is_stmt 1 view .LVU25
 778:Lib/FreeRTOS/Source/timers.c ****     }
 105              		.loc 1 778 16 is_stmt 0 view .LVU26
 106 0030 F5E7     		b	.L1
 107              	.L10:
 108 0032 00BF     		.align	2
 109              	.L9:
 110 0034 00000000 		.word	pxOverflowTimerList
 111 0038 00000000 		.word	pxCurrentTimerList
 112              		.cfi_endproc
 113              	.LFE18:
 115              		.section	.text.prvReloadTimer,"ax",%progbits
 116              		.align	1
 117              		.syntax unified
 118              		.thumb
 119              		.thumb_func
 121              	prvReloadTimer:
 122              	.LVL12:
 123              	.LFB12:
ARM GAS  /tmp/cc6xdUDh.s 			page 17


 549:Lib/FreeRTOS/Source/timers.c ****         /* Insert the timer into the appropriate list for the next expiry time.
 124              		.loc 1 549 5 is_stmt 1 view -0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 549:Lib/FreeRTOS/Source/timers.c ****         /* Insert the timer into the appropriate list for the next expiry time.
 128              		.loc 1 549 5 is_stmt 0 view .LVU28
 129 0000 70B5     		push	{r4, r5, r6, lr}
 130              		.cfi_def_cfa_offset 16
 131              		.cfi_offset 4, -16
 132              		.cfi_offset 5, -12
 133              		.cfi_offset 6, -8
 134              		.cfi_offset 14, -4
 135 0002 0446     		mov	r4, r0
 136 0004 0D46     		mov	r5, r1
 137 0006 1646     		mov	r6, r2
 553:Lib/FreeRTOS/Source/timers.c ****         {
 138              		.loc 1 553 9 is_stmt 1 view .LVU29
 139              	.LVL13:
 140              	.L12:
 553:Lib/FreeRTOS/Source/timers.c ****         {
 141              		.loc 1 553 127 view .LVU30
 553:Lib/FreeRTOS/Source/timers.c ****         {
 142              		.loc 1 553 16 is_stmt 0 view .LVU31
 143 0008 A169     		ldr	r1, [r4, #24]
 144 000a 2B46     		mov	r3, r5
 145 000c 3246     		mov	r2, r6
 146 000e 2046     		mov	r0, r4
 147 0010 2944     		add	r1, r1, r5
 148 0012 FFF7FEFF 		bl	prvInsertTimerInActiveList
 149              	.LVL14:
 553:Lib/FreeRTOS/Source/timers.c ****         {
 150              		.loc 1 553 127 discriminator 1 view .LVU32
 151 0016 00B9     		cbnz	r0, .L13
 562:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 152              		.loc 1 562 5 view .LVU33
 153 0018 70BD     		pop	{r4, r5, r6, pc}
 154              	.LVL15:
 155              	.L13:
 556:Lib/FreeRTOS/Source/timers.c **** 
 156              		.loc 1 556 13 is_stmt 1 view .LVU34
 556:Lib/FreeRTOS/Source/timers.c **** 
 157              		.loc 1 556 26 is_stmt 0 view .LVU35
 158 001a A369     		ldr	r3, [r4, #24]
 560:Lib/FreeRTOS/Source/timers.c ****         }
 159              		.loc 1 560 13 view .LVU36
 160 001c 2046     		mov	r0, r4
 556:Lib/FreeRTOS/Source/timers.c **** 
 161              		.loc 1 556 26 view .LVU37
 162 001e 1D44     		add	r5, r5, r3
 163              	.LVL16:
 559:Lib/FreeRTOS/Source/timers.c ****             pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 164              		.loc 1 559 42 is_stmt 1 view .LVU38
 560:Lib/FreeRTOS/Source/timers.c ****         }
 165              		.loc 1 560 13 view .LVU39
 166 0020 236A     		ldr	r3, [r4, #32]
 167 0022 9847     		blx	r3
ARM GAS  /tmp/cc6xdUDh.s 			page 18


 168              	.LVL17:
 169 0024 F0E7     		b	.L12
 170              		.cfi_endproc
 171              	.LFE12:
 173              		.section	.text.prvProcessExpiredTimer,"ax",%progbits
 174              		.align	1
 175              		.syntax unified
 176              		.thumb
 177              		.thumb_func
 179              	prvProcessExpiredTimer:
 180              	.LVL18:
 181              	.LFB13:
 567:Lib/FreeRTOS/Source/timers.c ****         Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); 
 182              		.loc 1 567 5 view -0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 568:Lib/FreeRTOS/Source/timers.c **** 
 186              		.loc 1 568 9 view .LVU41
 568:Lib/FreeRTOS/Source/timers.c **** 
 187              		.loc 1 568 49 is_stmt 0 view .LVU42
 188 0000 0E4B     		ldr	r3, .L17
 567:Lib/FreeRTOS/Source/timers.c ****         Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); 
 189              		.loc 1 567 5 view .LVU43
 190 0002 70B5     		push	{r4, r5, r6, lr}
 191              		.cfi_def_cfa_offset 16
 192              		.cfi_offset 4, -16
 193              		.cfi_offset 5, -12
 194              		.cfi_offset 6, -8
 195              		.cfi_offset 14, -4
 568:Lib/FreeRTOS/Source/timers.c **** 
 196              		.loc 1 568 49 view .LVU44
 197 0004 1B68     		ldr	r3, [r3]
 567:Lib/FreeRTOS/Source/timers.c ****         Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); 
 198              		.loc 1 567 5 view .LVU45
 199 0006 0546     		mov	r5, r0
 568:Lib/FreeRTOS/Source/timers.c **** 
 200              		.loc 1 568 25 view .LVU46
 201 0008 DB68     		ldr	r3, [r3, #12]
 567:Lib/FreeRTOS/Source/timers.c ****         Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); 
 202              		.loc 1 567 5 view .LVU47
 203 000a 0E46     		mov	r6, r1
 568:Lib/FreeRTOS/Source/timers.c **** 
 204              		.loc 1 568 25 view .LVU48
 205 000c DC68     		ldr	r4, [r3, #12]
 206              	.LVL19:
 573:Lib/FreeRTOS/Source/timers.c **** 
 207              		.loc 1 573 9 is_stmt 1 view .LVU49
 573:Lib/FreeRTOS/Source/timers.c **** 
 208              		.loc 1 573 18 is_stmt 0 view .LVU50
 209 000e 201D     		adds	r0, r4, #4
 210              	.LVL20:
 573:Lib/FreeRTOS/Source/timers.c **** 
 211              		.loc 1 573 18 view .LVU51
 212 0010 FFF7FEFF 		bl	uxListRemove
 213              	.LVL21:
 577:Lib/FreeRTOS/Source/timers.c ****         {
ARM GAS  /tmp/cc6xdUDh.s 			page 19


 214              		.loc 1 577 9 is_stmt 1 view .LVU52
 577:Lib/FreeRTOS/Source/timers.c ****         {
 215              		.loc 1 577 22 is_stmt 0 view .LVU53
 216 0014 94F82830 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 577:Lib/FreeRTOS/Source/timers.c ****         {
 217              		.loc 1 577 11 view .LVU54
 218 0018 5A07     		lsls	r2, r3, #29
 219 001a 09D5     		bpl	.L15
 579:Lib/FreeRTOS/Source/timers.c ****         }
 220              		.loc 1 579 13 is_stmt 1 view .LVU55
 221 001c 3246     		mov	r2, r6
 222 001e 2946     		mov	r1, r5
 223 0020 2046     		mov	r0, r4
 224 0022 FFF7FEFF 		bl	prvReloadTimer
 225              	.LVL22:
 226              	.L16:
 587:Lib/FreeRTOS/Source/timers.c ****         pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 227              		.loc 1 587 38 view .LVU56
 588:Lib/FreeRTOS/Source/timers.c ****     }
 228              		.loc 1 588 9 view .LVU57
 229 0026 2046     		mov	r0, r4
 230 0028 236A     		ldr	r3, [r4, #32]
 589:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 231              		.loc 1 589 5 is_stmt 0 view .LVU58
 232 002a BDE87040 		pop	{r4, r5, r6, lr}
 233              		.cfi_remember_state
 234              		.cfi_restore 14
 235              		.cfi_restore 6
 236              		.cfi_restore 5
 237              		.cfi_restore 4
 238              		.cfi_def_cfa_offset 0
 239              	.LVL23:
 588:Lib/FreeRTOS/Source/timers.c ****     }
 240              		.loc 1 588 9 view .LVU59
 241 002e 1847     		bx	r3	@ indirect register sibling call
 242              	.LVL24:
 243              	.L15:
 244              		.cfi_restore_state
 583:Lib/FreeRTOS/Source/timers.c ****         }
 245              		.loc 1 583 13 is_stmt 1 view .LVU60
 583:Lib/FreeRTOS/Source/timers.c ****         }
 246              		.loc 1 583 31 is_stmt 0 view .LVU61
 247 0030 23F00103 		bic	r3, r3, #1
 248 0034 84F82830 		strb	r3, [r4, #40]
 249 0038 F5E7     		b	.L16
 250              	.L18:
 251 003a 00BF     		.align	2
 252              	.L17:
 253 003c 00000000 		.word	pxCurrentTimerList
 254              		.cfi_endproc
 255              	.LFE13:
 257              		.section	.text.prvSampleTimeNow,"ax",%progbits
 258              		.align	1
 259              		.syntax unified
 260              		.thumb
 261              		.thumb_func
 263              	prvSampleTimeNow:
ARM GAS  /tmp/cc6xdUDh.s 			page 20


 264              	.LVL25:
 265              	.LFB17:
 716:Lib/FreeRTOS/Source/timers.c ****         TickType_t xTimeNow;
 266              		.loc 1 716 5 is_stmt 1 view -0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 0
 269              		@ frame_needed = 0, uses_anonymous_args = 0
 717:Lib/FreeRTOS/Source/timers.c ****         PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is o
 270              		.loc 1 717 9 view .LVU63
 718:Lib/FreeRTOS/Source/timers.c **** 
 271              		.loc 1 718 25 view .LVU64
 720:Lib/FreeRTOS/Source/timers.c **** 
 272              		.loc 1 720 9 view .LVU65
 716:Lib/FreeRTOS/Source/timers.c ****         TickType_t xTimeNow;
 273              		.loc 1 716 5 is_stmt 0 view .LVU66
 274 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 275              		.cfi_def_cfa_offset 24
 276              		.cfi_offset 3, -24
 277              		.cfi_offset 4, -20
 278              		.cfi_offset 5, -16
 279              		.cfi_offset 6, -12
 280              		.cfi_offset 7, -8
 281              		.cfi_offset 14, -4
 716:Lib/FreeRTOS/Source/timers.c ****         TickType_t xTimeNow;
 282              		.loc 1 716 5 view .LVU67
 283 0002 0546     		mov	r5, r0
 720:Lib/FreeRTOS/Source/timers.c **** 
 284              		.loc 1 720 20 view .LVU68
 285 0004 FFF7FEFF 		bl	xTaskGetTickCount
 286              	.LVL26:
 722:Lib/FreeRTOS/Source/timers.c ****         {
 287              		.loc 1 722 22 view .LVU69
 288 0008 0D4E     		ldr	r6, .L25
 720:Lib/FreeRTOS/Source/timers.c **** 
 289              		.loc 1 720 20 view .LVU70
 290 000a 0446     		mov	r4, r0
 291              	.LVL27:
 722:Lib/FreeRTOS/Source/timers.c ****         {
 292              		.loc 1 722 9 is_stmt 1 view .LVU71
 722:Lib/FreeRTOS/Source/timers.c ****         {
 293              		.loc 1 722 11 is_stmt 0 view .LVU72
 294 000c 3368     		ldr	r3, [r6]
 295 000e 8342     		cmp	r3, r0
 296 0010 09D9     		bls	.L24
 297              	.LBB4:
 298              	.LBB5:
 780:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 781:Lib/FreeRTOS/Source/timers.c **** 
 782:Lib/FreeRTOS/Source/timers.c ****     static void prvProcessReceivedCommands( void )
 783:Lib/FreeRTOS/Source/timers.c ****     {
 784:Lib/FreeRTOS/Source/timers.c ****         DaemonTaskMessage_t xMessage;
 785:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer;
 786:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xTimerListsWereSwitched;
 787:Lib/FreeRTOS/Source/timers.c ****         TickType_t xTimeNow;
 788:Lib/FreeRTOS/Source/timers.c **** 
 789:Lib/FreeRTOS/Source/timers.c ****         while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessa
 790:Lib/FreeRTOS/Source/timers.c ****         {
ARM GAS  /tmp/cc6xdUDh.s 			page 21


 791:Lib/FreeRTOS/Source/timers.c ****             #if ( INCLUDE_xTimerPendFunctionCall == 1 )
 792:Lib/FreeRTOS/Source/timers.c ****             {
 793:Lib/FreeRTOS/Source/timers.c ****                 /* Negative commands are pended function calls rather than timer
 794:Lib/FreeRTOS/Source/timers.c ****                  * commands. */
 795:Lib/FreeRTOS/Source/timers.c ****                 if( xMessage.xMessageID < ( BaseType_t ) 0 )
 796:Lib/FreeRTOS/Source/timers.c ****                 {
 797:Lib/FreeRTOS/Source/timers.c ****                     const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParamete
 798:Lib/FreeRTOS/Source/timers.c **** 
 799:Lib/FreeRTOS/Source/timers.c ****                     /* The timer uses the xCallbackParameters member to request a
 800:Lib/FreeRTOS/Source/timers.c ****                      * callback be executed.  Check the callback is not NULL. */
 801:Lib/FreeRTOS/Source/timers.c ****                     configASSERT( pxCallback );
 802:Lib/FreeRTOS/Source/timers.c **** 
 803:Lib/FreeRTOS/Source/timers.c ****                     /* Call the function. */
 804:Lib/FreeRTOS/Source/timers.c ****                     pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParamet
 805:Lib/FreeRTOS/Source/timers.c ****                 }
 806:Lib/FreeRTOS/Source/timers.c ****                 else
 807:Lib/FreeRTOS/Source/timers.c ****                 {
 808:Lib/FreeRTOS/Source/timers.c ****                     mtCOVERAGE_TEST_MARKER();
 809:Lib/FreeRTOS/Source/timers.c ****                 }
 810:Lib/FreeRTOS/Source/timers.c ****             }
 811:Lib/FreeRTOS/Source/timers.c ****             #endif /* INCLUDE_xTimerPendFunctionCall */
 812:Lib/FreeRTOS/Source/timers.c **** 
 813:Lib/FreeRTOS/Source/timers.c ****             /* Commands that are positive are timer commands rather than pended
 814:Lib/FreeRTOS/Source/timers.c ****              * function calls. */
 815:Lib/FreeRTOS/Source/timers.c ****             if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 816:Lib/FreeRTOS/Source/timers.c ****             {
 817:Lib/FreeRTOS/Source/timers.c ****                 /* The messages uses the xTimerParameters member to work on a
 818:Lib/FreeRTOS/Source/timers.c ****                  * software timer. */
 819:Lib/FreeRTOS/Source/timers.c ****                 pxTimer = xMessage.u.xTimerParameters.pxTimer;
 820:Lib/FreeRTOS/Source/timers.c **** 
 821:Lib/FreeRTOS/Source/timers.c ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*li
 822:Lib/FreeRTOS/Source/timers.c ****                 {
 823:Lib/FreeRTOS/Source/timers.c ****                     /* The timer is in a list, remove it. */
 824:Lib/FreeRTOS/Source/timers.c ****                     ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 825:Lib/FreeRTOS/Source/timers.c ****                 }
 826:Lib/FreeRTOS/Source/timers.c ****                 else
 827:Lib/FreeRTOS/Source/timers.c ****                 {
 828:Lib/FreeRTOS/Source/timers.c ****                     mtCOVERAGE_TEST_MARKER();
 829:Lib/FreeRTOS/Source/timers.c ****                 }
 830:Lib/FreeRTOS/Source/timers.c **** 
 831:Lib/FreeRTOS/Source/timers.c ****                 traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.u.xTimerParamet
 832:Lib/FreeRTOS/Source/timers.c **** 
 833:Lib/FreeRTOS/Source/timers.c ****                 /* In this case the xTimerListsWereSwitched parameter is not used, but
 834:Lib/FreeRTOS/Source/timers.c ****                  *  it must be present in the function call.  prvSampleTimeNow() must be
 835:Lib/FreeRTOS/Source/timers.c ****                  *  called after the message is received from xTimerQueue so there is no
 836:Lib/FreeRTOS/Source/timers.c ****                  *  possibility of a higher priority task adding a message to the message
 837:Lib/FreeRTOS/Source/timers.c ****                  *  queue with a time that is ahead of the timer daemon task (because it
 838:Lib/FreeRTOS/Source/timers.c ****                  *  pre-empted the timer daemon task after the xTimeNow value was set). */
 839:Lib/FreeRTOS/Source/timers.c ****                 xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 840:Lib/FreeRTOS/Source/timers.c **** 
 841:Lib/FreeRTOS/Source/timers.c ****                 switch( xMessage.xMessageID )
 842:Lib/FreeRTOS/Source/timers.c ****                 {
 843:Lib/FreeRTOS/Source/timers.c ****                     case tmrCOMMAND_START:
 844:Lib/FreeRTOS/Source/timers.c ****                     case tmrCOMMAND_START_FROM_ISR:
 845:Lib/FreeRTOS/Source/timers.c ****                     case tmrCOMMAND_RESET:
 846:Lib/FreeRTOS/Source/timers.c ****                     case tmrCOMMAND_RESET_FROM_ISR:
 847:Lib/FreeRTOS/Source/timers.c ****                         /* Start or restart a timer. */
ARM GAS  /tmp/cc6xdUDh.s 			page 22


 848:Lib/FreeRTOS/Source/timers.c ****                         pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 849:Lib/FreeRTOS/Source/timers.c **** 
 850:Lib/FreeRTOS/Source/timers.c ****                         if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessa
 851:Lib/FreeRTOS/Source/timers.c ****                         {
 852:Lib/FreeRTOS/Source/timers.c ****                             /* The timer expired before it was added to the active
 853:Lib/FreeRTOS/Source/timers.c ****                              * timer list.  Process it now. */
 854:Lib/FreeRTOS/Source/timers.c ****                             if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 855:Lib/FreeRTOS/Source/timers.c ****                             {
 856:Lib/FreeRTOS/Source/timers.c ****                                 prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue 
 857:Lib/FreeRTOS/Source/timers.c ****                             }
 858:Lib/FreeRTOS/Source/timers.c ****                             else
 859:Lib/FreeRTOS/Source/timers.c ****                             {
 860:Lib/FreeRTOS/Source/timers.c ****                                 pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 861:Lib/FreeRTOS/Source/timers.c ****                             }
 862:Lib/FreeRTOS/Source/timers.c **** 
 863:Lib/FreeRTOS/Source/timers.c ****                             /* Call the timer callback. */
 864:Lib/FreeRTOS/Source/timers.c ****                             traceTIMER_EXPIRED( pxTimer );
 865:Lib/FreeRTOS/Source/timers.c ****                             pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 866:Lib/FreeRTOS/Source/timers.c ****                         }
 867:Lib/FreeRTOS/Source/timers.c ****                         else
 868:Lib/FreeRTOS/Source/timers.c ****                         {
 869:Lib/FreeRTOS/Source/timers.c ****                             mtCOVERAGE_TEST_MARKER();
 870:Lib/FreeRTOS/Source/timers.c ****                         }
 871:Lib/FreeRTOS/Source/timers.c **** 
 872:Lib/FreeRTOS/Source/timers.c ****                         break;
 873:Lib/FreeRTOS/Source/timers.c **** 
 874:Lib/FreeRTOS/Source/timers.c ****                     case tmrCOMMAND_STOP:
 875:Lib/FreeRTOS/Source/timers.c ****                     case tmrCOMMAND_STOP_FROM_ISR:
 876:Lib/FreeRTOS/Source/timers.c ****                         /* The timer has already been removed from the active list. */
 877:Lib/FreeRTOS/Source/timers.c ****                         pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 878:Lib/FreeRTOS/Source/timers.c ****                         break;
 879:Lib/FreeRTOS/Source/timers.c **** 
 880:Lib/FreeRTOS/Source/timers.c ****                     case tmrCOMMAND_CHANGE_PERIOD:
 881:Lib/FreeRTOS/Source/timers.c ****                     case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
 882:Lib/FreeRTOS/Source/timers.c ****                         pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 883:Lib/FreeRTOS/Source/timers.c ****                         pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 884:Lib/FreeRTOS/Source/timers.c ****                         configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 885:Lib/FreeRTOS/Source/timers.c **** 
 886:Lib/FreeRTOS/Source/timers.c ****                         /* The new period does not really have a reference, and can
 887:Lib/FreeRTOS/Source/timers.c ****                          * be longer or shorter than the old one.  The command time is
 888:Lib/FreeRTOS/Source/timers.c ****                          * therefore set to the current time, and as the period cannot
 889:Lib/FreeRTOS/Source/timers.c ****                          * be zero the next expiry time can only be in the future,
 890:Lib/FreeRTOS/Source/timers.c ****                          * meaning (unlike for the xTimerStart() case above) there is
 891:Lib/FreeRTOS/Source/timers.c ****                          * no fail case that needs to be handled here. */
 892:Lib/FreeRTOS/Source/timers.c ****                         ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerP
 893:Lib/FreeRTOS/Source/timers.c ****                         break;
 894:Lib/FreeRTOS/Source/timers.c **** 
 895:Lib/FreeRTOS/Source/timers.c ****                     case tmrCOMMAND_DELETE:
 896:Lib/FreeRTOS/Source/timers.c ****                         #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 897:Lib/FreeRTOS/Source/timers.c ****                         {
 898:Lib/FreeRTOS/Source/timers.c ****                             /* The timer has already been removed from the active list,
 899:Lib/FreeRTOS/Source/timers.c ****                              * just free up the memory if the memory was dynamically
 900:Lib/FreeRTOS/Source/timers.c ****                              * allocated. */
 901:Lib/FreeRTOS/Source/timers.c ****                             if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint
 902:Lib/FreeRTOS/Source/timers.c ****                             {
 903:Lib/FreeRTOS/Source/timers.c ****                                 vPortFree( pxTimer );
 904:Lib/FreeRTOS/Source/timers.c ****                             }
ARM GAS  /tmp/cc6xdUDh.s 			page 23


 905:Lib/FreeRTOS/Source/timers.c ****                             else
 906:Lib/FreeRTOS/Source/timers.c ****                             {
 907:Lib/FreeRTOS/Source/timers.c ****                                 pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 908:Lib/FreeRTOS/Source/timers.c ****                             }
 909:Lib/FreeRTOS/Source/timers.c ****                         }
 910:Lib/FreeRTOS/Source/timers.c ****                         #else /* if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) */
 911:Lib/FreeRTOS/Source/timers.c ****                         {
 912:Lib/FreeRTOS/Source/timers.c ****                             /* If dynamic allocation is not enabled, the memory
 913:Lib/FreeRTOS/Source/timers.c ****                              * could not have been dynamically allocated. So there is
 914:Lib/FreeRTOS/Source/timers.c ****                              * no need to free the memory - just mark the timer as
 915:Lib/FreeRTOS/Source/timers.c ****                              * "not active". */
 916:Lib/FreeRTOS/Source/timers.c ****                             pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 917:Lib/FreeRTOS/Source/timers.c ****                         }
 918:Lib/FreeRTOS/Source/timers.c ****                         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 919:Lib/FreeRTOS/Source/timers.c ****                         break;
 920:Lib/FreeRTOS/Source/timers.c **** 
 921:Lib/FreeRTOS/Source/timers.c ****                     default:
 922:Lib/FreeRTOS/Source/timers.c ****                         /* Don't expect to get here. */
 923:Lib/FreeRTOS/Source/timers.c ****                         break;
 924:Lib/FreeRTOS/Source/timers.c ****                 }
 925:Lib/FreeRTOS/Source/timers.c ****             }
 926:Lib/FreeRTOS/Source/timers.c ****         }
 927:Lib/FreeRTOS/Source/timers.c ****     }
 928:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 929:Lib/FreeRTOS/Source/timers.c **** 
 930:Lib/FreeRTOS/Source/timers.c ****     static void prvSwitchTimerLists( void )
 931:Lib/FreeRTOS/Source/timers.c ****     {
 932:Lib/FreeRTOS/Source/timers.c ****         TickType_t xNextExpireTime;
 933:Lib/FreeRTOS/Source/timers.c ****         List_t * pxTemp;
 934:Lib/FreeRTOS/Source/timers.c **** 
 935:Lib/FreeRTOS/Source/timers.c ****         /* The tick count has overflowed.  The timer lists must be switched.
 936:Lib/FreeRTOS/Source/timers.c ****          * If there are any timers still referenced from the current timer list
 937:Lib/FreeRTOS/Source/timers.c ****          * then they must have expired and should be processed before the lists
 938:Lib/FreeRTOS/Source/timers.c ****          * are switched. */
 939:Lib/FreeRTOS/Source/timers.c ****         while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 299              		.loc 1 939 16 view .LVU73
 300 0012 0C4F     		ldr	r7, .L25+4
 301              	.LVL28:
 302              	.L20:
 303              		.loc 1 939 56 is_stmt 1 view .LVU74
 304              		.loc 1 939 16 is_stmt 0 view .LVU75
 305 0014 3B68     		ldr	r3, [r7]
 306 0016 1A68     		ldr	r2, [r3]
 307              		.loc 1 939 56 view .LVU76
 308 0018 52B9     		cbnz	r2, .L22
 940:Lib/FreeRTOS/Source/timers.c ****         {
 941:Lib/FreeRTOS/Source/timers.c ****             xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 942:Lib/FreeRTOS/Source/timers.c **** 
 943:Lib/FreeRTOS/Source/timers.c ****             /* Process the expired timer.  For auto-reload timers, be careful to
 944:Lib/FreeRTOS/Source/timers.c ****              * process only expirations that occur on the current list.  Further
 945:Lib/FreeRTOS/Source/timers.c ****              * expirations must wait until after the lists are switched. */
 946:Lib/FreeRTOS/Source/timers.c ****             prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 947:Lib/FreeRTOS/Source/timers.c ****         }
 948:Lib/FreeRTOS/Source/timers.c **** 
 949:Lib/FreeRTOS/Source/timers.c ****         pxTemp = pxCurrentTimerList;
 309              		.loc 1 949 9 is_stmt 1 view .LVU77
 310              	.LVL29:
ARM GAS  /tmp/cc6xdUDh.s 			page 24


 950:Lib/FreeRTOS/Source/timers.c ****         pxCurrentTimerList = pxOverflowTimerList;
 311              		.loc 1 950 9 view .LVU78
 312              		.loc 1 950 28 is_stmt 0 view .LVU79
 313 001a 0B4A     		ldr	r2, .L25+8
 314 001c 1168     		ldr	r1, [r2]
 951:Lib/FreeRTOS/Source/timers.c ****         pxOverflowTimerList = pxTemp;
 315              		.loc 1 951 29 view .LVU80
 316 001e 1360     		str	r3, [r2]
 950:Lib/FreeRTOS/Source/timers.c ****         pxCurrentTimerList = pxOverflowTimerList;
 317              		.loc 1 950 28 view .LVU81
 318 0020 3960     		str	r1, [r7]
 319              		.loc 1 951 9 is_stmt 1 view .LVU82
 320              	.LBE5:
 321              	.LBE4:
 725:Lib/FreeRTOS/Source/timers.c ****         }
 322              		.loc 1 725 13 view .LVU83
 323 0022 0123     		movs	r3, #1
 324              	.LVL30:
 725:Lib/FreeRTOS/Source/timers.c ****         }
 325              		.loc 1 725 13 is_stmt 0 view .LVU84
 326 0024 00E0     		b	.L21
 327              	.LVL31:
 328              	.L24:
 725:Lib/FreeRTOS/Source/timers.c ****         }
 329              		.loc 1 725 13 view .LVU85
 330 0026 0023     		movs	r3, #0
 331              	.LVL32:
 332              	.L21:
 735:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 333              		.loc 1 735 5 view .LVU86
 334 0028 2046     		mov	r0, r4
 725:Lib/FreeRTOS/Source/timers.c ****         }
 335              		.loc 1 725 39 view .LVU87
 336 002a 2B60     		str	r3, [r5]
 732:Lib/FreeRTOS/Source/timers.c **** 
 337              		.loc 1 732 9 is_stmt 1 view .LVU88
 732:Lib/FreeRTOS/Source/timers.c **** 
 338              		.loc 1 732 19 is_stmt 0 view .LVU89
 339 002c 3460     		str	r4, [r6]
 734:Lib/FreeRTOS/Source/timers.c ****     }
 340              		.loc 1 734 9 is_stmt 1 view .LVU90
 735:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 341              		.loc 1 735 5 is_stmt 0 view .LVU91
 342 002e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 343              	.LVL33:
 344              	.L22:
 345              	.LBB7:
 346              	.LBB6:
 941:Lib/FreeRTOS/Source/timers.c **** 
 347              		.loc 1 941 13 is_stmt 1 view .LVU92
 946:Lib/FreeRTOS/Source/timers.c ****         }
 348              		.loc 1 946 13 view .LVU93
 941:Lib/FreeRTOS/Source/timers.c **** 
 349              		.loc 1 941 29 is_stmt 0 view .LVU94
 350 0030 DB68     		ldr	r3, [r3, #12]
 351              	.LVL34:
 946:Lib/FreeRTOS/Source/timers.c ****         }
ARM GAS  /tmp/cc6xdUDh.s 			page 25


 352              		.loc 1 946 13 view .LVU95
 353 0032 4FF0FF31 		mov	r1, #-1
 354 0036 1868     		ldr	r0, [r3]
 355 0038 FFF7FEFF 		bl	prvProcessExpiredTimer
 356              	.LVL35:
 946:Lib/FreeRTOS/Source/timers.c ****         }
 357              		.loc 1 946 13 view .LVU96
 358 003c EAE7     		b	.L20
 359              	.L26:
 360 003e 00BF     		.align	2
 361              	.L25:
 362 0040 00000000 		.word	xLastTime.17
 363 0044 00000000 		.word	pxCurrentTimerList
 364 0048 00000000 		.word	pxOverflowTimerList
 365              	.LBE6:
 366              	.LBE7:
 367              		.cfi_endproc
 368              	.LFE17:
 370              		.section	.rodata.prvTimerTask.str1.1,"aMS",%progbits,1
 371              	.LC0:
 372 0000 3000     		.ascii	"0\000"
 373              	.LC1:
 374 0002 4C69622F 		.ascii	"Lib/FreeRTOS/Source/timers.c\000"
 374      46726565 
 374      52544F53 
 374      2F536F75 
 374      7263652F 
 375              		.section	.text.prvTimerTask,"ax",%progbits
 376              		.align	1
 377              		.syntax unified
 378              		.thumb
 379              		.thumb_func
 381              	prvTimerTask:
 382              	.LVL36:
 383              	.LFB14:
 593:Lib/FreeRTOS/Source/timers.c ****         TickType_t xNextExpireTime;
 384              		.loc 1 593 5 is_stmt 1 view -0
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 24
 387              		@ frame_needed = 0, uses_anonymous_args = 0
 593:Lib/FreeRTOS/Source/timers.c ****         TickType_t xNextExpireTime;
 388              		.loc 1 593 5 is_stmt 0 view .LVU98
 389 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 390              		.cfi_def_cfa_offset 24
 391              		.cfi_offset 4, -24
 392              		.cfi_offset 5, -20
 393              		.cfi_offset 6, -16
 394              		.cfi_offset 7, -12
 395              		.cfi_offset 8, -8
 396              		.cfi_offset 14, -4
 397              	.LBB15:
 398              	.LBB16:
 699:Lib/FreeRTOS/Source/timers.c **** 
 399              		.loc 1 699 27 view .LVU99
 400 0004 504F     		ldr	r7, .L57
 401 0006 514E     		ldr	r6, .L57+4
 402              	.LBE16:
ARM GAS  /tmp/cc6xdUDh.s 			page 26


 403              	.LBE15:
 593:Lib/FreeRTOS/Source/timers.c ****         TickType_t xNextExpireTime;
 404              		.loc 1 593 5 view .LVU100
 405 0008 86B0     		sub	sp, sp, #24
 406              		.cfi_def_cfa_offset 48
 407              	.LVL37:
 408              	.L50:
 594:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xListWasEmpty;
 409              		.loc 1 594 9 is_stmt 1 view .LVU101
 595:Lib/FreeRTOS/Source/timers.c **** 
 410              		.loc 1 595 9 view .LVU102
 598:Lib/FreeRTOS/Source/timers.c **** 
 411              		.loc 1 598 9 view .LVU103
 610:Lib/FreeRTOS/Source/timers.c ****         {
 412              		.loc 1 610 9 view .LVU104
 614:Lib/FreeRTOS/Source/timers.c **** 
 413              		.loc 1 614 13 view .LVU105
 414              	.LBB19:
 415              	.LBI15:
 688:Lib/FreeRTOS/Source/timers.c ****     {
 416              		.loc 1 688 23 view .LVU106
 417              	.LBB17:
 690:Lib/FreeRTOS/Source/timers.c **** 
 418              		.loc 1 690 9 view .LVU107
 699:Lib/FreeRTOS/Source/timers.c **** 
 419              		.loc 1 699 9 view .LVU108
 699:Lib/FreeRTOS/Source/timers.c **** 
 420              		.loc 1 699 27 is_stmt 0 view .LVU109
 421 000a 3B68     		ldr	r3, [r7]
 422 000c D3F80080 		ldr	r8, [r3]
 423 0010 B8F1000F 		cmp	r8, #0
 424 0014 32D0     		beq	.L51
 425              	.LVL38:
 701:Lib/FreeRTOS/Source/timers.c ****         {
 426              		.loc 1 701 9 is_stmt 1 view .LVU110
 703:Lib/FreeRTOS/Source/timers.c ****         }
 427              		.loc 1 703 13 view .LVU111
 699:Lib/FreeRTOS/Source/timers.c **** 
 428              		.loc 1 699 27 is_stmt 0 discriminator 2 view .LVU112
 429 0016 0024     		movs	r4, #0
 703:Lib/FreeRTOS/Source/timers.c ****         }
 430              		.loc 1 703 29 view .LVU113
 431 0018 DB68     		ldr	r3, [r3, #12]
 432 001a D3F80080 		ldr	r8, [r3]
 433              	.LVL39:
 434              	.L28:
 711:Lib/FreeRTOS/Source/timers.c ****     }
 435              		.loc 1 711 9 is_stmt 1 view .LVU114
 711:Lib/FreeRTOS/Source/timers.c ****     }
 436              		.loc 1 711 9 is_stmt 0 view .LVU115
 437              	.LBE17:
 438              	.LBE19:
 618:Lib/FreeRTOS/Source/timers.c **** 
 439              		.loc 1 618 13 is_stmt 1 view .LVU116
 440              	.LBB20:
 441              	.LBI20:
 626:Lib/FreeRTOS/Source/timers.c ****                                             BaseType_t xListWasEmpty )
ARM GAS  /tmp/cc6xdUDh.s 			page 27


 442              		.loc 1 626 17 view .LVU117
 443              	.LBB21:
 629:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xTimerListsWereSwitched;
 444              		.loc 1 629 9 view .LVU118
 630:Lib/FreeRTOS/Source/timers.c **** 
 445              		.loc 1 630 9 view .LVU119
 632:Lib/FreeRTOS/Source/timers.c ****         {
 446              		.loc 1 632 9 view .LVU120
 447 001e FFF7FEFF 		bl	vTaskSuspendAll
 448              	.LVL40:
 639:Lib/FreeRTOS/Source/timers.c **** 
 449              		.loc 1 639 13 view .LVU121
 639:Lib/FreeRTOS/Source/timers.c **** 
 450              		.loc 1 639 24 is_stmt 0 view .LVU122
 451 0022 02A8     		add	r0, sp, #8
 452 0024 FFF7FEFF 		bl	prvSampleTimeNow
 453              	.LVL41:
 641:Lib/FreeRTOS/Source/timers.c ****             {
 454              		.loc 1 641 15 view .LVU123
 455 0028 029B     		ldr	r3, [sp, #8]
 639:Lib/FreeRTOS/Source/timers.c **** 
 456              		.loc 1 639 24 view .LVU124
 457 002a 0546     		mov	r5, r0
 458              	.LVL42:
 641:Lib/FreeRTOS/Source/timers.c ****             {
 459              		.loc 1 641 13 is_stmt 1 view .LVU125
 641:Lib/FreeRTOS/Source/timers.c ****             {
 460              		.loc 1 641 15 is_stmt 0 view .LVU126
 461 002c 002B     		cmp	r3, #0
 462 002e 3AD1     		bne	.L29
 644:Lib/FreeRTOS/Source/timers.c ****                 {
 463              		.loc 1 644 17 is_stmt 1 view .LVU127
 644:Lib/FreeRTOS/Source/timers.c ****                 {
 464              		.loc 1 644 19 is_stmt 0 view .LVU128
 465 0030 34BB     		cbnz	r4, .L30
 644:Lib/FreeRTOS/Source/timers.c ****                 {
 466              		.loc 1 644 50 discriminator 1 view .LVU129
 467 0032 4045     		cmp	r0, r8
 468 0034 2AD3     		bcc	.L31
 646:Lib/FreeRTOS/Source/timers.c ****                     prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 469              		.loc 1 646 21 is_stmt 1 view .LVU130
 646:Lib/FreeRTOS/Source/timers.c ****                     prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 470              		.loc 1 646 30 is_stmt 0 view .LVU131
 471 0036 FFF7FEFF 		bl	xTaskResumeAll
 472              	.LVL43:
 647:Lib/FreeRTOS/Source/timers.c ****                 }
 473              		.loc 1 647 21 is_stmt 1 view .LVU132
 474 003a 2946     		mov	r1, r5
 475 003c 4046     		mov	r0, r8
 476 003e FFF7FEFF 		bl	prvProcessExpiredTimer
 477              	.LVL44:
 478              	.L38:
 647:Lib/FreeRTOS/Source/timers.c ****                 }
 479              		.loc 1 647 21 is_stmt 0 view .LVU133
 480              	.LBE21:
 481              	.LBE20:
 482              	.LBB24:
ARM GAS  /tmp/cc6xdUDh.s 			page 28


 483              	.LBB25:
 789:Lib/FreeRTOS/Source/timers.c ****         {
 484              		.loc 1 789 69 is_stmt 1 view .LVU134
 789:Lib/FreeRTOS/Source/timers.c ****         {
 485              		.loc 1 789 16 is_stmt 0 view .LVU135
 486 0042 0022     		movs	r2, #0
 487 0044 3068     		ldr	r0, [r6]
 488 0046 02A9     		add	r1, sp, #8
 489 0048 FFF7FEFF 		bl	xQueueReceive
 490              	.LVL45:
 789:Lib/FreeRTOS/Source/timers.c ****         {
 491              		.loc 1 789 69 discriminator 1 view .LVU136
 492 004c 0028     		cmp	r0, #0
 493 004e DCD0     		beq	.L50
 795:Lib/FreeRTOS/Source/timers.c ****                 {
 494              		.loc 1 795 17 is_stmt 1 view .LVU137
 795:Lib/FreeRTOS/Source/timers.c ****                 {
 495              		.loc 1 795 19 is_stmt 0 view .LVU138
 496 0050 029B     		ldr	r3, [sp, #8]
 497              	.LBB26:
 804:Lib/FreeRTOS/Source/timers.c ****                 }
 498              		.loc 1 804 63 view .LVU139
 499 0052 0498     		ldr	r0, [sp, #16]
 500              	.LBE26:
 795:Lib/FreeRTOS/Source/timers.c ****                 {
 501              		.loc 1 795 19 view .LVU140
 502 0054 002B     		cmp	r3, #0
 503 0056 29DB     		blt	.L34
 504              	.L37:
 819:Lib/FreeRTOS/Source/timers.c **** 
 505              		.loc 1 819 17 is_stmt 1 view .LVU141
 819:Lib/FreeRTOS/Source/timers.c **** 
 506              		.loc 1 819 25 is_stmt 0 view .LVU142
 507 0058 049C     		ldr	r4, [sp, #16]
 508              	.LVL46:
 821:Lib/FreeRTOS/Source/timers.c ****                 {
 509              		.loc 1 821 17 is_stmt 1 view .LVU143
 821:Lib/FreeRTOS/Source/timers.c ****                 {
 510              		.loc 1 821 19 is_stmt 0 view .LVU144
 511 005a 6369     		ldr	r3, [r4, #20]
 512 005c 6BBB     		cbnz	r3, .L35
 513              	.L36:
 828:Lib/FreeRTOS/Source/timers.c ****                 }
 514              		.loc 1 828 45 is_stmt 1 view .LVU145
 831:Lib/FreeRTOS/Source/timers.c **** 
 515              		.loc 1 831 119 view .LVU146
 839:Lib/FreeRTOS/Source/timers.c **** 
 516              		.loc 1 839 17 view .LVU147
 839:Lib/FreeRTOS/Source/timers.c **** 
 517              		.loc 1 839 28 is_stmt 0 view .LVU148
 518 005e 01A8     		add	r0, sp, #4
 519 0060 FFF7FEFF 		bl	prvSampleTimeNow
 520              	.LVL47:
 841:Lib/FreeRTOS/Source/timers.c ****                 {
 521              		.loc 1 841 17 view .LVU149
 522 0064 029B     		ldr	r3, [sp, #8]
 839:Lib/FreeRTOS/Source/timers.c **** 
ARM GAS  /tmp/cc6xdUDh.s 			page 29


 523              		.loc 1 839 28 view .LVU150
 524 0066 0546     		mov	r5, r0
 525              	.LVL48:
 841:Lib/FreeRTOS/Source/timers.c ****                 {
 526              		.loc 1 841 17 is_stmt 1 view .LVU151
 527 0068 013B     		subs	r3, r3, #1
 528 006a 082B     		cmp	r3, #8
 529 006c E9D8     		bhi	.L38
 530 006e DFE803F0 		tbb	[pc, r3]
 531              	.L41:
 532 0072 28       		.byte	(.L43-.L41)/2
 533 0073 28       		.byte	(.L43-.L41)/2
 534 0074 64       		.byte	(.L44-.L41)/2
 535 0075 4B       		.byte	(.L40-.L41)/2
 536 0076 64       		.byte	(.L44-.L41)/2
 537 0077 28       		.byte	(.L43-.L41)/2
 538 0078 28       		.byte	(.L43-.L41)/2
 539 0079 64       		.byte	(.L44-.L41)/2
 540 007a 4B       		.byte	(.L40-.L41)/2
 541              	.LVL49:
 542 007b 00       		.p2align 1
 543              	.L51:
 841:Lib/FreeRTOS/Source/timers.c ****                 {
 544              		.loc 1 841 17 is_stmt 0 view .LVU152
 545              	.LBE25:
 546              	.LBE24:
 547              	.LBB30:
 548              	.LBB18:
 699:Lib/FreeRTOS/Source/timers.c **** 
 549              		.loc 1 699 27 discriminator 1 view .LVU153
 550 007c 0124     		movs	r4, #1
 551 007e CEE7     		b	.L28
 552              	.LVL50:
 553              	.L30:
 699:Lib/FreeRTOS/Source/timers.c **** 
 554              		.loc 1 699 27 discriminator 1 view .LVU154
 555              	.LBE18:
 556              	.LBE30:
 557              	.LBB31:
 558              	.LBB22:
 661:Lib/FreeRTOS/Source/timers.c ****                     }
 559              		.loc 1 661 25 is_stmt 1 view .LVU155
 661:Lib/FreeRTOS/Source/timers.c ****                     }
 560              		.loc 1 661 41 is_stmt 0 view .LVU156
 561 0080 334B     		ldr	r3, .L57+8
 562 0082 1B68     		ldr	r3, [r3]
 563 0084 1C68     		ldr	r4, [r3]
 564              	.LVL51:
 661:Lib/FreeRTOS/Source/timers.c ****                     }
 565              		.loc 1 661 41 view .LVU157
 566 0086 B4FA84F4 		clz	r4, r4
 567 008a 6409     		lsrs	r4, r4, #5
 568              	.L31:
 569              	.LVL52:
 664:Lib/FreeRTOS/Source/timers.c **** 
 570              		.loc 1 664 21 is_stmt 1 view .LVU158
 571 008c 2246     		mov	r2, r4
ARM GAS  /tmp/cc6xdUDh.s 			page 30


 572 008e 3068     		ldr	r0, [r6]
 573              	.LVL53:
 664:Lib/FreeRTOS/Source/timers.c **** 
 574              		.loc 1 664 21 is_stmt 0 view .LVU159
 575 0090 A8EB0501 		sub	r1, r8, r5
 576 0094 FFF7FEFF 		bl	vQueueWaitForMessageRestricted
 577              	.LVL54:
 666:Lib/FreeRTOS/Source/timers.c ****                     {
 578              		.loc 1 666 21 is_stmt 1 view .LVU160
 666:Lib/FreeRTOS/Source/timers.c ****                     {
 579              		.loc 1 666 25 is_stmt 0 view .LVU161
 580 0098 FFF7FEFF 		bl	xTaskResumeAll
 581              	.LVL55:
 666:Lib/FreeRTOS/Source/timers.c ****                     {
 582              		.loc 1 666 23 discriminator 1 view .LVU162
 583 009c 0028     		cmp	r0, #0
 584 009e D0D1     		bne	.L38
 672:Lib/FreeRTOS/Source/timers.c ****                     }
 585              		.loc 1 672 25 is_stmt 1 view .LVU163
 586 00a0 FFF7FEFF 		bl	vPortYield
 587              	.LVL56:
 588 00a4 CDE7     		b	.L38
 589              	.LVL57:
 590              	.L29:
 682:Lib/FreeRTOS/Source/timers.c ****             }
 591              		.loc 1 682 17 view .LVU164
 682:Lib/FreeRTOS/Source/timers.c ****             }
 592              		.loc 1 682 26 is_stmt 0 view .LVU165
 593 00a6 FFF7FEFF 		bl	xTaskResumeAll
 594              	.LVL58:
 682:Lib/FreeRTOS/Source/timers.c ****             }
 595              		.loc 1 682 26 view .LVU166
 596              	.LBE22:
 597              	.LBE31:
 621:Lib/FreeRTOS/Source/timers.c ****         }
 598              		.loc 1 621 13 is_stmt 1 discriminator 1 view .LVU167
 599              	.LBB32:
 600              	.LBI24:
 782:Lib/FreeRTOS/Source/timers.c ****     {
 601              		.loc 1 782 17 view .LVU168
 602              	.LBB28:
 784:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer;
 603              		.loc 1 784 9 view .LVU169
 785:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xTimerListsWereSwitched;
 604              		.loc 1 785 9 view .LVU170
 786:Lib/FreeRTOS/Source/timers.c ****         TickType_t xTimeNow;
 605              		.loc 1 786 9 view .LVU171
 787:Lib/FreeRTOS/Source/timers.c **** 
 606              		.loc 1 787 9 view .LVU172
 789:Lib/FreeRTOS/Source/timers.c ****         {
 607              		.loc 1 789 9 view .LVU173
 608              	.LBE28:
 609              	.LBE32:
 610              	.LBB33:
 611              	.LBB23:
 685:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 612              		.loc 1 685 5 is_stmt 0 view .LVU174
ARM GAS  /tmp/cc6xdUDh.s 			page 31


 613 00aa CAE7     		b	.L38
 614              	.L34:
 615              	.LBE23:
 616              	.LBE33:
 617              	.LBB34:
 618              	.LBB29:
 619              	.LBB27:
 797:Lib/FreeRTOS/Source/timers.c **** 
 620              		.loc 1 797 21 is_stmt 1 view .LVU175
 621              	.LVL59:
 801:Lib/FreeRTOS/Source/timers.c **** 
 622              		.loc 1 801 21 view .LVU176
 801:Lib/FreeRTOS/Source/timers.c **** 
 623              		.loc 1 801 47 discriminator 2 view .LVU177
 804:Lib/FreeRTOS/Source/timers.c ****                 }
 624              		.loc 1 804 21 view .LVU178
 625 00ac 039B     		ldr	r3, [sp, #12]
 626 00ae 0599     		ldr	r1, [sp, #20]
 627 00b0 9847     		blx	r3
 628              	.LVL60:
 629              	.LBE27:
 808:Lib/FreeRTOS/Source/timers.c ****                 }
 630              		.loc 1 808 45 view .LVU179
 815:Lib/FreeRTOS/Source/timers.c ****             {
 631              		.loc 1 815 13 view .LVU180
 815:Lib/FreeRTOS/Source/timers.c ****             {
 632              		.loc 1 815 15 is_stmt 0 view .LVU181
 633 00b2 029B     		ldr	r3, [sp, #8]
 634 00b4 002B     		cmp	r3, #0
 635 00b6 C4DB     		blt	.L38
 636 00b8 CEE7     		b	.L37
 637              	.LVL61:
 638              	.L35:
 824:Lib/FreeRTOS/Source/timers.c ****                 }
 639              		.loc 1 824 21 is_stmt 1 view .LVU182
 824:Lib/FreeRTOS/Source/timers.c ****                 }
 640              		.loc 1 824 30 is_stmt 0 view .LVU183
 641 00ba 201D     		adds	r0, r4, #4
 642 00bc FFF7FEFF 		bl	uxListRemove
 643              	.LVL62:
 644 00c0 CDE7     		b	.L36
 645              	.LVL63:
 646              	.L43:
 848:Lib/FreeRTOS/Source/timers.c **** 
 647              		.loc 1 848 25 is_stmt 1 view .LVU184
 848:Lib/FreeRTOS/Source/timers.c **** 
 648              		.loc 1 848 43 is_stmt 0 view .LVU185
 649 00c2 94F82830 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 850:Lib/FreeRTOS/Source/timers.c ****                         {
 650              		.loc 1 850 29 view .LVU186
 651 00c6 A169     		ldr	r1, [r4, #24]
 848:Lib/FreeRTOS/Source/timers.c **** 
 652              		.loc 1 848 43 view .LVU187
 653 00c8 43F00103 		orr	r3, r3, #1
 654 00cc 84F82830 		strb	r3, [r4, #40]
 850:Lib/FreeRTOS/Source/timers.c ****                         {
 655              		.loc 1 850 25 is_stmt 1 view .LVU188
ARM GAS  /tmp/cc6xdUDh.s 			page 32


 850:Lib/FreeRTOS/Source/timers.c ****                         {
 656              		.loc 1 850 29 is_stmt 0 view .LVU189
 657 00d0 039B     		ldr	r3, [sp, #12]
 658 00d2 0246     		mov	r2, r0
 659 00d4 1944     		add	r1, r1, r3
 660 00d6 2046     		mov	r0, r4
 661              	.LVL64:
 850:Lib/FreeRTOS/Source/timers.c ****                         {
 662              		.loc 1 850 29 view .LVU190
 663 00d8 FFF7FEFF 		bl	prvInsertTimerInActiveList
 664              	.LVL65:
 850:Lib/FreeRTOS/Source/timers.c ****                         {
 665              		.loc 1 850 27 discriminator 1 view .LVU191
 666 00dc 0028     		cmp	r0, #0
 667 00de B0D0     		beq	.L38
 854:Lib/FreeRTOS/Source/timers.c ****                             {
 668              		.loc 1 854 29 is_stmt 1 view .LVU192
 854:Lib/FreeRTOS/Source/timers.c ****                             {
 669              		.loc 1 854 42 is_stmt 0 view .LVU193
 670 00e0 94F82830 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 854:Lib/FreeRTOS/Source/timers.c ****                             {
 671              		.loc 1 854 31 view .LVU194
 672 00e4 5A07     		lsls	r2, r3, #29
 673 00e6 0AD5     		bpl	.L46
 856:Lib/FreeRTOS/Source/timers.c ****                             }
 674              		.loc 1 856 33 is_stmt 1 view .LVU195
 675 00e8 A369     		ldr	r3, [r4, #24]
 676 00ea 0399     		ldr	r1, [sp, #12]
 677 00ec 2A46     		mov	r2, r5
 678 00ee 2046     		mov	r0, r4
 679 00f0 1944     		add	r1, r1, r3
 680 00f2 FFF7FEFF 		bl	prvReloadTimer
 681              	.LVL66:
 682              	.L47:
 864:Lib/FreeRTOS/Source/timers.c ****                             pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 683              		.loc 1 864 58 view .LVU196
 865:Lib/FreeRTOS/Source/timers.c ****                         }
 684              		.loc 1 865 29 view .LVU197
 685 00f6 2046     		mov	r0, r4
 686 00f8 236A     		ldr	r3, [r4, #32]
 687 00fa 9847     		blx	r3
 688              	.LVL67:
 689 00fc A1E7     		b	.L38
 690              	.L46:
 860:Lib/FreeRTOS/Source/timers.c ****                             }
 691              		.loc 1 860 33 view .LVU198
 860:Lib/FreeRTOS/Source/timers.c ****                             }
 692              		.loc 1 860 51 is_stmt 0 view .LVU199
 693 00fe 23F00103 		bic	r3, r3, #1
 694 0102 84F82830 		strb	r3, [r4, #40]
 695 0106 F6E7     		b	.L47
 696              	.LVL68:
 697              	.L40:
 882:Lib/FreeRTOS/Source/timers.c ****                         pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 698              		.loc 1 882 25 is_stmt 1 view .LVU200
 882:Lib/FreeRTOS/Source/timers.c ****                         pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 699              		.loc 1 882 43 is_stmt 0 view .LVU201
ARM GAS  /tmp/cc6xdUDh.s 			page 33


 700 0108 94F82830 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 701 010c 43F00103 		orr	r3, r3, #1
 702 0110 84F82830 		strb	r3, [r4, #40]
 883:Lib/FreeRTOS/Source/timers.c ****                         configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 703              		.loc 1 883 25 is_stmt 1 view .LVU202
 883:Lib/FreeRTOS/Source/timers.c ****                         configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 704              		.loc 1 883 83 is_stmt 0 view .LVU203
 705 0114 0399     		ldr	r1, [sp, #12]
 883:Lib/FreeRTOS/Source/timers.c ****                         configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 706              		.loc 1 883 54 view .LVU204
 707 0116 A161     		str	r1, [r4, #24]
 884:Lib/FreeRTOS/Source/timers.c **** 
 708              		.loc 1 884 25 is_stmt 1 view .LVU205
 709 0118 41B9     		cbnz	r1, .L48
 884:Lib/FreeRTOS/Source/timers.c **** 
 710              		.loc 1 884 25 discriminator 1 view .LVU206
 711 011a FFF7FEFF 		bl	ulSetInterruptMask
 712              	.LVL69:
 884:Lib/FreeRTOS/Source/timers.c **** 
 713              		.loc 1 884 25 discriminator 1 view .LVU207
 714 011e 4FF45D71 		mov	r1, #884
 715 0122 0C4B     		ldr	r3, .L57+12
 716 0124 0C4A     		ldr	r2, .L57+16
 717 0126 0D48     		ldr	r0, .L57+20
 718 0128 FFF7FEFF 		bl	__assert_func
 719              	.LVL70:
 720              	.L48:
 884:Lib/FreeRTOS/Source/timers.c **** 
 721              		.loc 1 884 77 discriminator 2 view .LVU208
 892:Lib/FreeRTOS/Source/timers.c ****                         break;
 722              		.loc 1 892 25 view .LVU209
 892:Lib/FreeRTOS/Source/timers.c ****                         break;
 723              		.loc 1 892 34 is_stmt 0 view .LVU210
 724 012c 0346     		mov	r3, r0
 725 012e 0246     		mov	r2, r0
 726 0130 0144     		add	r1, r1, r0
 727 0132 2046     		mov	r0, r4
 728              	.LVL71:
 892:Lib/FreeRTOS/Source/timers.c ****                         break;
 729              		.loc 1 892 34 view .LVU211
 730 0134 FFF7FEFF 		bl	prvInsertTimerInActiveList
 731              	.LVL72:
 893:Lib/FreeRTOS/Source/timers.c **** 
 732              		.loc 1 893 25 is_stmt 1 view .LVU212
 733 0138 83E7     		b	.L38
 734              	.LVL73:
 735              	.L44:
 916:Lib/FreeRTOS/Source/timers.c ****                         }
 736              		.loc 1 916 29 view .LVU213
 916:Lib/FreeRTOS/Source/timers.c ****                         }
 737              		.loc 1 916 47 is_stmt 0 view .LVU214
 738 013a 94F82830 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 739 013e 23F00103 		bic	r3, r3, #1
 740 0142 84F82830 		strb	r3, [r4, #40]
 919:Lib/FreeRTOS/Source/timers.c **** 
 741              		.loc 1 919 25 is_stmt 1 view .LVU215
 742 0146 7CE7     		b	.L38
ARM GAS  /tmp/cc6xdUDh.s 			page 34


 743              	.L58:
 744              		.align	2
 745              	.L57:
 746 0148 00000000 		.word	pxCurrentTimerList
 747 014c 00000000 		.word	xTimerQueue
 748 0150 00000000 		.word	pxOverflowTimerList
 749 0154 00000000 		.word	.LC0
 750 0158 00000000 		.word	__func__.16
 751 015c 02000000 		.word	.LC1
 752              	.LBE29:
 753              	.LBE34:
 754              		.cfi_endproc
 755              	.LFE14:
 757              		.section	.rodata.prvCheckForValidListAndQueue.str1.1,"aMS",%progbits,1
 758              	.LC2:
 759 0000 546D7251 		.ascii	"TmrQ\000"
 759      00
 760              		.section	.text.prvCheckForValidListAndQueue,"ax",%progbits
 761              		.align	1
 762              		.syntax unified
 763              		.thumb
 764              		.thumb_func
 766              	prvCheckForValidListAndQueue:
 767              	.LFB21:
 952:Lib/FreeRTOS/Source/timers.c ****     }
 953:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 954:Lib/FreeRTOS/Source/timers.c **** 
 955:Lib/FreeRTOS/Source/timers.c ****     static void prvCheckForValidListAndQueue( void )
 956:Lib/FreeRTOS/Source/timers.c ****     {
 768              		.loc 1 956 5 view -0
 769              		.cfi_startproc
 770              		@ args = 0, pretend = 0, frame = 0
 771              		@ frame_needed = 0, uses_anonymous_args = 0
 957:Lib/FreeRTOS/Source/timers.c ****         /* Check that the list from which active timers are referenced, and the
 958:Lib/FreeRTOS/Source/timers.c ****          * queue used to communicate with the timer service, have been
 959:Lib/FreeRTOS/Source/timers.c ****          * initialised. */
 960:Lib/FreeRTOS/Source/timers.c ****         taskENTER_CRITICAL();
 772              		.loc 1 960 9 view .LVU217
 956:Lib/FreeRTOS/Source/timers.c ****         /* Check that the list from which active timers are referenced, and the
 773              		.loc 1 956 5 is_stmt 0 view .LVU218
 774 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 775              		.cfi_def_cfa_offset 32
 776              		.cfi_offset 4, -20
 777              		.cfi_offset 5, -16
 778              		.cfi_offset 6, -12
 779              		.cfi_offset 7, -8
 780              		.cfi_offset 14, -4
 961:Lib/FreeRTOS/Source/timers.c ****         {
 962:Lib/FreeRTOS/Source/timers.c ****             if( xTimerQueue == NULL )
 781              		.loc 1 962 29 view .LVU219
 782 0002 114C     		ldr	r4, .L66
 960:Lib/FreeRTOS/Source/timers.c ****         {
 783              		.loc 1 960 9 view .LVU220
 784 0004 FFF7FEFF 		bl	vPortEnterCritical
 785              	.LVL74:
 786              		.loc 1 962 13 is_stmt 1 view .LVU221
 787              		.loc 1 962 15 is_stmt 0 view .LVU222
ARM GAS  /tmp/cc6xdUDh.s 			page 35


 788 0008 2568     		ldr	r5, [r4]
 789 000a BDB9     		cbnz	r5, .L61
 963:Lib/FreeRTOS/Source/timers.c ****             {
 964:Lib/FreeRTOS/Source/timers.c ****                 vListInitialise( &xActiveTimerList1 );
 790              		.loc 1 964 17 is_stmt 1 view .LVU223
 791 000c 0F4F     		ldr	r7, .L66+4
 965:Lib/FreeRTOS/Source/timers.c ****                 vListInitialise( &xActiveTimerList2 );
 792              		.loc 1 965 17 is_stmt 0 view .LVU224
 793 000e 104E     		ldr	r6, .L66+8
 964:Lib/FreeRTOS/Source/timers.c ****                 vListInitialise( &xActiveTimerList2 );
 794              		.loc 1 964 17 view .LVU225
 795 0010 3846     		mov	r0, r7
 796 0012 FFF7FEFF 		bl	vListInitialise
 797              	.LVL75:
 798              		.loc 1 965 17 is_stmt 1 view .LVU226
 799 0016 3046     		mov	r0, r6
 800 0018 FFF7FEFF 		bl	vListInitialise
 801              	.LVL76:
 966:Lib/FreeRTOS/Source/timers.c ****                 pxCurrentTimerList = &xActiveTimerList1;
 802              		.loc 1 966 17 view .LVU227
 803              		.loc 1 966 36 is_stmt 0 view .LVU228
 804 001c 0D4B     		ldr	r3, .L66+12
 805              	.LBB35:
 967:Lib/FreeRTOS/Source/timers.c ****                 pxOverflowTimerList = &xActiveTimerList2;
 968:Lib/FreeRTOS/Source/timers.c **** 
 969:Lib/FreeRTOS/Source/timers.c ****                 #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 970:Lib/FreeRTOS/Source/timers.c ****                 {
 971:Lib/FreeRTOS/Source/timers.c ****                     /* The timer queue is allocated statically in case
 972:Lib/FreeRTOS/Source/timers.c ****                      * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
 973:Lib/FreeRTOS/Source/timers.c ****                     PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                        
 974:Lib/FreeRTOS/Source/timers.c ****                     PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIME
 975:Lib/FreeRTOS/Source/timers.c **** 
 976:Lib/FreeRTOS/Source/timers.c ****                     xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( U
 806              		.loc 1 976 35 view .LVU229
 807 001e 1021     		movs	r1, #16
 808              	.LBE35:
 966:Lib/FreeRTOS/Source/timers.c ****                 pxCurrentTimerList = &xActiveTimerList1;
 809              		.loc 1 966 36 view .LVU230
 810 0020 1F60     		str	r7, [r3]
 967:Lib/FreeRTOS/Source/timers.c ****                 pxOverflowTimerList = &xActiveTimerList2;
 811              		.loc 1 967 17 is_stmt 1 view .LVU231
 967:Lib/FreeRTOS/Source/timers.c ****                 pxOverflowTimerList = &xActiveTimerList2;
 812              		.loc 1 967 37 is_stmt 0 view .LVU232
 813 0022 0D4B     		ldr	r3, .L66+16
 814              	.LBB36:
 815              		.loc 1 976 35 view .LVU233
 816 0024 0A20     		movs	r0, #10
 817              	.LBE36:
 967:Lib/FreeRTOS/Source/timers.c ****                 pxOverflowTimerList = &xActiveTimerList2;
 818              		.loc 1 967 37 view .LVU234
 819 0026 1E60     		str	r6, [r3]
 820              	.LBB37:
 973:Lib/FreeRTOS/Source/timers.c ****                     PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIME
 821              		.loc 1 973 37 is_stmt 1 view .LVU235
 974:Lib/FreeRTOS/Source/timers.c **** 
 822              		.loc 1 974 37 view .LVU236
 823              		.loc 1 976 21 view .LVU237
ARM GAS  /tmp/cc6xdUDh.s 			page 36


 824              		.loc 1 976 35 is_stmt 0 view .LVU238
 825 0028 0C4A     		ldr	r2, .L66+20
 826 002a 0D4B     		ldr	r3, .L66+24
 827 002c 0095     		str	r5, [sp]
 828 002e FFF7FEFF 		bl	xQueueGenericCreateStatic
 829              	.LVL77:
 830              		.loc 1 976 33 discriminator 1 view .LVU239
 831 0032 2060     		str	r0, [r4]
 832              	.LBE37:
 977:Lib/FreeRTOS/Source/timers.c ****                 }
 978:Lib/FreeRTOS/Source/timers.c ****                 #else
 979:Lib/FreeRTOS/Source/timers.c ****                 {
 980:Lib/FreeRTOS/Source/timers.c ****                     xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( D
 981:Lib/FreeRTOS/Source/timers.c ****                 }
 982:Lib/FreeRTOS/Source/timers.c ****                 #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 983:Lib/FreeRTOS/Source/timers.c **** 
 984:Lib/FreeRTOS/Source/timers.c ****                 #if ( configQUEUE_REGISTRY_SIZE > 0 )
 985:Lib/FreeRTOS/Source/timers.c ****                 {
 986:Lib/FreeRTOS/Source/timers.c ****                     if( xTimerQueue != NULL )
 833              		.loc 1 986 21 is_stmt 1 view .LVU240
 834              		.loc 1 986 23 is_stmt 0 view .LVU241
 835 0034 10B1     		cbz	r0, .L61
 987:Lib/FreeRTOS/Source/timers.c ****                     {
 988:Lib/FreeRTOS/Source/timers.c ****                         vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 836              		.loc 1 988 25 is_stmt 1 view .LVU242
 837 0036 0B49     		ldr	r1, .L66+28
 838 0038 FFF7FEFF 		bl	vQueueAddToRegistry
 839              	.LVL78:
 840              	.L61:
 989:Lib/FreeRTOS/Source/timers.c ****                     }
 990:Lib/FreeRTOS/Source/timers.c ****                     else
 991:Lib/FreeRTOS/Source/timers.c ****                     {
 992:Lib/FreeRTOS/Source/timers.c ****                         mtCOVERAGE_TEST_MARKER();
 993:Lib/FreeRTOS/Source/timers.c ****                     }
 994:Lib/FreeRTOS/Source/timers.c ****                 }
 995:Lib/FreeRTOS/Source/timers.c ****                 #endif /* configQUEUE_REGISTRY_SIZE */
 996:Lib/FreeRTOS/Source/timers.c ****             }
 997:Lib/FreeRTOS/Source/timers.c ****             else
 998:Lib/FreeRTOS/Source/timers.c ****             {
 999:Lib/FreeRTOS/Source/timers.c ****                 mtCOVERAGE_TEST_MARKER();
 841              		.loc 1 999 41 view .LVU243
1000:Lib/FreeRTOS/Source/timers.c ****             }
1001:Lib/FreeRTOS/Source/timers.c ****         }
1002:Lib/FreeRTOS/Source/timers.c ****         taskEXIT_CRITICAL();
 842              		.loc 1 1002 9 view .LVU244
1003:Lib/FreeRTOS/Source/timers.c ****     }
 843              		.loc 1 1003 5 is_stmt 0 view .LVU245
 844 003c 03B0     		add	sp, sp, #12
 845              		.cfi_def_cfa_offset 20
 846              		@ sp needed
 847 003e BDE8F040 		pop	{r4, r5, r6, r7, lr}
 848              		.cfi_restore 14
 849              		.cfi_restore 7
 850              		.cfi_restore 6
 851              		.cfi_restore 5
 852              		.cfi_restore 4
 853              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/cc6xdUDh.s 			page 37


1002:Lib/FreeRTOS/Source/timers.c ****     }
 854              		.loc 1 1002 9 view .LVU246
 855 0042 FFF7FEBF 		b	vPortExitCritical
 856              	.LVL79:
 857              	.L67:
 858 0046 00BF     		.align	2
 859              	.L66:
 860 0048 00000000 		.word	xTimerQueue
 861 004c 00000000 		.word	xActiveTimerList1
 862 0050 00000000 		.word	xActiveTimerList2
 863 0054 00000000 		.word	pxCurrentTimerList
 864 0058 00000000 		.word	pxOverflowTimerList
 865 005c 00000000 		.word	ucStaticTimerQueueStorage.15
 866 0060 00000000 		.word	xStaticTimerQueue.14
 867 0064 00000000 		.word	.LC2
 868              		.cfi_endproc
 869              	.LFE21:
 871              		.section	.rodata.xTimerCreateTimerTask.str1.1,"aMS",%progbits,1
 872              	.LC3:
 873 0000 546D7220 		.ascii	"Tmr Svc\000"
 873      53766300 
 874              		.section	.text.xTimerCreateTimerTask,"ax",%progbits
 875              		.align	1
 876              		.global	xTimerCreateTimerTask
 877              		.syntax unified
 878              		.thumb
 879              		.thumb_func
 881              	xTimerCreateTimerTask:
 882              	.LFB0:
 234:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xReturn = pdFAIL;
 883              		.loc 1 234 5 is_stmt 1 view -0
 884              		.cfi_startproc
 885              		@ args = 0, pretend = 0, frame = 16
 886              		@ frame_needed = 0, uses_anonymous_args = 0
 235:Lib/FreeRTOS/Source/timers.c **** 
 887              		.loc 1 235 9 view .LVU248
 888              	.LVL80:
 241:Lib/FreeRTOS/Source/timers.c **** 
 889              		.loc 1 241 9 view .LVU249
 234:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xReturn = pdFAIL;
 890              		.loc 1 234 5 is_stmt 0 view .LVU250
 891 0000 10B5     		push	{r4, lr}
 892              		.cfi_def_cfa_offset 8
 893              		.cfi_offset 4, -8
 894              		.cfi_offset 14, -4
 895 0002 88B0     		sub	sp, sp, #32
 896              		.cfi_def_cfa_offset 40
 241:Lib/FreeRTOS/Source/timers.c **** 
 897              		.loc 1 241 9 view .LVU251
 898 0004 FFF7FEFF 		bl	prvCheckForValidListAndQueue
 899              	.LVL81:
 243:Lib/FreeRTOS/Source/timers.c ****         {
 900              		.loc 1 243 9 is_stmt 1 view .LVU252
 243:Lib/FreeRTOS/Source/timers.c ****         {
 901              		.loc 1 243 25 is_stmt 0 view .LVU253
 902 0008 124B     		ldr	r3, .L78
 243:Lib/FreeRTOS/Source/timers.c ****         {
ARM GAS  /tmp/cc6xdUDh.s 			page 38


 903              		.loc 1 243 11 view .LVU254
 904 000a 1B68     		ldr	r3, [r3]
 905 000c B3B1     		cbz	r3, .L69
 906              	.LBB38:
 247:Lib/FreeRTOS/Source/timers.c ****                 StackType_t * pxTimerTaskStackBuffer = NULL;
 907              		.loc 1 247 17 is_stmt 1 view .LVU255
 247:Lib/FreeRTOS/Source/timers.c ****                 StackType_t * pxTimerTaskStackBuffer = NULL;
 908              		.loc 1 247 32 is_stmt 0 view .LVU256
 909 000e 0024     		movs	r4, #0
 251:Lib/FreeRTOS/Source/timers.c ****                 xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 910              		.loc 1 251 17 view .LVU257
 911 0010 07AA     		add	r2, sp, #28
 912 0012 06A9     		add	r1, sp, #24
 913 0014 05A8     		add	r0, sp, #20
 248:Lib/FreeRTOS/Source/timers.c ****                 uint32_t ulTimerTaskStackSize;
 914              		.loc 1 248 31 view .LVU258
 915 0016 CDE90544 		strd	r4, r4, [sp, #20]
 249:Lib/FreeRTOS/Source/timers.c **** 
 916              		.loc 1 249 17 is_stmt 1 view .LVU259
 251:Lib/FreeRTOS/Source/timers.c ****                 xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 917              		.loc 1 251 17 view .LVU260
 918 001a FFF7FEFF 		bl	vApplicationGetTimerTaskMemory
 919              	.LVL82:
 252:Lib/FreeRTOS/Source/timers.c ****                                                       configTIMER_SERVICE_TASK_NAME,
 920              		.loc 1 252 17 view .LVU261
 252:Lib/FreeRTOS/Source/timers.c ****                                                       configTIMER_SERVICE_TASK_NAME,
 921              		.loc 1 252 36 is_stmt 0 view .LVU262
 922 001e 059B     		ldr	r3, [sp, #20]
 923 0020 079A     		ldr	r2, [sp, #28]
 924 0022 0293     		str	r3, [sp, #8]
 925 0024 069B     		ldr	r3, [sp, #24]
 926 0026 0C49     		ldr	r1, .L78+4
 927 0028 0193     		str	r3, [sp, #4]
 928 002a 0223     		movs	r3, #2
 929 002c 0B48     		ldr	r0, .L78+8
 930 002e 0093     		str	r3, [sp]
 931 0030 2346     		mov	r3, r4
 932 0032 FFF7FEFF 		bl	xTaskCreateStatic
 933              	.LVL83:
 252:Lib/FreeRTOS/Source/timers.c ****                                                       configTIMER_SERVICE_TASK_NAME,
 934              		.loc 1 252 34 discriminator 1 view .LVU263
 935 0036 0A4B     		ldr	r3, .L78+12
 936 0038 1860     		str	r0, [r3]
 260:Lib/FreeRTOS/Source/timers.c ****                 {
 937              		.loc 1 260 17 is_stmt 1 view .LVU264
 260:Lib/FreeRTOS/Source/timers.c ****                 {
 938              		.loc 1 260 19 is_stmt 0 view .LVU265
 939 003a 40B9     		cbnz	r0, .L77
 940              	.L69:
 941              	.LVL84:
 260:Lib/FreeRTOS/Source/timers.c ****                 {
 942              		.loc 1 260 19 view .LVU266
 943              	.LBE38:
 281:Lib/FreeRTOS/Source/timers.c ****         return xReturn;
 944              		.loc 1 281 9 is_stmt 1 discriminator 1 view .LVU267
 945 003c FFF7FEFF 		bl	ulSetInterruptMask
 946              	.LVL85:
ARM GAS  /tmp/cc6xdUDh.s 			page 39


 281:Lib/FreeRTOS/Source/timers.c ****         return xReturn;
 947              		.loc 1 281 9 discriminator 1 view .LVU268
 948 0040 40F21911 		movw	r1, #281
 949 0044 074B     		ldr	r3, .L78+16
 950 0046 084A     		ldr	r2, .L78+20
 951 0048 0848     		ldr	r0, .L78+24
 952 004a FFF7FEFF 		bl	__assert_func
 953              	.LVL86:
 954              	.L77:
 283:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 955              		.loc 1 283 5 is_stmt 0 view .LVU269
 956 004e 0120     		movs	r0, #1
 957 0050 08B0     		add	sp, sp, #32
 958              		.cfi_def_cfa_offset 8
 959              		@ sp needed
 960 0052 10BD     		pop	{r4, pc}
 961              	.L79:
 962              		.align	2
 963              	.L78:
 964 0054 00000000 		.word	xTimerQueue
 965 0058 00000000 		.word	.LC3
 966 005c 00000000 		.word	prvTimerTask
 967 0060 00000000 		.word	xTimerTaskHandle
 968 0064 00000000 		.word	.LC0
 969 0068 00000000 		.word	__func__.18
 970 006c 02000000 		.word	.LC1
 971              		.cfi_endproc
 972              	.LFE0:
 974              		.section	.text.xTimerCreateStatic,"ax",%progbits
 975              		.align	1
 976              		.global	xTimerCreateStatic
 977              		.syntax unified
 978              		.thumb
 979              		.thumb_func
 981              	xTimerCreateStatic:
 982              	.LVL87:
 983              	.LFB1:
 321:Lib/FreeRTOS/Source/timers.c ****             Timer_t * pxNewTimer;
 984              		.loc 1 321 9 is_stmt 1 view -0
 985              		.cfi_startproc
 986              		@ args = 8, pretend = 0, frame = 8
 987              		@ frame_needed = 0, uses_anonymous_args = 0
 322:Lib/FreeRTOS/Source/timers.c **** 
 988              		.loc 1 322 13 view .LVU271
 989              	.LBB42:
 329:Lib/FreeRTOS/Source/timers.c ****                 configASSERT( xSize == sizeof( Timer_t ) );
 990              		.loc 1 329 17 view .LVU272
 991              	.LBE42:
 321:Lib/FreeRTOS/Source/timers.c ****             Timer_t * pxNewTimer;
 992              		.loc 1 321 9 is_stmt 0 view .LVU273
 993 0000 2DE9F341 		push	{r0, r1, r4, r5, r6, r7, r8, lr}
 994              		.cfi_def_cfa_offset 32
 995              		.cfi_offset 4, -24
 996              		.cfi_offset 5, -20
 997              		.cfi_offset 6, -16
 998              		.cfi_offset 7, -12
 999              		.cfi_offset 8, -8
ARM GAS  /tmp/cc6xdUDh.s 			page 40


 1000              		.cfi_offset 14, -4
 321:Lib/FreeRTOS/Source/timers.c ****             Timer_t * pxNewTimer;
 1001              		.loc 1 321 9 view .LVU274
 1002 0004 1F46     		mov	r7, r3
 1003              	.LBB43:
 329:Lib/FreeRTOS/Source/timers.c ****                 configASSERT( xSize == sizeof( Timer_t ) );
 1004              		.loc 1 329 33 view .LVU275
 1005 0006 2C23     		movs	r3, #44
 1006              	.LVL88:
 329:Lib/FreeRTOS/Source/timers.c ****                 configASSERT( xSize == sizeof( Timer_t ) );
 1007              		.loc 1 329 33 view .LVU276
 1008 0008 0193     		str	r3, [sp, #4]
 330:Lib/FreeRTOS/Source/timers.c ****                 ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 1009              		.loc 1 330 17 is_stmt 1 view .LVU277
 1010 000a 019B     		ldr	r3, [sp, #4]
 1011              	.LBE43:
 321:Lib/FreeRTOS/Source/timers.c ****             Timer_t * pxNewTimer;
 1012              		.loc 1 321 9 is_stmt 0 view .LVU278
 1013 000c 8046     		mov	r8, r0
 1014              	.LBB44:
 330:Lib/FreeRTOS/Source/timers.c ****                 ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 1015              		.loc 1 330 17 view .LVU279
 1016 000e 2C2B     		cmp	r3, #44
 1017              	.LBE44:
 321:Lib/FreeRTOS/Source/timers.c ****             Timer_t * pxNewTimer;
 1018              		.loc 1 321 9 view .LVU280
 1019 0010 0D46     		mov	r5, r1
 1020 0012 1646     		mov	r6, r2
 1021 0014 099C     		ldr	r4, [sp, #36]
 1022              	.LBB45:
 330:Lib/FreeRTOS/Source/timers.c ****                 ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 1023              		.loc 1 330 17 view .LVU281
 1024 0016 08D0     		beq	.L81
 330:Lib/FreeRTOS/Source/timers.c ****                 ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 1025              		.loc 1 330 17 is_stmt 1 discriminator 1 view .LVU282
 1026 0018 FFF7FEFF 		bl	ulSetInterruptMask
 1027              	.LVL89:
 330:Lib/FreeRTOS/Source/timers.c ****                 ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 1028              		.loc 1 330 17 discriminator 1 view .LVU283
 1029 001c 4FF4A571 		mov	r1, #330
 1030 0020 174B     		ldr	r3, .L89
 1031 0022 184A     		ldr	r2, .L89+4
 1032              	.L88:
 1033              	.LBE45:
 336:Lib/FreeRTOS/Source/timers.c ****             pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointe
 1034              		.loc 1 336 13 is_stmt 0 discriminator 1 view .LVU284
 1035 0024 1848     		ldr	r0, .L89+8
 1036 0026 FFF7FEFF 		bl	__assert_func
 1037              	.LVL90:
 1038              	.L81:
 1039              	.LBB46:
 330:Lib/FreeRTOS/Source/timers.c ****                 ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 1040              		.loc 1 330 59 is_stmt 1 discriminator 2 view .LVU285
 331:Lib/FreeRTOS/Source/timers.c ****             }
 1041              		.loc 1 331 17 view .LVU286
 1042 002a 019B     		ldr	r3, [sp, #4]
 1043              	.LBE46:
ARM GAS  /tmp/cc6xdUDh.s 			page 41


 336:Lib/FreeRTOS/Source/timers.c ****             pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointe
 1044              		.loc 1 336 13 view .LVU287
 1045 002c 34B9     		cbnz	r4, .L82
 336:Lib/FreeRTOS/Source/timers.c ****             pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointe
 1046              		.loc 1 336 13 discriminator 1 view .LVU288
 1047 002e FFF7FEFF 		bl	ulSetInterruptMask
 1048              	.LVL91:
 336:Lib/FreeRTOS/Source/timers.c ****             pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointe
 1049              		.loc 1 336 13 discriminator 1 view .LVU289
 1050 0032 4FF4A871 		mov	r1, #336
 1051 0036 124B     		ldr	r3, .L89
 1052 0038 124A     		ldr	r2, .L89+4
 1053 003a F3E7     		b	.L88
 1054              	.LVL92:
 1055              	.L82:
 336:Lib/FreeRTOS/Source/timers.c ****             pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointe
 1056              		.loc 1 336 42 discriminator 2 view .LVU290
 337:Lib/FreeRTOS/Source/timers.c **** 
 1057              		.loc 1 337 13 view .LVU291
 339:Lib/FreeRTOS/Source/timers.c ****             {
 1058              		.loc 1 339 13 view .LVU292
 344:Lib/FreeRTOS/Source/timers.c **** 
 1059              		.loc 1 344 17 view .LVU293
 344:Lib/FreeRTOS/Source/timers.c **** 
 1060              		.loc 1 344 38 is_stmt 0 view .LVU294
 1061 003c 0223     		movs	r3, #2
 1062 003e 84F82830 		strb	r3, [r4, #40]
 346:Lib/FreeRTOS/Source/timers.c ****             }
 1063              		.loc 1 346 17 is_stmt 1 view .LVU295
 1064              	.LVL93:
 1065              	.LBB47:
 1066              	.LBI47:
 355:Lib/FreeRTOS/Source/timers.c ****                                        const TickType_t xTimerPeriodInTicks,
 1067              		.loc 1 355 17 view .LVU296
 1068              	.LBB48:
 363:Lib/FreeRTOS/Source/timers.c **** 
 1069              		.loc 1 363 9 view .LVU297
 1070 0042 31B9     		cbnz	r1, .L83
 363:Lib/FreeRTOS/Source/timers.c **** 
 1071              		.loc 1 363 9 discriminator 1 view .LVU298
 1072 0044 FFF7FEFF 		bl	ulSetInterruptMask
 1073              	.LVL94:
 363:Lib/FreeRTOS/Source/timers.c **** 
 1074              		.loc 1 363 9 discriminator 1 view .LVU299
 1075 0048 40F26B11 		movw	r1, #363
 1076 004c 0C4B     		ldr	r3, .L89
 1077 004e 0F4A     		ldr	r2, .L89+12
 1078 0050 E8E7     		b	.L88
 1079              	.LVL95:
 1080              	.L83:
 363:Lib/FreeRTOS/Source/timers.c **** 
 1081              		.loc 1 363 52 discriminator 2 view .LVU300
 367:Lib/FreeRTOS/Source/timers.c **** 
 1082              		.loc 1 367 9 view .LVU301
 1083 0052 FFF7FEFF 		bl	prvCheckForValidListAndQueue
 1084              	.LVL96:
 371:Lib/FreeRTOS/Source/timers.c ****         pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
ARM GAS  /tmp/cc6xdUDh.s 			page 42


 1085              		.loc 1 371 9 view .LVU302
 374:Lib/FreeRTOS/Source/timers.c ****         vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 1086              		.loc 1 374 40 is_stmt 0 view .LVU303
 1087 0056 089B     		ldr	r3, [sp, #32]
 373:Lib/FreeRTOS/Source/timers.c ****         pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 1088              		.loc 1 373 31 view .LVU304
 1089 0058 C4E90657 		strd	r5, r7, [r4, #24]
 371:Lib/FreeRTOS/Source/timers.c ****         pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 1090              		.loc 1 371 33 view .LVU305
 1091 005c C4F80080 		str	r8, [r4]
 372:Lib/FreeRTOS/Source/timers.c ****         pxNewTimer->pvTimerID = pvTimerID;
 1092              		.loc 1 372 9 is_stmt 1 view .LVU306
 374:Lib/FreeRTOS/Source/timers.c ****         vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 1093              		.loc 1 374 9 view .LVU307
 374:Lib/FreeRTOS/Source/timers.c ****         vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 1094              		.loc 1 374 40 is_stmt 0 view .LVU308
 1095 0060 2362     		str	r3, [r4, #32]
 375:Lib/FreeRTOS/Source/timers.c **** 
 1096              		.loc 1 375 9 is_stmt 1 view .LVU309
 1097 0062 201D     		adds	r0, r4, #4
 1098 0064 FFF7FEFF 		bl	vListInitialiseItem
 1099              	.LVL97:
 377:Lib/FreeRTOS/Source/timers.c ****         {
 1100              		.loc 1 377 9 view .LVU310
 377:Lib/FreeRTOS/Source/timers.c ****         {
 1101              		.loc 1 377 11 is_stmt 0 view .LVU311
 1102 0068 2EB1     		cbz	r6, .L84
 379:Lib/FreeRTOS/Source/timers.c ****         }
 1103              		.loc 1 379 13 is_stmt 1 view .LVU312
 379:Lib/FreeRTOS/Source/timers.c ****         }
 1104              		.loc 1 379 34 is_stmt 0 view .LVU313
 1105 006a 94F82830 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 1106 006e 43F00403 		orr	r3, r3, #4
 1107 0072 84F82830 		strb	r3, [r4, #40]
 1108              	.L84:
 382:Lib/FreeRTOS/Source/timers.c ****     }
 1109              		.loc 1 382 40 is_stmt 1 view .LVU314
 1110              	.LVL98:
 382:Lib/FreeRTOS/Source/timers.c ****     }
 1111              		.loc 1 382 40 is_stmt 0 view .LVU315
 1112              	.LBE48:
 1113              	.LBE47:
 349:Lib/FreeRTOS/Source/timers.c ****         }
 1114              		.loc 1 349 13 is_stmt 1 view .LVU316
 350:Lib/FreeRTOS/Source/timers.c **** 
 1115              		.loc 1 350 9 is_stmt 0 view .LVU317
 1116 0076 2046     		mov	r0, r4
 1117 0078 02B0     		add	sp, sp, #8
 1118              		.cfi_def_cfa_offset 24
 1119              		@ sp needed
 1120 007a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1121              	.LVL99:
 1122              	.L90:
 350:Lib/FreeRTOS/Source/timers.c **** 
 1123              		.loc 1 350 9 view .LVU318
 1124 007e 00BF     		.align	2
 1125              	.L89:
ARM GAS  /tmp/cc6xdUDh.s 			page 43


 1126 0080 00000000 		.word	.LC0
 1127 0084 00000000 		.word	__func__.13
 1128 0088 02000000 		.word	.LC1
 1129 008c 00000000 		.word	__func__.12
 1130              		.cfi_endproc
 1131              	.LFE1:
 1133              		.section	.text.xTimerGenericCommand,"ax",%progbits
 1134              		.align	1
 1135              		.global	xTimerGenericCommand
 1136              		.syntax unified
 1137              		.thumb
 1138              		.thumb_func
 1140              	xTimerGenericCommand:
 1141              	.LVL100:
 1142              	.LFB3:
 391:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xReturn = pdFAIL;
 1143              		.loc 1 391 5 is_stmt 1 view -0
 1144              		.cfi_startproc
 1145              		@ args = 4, pretend = 0, frame = 16
 1146              		@ frame_needed = 0, uses_anonymous_args = 0
 392:Lib/FreeRTOS/Source/timers.c ****         DaemonTaskMessage_t xMessage;
 1147              		.loc 1 392 9 view .LVU320
 393:Lib/FreeRTOS/Source/timers.c **** 
 1148              		.loc 1 393 9 view .LVU321
 395:Lib/FreeRTOS/Source/timers.c **** 
 1149              		.loc 1 395 9 view .LVU322
 391:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xReturn = pdFAIL;
 1150              		.loc 1 391 5 is_stmt 0 view .LVU323
 1151 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1152              		.cfi_def_cfa_offset 20
 1153              		.cfi_offset 4, -20
 1154              		.cfi_offset 5, -16
 1155              		.cfi_offset 6, -12
 1156              		.cfi_offset 7, -8
 1157              		.cfi_offset 14, -4
 1158 0002 1746     		mov	r7, r2
 395:Lib/FreeRTOS/Source/timers.c **** 
 1159              		.loc 1 395 9 view .LVU324
 1160 0004 0446     		mov	r4, r0
 391:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xReturn = pdFAIL;
 1161              		.loc 1 391 5 view .LVU325
 1162 0006 1A46     		mov	r2, r3
 1163              	.LVL101:
 391:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xReturn = pdFAIL;
 1164              		.loc 1 391 5 view .LVU326
 1165 0008 85B0     		sub	sp, sp, #20
 1166              		.cfi_def_cfa_offset 40
 395:Lib/FreeRTOS/Source/timers.c **** 
 1167              		.loc 1 395 9 view .LVU327
 1168 000a 40B9     		cbnz	r0, .L92
 395:Lib/FreeRTOS/Source/timers.c **** 
 1169              		.loc 1 395 9 is_stmt 1 discriminator 1 view .LVU328
 1170 000c FFF7FEFF 		bl	ulSetInterruptMask
 1171              	.LVL102:
 395:Lib/FreeRTOS/Source/timers.c **** 
 1172              		.loc 1 395 9 discriminator 1 view .LVU329
 1173 0010 40F28B11 		movw	r1, #395
ARM GAS  /tmp/cc6xdUDh.s 			page 44


 1174 0014 104B     		ldr	r3, .L98
 1175 0016 114A     		ldr	r2, .L98+4
 1176 0018 1148     		ldr	r0, .L98+8
 1177 001a FFF7FEFF 		bl	__assert_func
 1178              	.LVL103:
 1179              	.L92:
 395:Lib/FreeRTOS/Source/timers.c **** 
 1180              		.loc 1 395 31 discriminator 2 view .LVU330
 399:Lib/FreeRTOS/Source/timers.c ****         {
 1181              		.loc 1 399 9 view .LVU331
 399:Lib/FreeRTOS/Source/timers.c ****         {
 1182              		.loc 1 399 25 is_stmt 0 view .LVU332
 1183 001e 114E     		ldr	r6, .L98+12
 1184 0020 3568     		ldr	r5, [r6]
 392:Lib/FreeRTOS/Source/timers.c ****         DaemonTaskMessage_t xMessage;
 1185              		.loc 1 392 20 view .LVU333
 1186 0022 2846     		mov	r0, r5
 1187              	.LVL104:
 399:Lib/FreeRTOS/Source/timers.c ****         {
 1188              		.loc 1 399 11 view .LVU334
 1189 0024 85B1     		cbz	r5, .L91
 402:Lib/FreeRTOS/Source/timers.c ****             xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 1190              		.loc 1 402 13 is_stmt 1 view .LVU335
 406:Lib/FreeRTOS/Source/timers.c ****             {
 1191              		.loc 1 406 15 is_stmt 0 view .LVU336
 1192 0026 0529     		cmp	r1, #5
 403:Lib/FreeRTOS/Source/timers.c ****             xMessage.u.xTimerParameters.pxTimer = xTimer;
 1193              		.loc 1 403 55 view .LVU337
 1194 0028 CDE90017 		strd	r1, r7, [sp]
 404:Lib/FreeRTOS/Source/timers.c **** 
 1195              		.loc 1 404 13 is_stmt 1 view .LVU338
 404:Lib/FreeRTOS/Source/timers.c **** 
 1196              		.loc 1 404 49 is_stmt 0 view .LVU339
 1197 002c 0294     		str	r4, [sp, #8]
 406:Lib/FreeRTOS/Source/timers.c ****             {
 1198              		.loc 1 406 13 is_stmt 1 view .LVU340
 406:Lib/FreeRTOS/Source/timers.c ****             {
 1199              		.loc 1 406 15 is_stmt 0 view .LVU341
 1200 002e 0DDC     		bgt	.L94
 408:Lib/FreeRTOS/Source/timers.c ****                 {
 1201              		.loc 1 408 17 is_stmt 1 view .LVU342
 408:Lib/FreeRTOS/Source/timers.c ****                 {
 1202              		.loc 1 408 21 is_stmt 0 view .LVU343
 1203 0030 FFF7FEFF 		bl	xTaskGetSchedulerState
 1204              	.LVL105:
 410:Lib/FreeRTOS/Source/timers.c ****                 }
 1205              		.loc 1 410 31 view .LVU344
 1206 0034 0023     		movs	r3, #0
 408:Lib/FreeRTOS/Source/timers.c ****                 {
 1207              		.loc 1 408 19 discriminator 1 view .LVU345
 1208 0036 0228     		cmp	r0, #2
 410:Lib/FreeRTOS/Source/timers.c ****                 }
 1209              		.loc 1 410 21 is_stmt 1 view .LVU346
 414:Lib/FreeRTOS/Source/timers.c ****                 }
 1210              		.loc 1 414 31 is_stmt 0 view .LVU347
 1211 0038 18BF     		it	ne
 1212 003a 1A46     		movne	r2, r3
ARM GAS  /tmp/cc6xdUDh.s 			page 45


 1213 003c 6946     		mov	r1, sp
 410:Lib/FreeRTOS/Source/timers.c ****                 }
 1214              		.loc 1 410 31 view .LVU348
 1215 003e 08BF     		it	eq
 1216 0040 0A9A     		ldreq	r2, [sp, #40]
 414:Lib/FreeRTOS/Source/timers.c ****                 }
 1217              		.loc 1 414 21 is_stmt 1 view .LVU349
 414:Lib/FreeRTOS/Source/timers.c ****                 }
 1218              		.loc 1 414 31 is_stmt 0 view .LVU350
 1219 0042 3068     		ldr	r0, [r6]
 1220 0044 FFF7FEFF 		bl	xQueueGenericSend
 1221              	.LVL106:
 1222              	.L91:
 430:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1223              		.loc 1 430 5 view .LVU351
 1224 0048 05B0     		add	sp, sp, #20
 1225              		.cfi_remember_state
 1226              		.cfi_def_cfa_offset 20
 1227              		@ sp needed
 1228 004a F0BD     		pop	{r4, r5, r6, r7, pc}
 1229              	.LVL107:
 1230              	.L94:
 1231              		.cfi_restore_state
 419:Lib/FreeRTOS/Source/timers.c ****             }
 1232              		.loc 1 419 17 is_stmt 1 view .LVU352
 419:Lib/FreeRTOS/Source/timers.c ****             }
 1233              		.loc 1 419 27 is_stmt 0 view .LVU353
 1234 004c 0023     		movs	r3, #0
 1235 004e 6946     		mov	r1, sp
 1236              	.LVL108:
 419:Lib/FreeRTOS/Source/timers.c ****             }
 1237              		.loc 1 419 27 view .LVU354
 1238 0050 FFF7FEFF 		bl	xQueueGenericSendFromISR
 1239              	.LVL109:
 419:Lib/FreeRTOS/Source/timers.c ****             }
 1240              		.loc 1 419 27 view .LVU355
 1241 0054 F8E7     		b	.L91
 1242              	.L99:
 1243 0056 00BF     		.align	2
 1244              	.L98:
 1245 0058 00000000 		.word	.LC0
 1246 005c 00000000 		.word	__func__.11
 1247 0060 02000000 		.word	.LC1
 1248 0064 00000000 		.word	xTimerQueue
 1249              		.cfi_endproc
 1250              	.LFE3:
 1252              		.section	.text.xTimerGetTimerDaemonTaskHandle,"ax",%progbits
 1253              		.align	1
 1254              		.global	xTimerGetTimerDaemonTaskHandle
 1255              		.syntax unified
 1256              		.thumb
 1257              		.thumb_func
 1259              	xTimerGetTimerDaemonTaskHandle:
 1260              	.LFB4:
 434:Lib/FreeRTOS/Source/timers.c ****         /* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 1261              		.loc 1 434 5 is_stmt 1 view -0
 1262              		.cfi_startproc
ARM GAS  /tmp/cc6xdUDh.s 			page 46


 1263              		@ args = 0, pretend = 0, frame = 0
 1264              		@ frame_needed = 0, uses_anonymous_args = 0
 437:Lib/FreeRTOS/Source/timers.c ****         return xTimerTaskHandle;
 1265              		.loc 1 437 9 view .LVU357
 434:Lib/FreeRTOS/Source/timers.c ****         /* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 1266              		.loc 1 434 5 is_stmt 0 view .LVU358
 1267 0000 08B5     		push	{r3, lr}
 1268              		.cfi_def_cfa_offset 8
 1269              		.cfi_offset 3, -8
 1270              		.cfi_offset 14, -4
 437:Lib/FreeRTOS/Source/timers.c ****         return xTimerTaskHandle;
 1271              		.loc 1 437 9 view .LVU359
 1272 0002 064B     		ldr	r3, .L102
 1273 0004 1868     		ldr	r0, [r3]
 1274 0006 40B9     		cbnz	r0, .L100
 437:Lib/FreeRTOS/Source/timers.c ****         return xTimerTaskHandle;
 1275              		.loc 1 437 9 is_stmt 1 discriminator 1 view .LVU360
 1276 0008 FFF7FEFF 		bl	ulSetInterruptMask
 1277              	.LVL110:
 437:Lib/FreeRTOS/Source/timers.c ****         return xTimerTaskHandle;
 1278              		.loc 1 437 9 discriminator 1 view .LVU361
 1279 000c 40F2B511 		movw	r1, #437
 1280 0010 034B     		ldr	r3, .L102+4
 1281 0012 044A     		ldr	r2, .L102+8
 1282 0014 0448     		ldr	r0, .L102+12
 1283 0016 FFF7FEFF 		bl	__assert_func
 1284              	.LVL111:
 1285              	.L100:
 439:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1286              		.loc 1 439 5 is_stmt 0 view .LVU362
 1287 001a 08BD     		pop	{r3, pc}
 1288              	.L103:
 1289              		.align	2
 1290              	.L102:
 1291 001c 00000000 		.word	xTimerTaskHandle
 1292 0020 00000000 		.word	.LC0
 1293 0024 00000000 		.word	__func__.10
 1294 0028 02000000 		.word	.LC1
 1295              		.cfi_endproc
 1296              	.LFE4:
 1298              		.section	.text.xTimerGetPeriod,"ax",%progbits
 1299              		.align	1
 1300              		.global	xTimerGetPeriod
 1301              		.syntax unified
 1302              		.thumb
 1303              		.thumb_func
 1305              	xTimerGetPeriod:
 1306              	.LVL112:
 1307              	.LFB5:
 443:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer = xTimer;
 1308              		.loc 1 443 5 is_stmt 1 view -0
 1309              		.cfi_startproc
 1310              		@ args = 0, pretend = 0, frame = 0
 1311              		@ frame_needed = 0, uses_anonymous_args = 0
 444:Lib/FreeRTOS/Source/timers.c **** 
 1312              		.loc 1 444 9 view .LVU364
 446:Lib/FreeRTOS/Source/timers.c ****         return pxTimer->xTimerPeriodInTicks;
ARM GAS  /tmp/cc6xdUDh.s 			page 47


 1313              		.loc 1 446 9 view .LVU365
 443:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer = xTimer;
 1314              		.loc 1 443 5 is_stmt 0 view .LVU366
 1315 0000 08B5     		push	{r3, lr}
 1316              		.cfi_def_cfa_offset 8
 1317              		.cfi_offset 3, -8
 1318              		.cfi_offset 14, -4
 446:Lib/FreeRTOS/Source/timers.c ****         return pxTimer->xTimerPeriodInTicks;
 1319              		.loc 1 446 9 view .LVU367
 1320 0002 40B9     		cbnz	r0, .L105
 446:Lib/FreeRTOS/Source/timers.c ****         return pxTimer->xTimerPeriodInTicks;
 1321              		.loc 1 446 9 is_stmt 1 discriminator 1 view .LVU368
 1322 0004 FFF7FEFF 		bl	ulSetInterruptMask
 1323              	.LVL113:
 446:Lib/FreeRTOS/Source/timers.c ****         return pxTimer->xTimerPeriodInTicks;
 1324              		.loc 1 446 9 discriminator 1 view .LVU369
 1325 0008 4FF4DF71 		mov	r1, #446
 1326 000c 034B     		ldr	r3, .L106
 1327 000e 044A     		ldr	r2, .L106+4
 1328 0010 0448     		ldr	r0, .L106+8
 1329 0012 FFF7FEFF 		bl	__assert_func
 1330              	.LVL114:
 1331              	.L105:
 446:Lib/FreeRTOS/Source/timers.c ****         return pxTimer->xTimerPeriodInTicks;
 1332              		.loc 1 446 31 discriminator 2 view .LVU370
 447:Lib/FreeRTOS/Source/timers.c ****     }
 1333              		.loc 1 447 9 view .LVU371
 448:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1334              		.loc 1 448 5 is_stmt 0 view .LVU372
 1335 0016 8069     		ldr	r0, [r0, #24]
 1336              	.LVL115:
 448:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1337              		.loc 1 448 5 view .LVU373
 1338 0018 08BD     		pop	{r3, pc}
 1339              	.L107:
 1340 001a 00BF     		.align	2
 1341              	.L106:
 1342 001c 00000000 		.word	.LC0
 1343 0020 00000000 		.word	__func__.9
 1344 0024 02000000 		.word	.LC1
 1345              		.cfi_endproc
 1346              	.LFE5:
 1348              		.section	.text.vTimerSetReloadMode,"ax",%progbits
 1349              		.align	1
 1350              		.global	vTimerSetReloadMode
 1351              		.syntax unified
 1352              		.thumb
 1353              		.thumb_func
 1355              	vTimerSetReloadMode:
 1356              	.LVL116:
 1357              	.LFB6:
 453:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer = xTimer;
 1358              		.loc 1 453 5 is_stmt 1 view -0
 1359              		.cfi_startproc
 1360              		@ args = 0, pretend = 0, frame = 0
 1361              		@ frame_needed = 0, uses_anonymous_args = 0
 454:Lib/FreeRTOS/Source/timers.c **** 
ARM GAS  /tmp/cc6xdUDh.s 			page 48


 1362              		.loc 1 454 9 view .LVU375
 456:Lib/FreeRTOS/Source/timers.c ****         taskENTER_CRITICAL();
 1363              		.loc 1 456 9 view .LVU376
 453:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer = xTimer;
 1364              		.loc 1 453 5 is_stmt 0 view .LVU377
 1365 0000 38B5     		push	{r3, r4, r5, lr}
 1366              		.cfi_def_cfa_offset 16
 1367              		.cfi_offset 3, -16
 1368              		.cfi_offset 4, -12
 1369              		.cfi_offset 5, -8
 1370              		.cfi_offset 14, -4
 453:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer = xTimer;
 1371              		.loc 1 453 5 view .LVU378
 1372 0002 0D46     		mov	r5, r1
 456:Lib/FreeRTOS/Source/timers.c ****         taskENTER_CRITICAL();
 1373              		.loc 1 456 9 view .LVU379
 1374 0004 0446     		mov	r4, r0
 1375 0006 40B9     		cbnz	r0, .L109
 456:Lib/FreeRTOS/Source/timers.c ****         taskENTER_CRITICAL();
 1376              		.loc 1 456 9 is_stmt 1 discriminator 1 view .LVU380
 1377 0008 FFF7FEFF 		bl	ulSetInterruptMask
 1378              	.LVL117:
 456:Lib/FreeRTOS/Source/timers.c ****         taskENTER_CRITICAL();
 1379              		.loc 1 456 9 discriminator 1 view .LVU381
 1380 000c 4FF4E471 		mov	r1, #456
 1381 0010 0A4B     		ldr	r3, .L112
 1382 0012 0B4A     		ldr	r2, .L112+4
 1383 0014 0B48     		ldr	r0, .L112+8
 1384 0016 FFF7FEFF 		bl	__assert_func
 1385              	.LVL118:
 1386              	.L109:
 456:Lib/FreeRTOS/Source/timers.c ****         taskENTER_CRITICAL();
 1387              		.loc 1 456 31 discriminator 2 view .LVU382
 457:Lib/FreeRTOS/Source/timers.c ****         {
 1388              		.loc 1 457 9 view .LVU383
 1389 001a FFF7FEFF 		bl	vPortEnterCritical
 1390              	.LVL119:
 459:Lib/FreeRTOS/Source/timers.c ****             {
 1391              		.loc 1 459 13 view .LVU384
 1392 001e 94F82830 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 461:Lib/FreeRTOS/Source/timers.c ****             }
 1393              		.loc 1 461 35 is_stmt 0 view .LVU385
 1394 0022 002D     		cmp	r5, #0
 1395 0024 43F00402 		orr	r2, r3, #4
 1396 0028 03F0FB03 		and	r3, r3, #251
 1397 002c 18BF     		it	ne
 1398 002e 1346     		movne	r3, r2
 1399 0030 84F82830 		strb	r3, [r4, #40]
 468:Lib/FreeRTOS/Source/timers.c ****     }
 1400              		.loc 1 468 9 is_stmt 1 view .LVU386
 469:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1401              		.loc 1 469 5 is_stmt 0 view .LVU387
 1402 0034 BDE83840 		pop	{r3, r4, r5, lr}
 1403              		.cfi_restore 14
 1404              		.cfi_restore 5
 1405              		.cfi_restore 4
 1406              		.cfi_restore 3
ARM GAS  /tmp/cc6xdUDh.s 			page 49


 1407              		.cfi_def_cfa_offset 0
 1408              	.LVL120:
 468:Lib/FreeRTOS/Source/timers.c ****     }
 1409              		.loc 1 468 9 view .LVU388
 1410 0038 FFF7FEBF 		b	vPortExitCritical
 1411              	.LVL121:
 1412              	.L113:
 1413              		.align	2
 1414              	.L112:
 1415 003c 00000000 		.word	.LC0
 1416 0040 00000000 		.word	__func__.8
 1417 0044 02000000 		.word	.LC1
 1418              		.cfi_endproc
 1419              	.LFE6:
 1421              		.section	.text.xTimerGetReloadMode,"ax",%progbits
 1422              		.align	1
 1423              		.global	xTimerGetReloadMode
 1424              		.syntax unified
 1425              		.thumb
 1426              		.thumb_func
 1428              	xTimerGetReloadMode:
 1429              	.LVL122:
 1430              	.LFB7:
 473:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer = xTimer;
 1431              		.loc 1 473 5 is_stmt 1 view -0
 1432              		.cfi_startproc
 1433              		@ args = 0, pretend = 0, frame = 0
 1434              		@ frame_needed = 0, uses_anonymous_args = 0
 474:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xReturn;
 1435              		.loc 1 474 9 view .LVU390
 475:Lib/FreeRTOS/Source/timers.c **** 
 1436              		.loc 1 475 9 view .LVU391
 477:Lib/FreeRTOS/Source/timers.c ****         taskENTER_CRITICAL();
 1437              		.loc 1 477 9 view .LVU392
 473:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer = xTimer;
 1438              		.loc 1 473 5 is_stmt 0 view .LVU393
 1439 0000 10B5     		push	{r4, lr}
 1440              		.cfi_def_cfa_offset 8
 1441              		.cfi_offset 4, -8
 1442              		.cfi_offset 14, -4
 477:Lib/FreeRTOS/Source/timers.c ****         taskENTER_CRITICAL();
 1443              		.loc 1 477 9 view .LVU394
 1444 0002 0446     		mov	r4, r0
 1445 0004 40B9     		cbnz	r0, .L115
 1446              	.LBB51:
 1447              	.LBI51:
 472:Lib/FreeRTOS/Source/timers.c ****     {
 1448              		.loc 1 472 16 is_stmt 1 view .LVU395
 1449              	.LVL123:
 1450              	.LBB52:
 477:Lib/FreeRTOS/Source/timers.c ****         taskENTER_CRITICAL();
 1451              		.loc 1 477 9 discriminator 1 view .LVU396
 1452 0006 FFF7FEFF 		bl	ulSetInterruptMask
 1453              	.LVL124:
 477:Lib/FreeRTOS/Source/timers.c ****         taskENTER_CRITICAL();
 1454              		.loc 1 477 9 discriminator 1 view .LVU397
 1455 000a 40F2DD11 		movw	r1, #477
ARM GAS  /tmp/cc6xdUDh.s 			page 50


 1456 000e 074B     		ldr	r3, .L116
 1457 0010 074A     		ldr	r2, .L116+4
 1458 0012 0848     		ldr	r0, .L116+8
 1459 0014 FFF7FEFF 		bl	__assert_func
 1460              	.LVL125:
 1461              	.L115:
 477:Lib/FreeRTOS/Source/timers.c ****         taskENTER_CRITICAL();
 1462              		.loc 1 477 9 is_stmt 0 discriminator 1 view .LVU398
 1463              	.LBE52:
 1464              	.LBE51:
 477:Lib/FreeRTOS/Source/timers.c ****         taskENTER_CRITICAL();
 1465              		.loc 1 477 31 is_stmt 1 discriminator 2 view .LVU399
 478:Lib/FreeRTOS/Source/timers.c ****         {
 1466              		.loc 1 478 9 view .LVU400
 1467 0018 FFF7FEFF 		bl	vPortEnterCritical
 1468              	.LVL126:
 480:Lib/FreeRTOS/Source/timers.c ****             {
 1469              		.loc 1 480 13 view .LVU401
 480:Lib/FreeRTOS/Source/timers.c ****             {
 1470              		.loc 1 480 15 is_stmt 0 view .LVU402
 1471 001c 94F82840 		ldrb	r4, [r4, #40]	@ zero_extendqisi2
 1472              	.LVL127:
 491:Lib/FreeRTOS/Source/timers.c **** 
 1473              		.loc 1 491 9 view .LVU403
 1474 0020 FFF7FEFF 		bl	vPortExitCritical
 1475              	.LVL128:
 480:Lib/FreeRTOS/Source/timers.c ****             {
 1476              		.loc 1 480 15 view .LVU404
 1477 0024 C4F38004 		ubfx	r4, r4, #2, #1
 1478              	.LVL129:
 491:Lib/FreeRTOS/Source/timers.c **** 
 1479              		.loc 1 491 9 is_stmt 1 view .LVU405
 493:Lib/FreeRTOS/Source/timers.c ****     }
 1480              		.loc 1 493 9 view .LVU406
 494:Lib/FreeRTOS/Source/timers.c **** 
 1481              		.loc 1 494 5 is_stmt 0 view .LVU407
 1482 0028 2046     		mov	r0, r4
 1483 002a 10BD     		pop	{r4, pc}
 1484              	.LVL130:
 1485              	.L117:
 494:Lib/FreeRTOS/Source/timers.c **** 
 1486              		.loc 1 494 5 view .LVU408
 1487              		.align	2
 1488              	.L116:
 1489 002c 00000000 		.word	.LC0
 1490 0030 00000000 		.word	__func__.7
 1491 0034 02000000 		.word	.LC1
 1492              		.cfi_endproc
 1493              	.LFE7:
 1495              		.section	.text.uxTimerGetReloadMode,"ax",%progbits
 1496              		.align	1
 1497              		.global	uxTimerGetReloadMode
 1498              		.syntax unified
 1499              		.thumb
 1500              		.thumb_func
 1502              	uxTimerGetReloadMode:
 1503              	.LVL131:
ARM GAS  /tmp/cc6xdUDh.s 			page 51


 1504              	.LFB8:
 497:Lib/FreeRTOS/Source/timers.c ****         return ( UBaseType_t ) xTimerGetReloadMode( xTimer );
 1505              		.loc 1 497 5 is_stmt 1 view -0
 1506              		.cfi_startproc
 1507              		@ args = 0, pretend = 0, frame = 0
 1508              		@ frame_needed = 0, uses_anonymous_args = 0
 1509              		@ link register save eliminated.
 498:Lib/FreeRTOS/Source/timers.c ****     }
 1510              		.loc 1 498 9 view .LVU410
 498:Lib/FreeRTOS/Source/timers.c ****     }
 1511              		.loc 1 498 32 is_stmt 0 view .LVU411
 1512 0000 FFF7FEBF 		b	xTimerGetReloadMode
 1513              	.LVL132:
 498:Lib/FreeRTOS/Source/timers.c ****     }
 1514              		.loc 1 498 32 view .LVU412
 1515              		.cfi_endproc
 1516              	.LFE8:
 1518              		.section	.text.xTimerGetExpiryTime,"ax",%progbits
 1519              		.align	1
 1520              		.global	xTimerGetExpiryTime
 1521              		.syntax unified
 1522              		.thumb
 1523              		.thumb_func
 1525              	xTimerGetExpiryTime:
 1526              	.LVL133:
 1527              	.LFB9:
 503:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer = xTimer;
 1528              		.loc 1 503 5 is_stmt 1 view -0
 1529              		.cfi_startproc
 1530              		@ args = 0, pretend = 0, frame = 0
 1531              		@ frame_needed = 0, uses_anonymous_args = 0
 504:Lib/FreeRTOS/Source/timers.c ****         TickType_t xReturn;
 1532              		.loc 1 504 9 view .LVU414
 505:Lib/FreeRTOS/Source/timers.c **** 
 1533              		.loc 1 505 9 view .LVU415
 507:Lib/FreeRTOS/Source/timers.c ****         xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1534              		.loc 1 507 9 view .LVU416
 503:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer = xTimer;
 1535              		.loc 1 503 5 is_stmt 0 view .LVU417
 1536 0000 08B5     		push	{r3, lr}
 1537              		.cfi_def_cfa_offset 8
 1538              		.cfi_offset 3, -8
 1539              		.cfi_offset 14, -4
 507:Lib/FreeRTOS/Source/timers.c ****         xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1540              		.loc 1 507 9 view .LVU418
 1541 0002 40B9     		cbnz	r0, .L120
 507:Lib/FreeRTOS/Source/timers.c ****         xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1542              		.loc 1 507 9 is_stmt 1 discriminator 1 view .LVU419
 1543 0004 FFF7FEFF 		bl	ulSetInterruptMask
 1544              	.LVL134:
 507:Lib/FreeRTOS/Source/timers.c ****         xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1545              		.loc 1 507 9 discriminator 1 view .LVU420
 1546 0008 40F2FB11 		movw	r1, #507
 1547 000c 034B     		ldr	r3, .L121
 1548 000e 044A     		ldr	r2, .L121+4
 1549 0010 0448     		ldr	r0, .L121+8
 1550 0012 FFF7FEFF 		bl	__assert_func
ARM GAS  /tmp/cc6xdUDh.s 			page 52


 1551              	.LVL135:
 1552              	.L120:
 507:Lib/FreeRTOS/Source/timers.c ****         xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1553              		.loc 1 507 31 discriminator 2 view .LVU421
 508:Lib/FreeRTOS/Source/timers.c ****         return xReturn;
 1554              		.loc 1 508 9 view .LVU422
 509:Lib/FreeRTOS/Source/timers.c ****     }
 1555              		.loc 1 509 9 view .LVU423
 510:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1556              		.loc 1 510 5 is_stmt 0 view .LVU424
 1557 0016 4068     		ldr	r0, [r0, #4]
 1558              	.LVL136:
 510:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1559              		.loc 1 510 5 view .LVU425
 1560 0018 08BD     		pop	{r3, pc}
 1561              	.L122:
 1562 001a 00BF     		.align	2
 1563              	.L121:
 1564 001c 00000000 		.word	.LC0
 1565 0020 00000000 		.word	__func__.6
 1566 0024 02000000 		.word	.LC1
 1567              		.cfi_endproc
 1568              	.LFE9:
 1570              		.section	.text.xTimerGetStaticBuffer,"ax",%progbits
 1571              		.align	1
 1572              		.global	xTimerGetStaticBuffer
 1573              		.syntax unified
 1574              		.thumb
 1575              		.thumb_func
 1577              	xTimerGetStaticBuffer:
 1578              	.LVL137:
 1579              	.LFB10:
 516:Lib/FreeRTOS/Source/timers.c ****             BaseType_t xReturn;
 1580              		.loc 1 516 9 is_stmt 1 view -0
 1581              		.cfi_startproc
 1582              		@ args = 0, pretend = 0, frame = 0
 1583              		@ frame_needed = 0, uses_anonymous_args = 0
 517:Lib/FreeRTOS/Source/timers.c ****             Timer_t * pxTimer = xTimer;
 1584              		.loc 1 517 13 view .LVU427
 518:Lib/FreeRTOS/Source/timers.c **** 
 1585              		.loc 1 518 13 view .LVU428
 520:Lib/FreeRTOS/Source/timers.c **** 
 1586              		.loc 1 520 13 view .LVU429
 516:Lib/FreeRTOS/Source/timers.c ****             BaseType_t xReturn;
 1587              		.loc 1 516 9 is_stmt 0 view .LVU430
 1588 0000 0246     		mov	r2, r0
 1589 0002 08B5     		push	{r3, lr}
 1590              		.cfi_def_cfa_offset 8
 1591              		.cfi_offset 3, -8
 1592              		.cfi_offset 14, -4
 520:Lib/FreeRTOS/Source/timers.c **** 
 1593              		.loc 1 520 13 view .LVU431
 1594 0004 41B9     		cbnz	r1, .L124
 520:Lib/FreeRTOS/Source/timers.c **** 
 1595              		.loc 1 520 13 is_stmt 1 discriminator 1 view .LVU432
 1596 0006 FFF7FEFF 		bl	ulSetInterruptMask
 1597              	.LVL138:
ARM GAS  /tmp/cc6xdUDh.s 			page 53


 520:Lib/FreeRTOS/Source/timers.c **** 
 1598              		.loc 1 520 13 discriminator 1 view .LVU433
 1599 000a 4FF40271 		mov	r1, #520
 1600 000e 064B     		ldr	r3, .L127
 1601 0010 064A     		ldr	r2, .L127+4
 1602 0012 0748     		ldr	r0, .L127+8
 1603 0014 FFF7FEFF 		bl	__assert_func
 1604              	.LVL139:
 1605              	.L124:
 520:Lib/FreeRTOS/Source/timers.c **** 
 1606              		.loc 1 520 51 discriminator 2 view .LVU434
 522:Lib/FreeRTOS/Source/timers.c ****             {
 1607              		.loc 1 522 13 view .LVU435
 522:Lib/FreeRTOS/Source/timers.c ****             {
 1608              		.loc 1 522 15 is_stmt 0 view .LVU436
 1609 0018 90F82830 		ldrb	r3, [r0, #40]	@ zero_extendqisi2
 1610 001c 13F00200 		ands	r0, r3, #2
 1611              	.LVL140:
 524:Lib/FreeRTOS/Source/timers.c ****                 xReturn = pdTRUE;
 1612              		.loc 1 524 17 is_stmt 1 view .LVU437
 525:Lib/FreeRTOS/Source/timers.c ****             }
 1613              		.loc 1 525 25 is_stmt 0 view .LVU438
 1614 0020 1CBF     		itt	ne
 1615 0022 0120     		movne	r0, #1
 524:Lib/FreeRTOS/Source/timers.c ****                 xReturn = pdTRUE;
 1616              		.loc 1 524 33 view .LVU439
 1617 0024 0A60     		strne	r2, [r1]
 525:Lib/FreeRTOS/Source/timers.c ****             }
 1618              		.loc 1 525 17 is_stmt 1 view .LVU440
 1619              	.LVL141:
 533:Lib/FreeRTOS/Source/timers.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
 1620              		.loc 1 533 9 is_stmt 0 view .LVU441
 1621 0026 08BD     		pop	{r3, pc}
 1622              	.L128:
 1623              		.align	2
 1624              	.L127:
 1625 0028 00000000 		.word	.LC0
 1626 002c 00000000 		.word	__func__.5
 1627 0030 02000000 		.word	.LC1
 1628              		.cfi_endproc
 1629              	.LFE10:
 1631              		.section	.text.pcTimerGetName,"ax",%progbits
 1632              		.align	1
 1633              		.global	pcTimerGetName
 1634              		.syntax unified
 1635              		.thumb
 1636              		.thumb_func
 1638              	pcTimerGetName:
 1639              	.LVL142:
 1640              	.LFB11:
 538:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer = xTimer;
 1641              		.loc 1 538 5 is_stmt 1 view -0
 1642              		.cfi_startproc
 1643              		@ args = 0, pretend = 0, frame = 0
 1644              		@ frame_needed = 0, uses_anonymous_args = 0
 539:Lib/FreeRTOS/Source/timers.c **** 
 1645              		.loc 1 539 9 view .LVU443
ARM GAS  /tmp/cc6xdUDh.s 			page 54


 541:Lib/FreeRTOS/Source/timers.c ****         return pxTimer->pcTimerName;
 1646              		.loc 1 541 9 view .LVU444
 538:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer = xTimer;
 1647              		.loc 1 538 5 is_stmt 0 view .LVU445
 1648 0000 08B5     		push	{r3, lr}
 1649              		.cfi_def_cfa_offset 8
 1650              		.cfi_offset 3, -8
 1651              		.cfi_offset 14, -4
 541:Lib/FreeRTOS/Source/timers.c ****         return pxTimer->pcTimerName;
 1652              		.loc 1 541 9 view .LVU446
 1653 0002 40B9     		cbnz	r0, .L130
 541:Lib/FreeRTOS/Source/timers.c ****         return pxTimer->pcTimerName;
 1654              		.loc 1 541 9 is_stmt 1 discriminator 1 view .LVU447
 1655 0004 FFF7FEFF 		bl	ulSetInterruptMask
 1656              	.LVL143:
 541:Lib/FreeRTOS/Source/timers.c ****         return pxTimer->pcTimerName;
 1657              		.loc 1 541 9 discriminator 1 view .LVU448
 1658 0008 40F21D21 		movw	r1, #541
 1659 000c 034B     		ldr	r3, .L131
 1660 000e 044A     		ldr	r2, .L131+4
 1661 0010 0448     		ldr	r0, .L131+8
 1662 0012 FFF7FEFF 		bl	__assert_func
 1663              	.LVL144:
 1664              	.L130:
 541:Lib/FreeRTOS/Source/timers.c ****         return pxTimer->pcTimerName;
 1665              		.loc 1 541 31 discriminator 2 view .LVU449
 542:Lib/FreeRTOS/Source/timers.c ****     }
 1666              		.loc 1 542 9 view .LVU450
 543:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1667              		.loc 1 543 5 is_stmt 0 view .LVU451
 1668 0016 0068     		ldr	r0, [r0]
 1669              	.LVL145:
 543:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
 1670              		.loc 1 543 5 view .LVU452
 1671 0018 08BD     		pop	{r3, pc}
 1672              	.L132:
 1673 001a 00BF     		.align	2
 1674              	.L131:
 1675 001c 00000000 		.word	.LC0
 1676 0020 00000000 		.word	__func__.4
 1677 0024 02000000 		.word	.LC1
 1678              		.cfi_endproc
 1679              	.LFE11:
 1681              		.section	.text.xTimerIsTimerActive,"ax",%progbits
 1682              		.align	1
 1683              		.global	xTimerIsTimerActive
 1684              		.syntax unified
 1685              		.thumb
 1686              		.thumb_func
 1688              	xTimerIsTimerActive:
 1689              	.LVL146:
 1690              	.LFB22:
1004:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1005:Lib/FreeRTOS/Source/timers.c **** 
1006:Lib/FreeRTOS/Source/timers.c ****     BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
1007:Lib/FreeRTOS/Source/timers.c ****     {
 1691              		.loc 1 1007 5 is_stmt 1 view -0
ARM GAS  /tmp/cc6xdUDh.s 			page 55


 1692              		.cfi_startproc
 1693              		@ args = 0, pretend = 0, frame = 0
 1694              		@ frame_needed = 0, uses_anonymous_args = 0
1008:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xReturn;
 1695              		.loc 1 1008 9 view .LVU454
1009:Lib/FreeRTOS/Source/timers.c ****         Timer_t * pxTimer = xTimer;
 1696              		.loc 1 1009 9 view .LVU455
1010:Lib/FreeRTOS/Source/timers.c **** 
1011:Lib/FreeRTOS/Source/timers.c ****         configASSERT( xTimer );
 1697              		.loc 1 1011 9 view .LVU456
1007:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xReturn;
 1698              		.loc 1 1007 5 is_stmt 0 view .LVU457
 1699 0000 10B5     		push	{r4, lr}
 1700              		.cfi_def_cfa_offset 8
 1701              		.cfi_offset 4, -8
 1702              		.cfi_offset 14, -4
 1703              		.loc 1 1011 9 view .LVU458
 1704 0002 0446     		mov	r4, r0
 1705 0004 40B9     		cbnz	r0, .L134
 1706              		.loc 1 1011 9 is_stmt 1 discriminator 1 view .LVU459
 1707 0006 FFF7FEFF 		bl	ulSetInterruptMask
 1708              	.LVL147:
 1709              		.loc 1 1011 9 discriminator 1 view .LVU460
 1710 000a 40F2F331 		movw	r1, #1011
 1711 000e 074B     		ldr	r3, .L135
 1712 0010 074A     		ldr	r2, .L135+4
 1713 0012 0848     		ldr	r0, .L135+8
 1714 0014 FFF7FEFF 		bl	__assert_func
 1715              	.LVL148:
 1716              	.L134:
 1717              		.loc 1 1011 31 discriminator 2 view .LVU461
1012:Lib/FreeRTOS/Source/timers.c **** 
1013:Lib/FreeRTOS/Source/timers.c ****         /* Is the timer in the list of active timers? */
1014:Lib/FreeRTOS/Source/timers.c ****         taskENTER_CRITICAL();
 1718              		.loc 1 1014 9 view .LVU462
 1719 0018 FFF7FEFF 		bl	vPortEnterCritical
 1720              	.LVL149:
1015:Lib/FreeRTOS/Source/timers.c ****         {
1016:Lib/FreeRTOS/Source/timers.c ****             if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 1721              		.loc 1 1016 13 view .LVU463
 1722 001c 94F82840 		ldrb	r4, [r4, #40]	@ zero_extendqisi2
 1723              	.LVL150:
1017:Lib/FreeRTOS/Source/timers.c ****             {
1018:Lib/FreeRTOS/Source/timers.c ****                 xReturn = pdFALSE;
1019:Lib/FreeRTOS/Source/timers.c ****             }
1020:Lib/FreeRTOS/Source/timers.c ****             else
1021:Lib/FreeRTOS/Source/timers.c ****             {
1022:Lib/FreeRTOS/Source/timers.c ****                 xReturn = pdTRUE;
1023:Lib/FreeRTOS/Source/timers.c ****             }
1024:Lib/FreeRTOS/Source/timers.c ****         }
1025:Lib/FreeRTOS/Source/timers.c ****         taskEXIT_CRITICAL();
 1724              		.loc 1 1025 9 is_stmt 0 view .LVU464
 1725 0020 FFF7FEFF 		bl	vPortExitCritical
 1726              	.LVL151:
 1727 0024 04F00104 		and	r4, r4, #1
 1728              	.LVL152:
 1729              		.loc 1 1025 9 is_stmt 1 view .LVU465
ARM GAS  /tmp/cc6xdUDh.s 			page 56


1026:Lib/FreeRTOS/Source/timers.c **** 
1027:Lib/FreeRTOS/Source/timers.c ****         return xReturn;
 1730              		.loc 1 1027 9 view .LVU466
1028:Lib/FreeRTOS/Source/timers.c ****     } /*lint !e818 Can't be pointer to const due to the typedef. */
 1731              		.loc 1 1028 5 is_stmt 0 view .LVU467
 1732 0028 2046     		mov	r0, r4
 1733 002a 10BD     		pop	{r4, pc}
 1734              	.LVL153:
 1735              	.L136:
 1736              		.loc 1 1028 5 view .LVU468
 1737              		.align	2
 1738              	.L135:
 1739 002c 00000000 		.word	.LC0
 1740 0030 00000000 		.word	__func__.3
 1741 0034 02000000 		.word	.LC1
 1742              		.cfi_endproc
 1743              	.LFE22:
 1745              		.section	.text.pvTimerGetTimerID,"ax",%progbits
 1746              		.align	1
 1747              		.global	pvTimerGetTimerID
 1748              		.syntax unified
 1749              		.thumb
 1750              		.thumb_func
 1752              	pvTimerGetTimerID:
 1753              	.LVL154:
 1754              	.LFB23:
1029:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1030:Lib/FreeRTOS/Source/timers.c **** 
1031:Lib/FreeRTOS/Source/timers.c ****     void * pvTimerGetTimerID( const TimerHandle_t xTimer )
1032:Lib/FreeRTOS/Source/timers.c ****     {
 1755              		.loc 1 1032 5 is_stmt 1 view -0
 1756              		.cfi_startproc
 1757              		@ args = 0, pretend = 0, frame = 0
 1758              		@ frame_needed = 0, uses_anonymous_args = 0
1033:Lib/FreeRTOS/Source/timers.c ****         Timer_t * const pxTimer = xTimer;
 1759              		.loc 1 1033 9 view .LVU470
1034:Lib/FreeRTOS/Source/timers.c ****         void * pvReturn;
 1760              		.loc 1 1034 9 view .LVU471
1035:Lib/FreeRTOS/Source/timers.c **** 
1036:Lib/FreeRTOS/Source/timers.c ****         configASSERT( xTimer );
 1761              		.loc 1 1036 9 view .LVU472
1032:Lib/FreeRTOS/Source/timers.c ****         Timer_t * const pxTimer = xTimer;
 1762              		.loc 1 1032 5 is_stmt 0 view .LVU473
 1763 0000 10B5     		push	{r4, lr}
 1764              		.cfi_def_cfa_offset 8
 1765              		.cfi_offset 4, -8
 1766              		.cfi_offset 14, -4
 1767              		.loc 1 1036 9 view .LVU474
 1768 0002 0446     		mov	r4, r0
 1769 0004 40B9     		cbnz	r0, .L138
 1770              		.loc 1 1036 9 is_stmt 1 discriminator 1 view .LVU475
 1771 0006 FFF7FEFF 		bl	ulSetInterruptMask
 1772              	.LVL155:
 1773              		.loc 1 1036 9 discriminator 1 view .LVU476
 1774 000a 40F20C41 		movw	r1, #1036
 1775 000e 064B     		ldr	r3, .L139
 1776 0010 064A     		ldr	r2, .L139+4
ARM GAS  /tmp/cc6xdUDh.s 			page 57


 1777 0012 0748     		ldr	r0, .L139+8
 1778 0014 FFF7FEFF 		bl	__assert_func
 1779              	.LVL156:
 1780              	.L138:
 1781              		.loc 1 1036 31 discriminator 2 view .LVU477
1037:Lib/FreeRTOS/Source/timers.c **** 
1038:Lib/FreeRTOS/Source/timers.c ****         taskENTER_CRITICAL();
 1782              		.loc 1 1038 9 view .LVU478
 1783 0018 FFF7FEFF 		bl	vPortEnterCritical
 1784              	.LVL157:
1039:Lib/FreeRTOS/Source/timers.c ****         {
1040:Lib/FreeRTOS/Source/timers.c ****             pvReturn = pxTimer->pvTimerID;
 1785              		.loc 1 1040 13 view .LVU479
 1786              		.loc 1 1040 22 is_stmt 0 view .LVU480
 1787 001c E469     		ldr	r4, [r4, #28]
 1788              	.LVL158:
1041:Lib/FreeRTOS/Source/timers.c ****         }
1042:Lib/FreeRTOS/Source/timers.c ****         taskEXIT_CRITICAL();
 1789              		.loc 1 1042 9 is_stmt 1 view .LVU481
 1790 001e FFF7FEFF 		bl	vPortExitCritical
 1791              	.LVL159:
1043:Lib/FreeRTOS/Source/timers.c **** 
1044:Lib/FreeRTOS/Source/timers.c ****         return pvReturn;
 1792              		.loc 1 1044 9 view .LVU482
1045:Lib/FreeRTOS/Source/timers.c ****     }
 1793              		.loc 1 1045 5 is_stmt 0 view .LVU483
 1794 0022 2046     		mov	r0, r4
 1795 0024 10BD     		pop	{r4, pc}
 1796              	.LVL160:
 1797              	.L140:
 1798              		.loc 1 1045 5 view .LVU484
 1799 0026 00BF     		.align	2
 1800              	.L139:
 1801 0028 00000000 		.word	.LC0
 1802 002c 00000000 		.word	__func__.2
 1803 0030 02000000 		.word	.LC1
 1804              		.cfi_endproc
 1805              	.LFE23:
 1807              		.section	.text.vTimerSetTimerID,"ax",%progbits
 1808              		.align	1
 1809              		.global	vTimerSetTimerID
 1810              		.syntax unified
 1811              		.thumb
 1812              		.thumb_func
 1814              	vTimerSetTimerID:
 1815              	.LVL161:
 1816              	.LFB24:
1046:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1047:Lib/FreeRTOS/Source/timers.c **** 
1048:Lib/FreeRTOS/Source/timers.c ****     void vTimerSetTimerID( TimerHandle_t xTimer,
1049:Lib/FreeRTOS/Source/timers.c ****                            void * pvNewID )
1050:Lib/FreeRTOS/Source/timers.c ****     {
 1817              		.loc 1 1050 5 is_stmt 1 view -0
 1818              		.cfi_startproc
 1819              		@ args = 0, pretend = 0, frame = 0
 1820              		@ frame_needed = 0, uses_anonymous_args = 0
1051:Lib/FreeRTOS/Source/timers.c ****         Timer_t * const pxTimer = xTimer;
ARM GAS  /tmp/cc6xdUDh.s 			page 58


 1821              		.loc 1 1051 9 view .LVU486
1052:Lib/FreeRTOS/Source/timers.c **** 
1053:Lib/FreeRTOS/Source/timers.c ****         configASSERT( xTimer );
 1822              		.loc 1 1053 9 view .LVU487
1050:Lib/FreeRTOS/Source/timers.c ****         Timer_t * const pxTimer = xTimer;
 1823              		.loc 1 1050 5 is_stmt 0 view .LVU488
 1824 0000 38B5     		push	{r3, r4, r5, lr}
 1825              		.cfi_def_cfa_offset 16
 1826              		.cfi_offset 3, -16
 1827              		.cfi_offset 4, -12
 1828              		.cfi_offset 5, -8
 1829              		.cfi_offset 14, -4
1050:Lib/FreeRTOS/Source/timers.c ****         Timer_t * const pxTimer = xTimer;
 1830              		.loc 1 1050 5 view .LVU489
 1831 0002 0D46     		mov	r5, r1
 1832              		.loc 1 1053 9 view .LVU490
 1833 0004 0446     		mov	r4, r0
 1834 0006 40B9     		cbnz	r0, .L142
 1835              		.loc 1 1053 9 is_stmt 1 discriminator 1 view .LVU491
 1836 0008 FFF7FEFF 		bl	ulSetInterruptMask
 1837              	.LVL162:
 1838              		.loc 1 1053 9 discriminator 1 view .LVU492
 1839 000c 40F21D41 		movw	r1, #1053
 1840 0010 054B     		ldr	r3, .L143
 1841 0012 064A     		ldr	r2, .L143+4
 1842 0014 0648     		ldr	r0, .L143+8
 1843 0016 FFF7FEFF 		bl	__assert_func
 1844              	.LVL163:
 1845              	.L142:
 1846              		.loc 1 1053 31 discriminator 2 view .LVU493
1054:Lib/FreeRTOS/Source/timers.c **** 
1055:Lib/FreeRTOS/Source/timers.c ****         taskENTER_CRITICAL();
 1847              		.loc 1 1055 9 view .LVU494
 1848 001a FFF7FEFF 		bl	vPortEnterCritical
 1849              	.LVL164:
1056:Lib/FreeRTOS/Source/timers.c ****         {
1057:Lib/FreeRTOS/Source/timers.c ****             pxTimer->pvTimerID = pvNewID;
 1850              		.loc 1 1057 13 view .LVU495
 1851              		.loc 1 1057 32 is_stmt 0 view .LVU496
 1852 001e E561     		str	r5, [r4, #28]
1058:Lib/FreeRTOS/Source/timers.c ****         }
1059:Lib/FreeRTOS/Source/timers.c ****         taskEXIT_CRITICAL();
 1853              		.loc 1 1059 9 is_stmt 1 view .LVU497
1060:Lib/FreeRTOS/Source/timers.c ****     }
 1854              		.loc 1 1060 5 is_stmt 0 view .LVU498
 1855 0020 BDE83840 		pop	{r3, r4, r5, lr}
 1856              		.cfi_restore 14
 1857              		.cfi_restore 5
 1858              		.cfi_restore 4
 1859              		.cfi_restore 3
 1860              		.cfi_def_cfa_offset 0
 1861              	.LVL165:
1059:Lib/FreeRTOS/Source/timers.c ****     }
 1862              		.loc 1 1059 9 view .LVU499
 1863 0024 FFF7FEBF 		b	vPortExitCritical
 1864              	.LVL166:
 1865              	.L144:
ARM GAS  /tmp/cc6xdUDh.s 			page 59


1059:Lib/FreeRTOS/Source/timers.c ****     }
 1866              		.loc 1 1059 9 view .LVU500
 1867              		.align	2
 1868              	.L143:
 1869 0028 00000000 		.word	.LC0
 1870 002c 00000000 		.word	__func__.1
 1871 0030 02000000 		.word	.LC1
 1872              		.cfi_endproc
 1873              	.LFE24:
 1875              		.section	.text.xTimerPendFunctionCallFromISR,"ax",%progbits
 1876              		.align	1
 1877              		.global	xTimerPendFunctionCallFromISR
 1878              		.syntax unified
 1879              		.thumb
 1880              		.thumb_func
 1882              	xTimerPendFunctionCallFromISR:
 1883              	.LVL167:
 1884              	.LFB25:
1061:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1062:Lib/FreeRTOS/Source/timers.c **** 
1063:Lib/FreeRTOS/Source/timers.c ****     #if ( INCLUDE_xTimerPendFunctionCall == 1 )
1064:Lib/FreeRTOS/Source/timers.c **** 
1065:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,
1066:Lib/FreeRTOS/Source/timers.c ****                                                   void * pvParameter1,
1067:Lib/FreeRTOS/Source/timers.c ****                                                   uint32_t ulParameter2,
1068:Lib/FreeRTOS/Source/timers.c ****                                                   BaseType_t * pxHigherPriorityTaskWoken )
1069:Lib/FreeRTOS/Source/timers.c ****         {
 1885              		.loc 1 1069 9 is_stmt 1 view -0
 1886              		.cfi_startproc
 1887              		@ args = 0, pretend = 0, frame = 16
 1888              		@ frame_needed = 0, uses_anonymous_args = 0
1070:Lib/FreeRTOS/Source/timers.c ****             DaemonTaskMessage_t xMessage;
 1889              		.loc 1 1070 13 view .LVU502
1071:Lib/FreeRTOS/Source/timers.c ****             BaseType_t xReturn;
 1890              		.loc 1 1071 13 view .LVU503
1072:Lib/FreeRTOS/Source/timers.c **** 
1073:Lib/FreeRTOS/Source/timers.c ****             /* Complete the message with the function parameters and post it to the
1074:Lib/FreeRTOS/Source/timers.c ****              * daemon task. */
1075:Lib/FreeRTOS/Source/timers.c ****             xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 1891              		.loc 1 1075 13 view .LVU504
1069:Lib/FreeRTOS/Source/timers.c ****             DaemonTaskMessage_t xMessage;
 1892              		.loc 1 1069 9 is_stmt 0 view .LVU505
 1893 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
 1894              		.cfi_def_cfa_offset 24
 1895              		.cfi_offset 4, -8
 1896              		.cfi_offset 14, -4
1069:Lib/FreeRTOS/Source/timers.c ****             DaemonTaskMessage_t xMessage;
 1897              		.loc 1 1069 9 view .LVU506
 1898 0002 1446     		mov	r4, r2
 1899 0004 1A46     		mov	r2, r3
 1900              	.LVL168:
 1901              		.loc 1 1075 33 view .LVU507
 1902 0006 6FF00103 		mvn	r3, #1
 1903              	.LVL169:
1076:Lib/FreeRTOS/Source/timers.c ****             xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 1904              		.loc 1 1076 63 view .LVU508
 1905 000a CDE90030 		strd	r3, r0, [sp]
ARM GAS  /tmp/cc6xdUDh.s 			page 60


1077:Lib/FreeRTOS/Source/timers.c ****             xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 1906              		.loc 1 1077 13 is_stmt 1 view .LVU509
1078:Lib/FreeRTOS/Source/timers.c ****             xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
1079:Lib/FreeRTOS/Source/timers.c **** 
1080:Lib/FreeRTOS/Source/timers.c ****             xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 1907              		.loc 1 1080 23 is_stmt 0 view .LVU510
 1908 000e 0548     		ldr	r0, .L146
 1909              	.LVL170:
1078:Lib/FreeRTOS/Source/timers.c ****             xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 1910              		.loc 1 1078 57 view .LVU511
 1911 0010 CDE90214 		strd	r1, r4, [sp, #8]
 1912              		.loc 1 1080 13 is_stmt 1 view .LVU512
 1913              		.loc 1 1080 23 is_stmt 0 view .LVU513
 1914 0014 0023     		movs	r3, #0
 1915 0016 6946     		mov	r1, sp
 1916              	.LVL171:
 1917              		.loc 1 1080 23 view .LVU514
 1918 0018 0068     		ldr	r0, [r0]
 1919 001a FFF7FEFF 		bl	xQueueGenericSendFromISR
 1920              	.LVL172:
1081:Lib/FreeRTOS/Source/timers.c **** 
1082:Lib/FreeRTOS/Source/timers.c ****             tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
 1921              		.loc 1 1082 97 is_stmt 1 view .LVU515
1083:Lib/FreeRTOS/Source/timers.c **** 
1084:Lib/FreeRTOS/Source/timers.c ****             return xReturn;
 1922              		.loc 1 1084 13 view .LVU516
1085:Lib/FreeRTOS/Source/timers.c ****         }
 1923              		.loc 1 1085 9 is_stmt 0 view .LVU517
 1924 001e 04B0     		add	sp, sp, #16
 1925              		.cfi_def_cfa_offset 8
 1926              		@ sp needed
 1927 0020 10BD     		pop	{r4, pc}
 1928              	.LVL173:
 1929              	.L147:
 1930              		.loc 1 1085 9 view .LVU518
 1931 0022 00BF     		.align	2
 1932              	.L146:
 1933 0024 00000000 		.word	xTimerQueue
 1934              		.cfi_endproc
 1935              	.LFE25:
 1937              		.section	.text.xTimerPendFunctionCall,"ax",%progbits
 1938              		.align	1
 1939              		.global	xTimerPendFunctionCall
 1940              		.syntax unified
 1941              		.thumb
 1942              		.thumb_func
 1944              	xTimerPendFunctionCall:
 1945              	.LVL174:
 1946              	.LFB26:
1086:Lib/FreeRTOS/Source/timers.c **** 
1087:Lib/FreeRTOS/Source/timers.c ****     #endif /* INCLUDE_xTimerPendFunctionCall */
1088:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1089:Lib/FreeRTOS/Source/timers.c **** 
1090:Lib/FreeRTOS/Source/timers.c ****     #if ( INCLUDE_xTimerPendFunctionCall == 1 )
1091:Lib/FreeRTOS/Source/timers.c **** 
1092:Lib/FreeRTOS/Source/timers.c ****         BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,
1093:Lib/FreeRTOS/Source/timers.c ****                                            void * pvParameter1,
ARM GAS  /tmp/cc6xdUDh.s 			page 61


1094:Lib/FreeRTOS/Source/timers.c ****                                            uint32_t ulParameter2,
1095:Lib/FreeRTOS/Source/timers.c ****                                            TickType_t xTicksToWait )
1096:Lib/FreeRTOS/Source/timers.c ****         {
 1947              		.loc 1 1096 9 is_stmt 1 view -0
 1948              		.cfi_startproc
 1949              		@ args = 0, pretend = 0, frame = 16
 1950              		@ frame_needed = 0, uses_anonymous_args = 0
1097:Lib/FreeRTOS/Source/timers.c ****             DaemonTaskMessage_t xMessage;
 1951              		.loc 1 1097 13 view .LVU520
1098:Lib/FreeRTOS/Source/timers.c ****             BaseType_t xReturn;
 1952              		.loc 1 1098 13 view .LVU521
1099:Lib/FreeRTOS/Source/timers.c **** 
1100:Lib/FreeRTOS/Source/timers.c ****             /* This function can only be called after a timer has been created or
1101:Lib/FreeRTOS/Source/timers.c ****              * after the scheduler has been started because, until then, the timer
1102:Lib/FreeRTOS/Source/timers.c ****              * queue does not exist. */
1103:Lib/FreeRTOS/Source/timers.c ****             configASSERT( xTimerQueue );
 1953              		.loc 1 1103 13 view .LVU522
1096:Lib/FreeRTOS/Source/timers.c ****             DaemonTaskMessage_t xMessage;
 1954              		.loc 1 1096 9 is_stmt 0 view .LVU523
 1955 0000 30B5     		push	{r4, r5, lr}
 1956              		.cfi_def_cfa_offset 12
 1957              		.cfi_offset 4, -12
 1958              		.cfi_offset 5, -8
 1959              		.cfi_offset 14, -4
 1960 0002 1446     		mov	r4, r2
 1961 0004 1A46     		mov	r2, r3
 1962              	.LVL175:
 1963              		.loc 1 1103 13 view .LVU524
 1964 0006 0D4B     		ldr	r3, .L150
 1965              	.LVL176:
1096:Lib/FreeRTOS/Source/timers.c ****             DaemonTaskMessage_t xMessage;
 1966              		.loc 1 1096 9 view .LVU525
 1967 0008 0546     		mov	r5, r0
 1968              		.loc 1 1103 13 view .LVU526
 1969 000a 1868     		ldr	r0, [r3]
 1970              	.LVL177:
1096:Lib/FreeRTOS/Source/timers.c ****             DaemonTaskMessage_t xMessage;
 1971              		.loc 1 1096 9 view .LVU527
 1972 000c 85B0     		sub	sp, sp, #20
 1973              		.cfi_def_cfa_offset 32
 1974              		.loc 1 1103 13 view .LVU528
 1975 000e 40B9     		cbnz	r0, .L149
 1976              		.loc 1 1103 13 is_stmt 1 discriminator 1 view .LVU529
 1977 0010 FFF7FEFF 		bl	ulSetInterruptMask
 1978              	.LVL178:
 1979              		.loc 1 1103 13 discriminator 1 view .LVU530
 1980 0014 40F24F41 		movw	r1, #1103
 1981 0018 094B     		ldr	r3, .L150+4
 1982 001a 0A4A     		ldr	r2, .L150+8
 1983 001c 0A48     		ldr	r0, .L150+12
 1984 001e FFF7FEFF 		bl	__assert_func
 1985              	.LVL179:
 1986              	.L149:
 1987              		.loc 1 1103 40 discriminator 2 view .LVU531
1104:Lib/FreeRTOS/Source/timers.c **** 
1105:Lib/FreeRTOS/Source/timers.c ****             /* Complete the message with the function parameters and post it to the
1106:Lib/FreeRTOS/Source/timers.c ****              * daemon task. */
ARM GAS  /tmp/cc6xdUDh.s 			page 62


1107:Lib/FreeRTOS/Source/timers.c ****             xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 1988              		.loc 1 1107 13 view .LVU532
 1989              		.loc 1 1107 33 is_stmt 0 view .LVU533
 1990 0022 4FF0FF33 		mov	r3, #-1
1108:Lib/FreeRTOS/Source/timers.c ****             xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
1109:Lib/FreeRTOS/Source/timers.c ****             xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
1110:Lib/FreeRTOS/Source/timers.c ****             xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 1991              		.loc 1 1110 57 view .LVU534
 1992 0026 CDE90214 		strd	r1, r4, [sp, #8]
1108:Lib/FreeRTOS/Source/timers.c ****             xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 1993              		.loc 1 1108 63 view .LVU535
 1994 002a CDE90035 		strd	r3, r5, [sp]
1109:Lib/FreeRTOS/Source/timers.c ****             xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 1995              		.loc 1 1109 13 is_stmt 1 view .LVU536
1111:Lib/FreeRTOS/Source/timers.c **** 
1112:Lib/FreeRTOS/Source/timers.c ****             xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 1996              		.loc 1 1112 13 view .LVU537
 1997              		.loc 1 1112 23 is_stmt 0 view .LVU538
 1998 002e 6946     		mov	r1, sp
 1999              	.LVL180:
 2000              		.loc 1 1112 23 view .LVU539
 2001 0030 0023     		movs	r3, #0
 2002 0032 FFF7FEFF 		bl	xQueueGenericSend
 2003              	.LVL181:
1113:Lib/FreeRTOS/Source/timers.c **** 
1114:Lib/FreeRTOS/Source/timers.c ****             tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
 2004              		.loc 1 1114 88 is_stmt 1 view .LVU540
1115:Lib/FreeRTOS/Source/timers.c **** 
1116:Lib/FreeRTOS/Source/timers.c ****             return xReturn;
 2005              		.loc 1 1116 13 view .LVU541
1117:Lib/FreeRTOS/Source/timers.c ****         }
 2006              		.loc 1 1117 9 is_stmt 0 view .LVU542
 2007 0036 05B0     		add	sp, sp, #20
 2008              		.cfi_def_cfa_offset 12
 2009              		@ sp needed
 2010 0038 30BD     		pop	{r4, r5, pc}
 2011              	.LVL182:
 2012              	.L151:
 2013              		.loc 1 1117 9 view .LVU543
 2014 003a 00BF     		.align	2
 2015              	.L150:
 2016 003c 00000000 		.word	xTimerQueue
 2017 0040 00000000 		.word	.LC0
 2018 0044 00000000 		.word	__func__.0
 2019 0048 02000000 		.word	.LC1
 2020              		.cfi_endproc
 2021              	.LFE26:
 2023              		.section	.text.uxTimerGetTimerNumber,"ax",%progbits
 2024              		.align	1
 2025              		.global	uxTimerGetTimerNumber
 2026              		.syntax unified
 2027              		.thumb
 2028              		.thumb_func
 2030              	uxTimerGetTimerNumber:
 2031              	.LVL183:
 2032              	.LFB27:
1118:Lib/FreeRTOS/Source/timers.c **** 
ARM GAS  /tmp/cc6xdUDh.s 			page 63


1119:Lib/FreeRTOS/Source/timers.c ****     #endif /* INCLUDE_xTimerPendFunctionCall */
1120:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1121:Lib/FreeRTOS/Source/timers.c **** 
1122:Lib/FreeRTOS/Source/timers.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
1123:Lib/FreeRTOS/Source/timers.c **** 
1124:Lib/FreeRTOS/Source/timers.c ****         UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
1125:Lib/FreeRTOS/Source/timers.c ****         {
 2033              		.loc 1 1125 9 is_stmt 1 view -0
 2034              		.cfi_startproc
 2035              		@ args = 0, pretend = 0, frame = 0
 2036              		@ frame_needed = 0, uses_anonymous_args = 0
 2037              		@ link register save eliminated.
1126:Lib/FreeRTOS/Source/timers.c ****             return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 2038              		.loc 1 1126 13 view .LVU545
1127:Lib/FreeRTOS/Source/timers.c ****         }
 2039              		.loc 1 1127 9 is_stmt 0 view .LVU546
 2040 0000 406A     		ldr	r0, [r0, #36]
 2041              	.LVL184:
 2042              		.loc 1 1127 9 view .LVU547
 2043 0002 7047     		bx	lr
 2044              		.cfi_endproc
 2045              	.LFE27:
 2047              		.section	.text.vTimerSetTimerNumber,"ax",%progbits
 2048              		.align	1
 2049              		.global	vTimerSetTimerNumber
 2050              		.syntax unified
 2051              		.thumb
 2052              		.thumb_func
 2054              	vTimerSetTimerNumber:
 2055              	.LVL185:
 2056              	.LFB28:
1128:Lib/FreeRTOS/Source/timers.c **** 
1129:Lib/FreeRTOS/Source/timers.c ****     #endif /* configUSE_TRACE_FACILITY */
1130:Lib/FreeRTOS/Source/timers.c **** /*-----------------------------------------------------------*/
1131:Lib/FreeRTOS/Source/timers.c **** 
1132:Lib/FreeRTOS/Source/timers.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
1133:Lib/FreeRTOS/Source/timers.c **** 
1134:Lib/FreeRTOS/Source/timers.c ****         void vTimerSetTimerNumber( TimerHandle_t xTimer,
1135:Lib/FreeRTOS/Source/timers.c ****                                    UBaseType_t uxTimerNumber )
1136:Lib/FreeRTOS/Source/timers.c ****         {
 2057              		.loc 1 1136 9 is_stmt 1 view -0
 2058              		.cfi_startproc
 2059              		@ args = 0, pretend = 0, frame = 0
 2060              		@ frame_needed = 0, uses_anonymous_args = 0
 2061              		@ link register save eliminated.
1137:Lib/FreeRTOS/Source/timers.c ****             ( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 2062              		.loc 1 1137 13 view .LVU549
 2063              		.loc 1 1137 53 is_stmt 0 view .LVU550
 2064 0000 4162     		str	r1, [r0, #36]
1138:Lib/FreeRTOS/Source/timers.c ****         }
 2065              		.loc 1 1138 9 view .LVU551
 2066 0002 7047     		bx	lr
 2067              		.cfi_endproc
 2068              	.LFE28:
 2070              		.section	.rodata.__func__.0,"a"
 2073              	__func__.0:
 2074 0000 7854696D 		.ascii	"xTimerPendFunctionCall\000"
ARM GAS  /tmp/cc6xdUDh.s 			page 64


 2074      65725065 
 2074      6E644675 
 2074      6E637469 
 2074      6F6E4361 
 2075              		.section	.rodata.__func__.1,"a"
 2078              	__func__.1:
 2079 0000 7654696D 		.ascii	"vTimerSetTimerID\000"
 2079      65725365 
 2079      7454696D 
 2079      65724944 
 2079      00
 2080              		.section	.rodata.__func__.2,"a"
 2083              	__func__.2:
 2084 0000 70765469 		.ascii	"pvTimerGetTimerID\000"
 2084      6D657247 
 2084      65745469 
 2084      6D657249 
 2084      4400
 2085              		.section	.rodata.__func__.3,"a"
 2088              	__func__.3:
 2089 0000 7854696D 		.ascii	"xTimerIsTimerActive\000"
 2089      65724973 
 2089      54696D65 
 2089      72416374 
 2089      69766500 
 2090              		.section	.rodata.__func__.4,"a"
 2093              	__func__.4:
 2094 0000 70635469 		.ascii	"pcTimerGetName\000"
 2094      6D657247 
 2094      65744E61 
 2094      6D6500
 2095              		.section	.rodata.__func__.5,"a"
 2098              	__func__.5:
 2099 0000 7854696D 		.ascii	"xTimerGetStaticBuffer\000"
 2099      65724765 
 2099      74537461 
 2099      74696342 
 2099      75666665 
 2100              		.section	.rodata.__func__.6,"a"
 2103              	__func__.6:
 2104 0000 7854696D 		.ascii	"xTimerGetExpiryTime\000"
 2104      65724765 
 2104      74457870 
 2104      69727954 
 2104      696D6500 
 2105              		.section	.rodata.__func__.7,"a"
 2108              	__func__.7:
 2109 0000 7854696D 		.ascii	"xTimerGetReloadMode\000"
 2109      65724765 
 2109      7452656C 
 2109      6F61644D 
 2109      6F646500 
 2110              		.section	.rodata.__func__.8,"a"
 2113              	__func__.8:
 2114 0000 7654696D 		.ascii	"vTimerSetReloadMode\000"
 2114      65725365 
 2114      7452656C 
ARM GAS  /tmp/cc6xdUDh.s 			page 65


 2114      6F61644D 
 2114      6F646500 
 2115              		.section	.rodata.__func__.9,"a"
 2118              	__func__.9:
 2119 0000 7854696D 		.ascii	"xTimerGetPeriod\000"
 2119      65724765 
 2119      74506572 
 2119      696F6400 
 2120              		.section	.rodata.__func__.10,"a"
 2123              	__func__.10:
 2124 0000 7854696D 		.ascii	"xTimerGetTimerDaemonTaskHandle\000"
 2124      65724765 
 2124      7454696D 
 2124      65724461 
 2124      656D6F6E 
 2125              		.section	.rodata.__func__.11,"a"
 2128              	__func__.11:
 2129 0000 7854696D 		.ascii	"xTimerGenericCommand\000"
 2129      65724765 
 2129      6E657269 
 2129      63436F6D 
 2129      6D616E64 
 2130              		.section	.rodata.__func__.12,"a"
 2133              	__func__.12:
 2134 0000 70727649 		.ascii	"prvInitialiseNewTimer\000"
 2134      6E697469 
 2134      616C6973 
 2134      654E6577 
 2134      54696D65 
 2135              		.section	.rodata.__func__.13,"a"
 2138              	__func__.13:
 2139 0000 7854696D 		.ascii	"xTimerCreateStatic\000"
 2139      65724372 
 2139      65617465 
 2139      53746174 
 2139      696300
 2140              		.section	.bss.xStaticTimerQueue.14,"aw",%nobits
 2141              		.align	2
 2144              	xStaticTimerQueue.14:
 2145 0000 00000000 		.space	80
 2145      00000000 
 2145      00000000 
 2145      00000000 
 2145      00000000 
 2146              		.section	.bss.ucStaticTimerQueueStorage.15,"aw",%nobits
 2149              	ucStaticTimerQueueStorage.15:
 2150 0000 00000000 		.space	160
 2150      00000000 
 2150      00000000 
 2150      00000000 
 2150      00000000 
 2151              		.section	.rodata.__func__.16,"a"
 2154              	__func__.16:
 2155 0000 70727650 		.ascii	"prvProcessReceivedCommands\000"
 2155      726F6365 
 2155      73735265 
 2155      63656976 
ARM GAS  /tmp/cc6xdUDh.s 			page 66


 2155      6564436F 
 2156              		.section	.bss.xLastTime.17,"aw",%nobits
 2157              		.align	2
 2160              	xLastTime.17:
 2161 0000 00000000 		.space	4
 2162              		.section	.rodata.__func__.18,"a"
 2165              	__func__.18:
 2166 0000 7854696D 		.ascii	"xTimerCreateTimerTask\000"
 2166      65724372 
 2166      65617465 
 2166      54696D65 
 2166      72546173 
 2167              		.section	.bss.xTimerTaskHandle,"aw",%nobits
 2168              		.align	2
 2171              	xTimerTaskHandle:
 2172 0000 00000000 		.space	4
 2173              		.section	.bss.xTimerQueue,"aw",%nobits
 2174              		.align	2
 2177              	xTimerQueue:
 2178 0000 00000000 		.space	4
 2179              		.section	.bss.pxOverflowTimerList,"aw",%nobits
 2180              		.align	2
 2183              	pxOverflowTimerList:
 2184 0000 00000000 		.space	4
 2185              		.section	.bss.pxCurrentTimerList,"aw",%nobits
 2186              		.align	2
 2189              	pxCurrentTimerList:
 2190 0000 00000000 		.space	4
 2191              		.section	.bss.xActiveTimerList2,"aw",%nobits
 2192              		.align	2
 2195              	xActiveTimerList2:
 2196 0000 00000000 		.space	20
 2196      00000000 
 2196      00000000 
 2196      00000000 
 2196      00000000 
 2197              		.section	.bss.xActiveTimerList1,"aw",%nobits
 2198              		.align	2
 2201              	xActiveTimerList1:
 2202 0000 00000000 		.space	20
 2202      00000000 
 2202      00000000 
 2202      00000000 
 2202      00000000 
 2203              		.text
 2204              	.Letext0:
 2205              		.file 2 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 2206              		.file 3 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 2207              		.file 4 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 2208              		.file 5 "Lib/FreeRTOS/Source/include/projdefs.h"
 2209              		.file 6 "Lib/FreeRTOS/Source/portable/GCC/ARM_CM55_NTZ/non_secure/portmacrocommon.h"
 2210              		.file 7 "Lib/FreeRTOS/Source/include/FreeRTOS.h"
 2211              		.file 8 "Lib/FreeRTOS/Source/include/list.h"
 2212              		.file 9 "Lib/FreeRTOS/Source/include/task.h"
 2213              		.file 10 "Lib/FreeRTOS/Source/include/queue.h"
 2214              		.file 11 "Lib/FreeRTOS/Source/include/timers.h"
 2215              		.file 12 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-
ARM GAS  /tmp/cc6xdUDh.s 			page 67


ARM GAS  /tmp/cc6xdUDh.s 			page 68


DEFINED SYMBOLS
                            *ABS*:00000000 timers.c
     /tmp/cc6xdUDh.s:26     .text.prvInsertTimerInActiveList:00000000 $t
     /tmp/cc6xdUDh.s:31     .text.prvInsertTimerInActiveList:00000000 prvInsertTimerInActiveList
     /tmp/cc6xdUDh.s:110    .text.prvInsertTimerInActiveList:00000034 $d
     /tmp/cc6xdUDh.s:2183   .bss.pxOverflowTimerList:00000000 pxOverflowTimerList
     /tmp/cc6xdUDh.s:2189   .bss.pxCurrentTimerList:00000000 pxCurrentTimerList
     /tmp/cc6xdUDh.s:116    .text.prvReloadTimer:00000000 $t
     /tmp/cc6xdUDh.s:121    .text.prvReloadTimer:00000000 prvReloadTimer
     /tmp/cc6xdUDh.s:174    .text.prvProcessExpiredTimer:00000000 $t
     /tmp/cc6xdUDh.s:179    .text.prvProcessExpiredTimer:00000000 prvProcessExpiredTimer
     /tmp/cc6xdUDh.s:253    .text.prvProcessExpiredTimer:0000003c $d
     /tmp/cc6xdUDh.s:258    .text.prvSampleTimeNow:00000000 $t
     /tmp/cc6xdUDh.s:263    .text.prvSampleTimeNow:00000000 prvSampleTimeNow
     /tmp/cc6xdUDh.s:362    .text.prvSampleTimeNow:00000040 $d
     /tmp/cc6xdUDh.s:2160   .bss.xLastTime.17:00000000 xLastTime.17
     /tmp/cc6xdUDh.s:376    .text.prvTimerTask:00000000 $t
     /tmp/cc6xdUDh.s:381    .text.prvTimerTask:00000000 prvTimerTask
     /tmp/cc6xdUDh.s:532    .text.prvTimerTask:00000072 $d
     /tmp/cc6xdUDh.s:746    .text.prvTimerTask:00000148 $d
     /tmp/cc6xdUDh.s:2177   .bss.xTimerQueue:00000000 xTimerQueue
     /tmp/cc6xdUDh.s:2154   .rodata.__func__.16:00000000 __func__.16
     /tmp/cc6xdUDh.s:761    .text.prvCheckForValidListAndQueue:00000000 $t
     /tmp/cc6xdUDh.s:766    .text.prvCheckForValidListAndQueue:00000000 prvCheckForValidListAndQueue
     /tmp/cc6xdUDh.s:860    .text.prvCheckForValidListAndQueue:00000048 $d
     /tmp/cc6xdUDh.s:2201   .bss.xActiveTimerList1:00000000 xActiveTimerList1
     /tmp/cc6xdUDh.s:2195   .bss.xActiveTimerList2:00000000 xActiveTimerList2
     /tmp/cc6xdUDh.s:2149   .bss.ucStaticTimerQueueStorage.15:00000000 ucStaticTimerQueueStorage.15
     /tmp/cc6xdUDh.s:2144   .bss.xStaticTimerQueue.14:00000000 xStaticTimerQueue.14
     /tmp/cc6xdUDh.s:875    .text.xTimerCreateTimerTask:00000000 $t
     /tmp/cc6xdUDh.s:881    .text.xTimerCreateTimerTask:00000000 xTimerCreateTimerTask
     /tmp/cc6xdUDh.s:964    .text.xTimerCreateTimerTask:00000054 $d
     /tmp/cc6xdUDh.s:2171   .bss.xTimerTaskHandle:00000000 xTimerTaskHandle
     /tmp/cc6xdUDh.s:2165   .rodata.__func__.18:00000000 __func__.18
     /tmp/cc6xdUDh.s:975    .text.xTimerCreateStatic:00000000 $t
     /tmp/cc6xdUDh.s:981    .text.xTimerCreateStatic:00000000 xTimerCreateStatic
     /tmp/cc6xdUDh.s:1126   .text.xTimerCreateStatic:00000080 $d
     /tmp/cc6xdUDh.s:2138   .rodata.__func__.13:00000000 __func__.13
     /tmp/cc6xdUDh.s:2133   .rodata.__func__.12:00000000 __func__.12
     /tmp/cc6xdUDh.s:1134   .text.xTimerGenericCommand:00000000 $t
     /tmp/cc6xdUDh.s:1140   .text.xTimerGenericCommand:00000000 xTimerGenericCommand
     /tmp/cc6xdUDh.s:1245   .text.xTimerGenericCommand:00000058 $d
     /tmp/cc6xdUDh.s:2128   .rodata.__func__.11:00000000 __func__.11
     /tmp/cc6xdUDh.s:1253   .text.xTimerGetTimerDaemonTaskHandle:00000000 $t
     /tmp/cc6xdUDh.s:1259   .text.xTimerGetTimerDaemonTaskHandle:00000000 xTimerGetTimerDaemonTaskHandle
     /tmp/cc6xdUDh.s:1291   .text.xTimerGetTimerDaemonTaskHandle:0000001c $d
     /tmp/cc6xdUDh.s:2123   .rodata.__func__.10:00000000 __func__.10
     /tmp/cc6xdUDh.s:1299   .text.xTimerGetPeriod:00000000 $t
     /tmp/cc6xdUDh.s:1305   .text.xTimerGetPeriod:00000000 xTimerGetPeriod
     /tmp/cc6xdUDh.s:1342   .text.xTimerGetPeriod:0000001c $d
     /tmp/cc6xdUDh.s:2118   .rodata.__func__.9:00000000 __func__.9
     /tmp/cc6xdUDh.s:1349   .text.vTimerSetReloadMode:00000000 $t
     /tmp/cc6xdUDh.s:1355   .text.vTimerSetReloadMode:00000000 vTimerSetReloadMode
     /tmp/cc6xdUDh.s:1415   .text.vTimerSetReloadMode:0000003c $d
     /tmp/cc6xdUDh.s:2113   .rodata.__func__.8:00000000 __func__.8
     /tmp/cc6xdUDh.s:1422   .text.xTimerGetReloadMode:00000000 $t
     /tmp/cc6xdUDh.s:1428   .text.xTimerGetReloadMode:00000000 xTimerGetReloadMode
ARM GAS  /tmp/cc6xdUDh.s 			page 69


     /tmp/cc6xdUDh.s:1489   .text.xTimerGetReloadMode:0000002c $d
     /tmp/cc6xdUDh.s:2108   .rodata.__func__.7:00000000 __func__.7
     /tmp/cc6xdUDh.s:1496   .text.uxTimerGetReloadMode:00000000 $t
     /tmp/cc6xdUDh.s:1502   .text.uxTimerGetReloadMode:00000000 uxTimerGetReloadMode
     /tmp/cc6xdUDh.s:1519   .text.xTimerGetExpiryTime:00000000 $t
     /tmp/cc6xdUDh.s:1525   .text.xTimerGetExpiryTime:00000000 xTimerGetExpiryTime
     /tmp/cc6xdUDh.s:1564   .text.xTimerGetExpiryTime:0000001c $d
     /tmp/cc6xdUDh.s:2103   .rodata.__func__.6:00000000 __func__.6
     /tmp/cc6xdUDh.s:1571   .text.xTimerGetStaticBuffer:00000000 $t
     /tmp/cc6xdUDh.s:1577   .text.xTimerGetStaticBuffer:00000000 xTimerGetStaticBuffer
     /tmp/cc6xdUDh.s:1625   .text.xTimerGetStaticBuffer:00000028 $d
     /tmp/cc6xdUDh.s:2098   .rodata.__func__.5:00000000 __func__.5
     /tmp/cc6xdUDh.s:1632   .text.pcTimerGetName:00000000 $t
     /tmp/cc6xdUDh.s:1638   .text.pcTimerGetName:00000000 pcTimerGetName
     /tmp/cc6xdUDh.s:1675   .text.pcTimerGetName:0000001c $d
     /tmp/cc6xdUDh.s:2093   .rodata.__func__.4:00000000 __func__.4
     /tmp/cc6xdUDh.s:1682   .text.xTimerIsTimerActive:00000000 $t
     /tmp/cc6xdUDh.s:1688   .text.xTimerIsTimerActive:00000000 xTimerIsTimerActive
     /tmp/cc6xdUDh.s:1739   .text.xTimerIsTimerActive:0000002c $d
     /tmp/cc6xdUDh.s:2088   .rodata.__func__.3:00000000 __func__.3
     /tmp/cc6xdUDh.s:1746   .text.pvTimerGetTimerID:00000000 $t
     /tmp/cc6xdUDh.s:1752   .text.pvTimerGetTimerID:00000000 pvTimerGetTimerID
     /tmp/cc6xdUDh.s:1801   .text.pvTimerGetTimerID:00000028 $d
     /tmp/cc6xdUDh.s:2083   .rodata.__func__.2:00000000 __func__.2
     /tmp/cc6xdUDh.s:1808   .text.vTimerSetTimerID:00000000 $t
     /tmp/cc6xdUDh.s:1814   .text.vTimerSetTimerID:00000000 vTimerSetTimerID
     /tmp/cc6xdUDh.s:1869   .text.vTimerSetTimerID:00000028 $d
     /tmp/cc6xdUDh.s:2078   .rodata.__func__.1:00000000 __func__.1
     /tmp/cc6xdUDh.s:1876   .text.xTimerPendFunctionCallFromISR:00000000 $t
     /tmp/cc6xdUDh.s:1882   .text.xTimerPendFunctionCallFromISR:00000000 xTimerPendFunctionCallFromISR
     /tmp/cc6xdUDh.s:1933   .text.xTimerPendFunctionCallFromISR:00000024 $d
     /tmp/cc6xdUDh.s:1938   .text.xTimerPendFunctionCall:00000000 $t
     /tmp/cc6xdUDh.s:1944   .text.xTimerPendFunctionCall:00000000 xTimerPendFunctionCall
     /tmp/cc6xdUDh.s:2016   .text.xTimerPendFunctionCall:0000003c $d
     /tmp/cc6xdUDh.s:2073   .rodata.__func__.0:00000000 __func__.0
     /tmp/cc6xdUDh.s:2024   .text.uxTimerGetTimerNumber:00000000 $t
     /tmp/cc6xdUDh.s:2030   .text.uxTimerGetTimerNumber:00000000 uxTimerGetTimerNumber
     /tmp/cc6xdUDh.s:2048   .text.vTimerSetTimerNumber:00000000 $t
     /tmp/cc6xdUDh.s:2054   .text.vTimerSetTimerNumber:00000000 vTimerSetTimerNumber
     /tmp/cc6xdUDh.s:2141   .bss.xStaticTimerQueue.14:00000000 $d
     /tmp/cc6xdUDh.s:2150   .bss.ucStaticTimerQueueStorage.15:00000000 $d
     /tmp/cc6xdUDh.s:2157   .bss.xLastTime.17:00000000 $d
     /tmp/cc6xdUDh.s:2168   .bss.xTimerTaskHandle:00000000 $d
     /tmp/cc6xdUDh.s:2174   .bss.xTimerQueue:00000000 $d
     /tmp/cc6xdUDh.s:2180   .bss.pxOverflowTimerList:00000000 $d
     /tmp/cc6xdUDh.s:2186   .bss.pxCurrentTimerList:00000000 $d
     /tmp/cc6xdUDh.s:2192   .bss.xActiveTimerList2:00000000 $d
     /tmp/cc6xdUDh.s:2198   .bss.xActiveTimerList1:00000000 $d
     /tmp/cc6xdUDh.s:542    .text.prvTimerTask:0000007b $d
     /tmp/cc6xdUDh.s:542    .text.prvTimerTask:0000007c $t
                           .group:00000000 wm4.0.c552ae9005b0f2cca11872fae5d4b7f2
                           .group:00000000 wm4.ieeefp.h.77.bd5feb87d9990dd328793ced294f6a87
                           .group:00000000 wm4._newlib_version.h.4.411db44ea2338a62eca2f0777f81481b
                           .group:00000000 wm4.newlib.h.27.4b972ceed5d01f491020c20f1e546cab
                           .group:00000000 wm4.features.h.22.9dfb1293666eb4caf24cccb81c86a551
                           .group:00000000 wm4.config.h.224.10ee1ad185d877c6e334e6581faab44d
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
ARM GAS  /tmp/cc6xdUDh.s 			page 70


                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.185.882514a1a6169ceba9142f401cbe27c6
                           .group:00000000 wm4.stddef.h.39.794fa375de48dda278c4aebb5c74aa5b
                           .group:00000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:00000000 wm4.cdefs.h.49.70fc7af612f78ddcace70fdd90b5623b
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.158.6f8e08a347b1cff664332fa350bfceb3
                           .group:00000000 wm4._types.h.127.3bdfe3ff8ea2d0985b03d9cbe93480e3
                           .group:00000000 wm4.reent.h.18.25503cdc8b7e55dd0d6ea7b3e5af7a03
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.78.6b87466b04591b1f1cb88c14fdf2ba9e
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.FreeRTOS.h.59.647b1b0da38e4e98108aae13c8abe9ee
                           .group:00000000 wm4.assert.h.11.db24e541f16414db224bf986d21017e2
                           .group:00000000 wm4.FreeRTOSConfig.h.59.2629c72cff9e6dbe880a2dc225eae516
                           .group:00000000 wm4.FreeRTOS.h.80.7742fabaf5accf3762dc12f7f259a8a0
                           .group:00000000 wm4.projdefs.h.30.55a824156f299c075c33148a9fdadb99
                           .group:00000000 wm4.portmacro.h.30.cbb4b2da41f551c2a9904f0d03a1ce3e
                           .group:00000000 wm4.portmacrocommon.h.30.d5cb67896ab50a95311be7e023da5c4f
                           .group:00000000 wm4.portmacro.h.68.4051ecf710d074fb55b16d91dfebeeaa
                           .group:00000000 wm4.portable.h.61.d557c57974d490f056246a26cdcddd6c
                           .group:00000000 wm4.mpu_wrappers.h.30.ccc5f1a6903f941a88c268f5f62af3fe
                           .group:00000000 wm4.portable.h.189.522b8bd52a171d3fd1432ef06d0caa63
                           .group:00000000 wm4.FreeRTOS.h.102.fb871f3e464d99c5a57b3115545a02ad
                           .group:00000000 wm4.list.h.59.bce6419520cd4f5f98779a1530bf2118
                           .group:00000000 wm4.task.h.56.84290139c73b47f5b9aac361361a2a31
                           .group:00000000 wm4.queue.h.68.219f47fba8b59640449b84d04c5bd6d8
                           .group:00000000 wm4.timers.h.31.66ebcd2d44a2c3d69f2bf78390c55c74

UNDEFINED SYMBOLS
vListInsert
uxListRemove
xTaskGetTickCount
vTaskSuspendAll
xTaskResumeAll
xQueueReceive
vQueueWaitForMessageRestricted
vPortYield
ulSetInterruptMask
__assert_func
vPortEnterCritical
vListInitialise
xQueueGenericCreateStatic
vQueueAddToRegistry
vPortExitCritical
vApplicationGetTimerTaskMemory
xTaskCreateStatic
vListInitialiseItem
xTaskGetSchedulerState
xQueueGenericSend
xQueueGenericSendFromISR
