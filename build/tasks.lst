ARM GAS  /tmp/ccEd3BVV.s 			page 1


   1              		.arch armv8.1-m.main
   2              		.fpu fpv5-d16
   3              		.arch_extension dsp
   4              		.arch_extension fp
   5              		.arch_extension fp.dp
   6              		.arch_extension mve
   7              		.arch_extension mve.fp
   8              		.eabi_attribute 5, "cortex-m55"
   9              		.eabi_attribute 28, 1
  10              		.eabi_attribute 20, 1
  11              		.eabi_attribute 21, 1
  12              		.eabi_attribute 23, 3
  13              		.eabi_attribute 24, 1
  14              		.eabi_attribute 25, 1
  15              		.eabi_attribute 26, 1
  16              		.eabi_attribute 30, 4
  17              		.eabi_attribute 34, 1
  18              		.eabi_attribute 38, 1
  19              		.eabi_attribute 18, 4
  20              		.file	"tasks.c"
  21              		.text
  22              	.Ltext0:
  23              		.cfi_sections	.debug_frame
  24              		.file 1 "Lib/FreeRTOS/Source/tasks.c"
  25              		.section	.text.prvIdleTask,"ax",%progbits
  26              		.align	1
  27              		.syntax unified
  28              		.thumb
  29              		.thumb_func
  31              	prvIdleTask:
  32              	.LVL0:
  33              	.LFB39:
   1:Lib/FreeRTOS/Source/tasks.c **** /*
   2:Lib/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.6.2
   3:Lib/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Lib/FreeRTOS/Source/tasks.c ****  *
   5:Lib/FreeRTOS/Source/tasks.c ****  * SPDX-License-Identifier: MIT
   6:Lib/FreeRTOS/Source/tasks.c ****  *
   7:Lib/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:Lib/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:Lib/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
  10:Lib/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:Lib/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:Lib/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  13:Lib/FreeRTOS/Source/tasks.c ****  *
  14:Lib/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  15:Lib/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  16:Lib/FreeRTOS/Source/tasks.c ****  *
  17:Lib/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:Lib/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:Lib/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:Lib/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:Lib/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:Lib/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:Lib/FreeRTOS/Source/tasks.c ****  *
  24:Lib/FreeRTOS/Source/tasks.c ****  * https://www.FreeRTOS.org
  25:Lib/FreeRTOS/Source/tasks.c ****  * https://github.com/FreeRTOS
ARM GAS  /tmp/ccEd3BVV.s 			page 2


  26:Lib/FreeRTOS/Source/tasks.c ****  *
  27:Lib/FreeRTOS/Source/tasks.c ****  */
  28:Lib/FreeRTOS/Source/tasks.c **** 
  29:Lib/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  30:Lib/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  31:Lib/FreeRTOS/Source/tasks.c **** #include <string.h>
  32:Lib/FreeRTOS/Source/tasks.c **** 
  33:Lib/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  34:Lib/FreeRTOS/Source/tasks.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  35:Lib/FreeRTOS/Source/tasks.c ****  * task.h is included from an application file. */
  36:Lib/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  37:Lib/FreeRTOS/Source/tasks.c **** 
  38:Lib/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  39:Lib/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  40:Lib/FreeRTOS/Source/tasks.c **** #include "task.h"
  41:Lib/FreeRTOS/Source/tasks.c **** #include "timers.h"
  42:Lib/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  43:Lib/FreeRTOS/Source/tasks.c **** 
  44:Lib/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  45:Lib/FreeRTOS/Source/tasks.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:Lib/FreeRTOS/Source/tasks.c ****  * for the header files above, but not in this file, in order to generate the
  47:Lib/FreeRTOS/Source/tasks.c ****  * correct privileged Vs unprivileged linkage and placement. */
  48:Lib/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  49:Lib/FreeRTOS/Source/tasks.c **** 
  50:Lib/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  51:Lib/FreeRTOS/Source/tasks.c ****  * functions but without including stdio.h here. */
  52:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  53:Lib/FreeRTOS/Source/tasks.c **** 
  54:Lib/FreeRTOS/Source/tasks.c **** /* At the bottom of this file are two optional functions that can be used
  55:Lib/FreeRTOS/Source/tasks.c ****  * to generate human readable text from the raw data generated by the
  56:Lib/FreeRTOS/Source/tasks.c ****  * uxTaskGetSystemState() function.  Note the formatting functions are provided
  57:Lib/FreeRTOS/Source/tasks.c ****  * for convenience only, and are NOT considered part of the kernel. */
  58:Lib/FreeRTOS/Source/tasks.c ****     #include <stdio.h>
  59:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  60:Lib/FreeRTOS/Source/tasks.c **** 
  61:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_PREEMPTION == 0 )
  62:Lib/FreeRTOS/Source/tasks.c **** 
  63:Lib/FreeRTOS/Source/tasks.c **** /* If the cooperative scheduler is being used then a yield should not be
  64:Lib/FreeRTOS/Source/tasks.c ****  * performed just because a higher priority task has been woken. */
  65:Lib/FreeRTOS/Source/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()
  66:Lib/FreeRTOS/Source/tasks.c **** #else
  67:Lib/FreeRTOS/Source/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  68:Lib/FreeRTOS/Source/tasks.c **** #endif
  69:Lib/FreeRTOS/Source/tasks.c **** 
  70:Lib/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  71:Lib/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION              ( ( uint8_t ) 0 ) /* Must be zero as it is the in
  72:Lib/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION                  ( ( uint8_t ) 1 )
  73:Lib/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED                 ( ( uint8_t ) 2 )
  74:Lib/FreeRTOS/Source/tasks.c **** 
  75:Lib/FreeRTOS/Source/tasks.c **** /*
  76:Lib/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  77:Lib/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  78:Lib/FreeRTOS/Source/tasks.c ****  */
  79:Lib/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE                        ( 0xa5U )
  80:Lib/FreeRTOS/Source/tasks.c **** 
  81:Lib/FreeRTOS/Source/tasks.c **** /* Bits used to record how a task's stack and TCB were allocated. */
  82:Lib/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB    ( ( uint8_t ) 0 )
ARM GAS  /tmp/ccEd3BVV.s 			page 3


  83:Lib/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY        ( ( uint8_t ) 1 )
  84:Lib/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB     ( ( uint8_t ) 2 )
  85:Lib/FreeRTOS/Source/tasks.c **** 
  86:Lib/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  87:Lib/FreeRTOS/Source/tasks.c ****  * value so the high water mark can be determined.  If none of the following are
  88:Lib/FreeRTOS/Source/tasks.c ****  * set then don't fill the stack so there is no unnecessary dependency on memset. */
  89:Lib/FreeRTOS/Source/tasks.c **** #if ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
  90:Lib/FreeRTOS/Source/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    1
  91:Lib/FreeRTOS/Source/tasks.c **** #else
  92:Lib/FreeRTOS/Source/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    0
  93:Lib/FreeRTOS/Source/tasks.c **** #endif
  94:Lib/FreeRTOS/Source/tasks.c **** 
  95:Lib/FreeRTOS/Source/tasks.c **** /*
  96:Lib/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  97:Lib/FreeRTOS/Source/tasks.c ****  */
  98:Lib/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR      ( 'X' )
  99:Lib/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR      ( 'B' )
 100:Lib/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR        ( 'R' )
 101:Lib/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR      ( 'D' )
 102:Lib/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR    ( 'S' )
 103:Lib/FreeRTOS/Source/tasks.c **** 
 104:Lib/FreeRTOS/Source/tasks.c **** /*
 105:Lib/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 106:Lib/FreeRTOS/Source/tasks.c ****  * be global, rather than file scope.
 107:Lib/FreeRTOS/Source/tasks.c ****  */
 108:Lib/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 109:Lib/FreeRTOS/Source/tasks.c ****     #define static
 110:Lib/FreeRTOS/Source/tasks.c **** #endif
 111:Lib/FreeRTOS/Source/tasks.c **** 
 112:Lib/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 113:Lib/FreeRTOS/Source/tasks.c ****  * configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 114:Lib/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 115:Lib/FreeRTOS/Source/tasks.c ****     #define configIDLE_TASK_NAME    "IDLE"
 116:Lib/FreeRTOS/Source/tasks.c **** #endif
 117:Lib/FreeRTOS/Source/tasks.c **** 
 118:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 119:Lib/FreeRTOS/Source/tasks.c **** 
 120:Lib/FreeRTOS/Source/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 121:Lib/FreeRTOS/Source/tasks.c ****  * performed in a generic way that is not optimised to any particular
 122:Lib/FreeRTOS/Source/tasks.c ****  * microcontroller architecture. */
 123:Lib/FreeRTOS/Source/tasks.c **** 
 124:Lib/FreeRTOS/Source/tasks.c **** /* uxTopReadyPriority holds the priority of the highest priority ready
 125:Lib/FreeRTOS/Source/tasks.c ****  * state task. */
 126:Lib/FreeRTOS/Source/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority ) \
 127:Lib/FreeRTOS/Source/tasks.c ****     do {                                            \
 128:Lib/FreeRTOS/Source/tasks.c ****         if( ( uxPriority ) > uxTopReadyPriority )   \
 129:Lib/FreeRTOS/Source/tasks.c ****         {                                           \
 130:Lib/FreeRTOS/Source/tasks.c ****             uxTopReadyPriority = ( uxPriority );    \
 131:Lib/FreeRTOS/Source/tasks.c ****         }                                           \
 132:Lib/FreeRTOS/Source/tasks.c ****     } while( 0 ) /* taskRECORD_READY_PRIORITY */
 133:Lib/FreeRTOS/Source/tasks.c **** 
 134:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 135:Lib/FreeRTOS/Source/tasks.c **** 
 136:Lib/FreeRTOS/Source/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                \
 137:Lib/FreeRTOS/Source/tasks.c ****     do {                                                                      \
 138:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxTopPriority = uxTopReadyPriority;                       \
 139:Lib/FreeRTOS/Source/tasks.c ****                                                                               \
ARM GAS  /tmp/ccEd3BVV.s 			page 4


 140:Lib/FreeRTOS/Source/tasks.c ****         /* Find the highest priority queue that contains ready tasks. */      \
 141:Lib/FreeRTOS/Source/tasks.c ****         while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) ) \
 142:Lib/FreeRTOS/Source/tasks.c ****         {                                                                     \
 143:Lib/FreeRTOS/Source/tasks.c ****             configASSERT( uxTopPriority );                                    \
 144:Lib/FreeRTOS/Source/tasks.c ****             --uxTopPriority;                                                  \
 145:Lib/FreeRTOS/Source/tasks.c ****         }                                                                     \
 146:Lib/FreeRTOS/Source/tasks.c ****                                                                               \
 147:Lib/FreeRTOS/Source/tasks.c ****         /* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of \
 148:Lib/FreeRTOS/Source/tasks.c ****          * the  same priority get an equal share of the processor time. */                    \
 149:Lib/FreeRTOS/Source/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) ); \
 150:Lib/FreeRTOS/Source/tasks.c ****         uxTopReadyPriority = uxTopPriority;                                                   \
 151:Lib/FreeRTOS/Source/tasks.c ****     } while( 0 ) /* taskSELECT_HIGHEST_PRIORITY_TASK */
 152:Lib/FreeRTOS/Source/tasks.c **** 
 153:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 154:Lib/FreeRTOS/Source/tasks.c **** 
 155:Lib/FreeRTOS/Source/tasks.c **** /* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 156:Lib/FreeRTOS/Source/tasks.c ****  * they are only required when a port optimised method of task selection is
 157:Lib/FreeRTOS/Source/tasks.c ****  * being used. */
 158:Lib/FreeRTOS/Source/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )
 159:Lib/FreeRTOS/Source/tasks.c ****     #define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 160:Lib/FreeRTOS/Source/tasks.c **** 
 161:Lib/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 162:Lib/FreeRTOS/Source/tasks.c **** 
 163:Lib/FreeRTOS/Source/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 164:Lib/FreeRTOS/Source/tasks.c ****  * performed in a way that is tailored to the particular microcontroller
 165:Lib/FreeRTOS/Source/tasks.c ****  * architecture being used. */
 166:Lib/FreeRTOS/Source/tasks.c **** 
 167:Lib/FreeRTOS/Source/tasks.c **** /* A port optimised version is provided.  Call the port defined macros. */
 168:Lib/FreeRTOS/Source/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority )    portRECORD_READY_PRIORITY( ( uxPriority ), u
 169:Lib/FreeRTOS/Source/tasks.c **** 
 170:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 171:Lib/FreeRTOS/Source/tasks.c **** 
 172:Lib/FreeRTOS/Source/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                                  \
 173:Lib/FreeRTOS/Source/tasks.c ****     do {                                                                                        \
 174:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxTopPriority;                                                              \
 175:Lib/FreeRTOS/Source/tasks.c ****                                                                                                 \
 176:Lib/FreeRTOS/Source/tasks.c ****         /* Find the highest priority list that contains ready tasks. */                         \
 177:Lib/FreeRTOS/Source/tasks.c ****         portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );                          \
 178:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 ); \
 179:Lib/FreeRTOS/Source/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );   \
 180:Lib/FreeRTOS/Source/tasks.c ****     } while( 0 )
 181:Lib/FreeRTOS/Source/tasks.c **** 
 182:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 183:Lib/FreeRTOS/Source/tasks.c **** 
 184:Lib/FreeRTOS/Source/tasks.c **** /* A port optimised version is provided, call it only if the TCB being reset
 185:Lib/FreeRTOS/Source/tasks.c ****  * is being referenced from a ready list.  If it is referenced from a delayed
 186:Lib/FreeRTOS/Source/tasks.c ****  * or suspended list then it won't be in a ready list. */
 187:Lib/FreeRTOS/Source/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )                                                 
 188:Lib/FreeRTOS/Source/tasks.c ****     do {                                                                                           
 189:Lib/FreeRTOS/Source/tasks.c ****         if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 
 190:Lib/FreeRTOS/Source/tasks.c ****         {                                                                                          
 191:Lib/FreeRTOS/Source/tasks.c ****             portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );                    
 192:Lib/FreeRTOS/Source/tasks.c ****         }                                                                                          
 193:Lib/FreeRTOS/Source/tasks.c ****     } while( 0 )
 194:Lib/FreeRTOS/Source/tasks.c **** 
 195:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 196:Lib/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccEd3BVV.s 			page 5


 197:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 198:Lib/FreeRTOS/Source/tasks.c **** 
 199:Lib/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 200:Lib/FreeRTOS/Source/tasks.c ****  * count overflows. */
 201:Lib/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()                                                \
 202:Lib/FreeRTOS/Source/tasks.c ****     do {                                                                          \
 203:Lib/FreeRTOS/Source/tasks.c ****         List_t * pxTemp;                                                          \
 204:Lib/FreeRTOS/Source/tasks.c ****                                                                                   \
 205:Lib/FreeRTOS/Source/tasks.c ****         /* The delayed tasks list should be empty when the lists are switched. */ \
 206:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );               \
 207:Lib/FreeRTOS/Source/tasks.c ****                                                                                   \
 208:Lib/FreeRTOS/Source/tasks.c ****         pxTemp = pxDelayedTaskList;                                               \
 209:Lib/FreeRTOS/Source/tasks.c ****         pxDelayedTaskList = pxOverflowDelayedTaskList;                            \
 210:Lib/FreeRTOS/Source/tasks.c ****         pxOverflowDelayedTaskList = pxTemp;                                       \
 211:Lib/FreeRTOS/Source/tasks.c ****         xNumOfOverflows++;                                                        \
 212:Lib/FreeRTOS/Source/tasks.c ****         prvResetNextTaskUnblockTime();                                            \
 213:Lib/FreeRTOS/Source/tasks.c ****     } while( 0 )
 214:Lib/FreeRTOS/Source/tasks.c **** 
 215:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 216:Lib/FreeRTOS/Source/tasks.c **** 
 217:Lib/FreeRTOS/Source/tasks.c **** /*
 218:Lib/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 219:Lib/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 220:Lib/FreeRTOS/Source/tasks.c ****  */
 221:Lib/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )                                                             
 222:Lib/FreeRTOS/Source/tasks.c ****     do {                                                                                           
 223:Lib/FreeRTOS/Source/tasks.c ****         traceMOVED_TASK_TO_READY_STATE( pxTCB );                                                   
 224:Lib/FreeRTOS/Source/tasks.c ****         taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );                                        
 225:Lib/FreeRTOS/Source/tasks.c ****         listINSERT_END( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListIt
 226:Lib/FreeRTOS/Source/tasks.c ****         tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB );                                              
 227:Lib/FreeRTOS/Source/tasks.c ****     } while( 0 )
 228:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 229:Lib/FreeRTOS/Source/tasks.c **** 
 230:Lib/FreeRTOS/Source/tasks.c **** /*
 231:Lib/FreeRTOS/Source/tasks.c ****  * Several functions take a TaskHandle_t parameter that can optionally be NULL,
 232:Lib/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 233:Lib/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 234:Lib/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 235:Lib/FreeRTOS/Source/tasks.c ****  */
 236:Lib/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle )    ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle )
 237:Lib/FreeRTOS/Source/tasks.c **** 
 238:Lib/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 239:Lib/FreeRTOS/Source/tasks.c ****  * of the task to which it belongs (coded to allow it to be held in reverse
 240:Lib/FreeRTOS/Source/tasks.c ****  * priority order).  However, it is occasionally borrowed for other purposes.  It
 241:Lib/FreeRTOS/Source/tasks.c ****  * is important its value is not updated due to a task priority change while it is
 242:Lib/FreeRTOS/Source/tasks.c ****  * being used for another purpose.  The following bit definition is used to inform
 243:Lib/FreeRTOS/Source/tasks.c ****  * the scheduler that the value should not be changed - in which case it is the
 244:Lib/FreeRTOS/Source/tasks.c ****  * responsibility of whichever module is using the value to ensure it gets set back
 245:Lib/FreeRTOS/Source/tasks.c ****  * to its original value when it is released. */
 246:Lib/FreeRTOS/Source/tasks.c **** #if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS )
 247:Lib/FreeRTOS/Source/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x8000U
 248:Lib/FreeRTOS/Source/tasks.c **** #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_32_BITS )
 249:Lib/FreeRTOS/Source/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x80000000UL
 250:Lib/FreeRTOS/Source/tasks.c **** #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_64_BITS )
 251:Lib/FreeRTOS/Source/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x8000000000000000ULL
 252:Lib/FreeRTOS/Source/tasks.c **** #endif
 253:Lib/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccEd3BVV.s 			page 6


 254:Lib/FreeRTOS/Source/tasks.c **** /*
 255:Lib/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 256:Lib/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 257:Lib/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 258:Lib/FreeRTOS/Source/tasks.c ****  */
 259:Lib/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock       /* The old naming convention is used to prevent breaking k
 260:Lib/FreeRTOS/Source/tasks.c **** {
 261:Lib/FreeRTOS/Source/tasks.c ****     volatile StackType_t * pxTopOfStack; /**< Points to the location of the last item placed on the
 262:Lib/FreeRTOS/Source/tasks.c **** 
 263:Lib/FreeRTOS/Source/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 264:Lib/FreeRTOS/Source/tasks.c ****         xMPU_SETTINGS xMPUSettings; /**< The MPU settings are defined as part of the port layer.  T
 265:Lib/FreeRTOS/Source/tasks.c ****     #endif
 266:Lib/FreeRTOS/Source/tasks.c **** 
 267:Lib/FreeRTOS/Source/tasks.c ****     ListItem_t xStateListItem;                  /**< The list that the state list item of a task is
 268:Lib/FreeRTOS/Source/tasks.c ****     ListItem_t xEventListItem;                  /**< Used to reference a task from an event list. *
 269:Lib/FreeRTOS/Source/tasks.c ****     UBaseType_t uxPriority;                     /**< The priority of the task.  0 is the lowest pri
 270:Lib/FreeRTOS/Source/tasks.c ****     StackType_t * pxStack;                      /**< Points to the start of the stack. */
 271:Lib/FreeRTOS/Source/tasks.c ****     char pcTaskName[ configMAX_TASK_NAME_LEN ]; /**< Descriptive name given to the task when create
 272:Lib/FreeRTOS/Source/tasks.c **** 
 273:Lib/FreeRTOS/Source/tasks.c ****     #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 274:Lib/FreeRTOS/Source/tasks.c ****         StackType_t * pxEndOfStack; /**< Points to the highest valid address for the stack. */
 275:Lib/FreeRTOS/Source/tasks.c ****     #endif
 276:Lib/FreeRTOS/Source/tasks.c **** 
 277:Lib/FreeRTOS/Source/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 278:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxCriticalNesting; /**< Holds the critical section nesting depth for ports that
 279:Lib/FreeRTOS/Source/tasks.c ****     #endif
 280:Lib/FreeRTOS/Source/tasks.c **** 
 281:Lib/FreeRTOS/Source/tasks.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 282:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxTCBNumber;  /**< Stores a number that increments each time a TCB is created. 
 283:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxTaskNumber; /**< Stores a number specifically for use by third party trace co
 284:Lib/FreeRTOS/Source/tasks.c ****     #endif
 285:Lib/FreeRTOS/Source/tasks.c **** 
 286:Lib/FreeRTOS/Source/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 287:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxBasePriority; /**< The priority last assigned to the task - used by the prior
 288:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxMutexesHeld;
 289:Lib/FreeRTOS/Source/tasks.c ****     #endif
 290:Lib/FreeRTOS/Source/tasks.c **** 
 291:Lib/FreeRTOS/Source/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 292:Lib/FreeRTOS/Source/tasks.c ****         TaskHookFunction_t pxTaskTag;
 293:Lib/FreeRTOS/Source/tasks.c ****     #endif
 294:Lib/FreeRTOS/Source/tasks.c **** 
 295:Lib/FreeRTOS/Source/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 296:Lib/FreeRTOS/Source/tasks.c ****         void * pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 297:Lib/FreeRTOS/Source/tasks.c ****     #endif
 298:Lib/FreeRTOS/Source/tasks.c **** 
 299:Lib/FreeRTOS/Source/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 300:Lib/FreeRTOS/Source/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulRunTimeCounter; /**< Stores the amount of time the task has s
 301:Lib/FreeRTOS/Source/tasks.c ****     #endif
 302:Lib/FreeRTOS/Source/tasks.c **** 
 303:Lib/FreeRTOS/Source/tasks.c ****     #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
 304:Lib/FreeRTOS/Source/tasks.c ****         configTLS_BLOCK_TYPE xTLSBlock; /**< Memory block used as Thread Local Storage (TLS) Block 
 305:Lib/FreeRTOS/Source/tasks.c ****     #endif
 306:Lib/FreeRTOS/Source/tasks.c **** 
 307:Lib/FreeRTOS/Source/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 308:Lib/FreeRTOS/Source/tasks.c ****         volatile uint32_t ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 309:Lib/FreeRTOS/Source/tasks.c ****         volatile uint8_t ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 310:Lib/FreeRTOS/Source/tasks.c ****     #endif
ARM GAS  /tmp/ccEd3BVV.s 			page 7


 311:Lib/FreeRTOS/Source/tasks.c **** 
 312:Lib/FreeRTOS/Source/tasks.c ****     /* See the comments in FreeRTOS.h with the definition of
 313:Lib/FreeRTOS/Source/tasks.c ****      * tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 314:Lib/FreeRTOS/Source/tasks.c ****     #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been conso
 315:Lib/FreeRTOS/Source/tasks.c ****         uint8_t ucStaticallyAllocated;                     /**< Set to pdTRUE if the task is a stat
 316:Lib/FreeRTOS/Source/tasks.c ****     #endif
 317:Lib/FreeRTOS/Source/tasks.c **** 
 318:Lib/FreeRTOS/Source/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 319:Lib/FreeRTOS/Source/tasks.c ****         uint8_t ucDelayAborted;
 320:Lib/FreeRTOS/Source/tasks.c ****     #endif
 321:Lib/FreeRTOS/Source/tasks.c **** 
 322:Lib/FreeRTOS/Source/tasks.c ****     #if ( configUSE_POSIX_ERRNO == 1 )
 323:Lib/FreeRTOS/Source/tasks.c ****         int iTaskErrno;
 324:Lib/FreeRTOS/Source/tasks.c ****     #endif
 325:Lib/FreeRTOS/Source/tasks.c **** } tskTCB;
 326:Lib/FreeRTOS/Source/tasks.c **** 
 327:Lib/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 328:Lib/FreeRTOS/Source/tasks.c ****  * below to enable the use of older kernel aware debuggers. */
 329:Lib/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 330:Lib/FreeRTOS/Source/tasks.c **** 
 331:Lib/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 332:Lib/FreeRTOS/Source/tasks.c ****  * which static variables must be declared volatile. */
 333:Lib/FreeRTOS/Source/tasks.c **** portDONT_DISCARD PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 334:Lib/FreeRTOS/Source/tasks.c **** 
 335:Lib/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 336:Lib/FreeRTOS/Source/tasks.c ****  * xDelayedTaskList1 and xDelayedTaskList2 could be moved to function scope but
 337:Lib/FreeRTOS/Source/tasks.c ****  * doing so breaks some kernel aware debuggers and debuggers that rely on removing
 338:Lib/FreeRTOS/Source/tasks.c ****  * the static qualifier. */
 339:Lib/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ]; /**< Prioritised ready tas
 340:Lib/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;                         /**< Delayed tasks. */
 341:Lib/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;                         /**< Delayed tasks (two li
 342:Lib/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;              /**< Points to the delayed
 343:Lib/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;      /**< Points to the delayed
 344:Lib/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;                         /**< Tasks that have been 
 345:Lib/FreeRTOS/Source/tasks.c **** 
 346:Lib/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 347:Lib/FreeRTOS/Source/tasks.c **** 
 348:Lib/FreeRTOS/Source/tasks.c ****     PRIVILEGED_DATA static List_t xTasksWaitingTermination; /**< Tasks that have been deleted - but
 349:Lib/FreeRTOS/Source/tasks.c ****     PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 350:Lib/FreeRTOS/Source/tasks.c **** 
 351:Lib/FreeRTOS/Source/tasks.c **** #endif
 352:Lib/FreeRTOS/Source/tasks.c **** 
 353:Lib/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 354:Lib/FreeRTOS/Source/tasks.c **** 
 355:Lib/FreeRTOS/Source/tasks.c ****     PRIVILEGED_DATA static List_t xSuspendedTaskList; /**< Tasks that are currently suspended. */
 356:Lib/FreeRTOS/Source/tasks.c **** 
 357:Lib/FreeRTOS/Source/tasks.c **** #endif
 358:Lib/FreeRTOS/Source/tasks.c **** 
 359:Lib/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 360:Lib/FreeRTOS/Source/tasks.c ****  * the errno of the currently running task. */
 361:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 362:Lib/FreeRTOS/Source/tasks.c ****     int FreeRTOS_errno = 0;
 363:Lib/FreeRTOS/Source/tasks.c **** #endif
 364:Lib/FreeRTOS/Source/tasks.c **** 
 365:Lib/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 366:Lib/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
 367:Lib/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
ARM GAS  /tmp/ccEd3BVV.s 			page 8


 368:Lib/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority = tskIDLE_PRIORITY;
 369:Lib/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning = pdFALSE;
 370:Lib/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks = ( TickType_t ) 0U;
 371:Lib/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending = pdFALSE;
 372:Lib/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows = ( BaseType_t ) 0;
 373:Lib/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber = ( UBaseType_t ) 0U;
 374:Lib/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime = ( TickType_t ) 0U; /* Initialised
 375:Lib/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;                          /**< Holds the
 376:Lib/FreeRTOS/Source/tasks.c **** 
 377:Lib/FreeRTOS/Source/tasks.c **** /* Improve support for OpenOCD. The kernel tracks Ready tasks via priority lists.
 378:Lib/FreeRTOS/Source/tasks.c ****  * For tracking the state of remote threads, OpenOCD uses uxTopUsedPriority
 379:Lib/FreeRTOS/Source/tasks.c ****  * to determine the number of priority lists to read back from the remote target. */
 380:Lib/FreeRTOS/Source/tasks.c **** const volatile UBaseType_t uxTopUsedPriority = configMAX_PRIORITIES - 1U;
 381:Lib/FreeRTOS/Source/tasks.c **** 
 382:Lib/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 383:Lib/FreeRTOS/Source/tasks.c ****  * interrupts must not manipulate the xStateListItem of a TCB, or any of the
 384:Lib/FreeRTOS/Source/tasks.c ****  * lists the xStateListItem can be referenced from, if the scheduler is suspended.
 385:Lib/FreeRTOS/Source/tasks.c ****  * If an interrupt needs to unblock a task while the scheduler is suspended then it
 386:Lib/FreeRTOS/Source/tasks.c ****  * moves the task's event list item into the xPendingReadyList, ready for the
 387:Lib/FreeRTOS/Source/tasks.c ****  * kernel to move the task from the pending ready list into the real ready list
 388:Lib/FreeRTOS/Source/tasks.c ****  * when the scheduler is unsuspended.  The pending ready list itself can only be
 389:Lib/FreeRTOS/Source/tasks.c ****  * accessed from a critical section. */
 390:Lib/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended = ( UBaseType_t ) 0U;
 391:Lib/FreeRTOS/Source/tasks.c **** 
 392:Lib/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 393:Lib/FreeRTOS/Source/tasks.c **** 
 394:Lib/FreeRTOS/Source/tasks.c **** /* Do not move these variables to function scope as doing so prevents the
 395:Lib/FreeRTOS/Source/tasks.c ****  * code working with debuggers that need to remove the static qualifier. */
 396:Lib/FreeRTOS/Source/tasks.c ****     PRIVILEGED_DATA static configRUN_TIME_COUNTER_TYPE ulTaskSwitchedInTime = 0UL;    /**< Holds th
 397:Lib/FreeRTOS/Source/tasks.c ****     PRIVILEGED_DATA static volatile configRUN_TIME_COUNTER_TYPE ulTotalRunTime = 0UL; /**< Holds th
 398:Lib/FreeRTOS/Source/tasks.c **** 
 399:Lib/FreeRTOS/Source/tasks.c **** #endif
 400:Lib/FreeRTOS/Source/tasks.c **** 
 401:Lib/FreeRTOS/Source/tasks.c **** /*lint -restore */
 402:Lib/FreeRTOS/Source/tasks.c **** 
 403:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 404:Lib/FreeRTOS/Source/tasks.c **** 
 405:Lib/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 406:Lib/FreeRTOS/Source/tasks.c **** 
 407:Lib/FreeRTOS/Source/tasks.c **** /**
 408:Lib/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 409:Lib/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 410:Lib/FreeRTOS/Source/tasks.c ****  * is in any other state.
 411:Lib/FreeRTOS/Source/tasks.c ****  */
 412:Lib/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 413:Lib/FreeRTOS/Source/tasks.c **** 
 414:Lib/FreeRTOS/Source/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 415:Lib/FreeRTOS/Source/tasks.c **** 
 416:Lib/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 417:Lib/FreeRTOS/Source/tasks.c **** 
 418:Lib/FreeRTOS/Source/tasks.c **** /*
 419:Lib/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 420:Lib/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 421:Lib/FreeRTOS/Source/tasks.c ****  */
 422:Lib/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 423:Lib/FreeRTOS/Source/tasks.c **** 
 424:Lib/FreeRTOS/Source/tasks.c **** /*
ARM GAS  /tmp/ccEd3BVV.s 			page 9


 425:Lib/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 426:Lib/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 427:Lib/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 428:Lib/FreeRTOS/Source/tasks.c ****  *
 429:Lib/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 430:Lib/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 431:Lib/FreeRTOS/Source/tasks.c ****  *
 432:Lib/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 433:Lib/FreeRTOS/Source/tasks.c ****  *
 434:Lib/FreeRTOS/Source/tasks.c ****  */
 435:Lib/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters ) PRIVILEGED_FUNCTION;
 436:Lib/FreeRTOS/Source/tasks.c **** 
 437:Lib/FreeRTOS/Source/tasks.c **** /*
 438:Lib/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 439:Lib/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 440:Lib/FreeRTOS/Source/tasks.c ****  *
 441:Lib/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 442:Lib/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 443:Lib/FreeRTOS/Source/tasks.c ****  */
 444:Lib/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 445:Lib/FreeRTOS/Source/tasks.c **** 
 446:Lib/FreeRTOS/Source/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB ) PRIVILEGED_FUNCTION;
 447:Lib/FreeRTOS/Source/tasks.c **** 
 448:Lib/FreeRTOS/Source/tasks.c **** #endif
 449:Lib/FreeRTOS/Source/tasks.c **** 
 450:Lib/FreeRTOS/Source/tasks.c **** /*
 451:Lib/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 452:Lib/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 453:Lib/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 454:Lib/FreeRTOS/Source/tasks.c ****  */
 455:Lib/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 456:Lib/FreeRTOS/Source/tasks.c **** 
 457:Lib/FreeRTOS/Source/tasks.c **** /*
 458:Lib/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 459:Lib/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 460:Lib/FreeRTOS/Source/tasks.c ****  */
 461:Lib/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
 462:Lib/FreeRTOS/Source/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely ) PRIVILEGED_FUN
 463:Lib/FreeRTOS/Source/tasks.c **** 
 464:Lib/FreeRTOS/Source/tasks.c **** /*
 465:Lib/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 466:Lib/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 467:Lib/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 468:Lib/FreeRTOS/Source/tasks.c ****  *
 469:Lib/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 470:Lib/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 471:Lib/FreeRTOS/Source/tasks.c ****  */
 472:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 473:Lib/FreeRTOS/Source/tasks.c **** 
 474:Lib/FreeRTOS/Source/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
 475:Lib/FreeRTOS/Source/tasks.c ****                                                      List_t * pxList,
 476:Lib/FreeRTOS/Source/tasks.c ****                                                      eTaskState eState ) PRIVILEGED_FUNCTION;
 477:Lib/FreeRTOS/Source/tasks.c **** 
 478:Lib/FreeRTOS/Source/tasks.c **** #endif
 479:Lib/FreeRTOS/Source/tasks.c **** 
 480:Lib/FreeRTOS/Source/tasks.c **** /*
 481:Lib/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
ARM GAS  /tmp/ccEd3BVV.s 			page 10


 482:Lib/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 483:Lib/FreeRTOS/Source/tasks.c ****  */
 484:Lib/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 485:Lib/FreeRTOS/Source/tasks.c **** 
 486:Lib/FreeRTOS/Source/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
 487:Lib/FreeRTOS/Source/tasks.c ****                                                      const char pcNameToQuery[] ) PRIVILEGED_FUNCTI
 488:Lib/FreeRTOS/Source/tasks.c **** 
 489:Lib/FreeRTOS/Source/tasks.c **** #endif
 490:Lib/FreeRTOS/Source/tasks.c **** 
 491:Lib/FreeRTOS/Source/tasks.c **** /*
 492:Lib/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 493:Lib/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 494:Lib/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 495:Lib/FreeRTOS/Source/tasks.c ****  */
 496:Lib/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 497:Lib/FreeRTOS/Source/tasks.c **** 
 498:Lib/FreeRTOS/Source/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVIL
 499:Lib/FreeRTOS/Source/tasks.c **** 
 500:Lib/FreeRTOS/Source/tasks.c **** #endif
 501:Lib/FreeRTOS/Source/tasks.c **** 
 502:Lib/FreeRTOS/Source/tasks.c **** /*
 503:Lib/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 504:Lib/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 505:Lib/FreeRTOS/Source/tasks.c ****  *
 506:Lib/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 507:Lib/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 508:Lib/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 509:Lib/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 510:Lib/FreeRTOS/Source/tasks.c ****  */
 511:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 512:Lib/FreeRTOS/Source/tasks.c **** 
 513:Lib/FreeRTOS/Source/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 514:Lib/FreeRTOS/Source/tasks.c **** 
 515:Lib/FreeRTOS/Source/tasks.c **** #endif
 516:Lib/FreeRTOS/Source/tasks.c **** 
 517:Lib/FreeRTOS/Source/tasks.c **** /*
 518:Lib/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 519:Lib/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 520:Lib/FreeRTOS/Source/tasks.c ****  */
 521:Lib/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void ) PRIVILEGED_FUNCTION;
 522:Lib/FreeRTOS/Source/tasks.c **** 
 523:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 )
 524:Lib/FreeRTOS/Source/tasks.c **** 
 525:Lib/FreeRTOS/Source/tasks.c **** /*
 526:Lib/FreeRTOS/Source/tasks.c ****  * Helper function used to pad task names with spaces when printing out
 527:Lib/FreeRTOS/Source/tasks.c ****  * human readable tables of task information.
 528:Lib/FreeRTOS/Source/tasks.c ****  */
 529:Lib/FreeRTOS/Source/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
 530:Lib/FreeRTOS/Source/tasks.c ****                                         const char * pcTaskName ) PRIVILEGED_FUNCTION;
 531:Lib/FreeRTOS/Source/tasks.c **** 
 532:Lib/FreeRTOS/Source/tasks.c **** #endif
 533:Lib/FreeRTOS/Source/tasks.c **** 
 534:Lib/FreeRTOS/Source/tasks.c **** /*
 535:Lib/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 536:Lib/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 537:Lib/FreeRTOS/Source/tasks.c ****  */
 538:Lib/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
ARM GAS  /tmp/ccEd3BVV.s 			page 11


 539:Lib/FreeRTOS/Source/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 540:Lib/FreeRTOS/Source/tasks.c ****                                   const uint32_t ulStackDepth,
 541:Lib/FreeRTOS/Source/tasks.c ****                                   void * const pvParameters,
 542:Lib/FreeRTOS/Source/tasks.c ****                                   UBaseType_t uxPriority,
 543:Lib/FreeRTOS/Source/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 544:Lib/FreeRTOS/Source/tasks.c ****                                   TCB_t * pxNewTCB,
 545:Lib/FreeRTOS/Source/tasks.c ****                                   const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 546:Lib/FreeRTOS/Source/tasks.c **** 
 547:Lib/FreeRTOS/Source/tasks.c **** /*
 548:Lib/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 549:Lib/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 550:Lib/FreeRTOS/Source/tasks.c ****  */
 551:Lib/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB ) PRIVILEGED_FUNCTION;
 552:Lib/FreeRTOS/Source/tasks.c **** 
 553:Lib/FreeRTOS/Source/tasks.c **** /*
 554:Lib/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 555:Lib/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 556:Lib/FreeRTOS/Source/tasks.c ****  * called by the function.
 557:Lib/FreeRTOS/Source/tasks.c ****  */
 558:Lib/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 559:Lib/FreeRTOS/Source/tasks.c **** 
 560:Lib/FreeRTOS/Source/tasks.c ****     static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 561:Lib/FreeRTOS/Source/tasks.c **** 
 562:Lib/FreeRTOS/Source/tasks.c **** #endif
 563:Lib/FreeRTOS/Source/tasks.c **** 
 564:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 565:Lib/FreeRTOS/Source/tasks.c **** 
 566:Lib/FreeRTOS/Source/tasks.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 567:Lib/FreeRTOS/Source/tasks.c **** 
 568:Lib/FreeRTOS/Source/tasks.c ****     TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,
 569:Lib/FreeRTOS/Source/tasks.c ****                                     const char * const pcName, /*lint !e971 Unqualified char types 
 570:Lib/FreeRTOS/Source/tasks.c ****                                     const uint32_t ulStackDepth,
 571:Lib/FreeRTOS/Source/tasks.c ****                                     void * const pvParameters,
 572:Lib/FreeRTOS/Source/tasks.c ****                                     UBaseType_t uxPriority,
 573:Lib/FreeRTOS/Source/tasks.c ****                                     StackType_t * const puxStackBuffer,
 574:Lib/FreeRTOS/Source/tasks.c ****                                     StaticTask_t * const pxTaskBuffer )
 575:Lib/FreeRTOS/Source/tasks.c ****     {
 576:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxNewTCB;
 577:Lib/FreeRTOS/Source/tasks.c ****         TaskHandle_t xReturn;
 578:Lib/FreeRTOS/Source/tasks.c **** 
 579:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( puxStackBuffer != NULL );
 580:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 581:Lib/FreeRTOS/Source/tasks.c **** 
 582:Lib/FreeRTOS/Source/tasks.c ****         #if ( configASSERT_DEFINED == 1 )
 583:Lib/FreeRTOS/Source/tasks.c ****         {
 584:Lib/FreeRTOS/Source/tasks.c ****             /* Sanity check that the size of the structure used to declare a
 585:Lib/FreeRTOS/Source/tasks.c ****              * variable of type StaticTask_t equals the size of the real task
 586:Lib/FreeRTOS/Source/tasks.c ****              * structure. */
 587:Lib/FreeRTOS/Source/tasks.c ****             volatile size_t xSize = sizeof( StaticTask_t );
 588:Lib/FreeRTOS/Source/tasks.c ****             configASSERT( xSize == sizeof( TCB_t ) );
 589:Lib/FreeRTOS/Source/tasks.c ****             ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 590:Lib/FreeRTOS/Source/tasks.c ****         }
 591:Lib/FreeRTOS/Source/tasks.c ****         #endif /* configASSERT_DEFINED */
 592:Lib/FreeRTOS/Source/tasks.c **** 
 593:Lib/FreeRTOS/Source/tasks.c ****         if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 594:Lib/FreeRTOS/Source/tasks.c ****         {
 595:Lib/FreeRTOS/Source/tasks.c ****             /* The memory used for the task's TCB and stack are passed into this
ARM GAS  /tmp/ccEd3BVV.s 			page 12


 596:Lib/FreeRTOS/Source/tasks.c ****              * function - use them. */
 597:Lib/FreeRTOS/Source/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the stru
 598:Lib/FreeRTOS/Source/tasks.c ****             memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 599:Lib/FreeRTOS/Source/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 600:Lib/FreeRTOS/Source/tasks.c **** 
 601:Lib/FreeRTOS/Source/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has be
 602:Lib/FreeRTOS/Source/tasks.c ****             {
 603:Lib/FreeRTOS/Source/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
 604:Lib/FreeRTOS/Source/tasks.c ****                  * task was created statically in case the task is later deleted. */
 605:Lib/FreeRTOS/Source/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 606:Lib/FreeRTOS/Source/tasks.c ****             }
 607:Lib/FreeRTOS/Source/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 608:Lib/FreeRTOS/Source/tasks.c **** 
 609:Lib/FreeRTOS/Source/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xRet
 610:Lib/FreeRTOS/Source/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 611:Lib/FreeRTOS/Source/tasks.c ****         }
 612:Lib/FreeRTOS/Source/tasks.c ****         else
 613:Lib/FreeRTOS/Source/tasks.c ****         {
 614:Lib/FreeRTOS/Source/tasks.c ****             xReturn = NULL;
 615:Lib/FreeRTOS/Source/tasks.c ****         }
 616:Lib/FreeRTOS/Source/tasks.c **** 
 617:Lib/FreeRTOS/Source/tasks.c ****         return xReturn;
 618:Lib/FreeRTOS/Source/tasks.c ****     }
 619:Lib/FreeRTOS/Source/tasks.c **** 
 620:Lib/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 621:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 622:Lib/FreeRTOS/Source/tasks.c **** 
 623:Lib/FreeRTOS/Source/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 624:Lib/FreeRTOS/Source/tasks.c **** 
 625:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition,
 626:Lib/FreeRTOS/Source/tasks.c ****                                             TaskHandle_t * pxCreatedTask )
 627:Lib/FreeRTOS/Source/tasks.c ****     {
 628:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxNewTCB;
 629:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 630:Lib/FreeRTOS/Source/tasks.c **** 
 631:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 632:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 633:Lib/FreeRTOS/Source/tasks.c **** 
 634:Lib/FreeRTOS/Source/tasks.c ****         if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NUL
 635:Lib/FreeRTOS/Source/tasks.c ****         {
 636:Lib/FreeRTOS/Source/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 637:Lib/FreeRTOS/Source/tasks.c ****              * on the implementation of the port malloc function and whether or
 638:Lib/FreeRTOS/Source/tasks.c ****              * not static allocation is being used. */
 639:Lib/FreeRTOS/Source/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 640:Lib/FreeRTOS/Source/tasks.c ****             memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 641:Lib/FreeRTOS/Source/tasks.c **** 
 642:Lib/FreeRTOS/Source/tasks.c ****             /* Store the stack location in the TCB. */
 643:Lib/FreeRTOS/Source/tasks.c ****             pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 644:Lib/FreeRTOS/Source/tasks.c **** 
 645:Lib/FreeRTOS/Source/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 646:Lib/FreeRTOS/Source/tasks.c ****             {
 647:Lib/FreeRTOS/Source/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
 648:Lib/FreeRTOS/Source/tasks.c ****                  * task was created statically in case the task is later deleted. */
 649:Lib/FreeRTOS/Source/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 650:Lib/FreeRTOS/Source/tasks.c ****             }
 651:Lib/FreeRTOS/Source/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 652:Lib/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccEd3BVV.s 			page 13


 653:Lib/FreeRTOS/Source/tasks.c ****             prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 654:Lib/FreeRTOS/Source/tasks.c ****                                   pxTaskDefinition->pcName,
 655:Lib/FreeRTOS/Source/tasks.c ****                                   ( uint32_t ) pxTaskDefinition->usStackDepth,
 656:Lib/FreeRTOS/Source/tasks.c ****                                   pxTaskDefinition->pvParameters,
 657:Lib/FreeRTOS/Source/tasks.c ****                                   pxTaskDefinition->uxPriority,
 658:Lib/FreeRTOS/Source/tasks.c ****                                   pxCreatedTask, pxNewTCB,
 659:Lib/FreeRTOS/Source/tasks.c ****                                   pxTaskDefinition->xRegions );
 660:Lib/FreeRTOS/Source/tasks.c **** 
 661:Lib/FreeRTOS/Source/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 662:Lib/FreeRTOS/Source/tasks.c ****             xReturn = pdPASS;
 663:Lib/FreeRTOS/Source/tasks.c ****         }
 664:Lib/FreeRTOS/Source/tasks.c **** 
 665:Lib/FreeRTOS/Source/tasks.c ****         return xReturn;
 666:Lib/FreeRTOS/Source/tasks.c ****     }
 667:Lib/FreeRTOS/Source/tasks.c **** 
 668:Lib/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 669:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 670:Lib/FreeRTOS/Source/tasks.c **** 
 671:Lib/FreeRTOS/Source/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 672:Lib/FreeRTOS/Source/tasks.c **** 
 673:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition,
 674:Lib/FreeRTOS/Source/tasks.c ****                                       TaskHandle_t * pxCreatedTask )
 675:Lib/FreeRTOS/Source/tasks.c ****     {
 676:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxNewTCB;
 677:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 678:Lib/FreeRTOS/Source/tasks.c **** 
 679:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer );
 680:Lib/FreeRTOS/Source/tasks.c **** 
 681:Lib/FreeRTOS/Source/tasks.c ****         if( pxTaskDefinition->puxStackBuffer != NULL )
 682:Lib/FreeRTOS/Source/tasks.c ****         {
 683:Lib/FreeRTOS/Source/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 684:Lib/FreeRTOS/Source/tasks.c ****              * on the implementation of the port malloc function and whether or
 685:Lib/FreeRTOS/Source/tasks.c ****              * not static allocation is being used. */
 686:Lib/FreeRTOS/Source/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 687:Lib/FreeRTOS/Source/tasks.c **** 
 688:Lib/FreeRTOS/Source/tasks.c ****             if( pxNewTCB != NULL )
 689:Lib/FreeRTOS/Source/tasks.c ****             {
 690:Lib/FreeRTOS/Source/tasks.c ****                 memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 691:Lib/FreeRTOS/Source/tasks.c **** 
 692:Lib/FreeRTOS/Source/tasks.c ****                 /* Store the stack location in the TCB. */
 693:Lib/FreeRTOS/Source/tasks.c ****                 pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 694:Lib/FreeRTOS/Source/tasks.c **** 
 695:Lib/FreeRTOS/Source/tasks.c ****                 #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 696:Lib/FreeRTOS/Source/tasks.c ****                 {
 697:Lib/FreeRTOS/Source/tasks.c ****                     /* Tasks can be created statically or dynamically, so note
 698:Lib/FreeRTOS/Source/tasks.c ****                      * this task had a statically allocated stack in case it is
 699:Lib/FreeRTOS/Source/tasks.c ****                      * later deleted.  The TCB was allocated dynamically. */
 700:Lib/FreeRTOS/Source/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 701:Lib/FreeRTOS/Source/tasks.c ****                 }
 702:Lib/FreeRTOS/Source/tasks.c ****                 #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 703:Lib/FreeRTOS/Source/tasks.c **** 
 704:Lib/FreeRTOS/Source/tasks.c ****                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 705:Lib/FreeRTOS/Source/tasks.c ****                                       pxTaskDefinition->pcName,
 706:Lib/FreeRTOS/Source/tasks.c ****                                       ( uint32_t ) pxTaskDefinition->usStackDepth,
 707:Lib/FreeRTOS/Source/tasks.c ****                                       pxTaskDefinition->pvParameters,
 708:Lib/FreeRTOS/Source/tasks.c ****                                       pxTaskDefinition->uxPriority,
 709:Lib/FreeRTOS/Source/tasks.c ****                                       pxCreatedTask, pxNewTCB,
ARM GAS  /tmp/ccEd3BVV.s 			page 14


 710:Lib/FreeRTOS/Source/tasks.c ****                                       pxTaskDefinition->xRegions );
 711:Lib/FreeRTOS/Source/tasks.c **** 
 712:Lib/FreeRTOS/Source/tasks.c ****                 prvAddNewTaskToReadyList( pxNewTCB );
 713:Lib/FreeRTOS/Source/tasks.c ****                 xReturn = pdPASS;
 714:Lib/FreeRTOS/Source/tasks.c ****             }
 715:Lib/FreeRTOS/Source/tasks.c ****         }
 716:Lib/FreeRTOS/Source/tasks.c **** 
 717:Lib/FreeRTOS/Source/tasks.c ****         return xReturn;
 718:Lib/FreeRTOS/Source/tasks.c ****     }
 719:Lib/FreeRTOS/Source/tasks.c **** 
 720:Lib/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 721:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 722:Lib/FreeRTOS/Source/tasks.c **** 
 723:Lib/FreeRTOS/Source/tasks.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 724:Lib/FreeRTOS/Source/tasks.c **** 
 725:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,
 726:Lib/FreeRTOS/Source/tasks.c ****                             const char * const pcName, /*lint !e971 Unqualified char types are allo
 727:Lib/FreeRTOS/Source/tasks.c ****                             const configSTACK_DEPTH_TYPE usStackDepth,
 728:Lib/FreeRTOS/Source/tasks.c ****                             void * const pvParameters,
 729:Lib/FreeRTOS/Source/tasks.c ****                             UBaseType_t uxPriority,
 730:Lib/FreeRTOS/Source/tasks.c ****                             TaskHandle_t * const pxCreatedTask )
 731:Lib/FreeRTOS/Source/tasks.c ****     {
 732:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxNewTCB;
 733:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
 734:Lib/FreeRTOS/Source/tasks.c **** 
 735:Lib/FreeRTOS/Source/tasks.c ****         /* If the stack grows down then allocate the stack then the TCB so the stack
 736:Lib/FreeRTOS/Source/tasks.c ****          * does not grow into the TCB.  Likewise if the stack grows up then allocate
 737:Lib/FreeRTOS/Source/tasks.c ****          * the TCB then the stack. */
 738:Lib/FreeRTOS/Source/tasks.c ****         #if ( portSTACK_GROWTH > 0 )
 739:Lib/FreeRTOS/Source/tasks.c ****         {
 740:Lib/FreeRTOS/Source/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends on
 741:Lib/FreeRTOS/Source/tasks.c ****              * the implementation of the port malloc function and whether or not static
 742:Lib/FreeRTOS/Source/tasks.c ****              * allocation is being used. */
 743:Lib/FreeRTOS/Source/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 744:Lib/FreeRTOS/Source/tasks.c **** 
 745:Lib/FreeRTOS/Source/tasks.c ****             if( pxNewTCB != NULL )
 746:Lib/FreeRTOS/Source/tasks.c ****             {
 747:Lib/FreeRTOS/Source/tasks.c ****                 memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 748:Lib/FreeRTOS/Source/tasks.c **** 
 749:Lib/FreeRTOS/Source/tasks.c ****                 /* Allocate space for the stack used by the task being created.
 750:Lib/FreeRTOS/Source/tasks.c ****                  * The base of the stack memory stored in the TCB so the task can
 751:Lib/FreeRTOS/Source/tasks.c ****                  * be deleted later if required. */
 752:Lib/FreeRTOS/Source/tasks.c ****                 pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocStack( ( ( ( size_t ) usStackDept
 753:Lib/FreeRTOS/Source/tasks.c **** 
 754:Lib/FreeRTOS/Source/tasks.c ****                 if( pxNewTCB->pxStack == NULL )
 755:Lib/FreeRTOS/Source/tasks.c ****                 {
 756:Lib/FreeRTOS/Source/tasks.c ****                     /* Could not allocate the stack.  Delete the allocated TCB. */
 757:Lib/FreeRTOS/Source/tasks.c ****                     vPortFree( pxNewTCB );
 758:Lib/FreeRTOS/Source/tasks.c ****                     pxNewTCB = NULL;
 759:Lib/FreeRTOS/Source/tasks.c ****                 }
 760:Lib/FreeRTOS/Source/tasks.c ****             }
 761:Lib/FreeRTOS/Source/tasks.c ****         }
 762:Lib/FreeRTOS/Source/tasks.c ****         #else /* portSTACK_GROWTH */
 763:Lib/FreeRTOS/Source/tasks.c ****         {
 764:Lib/FreeRTOS/Source/tasks.c ****             StackType_t * pxStack;
 765:Lib/FreeRTOS/Source/tasks.c **** 
 766:Lib/FreeRTOS/Source/tasks.c ****             /* Allocate space for the stack used by the task being created. */
ARM GAS  /tmp/ccEd3BVV.s 			page 15


 767:Lib/FreeRTOS/Source/tasks.c ****             pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) );
 768:Lib/FreeRTOS/Source/tasks.c **** 
 769:Lib/FreeRTOS/Source/tasks.c ****             if( pxStack != NULL )
 770:Lib/FreeRTOS/Source/tasks.c ****             {
 771:Lib/FreeRTOS/Source/tasks.c ****                 /* Allocate space for the TCB. */
 772:Lib/FreeRTOS/Source/tasks.c ****                 pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All va
 773:Lib/FreeRTOS/Source/tasks.c **** 
 774:Lib/FreeRTOS/Source/tasks.c ****                 if( pxNewTCB != NULL )
 775:Lib/FreeRTOS/Source/tasks.c ****                 {
 776:Lib/FreeRTOS/Source/tasks.c ****                     memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 777:Lib/FreeRTOS/Source/tasks.c **** 
 778:Lib/FreeRTOS/Source/tasks.c ****                     /* Store the stack location in the TCB. */
 779:Lib/FreeRTOS/Source/tasks.c ****                     pxNewTCB->pxStack = pxStack;
 780:Lib/FreeRTOS/Source/tasks.c ****                 }
 781:Lib/FreeRTOS/Source/tasks.c ****                 else
 782:Lib/FreeRTOS/Source/tasks.c ****                 {
 783:Lib/FreeRTOS/Source/tasks.c ****                     /* The stack cannot be used as the TCB was not created.  Free
 784:Lib/FreeRTOS/Source/tasks.c ****                      * it again. */
 785:Lib/FreeRTOS/Source/tasks.c ****                     vPortFreeStack( pxStack );
 786:Lib/FreeRTOS/Source/tasks.c ****                 }
 787:Lib/FreeRTOS/Source/tasks.c ****             }
 788:Lib/FreeRTOS/Source/tasks.c ****             else
 789:Lib/FreeRTOS/Source/tasks.c ****             {
 790:Lib/FreeRTOS/Source/tasks.c ****                 pxNewTCB = NULL;
 791:Lib/FreeRTOS/Source/tasks.c ****             }
 792:Lib/FreeRTOS/Source/tasks.c ****         }
 793:Lib/FreeRTOS/Source/tasks.c ****         #endif /* portSTACK_GROWTH */
 794:Lib/FreeRTOS/Source/tasks.c **** 
 795:Lib/FreeRTOS/Source/tasks.c ****         if( pxNewTCB != NULL )
 796:Lib/FreeRTOS/Source/tasks.c ****         {
 797:Lib/FreeRTOS/Source/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has be
 798:Lib/FreeRTOS/Source/tasks.c ****             {
 799:Lib/FreeRTOS/Source/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
 800:Lib/FreeRTOS/Source/tasks.c ****                  * task was created dynamically in case it is later deleted. */
 801:Lib/FreeRTOS/Source/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 802:Lib/FreeRTOS/Source/tasks.c ****             }
 803:Lib/FreeRTOS/Source/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 804:Lib/FreeRTOS/Source/tasks.c **** 
 805:Lib/FreeRTOS/Source/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPr
 806:Lib/FreeRTOS/Source/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 807:Lib/FreeRTOS/Source/tasks.c ****             xReturn = pdPASS;
 808:Lib/FreeRTOS/Source/tasks.c ****         }
 809:Lib/FreeRTOS/Source/tasks.c ****         else
 810:Lib/FreeRTOS/Source/tasks.c ****         {
 811:Lib/FreeRTOS/Source/tasks.c ****             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 812:Lib/FreeRTOS/Source/tasks.c ****         }
 813:Lib/FreeRTOS/Source/tasks.c **** 
 814:Lib/FreeRTOS/Source/tasks.c ****         return xReturn;
 815:Lib/FreeRTOS/Source/tasks.c ****     }
 816:Lib/FreeRTOS/Source/tasks.c **** 
 817:Lib/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 818:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 819:Lib/FreeRTOS/Source/tasks.c **** 
 820:Lib/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 821:Lib/FreeRTOS/Source/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 822:Lib/FreeRTOS/Source/tasks.c ****                                   const uint32_t ulStackDepth,
 823:Lib/FreeRTOS/Source/tasks.c ****                                   void * const pvParameters,
ARM GAS  /tmp/ccEd3BVV.s 			page 16


 824:Lib/FreeRTOS/Source/tasks.c ****                                   UBaseType_t uxPriority,
 825:Lib/FreeRTOS/Source/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 826:Lib/FreeRTOS/Source/tasks.c ****                                   TCB_t * pxNewTCB,
 827:Lib/FreeRTOS/Source/tasks.c ****                                   const MemoryRegion_t * const xRegions )
 828:Lib/FreeRTOS/Source/tasks.c **** {
 829:Lib/FreeRTOS/Source/tasks.c ****     StackType_t * pxTopOfStack;
 830:Lib/FreeRTOS/Source/tasks.c ****     UBaseType_t x;
 831:Lib/FreeRTOS/Source/tasks.c **** 
 832:Lib/FreeRTOS/Source/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 833:Lib/FreeRTOS/Source/tasks.c ****         /* Should the task be created in privileged mode? */
 834:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xRunPrivileged;
 835:Lib/FreeRTOS/Source/tasks.c **** 
 836:Lib/FreeRTOS/Source/tasks.c ****         if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 837:Lib/FreeRTOS/Source/tasks.c ****         {
 838:Lib/FreeRTOS/Source/tasks.c ****             xRunPrivileged = pdTRUE;
 839:Lib/FreeRTOS/Source/tasks.c ****         }
 840:Lib/FreeRTOS/Source/tasks.c ****         else
 841:Lib/FreeRTOS/Source/tasks.c ****         {
 842:Lib/FreeRTOS/Source/tasks.c ****             xRunPrivileged = pdFALSE;
 843:Lib/FreeRTOS/Source/tasks.c ****         }
 844:Lib/FreeRTOS/Source/tasks.c ****         uxPriority &= ~portPRIVILEGE_BIT;
 845:Lib/FreeRTOS/Source/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS == 1 */
 846:Lib/FreeRTOS/Source/tasks.c **** 
 847:Lib/FreeRTOS/Source/tasks.c ****     /* Avoid dependency on memset() if it is not required. */
 848:Lib/FreeRTOS/Source/tasks.c ****     #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 849:Lib/FreeRTOS/Source/tasks.c ****     {
 850:Lib/FreeRTOS/Source/tasks.c ****         /* Fill the stack with a known value to assist debugging. */
 851:Lib/FreeRTOS/Source/tasks.c ****         ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * s
 852:Lib/FreeRTOS/Source/tasks.c ****     }
 853:Lib/FreeRTOS/Source/tasks.c ****     #endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 854:Lib/FreeRTOS/Source/tasks.c **** 
 855:Lib/FreeRTOS/Source/tasks.c ****     /* Calculate the top of stack address.  This depends on whether the stack
 856:Lib/FreeRTOS/Source/tasks.c ****      * grows from high memory to low (as per the 80x86) or vice versa.
 857:Lib/FreeRTOS/Source/tasks.c ****      * portSTACK_GROWTH is used to make the result positive or negative as required
 858:Lib/FreeRTOS/Source/tasks.c ****      * by the port. */
 859:Lib/FreeRTOS/Source/tasks.c ****     #if ( portSTACK_GROWTH < 0 )
 860:Lib/FreeRTOS/Source/tasks.c ****     {
 861:Lib/FreeRTOS/Source/tasks.c ****         pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 862:Lib/FreeRTOS/Source/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 863:Lib/FreeRTOS/Source/tasks.c **** 
 864:Lib/FreeRTOS/Source/tasks.c ****         /* Check the alignment of the calculated top of stack is correct. */
 865:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBY
 866:Lib/FreeRTOS/Source/tasks.c **** 
 867:Lib/FreeRTOS/Source/tasks.c ****         #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
 868:Lib/FreeRTOS/Source/tasks.c ****         {
 869:Lib/FreeRTOS/Source/tasks.c ****             /* Also record the stack's high address, which may assist
 870:Lib/FreeRTOS/Source/tasks.c ****              * debugging. */
 871:Lib/FreeRTOS/Source/tasks.c ****             pxNewTCB->pxEndOfStack = pxTopOfStack;
 872:Lib/FreeRTOS/Source/tasks.c ****         }
 873:Lib/FreeRTOS/Source/tasks.c ****         #endif /* configRECORD_STACK_HIGH_ADDRESS */
 874:Lib/FreeRTOS/Source/tasks.c ****     }
 875:Lib/FreeRTOS/Source/tasks.c ****     #else /* portSTACK_GROWTH */
 876:Lib/FreeRTOS/Source/tasks.c ****     {
 877:Lib/FreeRTOS/Source/tasks.c ****         pxTopOfStack = pxNewTCB->pxStack;
 878:Lib/FreeRTOS/Source/tasks.c **** 
 879:Lib/FreeRTOS/Source/tasks.c ****         /* Check the alignment of the stack buffer is correct. */
 880:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) p
ARM GAS  /tmp/ccEd3BVV.s 			page 17


 881:Lib/FreeRTOS/Source/tasks.c **** 
 882:Lib/FreeRTOS/Source/tasks.c ****         /* The other extreme of the stack space is required if stack checking is
 883:Lib/FreeRTOS/Source/tasks.c ****          * performed. */
 884:Lib/FreeRTOS/Source/tasks.c ****         pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 885:Lib/FreeRTOS/Source/tasks.c ****     }
 886:Lib/FreeRTOS/Source/tasks.c ****     #endif /* portSTACK_GROWTH */
 887:Lib/FreeRTOS/Source/tasks.c **** 
 888:Lib/FreeRTOS/Source/tasks.c ****     /* Store the task name in the TCB. */
 889:Lib/FreeRTOS/Source/tasks.c ****     if( pcName != NULL )
 890:Lib/FreeRTOS/Source/tasks.c ****     {
 891:Lib/FreeRTOS/Source/tasks.c ****         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 892:Lib/FreeRTOS/Source/tasks.c ****         {
 893:Lib/FreeRTOS/Source/tasks.c ****             pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 894:Lib/FreeRTOS/Source/tasks.c **** 
 895:Lib/FreeRTOS/Source/tasks.c ****             /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:Lib/FreeRTOS/Source/tasks.c ****              * configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:Lib/FreeRTOS/Source/tasks.c ****              * string is not accessible (extremely unlikely). */
 898:Lib/FreeRTOS/Source/tasks.c ****             if( pcName[ x ] == ( char ) 0x00 )
 899:Lib/FreeRTOS/Source/tasks.c ****             {
 900:Lib/FreeRTOS/Source/tasks.c ****                 break;
 901:Lib/FreeRTOS/Source/tasks.c ****             }
 902:Lib/FreeRTOS/Source/tasks.c ****             else
 903:Lib/FreeRTOS/Source/tasks.c ****             {
 904:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
 905:Lib/FreeRTOS/Source/tasks.c ****             }
 906:Lib/FreeRTOS/Source/tasks.c ****         }
 907:Lib/FreeRTOS/Source/tasks.c **** 
 908:Lib/FreeRTOS/Source/tasks.c ****         /* Ensure the name string is terminated in the case that the string length
 909:Lib/FreeRTOS/Source/tasks.c ****          * was greater or equal to configMAX_TASK_NAME_LEN. */
 910:Lib/FreeRTOS/Source/tasks.c ****         pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 911:Lib/FreeRTOS/Source/tasks.c ****     }
 912:Lib/FreeRTOS/Source/tasks.c ****     else
 913:Lib/FreeRTOS/Source/tasks.c ****     {
 914:Lib/FreeRTOS/Source/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 915:Lib/FreeRTOS/Source/tasks.c ****     }
 916:Lib/FreeRTOS/Source/tasks.c **** 
 917:Lib/FreeRTOS/Source/tasks.c ****     /* This is used as an array index so must ensure it's not too large. */
 918:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( uxPriority < configMAX_PRIORITIES );
 919:Lib/FreeRTOS/Source/tasks.c **** 
 920:Lib/FreeRTOS/Source/tasks.c ****     if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 921:Lib/FreeRTOS/Source/tasks.c ****     {
 922:Lib/FreeRTOS/Source/tasks.c ****         uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 923:Lib/FreeRTOS/Source/tasks.c ****     }
 924:Lib/FreeRTOS/Source/tasks.c ****     else
 925:Lib/FreeRTOS/Source/tasks.c ****     {
 926:Lib/FreeRTOS/Source/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 927:Lib/FreeRTOS/Source/tasks.c ****     }
 928:Lib/FreeRTOS/Source/tasks.c **** 
 929:Lib/FreeRTOS/Source/tasks.c ****     pxNewTCB->uxPriority = uxPriority;
 930:Lib/FreeRTOS/Source/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 931:Lib/FreeRTOS/Source/tasks.c ****     {
 932:Lib/FreeRTOS/Source/tasks.c ****         pxNewTCB->uxBasePriority = uxPriority;
 933:Lib/FreeRTOS/Source/tasks.c ****     }
 934:Lib/FreeRTOS/Source/tasks.c ****     #endif /* configUSE_MUTEXES */
 935:Lib/FreeRTOS/Source/tasks.c **** 
 936:Lib/FreeRTOS/Source/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 937:Lib/FreeRTOS/Source/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
ARM GAS  /tmp/ccEd3BVV.s 			page 18


 938:Lib/FreeRTOS/Source/tasks.c **** 
 939:Lib/FreeRTOS/Source/tasks.c ****     /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 940:Lib/FreeRTOS/Source/tasks.c ****      * back to  the containing TCB from a generic item in a list. */
 941:Lib/FreeRTOS/Source/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 942:Lib/FreeRTOS/Source/tasks.c **** 
 943:Lib/FreeRTOS/Source/tasks.c ****     /* Event lists are always in priority order. */
 944:Lib/FreeRTOS/Source/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - (
 945:Lib/FreeRTOS/Source/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 946:Lib/FreeRTOS/Source/tasks.c **** 
 947:Lib/FreeRTOS/Source/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 948:Lib/FreeRTOS/Source/tasks.c ****     {
 949:Lib/FreeRTOS/Source/tasks.c ****         vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStac
 950:Lib/FreeRTOS/Source/tasks.c ****     }
 951:Lib/FreeRTOS/Source/tasks.c ****     #else
 952:Lib/FreeRTOS/Source/tasks.c ****     {
 953:Lib/FreeRTOS/Source/tasks.c ****         /* Avoid compiler warning about unreferenced parameter. */
 954:Lib/FreeRTOS/Source/tasks.c ****         ( void ) xRegions;
 955:Lib/FreeRTOS/Source/tasks.c ****     }
 956:Lib/FreeRTOS/Source/tasks.c ****     #endif
 957:Lib/FreeRTOS/Source/tasks.c **** 
 958:Lib/FreeRTOS/Source/tasks.c ****     #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
 959:Lib/FreeRTOS/Source/tasks.c ****     {
 960:Lib/FreeRTOS/Source/tasks.c ****         /* Allocate and initialize memory for the task's TLS Block. */
 961:Lib/FreeRTOS/Source/tasks.c ****         configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 962:Lib/FreeRTOS/Source/tasks.c ****     }
 963:Lib/FreeRTOS/Source/tasks.c ****     #endif
 964:Lib/FreeRTOS/Source/tasks.c **** 
 965:Lib/FreeRTOS/Source/tasks.c ****     /* Initialize the TCB stack to look as if the task was already running,
 966:Lib/FreeRTOS/Source/tasks.c ****      * but had been interrupted by the scheduler.  The return address is set
 967:Lib/FreeRTOS/Source/tasks.c ****      * to the start of the task function. Once the stack has been initialised
 968:Lib/FreeRTOS/Source/tasks.c ****      * the top of stack variable is updated. */
 969:Lib/FreeRTOS/Source/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 970:Lib/FreeRTOS/Source/tasks.c ****     {
 971:Lib/FreeRTOS/Source/tasks.c ****         /* If the port has capability to detect stack overflow,
 972:Lib/FreeRTOS/Source/tasks.c ****          * pass the stack end address to the stack initialization
 973:Lib/FreeRTOS/Source/tasks.c ****          * function as well. */
 974:Lib/FreeRTOS/Source/tasks.c ****         #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
 975:Lib/FreeRTOS/Source/tasks.c ****         {
 976:Lib/FreeRTOS/Source/tasks.c ****             #if ( portSTACK_GROWTH < 0 )
 977:Lib/FreeRTOS/Source/tasks.c ****             {
 978:Lib/FreeRTOS/Source/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, px
 979:Lib/FreeRTOS/Source/tasks.c ****             }
 980:Lib/FreeRTOS/Source/tasks.c ****             #else /* portSTACK_GROWTH */
 981:Lib/FreeRTOS/Source/tasks.c ****             {
 982:Lib/FreeRTOS/Source/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStac
 983:Lib/FreeRTOS/Source/tasks.c ****             }
 984:Lib/FreeRTOS/Source/tasks.c ****             #endif /* portSTACK_GROWTH */
 985:Lib/FreeRTOS/Source/tasks.c ****         }
 986:Lib/FreeRTOS/Source/tasks.c ****         #else /* portHAS_STACK_OVERFLOW_CHECKING */
 987:Lib/FreeRTOS/Source/tasks.c ****         {
 988:Lib/FreeRTOS/Source/tasks.c ****             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters,
 989:Lib/FreeRTOS/Source/tasks.c ****         }
 990:Lib/FreeRTOS/Source/tasks.c ****         #endif /* portHAS_STACK_OVERFLOW_CHECKING */
 991:Lib/FreeRTOS/Source/tasks.c ****     }
 992:Lib/FreeRTOS/Source/tasks.c ****     #else /* portUSING_MPU_WRAPPERS */
 993:Lib/FreeRTOS/Source/tasks.c ****     {
 994:Lib/FreeRTOS/Source/tasks.c ****         /* If the port has capability to detect stack overflow,
ARM GAS  /tmp/ccEd3BVV.s 			page 19


 995:Lib/FreeRTOS/Source/tasks.c ****          * pass the stack end address to the stack initialization
 996:Lib/FreeRTOS/Source/tasks.c ****          * function as well. */
 997:Lib/FreeRTOS/Source/tasks.c ****         #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
 998:Lib/FreeRTOS/Source/tasks.c ****         {
 999:Lib/FreeRTOS/Source/tasks.c ****             #if ( portSTACK_GROWTH < 0 )
1000:Lib/FreeRTOS/Source/tasks.c ****             {
1001:Lib/FreeRTOS/Source/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, px
1002:Lib/FreeRTOS/Source/tasks.c ****             }
1003:Lib/FreeRTOS/Source/tasks.c ****             #else /* portSTACK_GROWTH */
1004:Lib/FreeRTOS/Source/tasks.c ****             {
1005:Lib/FreeRTOS/Source/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStac
1006:Lib/FreeRTOS/Source/tasks.c ****             }
1007:Lib/FreeRTOS/Source/tasks.c ****             #endif /* portSTACK_GROWTH */
1008:Lib/FreeRTOS/Source/tasks.c ****         }
1009:Lib/FreeRTOS/Source/tasks.c ****         #else /* portHAS_STACK_OVERFLOW_CHECKING */
1010:Lib/FreeRTOS/Source/tasks.c ****         {
1011:Lib/FreeRTOS/Source/tasks.c ****             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters 
1012:Lib/FreeRTOS/Source/tasks.c ****         }
1013:Lib/FreeRTOS/Source/tasks.c ****         #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1014:Lib/FreeRTOS/Source/tasks.c ****     }
1015:Lib/FreeRTOS/Source/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS */
1016:Lib/FreeRTOS/Source/tasks.c **** 
1017:Lib/FreeRTOS/Source/tasks.c ****     if( pxCreatedTask != NULL )
1018:Lib/FreeRTOS/Source/tasks.c ****     {
1019:Lib/FreeRTOS/Source/tasks.c ****         /* Pass the handle out in an anonymous way.  The handle can be used to
1020:Lib/FreeRTOS/Source/tasks.c ****          * change the created task's priority, delete the created task, etc.*/
1021:Lib/FreeRTOS/Source/tasks.c ****         *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1022:Lib/FreeRTOS/Source/tasks.c ****     }
1023:Lib/FreeRTOS/Source/tasks.c ****     else
1024:Lib/FreeRTOS/Source/tasks.c ****     {
1025:Lib/FreeRTOS/Source/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1026:Lib/FreeRTOS/Source/tasks.c ****     }
1027:Lib/FreeRTOS/Source/tasks.c **** }
1028:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1029:Lib/FreeRTOS/Source/tasks.c **** 
1030:Lib/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
1031:Lib/FreeRTOS/Source/tasks.c **** {
1032:Lib/FreeRTOS/Source/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
1033:Lib/FreeRTOS/Source/tasks.c ****      * updated. */
1034:Lib/FreeRTOS/Source/tasks.c ****     taskENTER_CRITICAL();
1035:Lib/FreeRTOS/Source/tasks.c ****     {
1036:Lib/FreeRTOS/Source/tasks.c ****         uxCurrentNumberOfTasks++;
1037:Lib/FreeRTOS/Source/tasks.c **** 
1038:Lib/FreeRTOS/Source/tasks.c ****         if( pxCurrentTCB == NULL )
1039:Lib/FreeRTOS/Source/tasks.c ****         {
1040:Lib/FreeRTOS/Source/tasks.c ****             /* There are no other tasks, or all the other tasks are in
1041:Lib/FreeRTOS/Source/tasks.c ****              * the suspended state - make this the current task. */
1042:Lib/FreeRTOS/Source/tasks.c ****             pxCurrentTCB = pxNewTCB;
1043:Lib/FreeRTOS/Source/tasks.c **** 
1044:Lib/FreeRTOS/Source/tasks.c ****             if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1045:Lib/FreeRTOS/Source/tasks.c ****             {
1046:Lib/FreeRTOS/Source/tasks.c ****                 /* This is the first task to be created so do the preliminary
1047:Lib/FreeRTOS/Source/tasks.c ****                  * initialisation required.  We will not recover if this call
1048:Lib/FreeRTOS/Source/tasks.c ****                  * fails, but we will report the failure. */
1049:Lib/FreeRTOS/Source/tasks.c ****                 prvInitialiseTaskLists();
1050:Lib/FreeRTOS/Source/tasks.c ****             }
1051:Lib/FreeRTOS/Source/tasks.c ****             else
ARM GAS  /tmp/ccEd3BVV.s 			page 20


1052:Lib/FreeRTOS/Source/tasks.c ****             {
1053:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1054:Lib/FreeRTOS/Source/tasks.c ****             }
1055:Lib/FreeRTOS/Source/tasks.c ****         }
1056:Lib/FreeRTOS/Source/tasks.c ****         else
1057:Lib/FreeRTOS/Source/tasks.c ****         {
1058:Lib/FreeRTOS/Source/tasks.c ****             /* If the scheduler is not already running, make this task the
1059:Lib/FreeRTOS/Source/tasks.c ****              * current task if it is the highest priority task to be created
1060:Lib/FreeRTOS/Source/tasks.c ****              * so far. */
1061:Lib/FreeRTOS/Source/tasks.c ****             if( xSchedulerRunning == pdFALSE )
1062:Lib/FreeRTOS/Source/tasks.c ****             {
1063:Lib/FreeRTOS/Source/tasks.c ****                 if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1064:Lib/FreeRTOS/Source/tasks.c ****                 {
1065:Lib/FreeRTOS/Source/tasks.c ****                     pxCurrentTCB = pxNewTCB;
1066:Lib/FreeRTOS/Source/tasks.c ****                 }
1067:Lib/FreeRTOS/Source/tasks.c ****                 else
1068:Lib/FreeRTOS/Source/tasks.c ****                 {
1069:Lib/FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1070:Lib/FreeRTOS/Source/tasks.c ****                 }
1071:Lib/FreeRTOS/Source/tasks.c ****             }
1072:Lib/FreeRTOS/Source/tasks.c ****             else
1073:Lib/FreeRTOS/Source/tasks.c ****             {
1074:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1075:Lib/FreeRTOS/Source/tasks.c ****             }
1076:Lib/FreeRTOS/Source/tasks.c ****         }
1077:Lib/FreeRTOS/Source/tasks.c **** 
1078:Lib/FreeRTOS/Source/tasks.c ****         uxTaskNumber++;
1079:Lib/FreeRTOS/Source/tasks.c **** 
1080:Lib/FreeRTOS/Source/tasks.c ****         #if ( configUSE_TRACE_FACILITY == 1 )
1081:Lib/FreeRTOS/Source/tasks.c ****         {
1082:Lib/FreeRTOS/Source/tasks.c ****             /* Add a counter into the TCB for tracing only. */
1083:Lib/FreeRTOS/Source/tasks.c ****             pxNewTCB->uxTCBNumber = uxTaskNumber;
1084:Lib/FreeRTOS/Source/tasks.c ****         }
1085:Lib/FreeRTOS/Source/tasks.c ****         #endif /* configUSE_TRACE_FACILITY */
1086:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_CREATE( pxNewTCB );
1087:Lib/FreeRTOS/Source/tasks.c **** 
1088:Lib/FreeRTOS/Source/tasks.c ****         prvAddTaskToReadyList( pxNewTCB );
1089:Lib/FreeRTOS/Source/tasks.c **** 
1090:Lib/FreeRTOS/Source/tasks.c ****         portSETUP_TCB( pxNewTCB );
1091:Lib/FreeRTOS/Source/tasks.c ****     }
1092:Lib/FreeRTOS/Source/tasks.c ****     taskEXIT_CRITICAL();
1093:Lib/FreeRTOS/Source/tasks.c **** 
1094:Lib/FreeRTOS/Source/tasks.c ****     if( xSchedulerRunning != pdFALSE )
1095:Lib/FreeRTOS/Source/tasks.c ****     {
1096:Lib/FreeRTOS/Source/tasks.c ****         /* If the created task is of a higher priority than the current task
1097:Lib/FreeRTOS/Source/tasks.c ****          * then it should run now. */
1098:Lib/FreeRTOS/Source/tasks.c ****         if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1099:Lib/FreeRTOS/Source/tasks.c ****         {
1100:Lib/FreeRTOS/Source/tasks.c ****             taskYIELD_IF_USING_PREEMPTION();
1101:Lib/FreeRTOS/Source/tasks.c ****         }
1102:Lib/FreeRTOS/Source/tasks.c ****         else
1103:Lib/FreeRTOS/Source/tasks.c ****         {
1104:Lib/FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1105:Lib/FreeRTOS/Source/tasks.c ****         }
1106:Lib/FreeRTOS/Source/tasks.c ****     }
1107:Lib/FreeRTOS/Source/tasks.c ****     else
1108:Lib/FreeRTOS/Source/tasks.c ****     {
ARM GAS  /tmp/ccEd3BVV.s 			page 21


1109:Lib/FreeRTOS/Source/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1110:Lib/FreeRTOS/Source/tasks.c ****     }
1111:Lib/FreeRTOS/Source/tasks.c **** }
1112:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1113:Lib/FreeRTOS/Source/tasks.c **** 
1114:Lib/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1115:Lib/FreeRTOS/Source/tasks.c **** 
1116:Lib/FreeRTOS/Source/tasks.c ****     void vTaskDelete( TaskHandle_t xTaskToDelete )
1117:Lib/FreeRTOS/Source/tasks.c ****     {
1118:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
1119:Lib/FreeRTOS/Source/tasks.c **** 
1120:Lib/FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
1121:Lib/FreeRTOS/Source/tasks.c ****         {
1122:Lib/FreeRTOS/Source/tasks.c ****             /* If null is passed in here then it is the calling task that is
1123:Lib/FreeRTOS/Source/tasks.c ****              * being deleted. */
1124:Lib/FreeRTOS/Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1125:Lib/FreeRTOS/Source/tasks.c **** 
1126:Lib/FreeRTOS/Source/tasks.c ****             /* Remove task from the ready/delayed list. */
1127:Lib/FreeRTOS/Source/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1128:Lib/FreeRTOS/Source/tasks.c ****             {
1129:Lib/FreeRTOS/Source/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1130:Lib/FreeRTOS/Source/tasks.c ****             }
1131:Lib/FreeRTOS/Source/tasks.c ****             else
1132:Lib/FreeRTOS/Source/tasks.c ****             {
1133:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1134:Lib/FreeRTOS/Source/tasks.c ****             }
1135:Lib/FreeRTOS/Source/tasks.c **** 
1136:Lib/FreeRTOS/Source/tasks.c ****             /* Is the task waiting on an event also? */
1137:Lib/FreeRTOS/Source/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1138:Lib/FreeRTOS/Source/tasks.c ****             {
1139:Lib/FreeRTOS/Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1140:Lib/FreeRTOS/Source/tasks.c ****             }
1141:Lib/FreeRTOS/Source/tasks.c ****             else
1142:Lib/FreeRTOS/Source/tasks.c ****             {
1143:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1144:Lib/FreeRTOS/Source/tasks.c ****             }
1145:Lib/FreeRTOS/Source/tasks.c **** 
1146:Lib/FreeRTOS/Source/tasks.c ****             /* Increment the uxTaskNumber also so kernel aware debuggers can
1147:Lib/FreeRTOS/Source/tasks.c ****              * detect that the task lists need re-generating.  This is done before
1148:Lib/FreeRTOS/Source/tasks.c ****              * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1149:Lib/FreeRTOS/Source/tasks.c ****              * not return. */
1150:Lib/FreeRTOS/Source/tasks.c ****             uxTaskNumber++;
1151:Lib/FreeRTOS/Source/tasks.c **** 
1152:Lib/FreeRTOS/Source/tasks.c ****             if( pxTCB == pxCurrentTCB )
1153:Lib/FreeRTOS/Source/tasks.c ****             {
1154:Lib/FreeRTOS/Source/tasks.c ****                 /* A task is deleting itself.  This cannot complete within the
1155:Lib/FreeRTOS/Source/tasks.c ****                  * task itself, as a context switch to another task is required.
1156:Lib/FreeRTOS/Source/tasks.c ****                  * Place the task in the termination list.  The idle task will
1157:Lib/FreeRTOS/Source/tasks.c ****                  * check the termination list and free up any memory allocated by
1158:Lib/FreeRTOS/Source/tasks.c ****                  * the scheduler for the TCB and stack of the deleted task. */
1159:Lib/FreeRTOS/Source/tasks.c ****                 vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1160:Lib/FreeRTOS/Source/tasks.c **** 
1161:Lib/FreeRTOS/Source/tasks.c ****                 /* Increment the ucTasksDeleted variable so the idle task knows
1162:Lib/FreeRTOS/Source/tasks.c ****                  * there is a task that has been deleted and that it should therefore
1163:Lib/FreeRTOS/Source/tasks.c ****                  * check the xTasksWaitingTermination list. */
1164:Lib/FreeRTOS/Source/tasks.c ****                 ++uxDeletedTasksWaitingCleanUp;
1165:Lib/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccEd3BVV.s 			page 22


1166:Lib/FreeRTOS/Source/tasks.c ****                 /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1167:Lib/FreeRTOS/Source/tasks.c ****                  * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1168:Lib/FreeRTOS/Source/tasks.c ****                 traceTASK_DELETE( pxTCB );
1169:Lib/FreeRTOS/Source/tasks.c **** 
1170:Lib/FreeRTOS/Source/tasks.c ****                 /* The pre-delete hook is primarily for the Windows simulator,
1171:Lib/FreeRTOS/Source/tasks.c ****                  * in which Windows specific clean up operations are performed,
1172:Lib/FreeRTOS/Source/tasks.c ****                  * after which it is not possible to yield away from this task -
1173:Lib/FreeRTOS/Source/tasks.c ****                  * hence xYieldPending is used to latch that a context switch is
1174:Lib/FreeRTOS/Source/tasks.c ****                  * required. */
1175:Lib/FreeRTOS/Source/tasks.c ****                 portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1176:Lib/FreeRTOS/Source/tasks.c ****             }
1177:Lib/FreeRTOS/Source/tasks.c ****             else
1178:Lib/FreeRTOS/Source/tasks.c ****             {
1179:Lib/FreeRTOS/Source/tasks.c ****                 --uxCurrentNumberOfTasks;
1180:Lib/FreeRTOS/Source/tasks.c ****                 traceTASK_DELETE( pxTCB );
1181:Lib/FreeRTOS/Source/tasks.c **** 
1182:Lib/FreeRTOS/Source/tasks.c ****                 /* Reset the next expected unblock time in case it referred to
1183:Lib/FreeRTOS/Source/tasks.c ****                  * the task that has just been deleted. */
1184:Lib/FreeRTOS/Source/tasks.c ****                 prvResetNextTaskUnblockTime();
1185:Lib/FreeRTOS/Source/tasks.c ****             }
1186:Lib/FreeRTOS/Source/tasks.c ****         }
1187:Lib/FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
1188:Lib/FreeRTOS/Source/tasks.c **** 
1189:Lib/FreeRTOS/Source/tasks.c ****         /* If the task is not deleting itself, call prvDeleteTCB from outside of
1190:Lib/FreeRTOS/Source/tasks.c ****          * critical section. If a task deletes itself, prvDeleteTCB is called
1191:Lib/FreeRTOS/Source/tasks.c ****          * from prvCheckTasksWaitingTermination which is called from Idle task. */
1192:Lib/FreeRTOS/Source/tasks.c ****         if( pxTCB != pxCurrentTCB )
1193:Lib/FreeRTOS/Source/tasks.c ****         {
1194:Lib/FreeRTOS/Source/tasks.c ****             prvDeleteTCB( pxTCB );
1195:Lib/FreeRTOS/Source/tasks.c ****         }
1196:Lib/FreeRTOS/Source/tasks.c **** 
1197:Lib/FreeRTOS/Source/tasks.c ****         /* Force a reschedule if it is the currently running task that has just
1198:Lib/FreeRTOS/Source/tasks.c ****          * been deleted. */
1199:Lib/FreeRTOS/Source/tasks.c ****         if( xSchedulerRunning != pdFALSE )
1200:Lib/FreeRTOS/Source/tasks.c ****         {
1201:Lib/FreeRTOS/Source/tasks.c ****             if( pxTCB == pxCurrentTCB )
1202:Lib/FreeRTOS/Source/tasks.c ****             {
1203:Lib/FreeRTOS/Source/tasks.c ****                 configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
1204:Lib/FreeRTOS/Source/tasks.c ****                 portYIELD_WITHIN_API();
1205:Lib/FreeRTOS/Source/tasks.c ****             }
1206:Lib/FreeRTOS/Source/tasks.c ****             else
1207:Lib/FreeRTOS/Source/tasks.c ****             {
1208:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1209:Lib/FreeRTOS/Source/tasks.c ****             }
1210:Lib/FreeRTOS/Source/tasks.c ****         }
1211:Lib/FreeRTOS/Source/tasks.c ****     }
1212:Lib/FreeRTOS/Source/tasks.c **** 
1213:Lib/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1214:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1215:Lib/FreeRTOS/Source/tasks.c **** 
1216:Lib/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskDelayUntil == 1 )
1217:Lib/FreeRTOS/Source/tasks.c **** 
1218:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
1219:Lib/FreeRTOS/Source/tasks.c ****                                 const TickType_t xTimeIncrement )
1220:Lib/FreeRTOS/Source/tasks.c ****     {
1221:Lib/FreeRTOS/Source/tasks.c ****         TickType_t xTimeToWake;
1222:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
ARM GAS  /tmp/ccEd3BVV.s 			page 23


1223:Lib/FreeRTOS/Source/tasks.c **** 
1224:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( pxPreviousWakeTime );
1225:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
1226:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
1227:Lib/FreeRTOS/Source/tasks.c **** 
1228:Lib/FreeRTOS/Source/tasks.c ****         vTaskSuspendAll();
1229:Lib/FreeRTOS/Source/tasks.c ****         {
1230:Lib/FreeRTOS/Source/tasks.c ****             /* Minor optimisation.  The tick count cannot change in this
1231:Lib/FreeRTOS/Source/tasks.c ****              * block. */
1232:Lib/FreeRTOS/Source/tasks.c ****             const TickType_t xConstTickCount = xTickCount;
1233:Lib/FreeRTOS/Source/tasks.c **** 
1234:Lib/FreeRTOS/Source/tasks.c ****             /* Generate the tick time at which the task wants to wake. */
1235:Lib/FreeRTOS/Source/tasks.c ****             xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1236:Lib/FreeRTOS/Source/tasks.c **** 
1237:Lib/FreeRTOS/Source/tasks.c ****             if( xConstTickCount < *pxPreviousWakeTime )
1238:Lib/FreeRTOS/Source/tasks.c ****             {
1239:Lib/FreeRTOS/Source/tasks.c ****                 /* The tick count has overflowed since this function was
1240:Lib/FreeRTOS/Source/tasks.c ****                  * lasted called.  In this case the only time we should ever
1241:Lib/FreeRTOS/Source/tasks.c ****                  * actually delay is if the wake time has also  overflowed,
1242:Lib/FreeRTOS/Source/tasks.c ****                  * and the wake time is greater than the tick time.  When this
1243:Lib/FreeRTOS/Source/tasks.c ****                  * is the case it is as if neither time had overflowed. */
1244:Lib/FreeRTOS/Source/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1245:Lib/FreeRTOS/Source/tasks.c ****                 {
1246:Lib/FreeRTOS/Source/tasks.c ****                     xShouldDelay = pdTRUE;
1247:Lib/FreeRTOS/Source/tasks.c ****                 }
1248:Lib/FreeRTOS/Source/tasks.c ****                 else
1249:Lib/FreeRTOS/Source/tasks.c ****                 {
1250:Lib/FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1251:Lib/FreeRTOS/Source/tasks.c ****                 }
1252:Lib/FreeRTOS/Source/tasks.c ****             }
1253:Lib/FreeRTOS/Source/tasks.c ****             else
1254:Lib/FreeRTOS/Source/tasks.c ****             {
1255:Lib/FreeRTOS/Source/tasks.c ****                 /* The tick time has not overflowed.  In this case we will
1256:Lib/FreeRTOS/Source/tasks.c ****                  * delay if either the wake time has overflowed, and/or the
1257:Lib/FreeRTOS/Source/tasks.c ****                  * tick time is less than the wake time. */
1258:Lib/FreeRTOS/Source/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1259:Lib/FreeRTOS/Source/tasks.c ****                 {
1260:Lib/FreeRTOS/Source/tasks.c ****                     xShouldDelay = pdTRUE;
1261:Lib/FreeRTOS/Source/tasks.c ****                 }
1262:Lib/FreeRTOS/Source/tasks.c ****                 else
1263:Lib/FreeRTOS/Source/tasks.c ****                 {
1264:Lib/FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1265:Lib/FreeRTOS/Source/tasks.c ****                 }
1266:Lib/FreeRTOS/Source/tasks.c ****             }
1267:Lib/FreeRTOS/Source/tasks.c **** 
1268:Lib/FreeRTOS/Source/tasks.c ****             /* Update the wake time ready for the next call. */
1269:Lib/FreeRTOS/Source/tasks.c ****             *pxPreviousWakeTime = xTimeToWake;
1270:Lib/FreeRTOS/Source/tasks.c **** 
1271:Lib/FreeRTOS/Source/tasks.c ****             if( xShouldDelay != pdFALSE )
1272:Lib/FreeRTOS/Source/tasks.c ****             {
1273:Lib/FreeRTOS/Source/tasks.c ****                 traceTASK_DELAY_UNTIL( xTimeToWake );
1274:Lib/FreeRTOS/Source/tasks.c **** 
1275:Lib/FreeRTOS/Source/tasks.c ****                 /* prvAddCurrentTaskToDelayedList() needs the block time, not
1276:Lib/FreeRTOS/Source/tasks.c ****                  * the time to wake, so subtract the current tick count. */
1277:Lib/FreeRTOS/Source/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1278:Lib/FreeRTOS/Source/tasks.c ****             }
1279:Lib/FreeRTOS/Source/tasks.c ****             else
ARM GAS  /tmp/ccEd3BVV.s 			page 24


1280:Lib/FreeRTOS/Source/tasks.c ****             {
1281:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1282:Lib/FreeRTOS/Source/tasks.c ****             }
1283:Lib/FreeRTOS/Source/tasks.c ****         }
1284:Lib/FreeRTOS/Source/tasks.c ****         xAlreadyYielded = xTaskResumeAll();
1285:Lib/FreeRTOS/Source/tasks.c **** 
1286:Lib/FreeRTOS/Source/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1287:Lib/FreeRTOS/Source/tasks.c ****          * have put ourselves to sleep. */
1288:Lib/FreeRTOS/Source/tasks.c ****         if( xAlreadyYielded == pdFALSE )
1289:Lib/FreeRTOS/Source/tasks.c ****         {
1290:Lib/FreeRTOS/Source/tasks.c ****             portYIELD_WITHIN_API();
1291:Lib/FreeRTOS/Source/tasks.c ****         }
1292:Lib/FreeRTOS/Source/tasks.c ****         else
1293:Lib/FreeRTOS/Source/tasks.c ****         {
1294:Lib/FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1295:Lib/FreeRTOS/Source/tasks.c ****         }
1296:Lib/FreeRTOS/Source/tasks.c **** 
1297:Lib/FreeRTOS/Source/tasks.c ****         return xShouldDelay;
1298:Lib/FreeRTOS/Source/tasks.c ****     }
1299:Lib/FreeRTOS/Source/tasks.c **** 
1300:Lib/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskDelayUntil */
1301:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1302:Lib/FreeRTOS/Source/tasks.c **** 
1303:Lib/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1304:Lib/FreeRTOS/Source/tasks.c **** 
1305:Lib/FreeRTOS/Source/tasks.c ****     void vTaskDelay( const TickType_t xTicksToDelay )
1306:Lib/FreeRTOS/Source/tasks.c ****     {
1307:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
1308:Lib/FreeRTOS/Source/tasks.c **** 
1309:Lib/FreeRTOS/Source/tasks.c ****         /* A delay time of zero just forces a reschedule. */
1310:Lib/FreeRTOS/Source/tasks.c ****         if( xTicksToDelay > ( TickType_t ) 0U )
1311:Lib/FreeRTOS/Source/tasks.c ****         {
1312:Lib/FreeRTOS/Source/tasks.c ****             configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
1313:Lib/FreeRTOS/Source/tasks.c ****             vTaskSuspendAll();
1314:Lib/FreeRTOS/Source/tasks.c ****             {
1315:Lib/FreeRTOS/Source/tasks.c ****                 traceTASK_DELAY();
1316:Lib/FreeRTOS/Source/tasks.c **** 
1317:Lib/FreeRTOS/Source/tasks.c ****                 /* A task that is removed from the event list while the
1318:Lib/FreeRTOS/Source/tasks.c ****                  * scheduler is suspended will not get placed in the ready
1319:Lib/FreeRTOS/Source/tasks.c ****                  * list or removed from the blocked list until the scheduler
1320:Lib/FreeRTOS/Source/tasks.c ****                  * is resumed.
1321:Lib/FreeRTOS/Source/tasks.c ****                  *
1322:Lib/FreeRTOS/Source/tasks.c ****                  * This task cannot be in an event list as it is the currently
1323:Lib/FreeRTOS/Source/tasks.c ****                  * executing task. */
1324:Lib/FreeRTOS/Source/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1325:Lib/FreeRTOS/Source/tasks.c ****             }
1326:Lib/FreeRTOS/Source/tasks.c ****             xAlreadyYielded = xTaskResumeAll();
1327:Lib/FreeRTOS/Source/tasks.c ****         }
1328:Lib/FreeRTOS/Source/tasks.c ****         else
1329:Lib/FreeRTOS/Source/tasks.c ****         {
1330:Lib/FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1331:Lib/FreeRTOS/Source/tasks.c ****         }
1332:Lib/FreeRTOS/Source/tasks.c **** 
1333:Lib/FreeRTOS/Source/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1334:Lib/FreeRTOS/Source/tasks.c ****          * have put ourselves to sleep. */
1335:Lib/FreeRTOS/Source/tasks.c ****         if( xAlreadyYielded == pdFALSE )
1336:Lib/FreeRTOS/Source/tasks.c ****         {
ARM GAS  /tmp/ccEd3BVV.s 			page 25


1337:Lib/FreeRTOS/Source/tasks.c ****             portYIELD_WITHIN_API();
1338:Lib/FreeRTOS/Source/tasks.c ****         }
1339:Lib/FreeRTOS/Source/tasks.c ****         else
1340:Lib/FreeRTOS/Source/tasks.c ****         {
1341:Lib/FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1342:Lib/FreeRTOS/Source/tasks.c ****         }
1343:Lib/FreeRTOS/Source/tasks.c ****     }
1344:Lib/FreeRTOS/Source/tasks.c **** 
1345:Lib/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1346:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1347:Lib/FreeRTOS/Source/tasks.c **** 
1348:Lib/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDe
1349:Lib/FreeRTOS/Source/tasks.c **** 
1350:Lib/FreeRTOS/Source/tasks.c ****     eTaskState eTaskGetState( TaskHandle_t xTask )
1351:Lib/FreeRTOS/Source/tasks.c ****     {
1352:Lib/FreeRTOS/Source/tasks.c ****         eTaskState eReturn;
1353:Lib/FreeRTOS/Source/tasks.c ****         List_t const * pxStateList;
1354:Lib/FreeRTOS/Source/tasks.c ****         List_t const * pxEventList;
1355:Lib/FreeRTOS/Source/tasks.c ****         List_t const * pxDelayedList;
1356:Lib/FreeRTOS/Source/tasks.c ****         List_t const * pxOverflowedDelayedList;
1357:Lib/FreeRTOS/Source/tasks.c ****         const TCB_t * const pxTCB = xTask;
1358:Lib/FreeRTOS/Source/tasks.c **** 
1359:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( pxTCB );
1360:Lib/FreeRTOS/Source/tasks.c **** 
1361:Lib/FreeRTOS/Source/tasks.c ****         if( pxTCB == pxCurrentTCB )
1362:Lib/FreeRTOS/Source/tasks.c ****         {
1363:Lib/FreeRTOS/Source/tasks.c ****             /* The task calling this function is querying its own state. */
1364:Lib/FreeRTOS/Source/tasks.c ****             eReturn = eRunning;
1365:Lib/FreeRTOS/Source/tasks.c ****         }
1366:Lib/FreeRTOS/Source/tasks.c ****         else
1367:Lib/FreeRTOS/Source/tasks.c ****         {
1368:Lib/FreeRTOS/Source/tasks.c ****             taskENTER_CRITICAL();
1369:Lib/FreeRTOS/Source/tasks.c ****             {
1370:Lib/FreeRTOS/Source/tasks.c ****                 pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1371:Lib/FreeRTOS/Source/tasks.c ****                 pxEventList = listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) );
1372:Lib/FreeRTOS/Source/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
1373:Lib/FreeRTOS/Source/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1374:Lib/FreeRTOS/Source/tasks.c ****             }
1375:Lib/FreeRTOS/Source/tasks.c ****             taskEXIT_CRITICAL();
1376:Lib/FreeRTOS/Source/tasks.c **** 
1377:Lib/FreeRTOS/Source/tasks.c ****             if( pxEventList == &xPendingReadyList )
1378:Lib/FreeRTOS/Source/tasks.c ****             {
1379:Lib/FreeRTOS/Source/tasks.c ****                 /* The task has been placed on the pending ready list, so its
1380:Lib/FreeRTOS/Source/tasks.c ****                  * state is eReady regardless of what list the task's state list
1381:Lib/FreeRTOS/Source/tasks.c ****                  * item is currently placed on. */
1382:Lib/FreeRTOS/Source/tasks.c ****                 eReturn = eReady;
1383:Lib/FreeRTOS/Source/tasks.c ****             }
1384:Lib/FreeRTOS/Source/tasks.c ****             else if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList )
1385:Lib/FreeRTOS/Source/tasks.c ****             {
1386:Lib/FreeRTOS/Source/tasks.c ****                 /* The task being queried is referenced from one of the Blocked
1387:Lib/FreeRTOS/Source/tasks.c ****                  * lists. */
1388:Lib/FreeRTOS/Source/tasks.c ****                 eReturn = eBlocked;
1389:Lib/FreeRTOS/Source/tasks.c ****             }
1390:Lib/FreeRTOS/Source/tasks.c **** 
1391:Lib/FreeRTOS/Source/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
1392:Lib/FreeRTOS/Source/tasks.c ****                 else if( pxStateList == &xSuspendedTaskList )
1393:Lib/FreeRTOS/Source/tasks.c ****                 {
ARM GAS  /tmp/ccEd3BVV.s 			page 26


1394:Lib/FreeRTOS/Source/tasks.c ****                     /* The task being queried is referenced from the suspended
1395:Lib/FreeRTOS/Source/tasks.c ****                      * list.  Is it genuinely suspended or is it blocked
1396:Lib/FreeRTOS/Source/tasks.c ****                      * indefinitely? */
1397:Lib/FreeRTOS/Source/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1398:Lib/FreeRTOS/Source/tasks.c ****                     {
1399:Lib/FreeRTOS/Source/tasks.c ****                         #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1400:Lib/FreeRTOS/Source/tasks.c ****                         {
1401:Lib/FreeRTOS/Source/tasks.c ****                             BaseType_t x;
1402:Lib/FreeRTOS/Source/tasks.c **** 
1403:Lib/FreeRTOS/Source/tasks.c ****                             /* The task does not appear on the event list item of
1404:Lib/FreeRTOS/Source/tasks.c ****                              * and of the RTOS objects, but could still be in the
1405:Lib/FreeRTOS/Source/tasks.c ****                              * blocked state if it is waiting on its notification
1406:Lib/FreeRTOS/Source/tasks.c ****                              * rather than waiting on an object.  If not, is
1407:Lib/FreeRTOS/Source/tasks.c ****                              * suspended. */
1408:Lib/FreeRTOS/Source/tasks.c ****                             eReturn = eSuspended;
1409:Lib/FreeRTOS/Source/tasks.c **** 
1410:Lib/FreeRTOS/Source/tasks.c ****                             for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1411:Lib/FreeRTOS/Source/tasks.c ****                             {
1412:Lib/FreeRTOS/Source/tasks.c ****                                 if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
1413:Lib/FreeRTOS/Source/tasks.c ****                                 {
1414:Lib/FreeRTOS/Source/tasks.c ****                                     eReturn = eBlocked;
1415:Lib/FreeRTOS/Source/tasks.c ****                                     break;
1416:Lib/FreeRTOS/Source/tasks.c ****                                 }
1417:Lib/FreeRTOS/Source/tasks.c ****                             }
1418:Lib/FreeRTOS/Source/tasks.c ****                         }
1419:Lib/FreeRTOS/Source/tasks.c ****                         #else /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1420:Lib/FreeRTOS/Source/tasks.c ****                         {
1421:Lib/FreeRTOS/Source/tasks.c ****                             eReturn = eSuspended;
1422:Lib/FreeRTOS/Source/tasks.c ****                         }
1423:Lib/FreeRTOS/Source/tasks.c ****                         #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1424:Lib/FreeRTOS/Source/tasks.c ****                     }
1425:Lib/FreeRTOS/Source/tasks.c ****                     else
1426:Lib/FreeRTOS/Source/tasks.c ****                     {
1427:Lib/FreeRTOS/Source/tasks.c ****                         eReturn = eBlocked;
1428:Lib/FreeRTOS/Source/tasks.c ****                     }
1429:Lib/FreeRTOS/Source/tasks.c ****                 }
1430:Lib/FreeRTOS/Source/tasks.c ****             #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */
1431:Lib/FreeRTOS/Source/tasks.c **** 
1432:Lib/FreeRTOS/Source/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
1433:Lib/FreeRTOS/Source/tasks.c ****                 else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1434:Lib/FreeRTOS/Source/tasks.c ****                 {
1435:Lib/FreeRTOS/Source/tasks.c ****                     /* The task being queried is referenced from the deleted
1436:Lib/FreeRTOS/Source/tasks.c ****                      * tasks list, or it is not referenced from any lists at
1437:Lib/FreeRTOS/Source/tasks.c ****                      * all. */
1438:Lib/FreeRTOS/Source/tasks.c ****                     eReturn = eDeleted;
1439:Lib/FreeRTOS/Source/tasks.c ****                 }
1440:Lib/FreeRTOS/Source/tasks.c ****             #endif
1441:Lib/FreeRTOS/Source/tasks.c **** 
1442:Lib/FreeRTOS/Source/tasks.c ****             else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer
1443:Lib/FreeRTOS/Source/tasks.c ****             {
1444:Lib/FreeRTOS/Source/tasks.c ****                 /* If the task is not in any other state, it must be in the
1445:Lib/FreeRTOS/Source/tasks.c ****                  * Ready (including pending ready) state. */
1446:Lib/FreeRTOS/Source/tasks.c ****                 eReturn = eReady;
1447:Lib/FreeRTOS/Source/tasks.c ****             }
1448:Lib/FreeRTOS/Source/tasks.c ****         }
1449:Lib/FreeRTOS/Source/tasks.c **** 
1450:Lib/FreeRTOS/Source/tasks.c ****         return eReturn;
ARM GAS  /tmp/ccEd3BVV.s 			page 27


1451:Lib/FreeRTOS/Source/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1452:Lib/FreeRTOS/Source/tasks.c **** 
1453:Lib/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1454:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1455:Lib/FreeRTOS/Source/tasks.c **** 
1456:Lib/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1457:Lib/FreeRTOS/Source/tasks.c **** 
1458:Lib/FreeRTOS/Source/tasks.c ****     UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1459:Lib/FreeRTOS/Source/tasks.c ****     {
1460:Lib/FreeRTOS/Source/tasks.c ****         TCB_t const * pxTCB;
1461:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxReturn;
1462:Lib/FreeRTOS/Source/tasks.c **** 
1463:Lib/FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
1464:Lib/FreeRTOS/Source/tasks.c ****         {
1465:Lib/FreeRTOS/Source/tasks.c ****             /* If null is passed in here then it is the priority of the task
1466:Lib/FreeRTOS/Source/tasks.c ****              * that called uxTaskPriorityGet() that is being queried. */
1467:Lib/FreeRTOS/Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1468:Lib/FreeRTOS/Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
1469:Lib/FreeRTOS/Source/tasks.c ****         }
1470:Lib/FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
1471:Lib/FreeRTOS/Source/tasks.c **** 
1472:Lib/FreeRTOS/Source/tasks.c ****         return uxReturn;
1473:Lib/FreeRTOS/Source/tasks.c ****     }
1474:Lib/FreeRTOS/Source/tasks.c **** 
1475:Lib/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1476:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1477:Lib/FreeRTOS/Source/tasks.c **** 
1478:Lib/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1479:Lib/FreeRTOS/Source/tasks.c **** 
1480:Lib/FreeRTOS/Source/tasks.c ****     UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1481:Lib/FreeRTOS/Source/tasks.c ****     {
1482:Lib/FreeRTOS/Source/tasks.c ****         TCB_t const * pxTCB;
1483:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxReturn;
1484:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxSavedInterruptState;
1485:Lib/FreeRTOS/Source/tasks.c **** 
1486:Lib/FreeRTOS/Source/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1487:Lib/FreeRTOS/Source/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1488:Lib/FreeRTOS/Source/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1489:Lib/FreeRTOS/Source/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1490:Lib/FreeRTOS/Source/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1491:Lib/FreeRTOS/Source/tasks.c ****          * is defined in FreeRTOSConfig.h then
1492:Lib/FreeRTOS/Source/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1493:Lib/FreeRTOS/Source/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1494:Lib/FreeRTOS/Source/tasks.c ****          * been assigned a priority above the configured maximum system call
1495:Lib/FreeRTOS/Source/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1496:Lib/FreeRTOS/Source/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1497:Lib/FreeRTOS/Source/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1498:Lib/FreeRTOS/Source/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1499:Lib/FreeRTOS/Source/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1500:Lib/FreeRTOS/Source/tasks.c ****          * provided on the following link:
1501:Lib/FreeRTOS/Source/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1502:Lib/FreeRTOS/Source/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1503:Lib/FreeRTOS/Source/tasks.c **** 
1504:Lib/FreeRTOS/Source/tasks.c ****         uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1505:Lib/FreeRTOS/Source/tasks.c ****         {
1506:Lib/FreeRTOS/Source/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1507:Lib/FreeRTOS/Source/tasks.c ****              * task that is being queried. */
ARM GAS  /tmp/ccEd3BVV.s 			page 28


1508:Lib/FreeRTOS/Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1509:Lib/FreeRTOS/Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
1510:Lib/FreeRTOS/Source/tasks.c ****         }
1511:Lib/FreeRTOS/Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1512:Lib/FreeRTOS/Source/tasks.c **** 
1513:Lib/FreeRTOS/Source/tasks.c ****         return uxReturn;
1514:Lib/FreeRTOS/Source/tasks.c ****     }
1515:Lib/FreeRTOS/Source/tasks.c **** 
1516:Lib/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1517:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1518:Lib/FreeRTOS/Source/tasks.c **** 
1519:Lib/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1520:Lib/FreeRTOS/Source/tasks.c **** 
1521:Lib/FreeRTOS/Source/tasks.c ****     void vTaskPrioritySet( TaskHandle_t xTask,
1522:Lib/FreeRTOS/Source/tasks.c ****                            UBaseType_t uxNewPriority )
1523:Lib/FreeRTOS/Source/tasks.c ****     {
1524:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
1525:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1526:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
1527:Lib/FreeRTOS/Source/tasks.c **** 
1528:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( uxNewPriority < configMAX_PRIORITIES );
1529:Lib/FreeRTOS/Source/tasks.c **** 
1530:Lib/FreeRTOS/Source/tasks.c ****         /* Ensure the new priority is valid. */
1531:Lib/FreeRTOS/Source/tasks.c ****         if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1532:Lib/FreeRTOS/Source/tasks.c ****         {
1533:Lib/FreeRTOS/Source/tasks.c ****             uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1534:Lib/FreeRTOS/Source/tasks.c ****         }
1535:Lib/FreeRTOS/Source/tasks.c ****         else
1536:Lib/FreeRTOS/Source/tasks.c ****         {
1537:Lib/FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1538:Lib/FreeRTOS/Source/tasks.c ****         }
1539:Lib/FreeRTOS/Source/tasks.c **** 
1540:Lib/FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
1541:Lib/FreeRTOS/Source/tasks.c ****         {
1542:Lib/FreeRTOS/Source/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1543:Lib/FreeRTOS/Source/tasks.c ****              * task that is being changed. */
1544:Lib/FreeRTOS/Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1545:Lib/FreeRTOS/Source/tasks.c **** 
1546:Lib/FreeRTOS/Source/tasks.c ****             traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1547:Lib/FreeRTOS/Source/tasks.c **** 
1548:Lib/FreeRTOS/Source/tasks.c ****             #if ( configUSE_MUTEXES == 1 )
1549:Lib/FreeRTOS/Source/tasks.c ****             {
1550:Lib/FreeRTOS/Source/tasks.c ****                 uxCurrentBasePriority = pxTCB->uxBasePriority;
1551:Lib/FreeRTOS/Source/tasks.c ****             }
1552:Lib/FreeRTOS/Source/tasks.c ****             #else
1553:Lib/FreeRTOS/Source/tasks.c ****             {
1554:Lib/FreeRTOS/Source/tasks.c ****                 uxCurrentBasePriority = pxTCB->uxPriority;
1555:Lib/FreeRTOS/Source/tasks.c ****             }
1556:Lib/FreeRTOS/Source/tasks.c ****             #endif
1557:Lib/FreeRTOS/Source/tasks.c **** 
1558:Lib/FreeRTOS/Source/tasks.c ****             if( uxCurrentBasePriority != uxNewPriority )
1559:Lib/FreeRTOS/Source/tasks.c ****             {
1560:Lib/FreeRTOS/Source/tasks.c ****                 /* The priority change may have readied a task of higher
1561:Lib/FreeRTOS/Source/tasks.c ****                  * priority than the calling task. */
1562:Lib/FreeRTOS/Source/tasks.c ****                 if( uxNewPriority > uxCurrentBasePriority )
1563:Lib/FreeRTOS/Source/tasks.c ****                 {
1564:Lib/FreeRTOS/Source/tasks.c ****                     if( pxTCB != pxCurrentTCB )
ARM GAS  /tmp/ccEd3BVV.s 			page 29


1565:Lib/FreeRTOS/Source/tasks.c ****                     {
1566:Lib/FreeRTOS/Source/tasks.c ****                         /* The priority of a task other than the currently
1567:Lib/FreeRTOS/Source/tasks.c ****                          * running task is being raised.  Is the priority being
1568:Lib/FreeRTOS/Source/tasks.c ****                          * raised above that of the running task? */
1569:Lib/FreeRTOS/Source/tasks.c ****                         if( uxNewPriority > pxCurrentTCB->uxPriority )
1570:Lib/FreeRTOS/Source/tasks.c ****                         {
1571:Lib/FreeRTOS/Source/tasks.c ****                             xYieldRequired = pdTRUE;
1572:Lib/FreeRTOS/Source/tasks.c ****                         }
1573:Lib/FreeRTOS/Source/tasks.c ****                         else
1574:Lib/FreeRTOS/Source/tasks.c ****                         {
1575:Lib/FreeRTOS/Source/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1576:Lib/FreeRTOS/Source/tasks.c ****                         }
1577:Lib/FreeRTOS/Source/tasks.c ****                     }
1578:Lib/FreeRTOS/Source/tasks.c ****                     else
1579:Lib/FreeRTOS/Source/tasks.c ****                     {
1580:Lib/FreeRTOS/Source/tasks.c ****                         /* The priority of the running task is being raised,
1581:Lib/FreeRTOS/Source/tasks.c ****                          * but the running task must already be the highest
1582:Lib/FreeRTOS/Source/tasks.c ****                          * priority task able to run so no yield is required. */
1583:Lib/FreeRTOS/Source/tasks.c ****                     }
1584:Lib/FreeRTOS/Source/tasks.c ****                 }
1585:Lib/FreeRTOS/Source/tasks.c ****                 else if( pxTCB == pxCurrentTCB )
1586:Lib/FreeRTOS/Source/tasks.c ****                 {
1587:Lib/FreeRTOS/Source/tasks.c ****                     /* Setting the priority of the running task down means
1588:Lib/FreeRTOS/Source/tasks.c ****                      * there may now be another task of higher priority that
1589:Lib/FreeRTOS/Source/tasks.c ****                      * is ready to execute. */
1590:Lib/FreeRTOS/Source/tasks.c ****                     xYieldRequired = pdTRUE;
1591:Lib/FreeRTOS/Source/tasks.c ****                 }
1592:Lib/FreeRTOS/Source/tasks.c ****                 else
1593:Lib/FreeRTOS/Source/tasks.c ****                 {
1594:Lib/FreeRTOS/Source/tasks.c ****                     /* Setting the priority of any other task down does not
1595:Lib/FreeRTOS/Source/tasks.c ****                      * require a yield as the running task must be above the
1596:Lib/FreeRTOS/Source/tasks.c ****                      * new priority of the task being modified. */
1597:Lib/FreeRTOS/Source/tasks.c ****                 }
1598:Lib/FreeRTOS/Source/tasks.c **** 
1599:Lib/FreeRTOS/Source/tasks.c ****                 /* Remember the ready list the task might be referenced from
1600:Lib/FreeRTOS/Source/tasks.c ****                  * before its uxPriority member is changed so the
1601:Lib/FreeRTOS/Source/tasks.c ****                  * taskRESET_READY_PRIORITY() macro can function correctly. */
1602:Lib/FreeRTOS/Source/tasks.c ****                 uxPriorityUsedOnEntry = pxTCB->uxPriority;
1603:Lib/FreeRTOS/Source/tasks.c **** 
1604:Lib/FreeRTOS/Source/tasks.c ****                 #if ( configUSE_MUTEXES == 1 )
1605:Lib/FreeRTOS/Source/tasks.c ****                 {
1606:Lib/FreeRTOS/Source/tasks.c ****                     /* Only change the priority being used if the task is not
1607:Lib/FreeRTOS/Source/tasks.c ****                      * currently using an inherited priority. */
1608:Lib/FreeRTOS/Source/tasks.c ****                     if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1609:Lib/FreeRTOS/Source/tasks.c ****                     {
1610:Lib/FreeRTOS/Source/tasks.c ****                         pxTCB->uxPriority = uxNewPriority;
1611:Lib/FreeRTOS/Source/tasks.c ****                     }
1612:Lib/FreeRTOS/Source/tasks.c ****                     else
1613:Lib/FreeRTOS/Source/tasks.c ****                     {
1614:Lib/FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1615:Lib/FreeRTOS/Source/tasks.c ****                     }
1616:Lib/FreeRTOS/Source/tasks.c **** 
1617:Lib/FreeRTOS/Source/tasks.c ****                     /* The base priority gets set whatever. */
1618:Lib/FreeRTOS/Source/tasks.c ****                     pxTCB->uxBasePriority = uxNewPriority;
1619:Lib/FreeRTOS/Source/tasks.c ****                 }
1620:Lib/FreeRTOS/Source/tasks.c ****                 #else /* if ( configUSE_MUTEXES == 1 ) */
1621:Lib/FreeRTOS/Source/tasks.c ****                 {
ARM GAS  /tmp/ccEd3BVV.s 			page 30


1622:Lib/FreeRTOS/Source/tasks.c ****                     pxTCB->uxPriority = uxNewPriority;
1623:Lib/FreeRTOS/Source/tasks.c ****                 }
1624:Lib/FreeRTOS/Source/tasks.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1625:Lib/FreeRTOS/Source/tasks.c **** 
1626:Lib/FreeRTOS/Source/tasks.c ****                 /* Only reset the event list item value if the value is not
1627:Lib/FreeRTOS/Source/tasks.c ****                  * being used for anything else. */
1628:Lib/FreeRTOS/Source/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_V
1629:Lib/FreeRTOS/Source/tasks.c ****                 {
1630:Lib/FreeRTOS/Source/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX
1631:Lib/FreeRTOS/Source/tasks.c ****                 }
1632:Lib/FreeRTOS/Source/tasks.c ****                 else
1633:Lib/FreeRTOS/Source/tasks.c ****                 {
1634:Lib/FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1635:Lib/FreeRTOS/Source/tasks.c ****                 }
1636:Lib/FreeRTOS/Source/tasks.c **** 
1637:Lib/FreeRTOS/Source/tasks.c ****                 /* If the task is in the blocked or suspended list we need do
1638:Lib/FreeRTOS/Source/tasks.c ****                  * nothing more than change its priority variable. However, if
1639:Lib/FreeRTOS/Source/tasks.c ****                  * the task is in a ready list it needs to be removed and placed
1640:Lib/FreeRTOS/Source/tasks.c ****                  * in the list appropriate to its new priority. */
1641:Lib/FreeRTOS/Source/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( px
1642:Lib/FreeRTOS/Source/tasks.c ****                 {
1643:Lib/FreeRTOS/Source/tasks.c ****                     /* The task is currently in its ready list - remove before
1644:Lib/FreeRTOS/Source/tasks.c ****                      * adding it to its new ready list.  As we are in a critical
1645:Lib/FreeRTOS/Source/tasks.c ****                      * section we can do this even if the scheduler is suspended. */
1646:Lib/FreeRTOS/Source/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1647:Lib/FreeRTOS/Source/tasks.c ****                     {
1648:Lib/FreeRTOS/Source/tasks.c ****                         /* It is known that the task is in its ready list so
1649:Lib/FreeRTOS/Source/tasks.c ****                          * there is no need to check again and the port level
1650:Lib/FreeRTOS/Source/tasks.c ****                          * reset macro can be called directly. */
1651:Lib/FreeRTOS/Source/tasks.c ****                         portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1652:Lib/FreeRTOS/Source/tasks.c ****                     }
1653:Lib/FreeRTOS/Source/tasks.c ****                     else
1654:Lib/FreeRTOS/Source/tasks.c ****                     {
1655:Lib/FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1656:Lib/FreeRTOS/Source/tasks.c ****                     }
1657:Lib/FreeRTOS/Source/tasks.c **** 
1658:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1659:Lib/FreeRTOS/Source/tasks.c ****                 }
1660:Lib/FreeRTOS/Source/tasks.c ****                 else
1661:Lib/FreeRTOS/Source/tasks.c ****                 {
1662:Lib/FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1663:Lib/FreeRTOS/Source/tasks.c ****                 }
1664:Lib/FreeRTOS/Source/tasks.c **** 
1665:Lib/FreeRTOS/Source/tasks.c ****                 if( xYieldRequired != pdFALSE )
1666:Lib/FreeRTOS/Source/tasks.c ****                 {
1667:Lib/FreeRTOS/Source/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
1668:Lib/FreeRTOS/Source/tasks.c ****                 }
1669:Lib/FreeRTOS/Source/tasks.c ****                 else
1670:Lib/FreeRTOS/Source/tasks.c ****                 {
1671:Lib/FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1672:Lib/FreeRTOS/Source/tasks.c ****                 }
1673:Lib/FreeRTOS/Source/tasks.c **** 
1674:Lib/FreeRTOS/Source/tasks.c ****                 /* Remove compiler warning about unused variables when the port
1675:Lib/FreeRTOS/Source/tasks.c ****                  * optimised task selection is not being used. */
1676:Lib/FreeRTOS/Source/tasks.c ****                 ( void ) uxPriorityUsedOnEntry;
1677:Lib/FreeRTOS/Source/tasks.c ****             }
1678:Lib/FreeRTOS/Source/tasks.c ****         }
ARM GAS  /tmp/ccEd3BVV.s 			page 31


1679:Lib/FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
1680:Lib/FreeRTOS/Source/tasks.c ****     }
1681:Lib/FreeRTOS/Source/tasks.c **** 
1682:Lib/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1683:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1684:Lib/FreeRTOS/Source/tasks.c **** 
1685:Lib/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1686:Lib/FreeRTOS/Source/tasks.c **** 
1687:Lib/FreeRTOS/Source/tasks.c ****     void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1688:Lib/FreeRTOS/Source/tasks.c ****     {
1689:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
1690:Lib/FreeRTOS/Source/tasks.c **** 
1691:Lib/FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
1692:Lib/FreeRTOS/Source/tasks.c ****         {
1693:Lib/FreeRTOS/Source/tasks.c ****             /* If null is passed in here then it is the running task that is
1694:Lib/FreeRTOS/Source/tasks.c ****              * being suspended. */
1695:Lib/FreeRTOS/Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1696:Lib/FreeRTOS/Source/tasks.c **** 
1697:Lib/FreeRTOS/Source/tasks.c ****             traceTASK_SUSPEND( pxTCB );
1698:Lib/FreeRTOS/Source/tasks.c **** 
1699:Lib/FreeRTOS/Source/tasks.c ****             /* Remove task from the ready/delayed list and place in the
1700:Lib/FreeRTOS/Source/tasks.c ****              * suspended list. */
1701:Lib/FreeRTOS/Source/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1702:Lib/FreeRTOS/Source/tasks.c ****             {
1703:Lib/FreeRTOS/Source/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1704:Lib/FreeRTOS/Source/tasks.c ****             }
1705:Lib/FreeRTOS/Source/tasks.c ****             else
1706:Lib/FreeRTOS/Source/tasks.c ****             {
1707:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1708:Lib/FreeRTOS/Source/tasks.c ****             }
1709:Lib/FreeRTOS/Source/tasks.c **** 
1710:Lib/FreeRTOS/Source/tasks.c ****             /* Is the task waiting on an event also? */
1711:Lib/FreeRTOS/Source/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1712:Lib/FreeRTOS/Source/tasks.c ****             {
1713:Lib/FreeRTOS/Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1714:Lib/FreeRTOS/Source/tasks.c ****             }
1715:Lib/FreeRTOS/Source/tasks.c ****             else
1716:Lib/FreeRTOS/Source/tasks.c ****             {
1717:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1718:Lib/FreeRTOS/Source/tasks.c ****             }
1719:Lib/FreeRTOS/Source/tasks.c **** 
1720:Lib/FreeRTOS/Source/tasks.c ****             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1721:Lib/FreeRTOS/Source/tasks.c **** 
1722:Lib/FreeRTOS/Source/tasks.c ****             #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1723:Lib/FreeRTOS/Source/tasks.c ****             {
1724:Lib/FreeRTOS/Source/tasks.c ****                 BaseType_t x;
1725:Lib/FreeRTOS/Source/tasks.c **** 
1726:Lib/FreeRTOS/Source/tasks.c ****                 for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1727:Lib/FreeRTOS/Source/tasks.c ****                 {
1728:Lib/FreeRTOS/Source/tasks.c ****                     if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
1729:Lib/FreeRTOS/Source/tasks.c ****                     {
1730:Lib/FreeRTOS/Source/tasks.c ****                         /* The task was blocked to wait for a notification, but is
1731:Lib/FreeRTOS/Source/tasks.c ****                          * now suspended, so no notification was received. */
1732:Lib/FreeRTOS/Source/tasks.c ****                         pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
1733:Lib/FreeRTOS/Source/tasks.c ****                     }
1734:Lib/FreeRTOS/Source/tasks.c ****                 }
1735:Lib/FreeRTOS/Source/tasks.c ****             }
ARM GAS  /tmp/ccEd3BVV.s 			page 32


1736:Lib/FreeRTOS/Source/tasks.c ****             #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1737:Lib/FreeRTOS/Source/tasks.c ****         }
1738:Lib/FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
1739:Lib/FreeRTOS/Source/tasks.c **** 
1740:Lib/FreeRTOS/Source/tasks.c ****         if( xSchedulerRunning != pdFALSE )
1741:Lib/FreeRTOS/Source/tasks.c ****         {
1742:Lib/FreeRTOS/Source/tasks.c ****             /* Reset the next expected unblock time in case it referred to the
1743:Lib/FreeRTOS/Source/tasks.c ****              * task that is now in the Suspended state. */
1744:Lib/FreeRTOS/Source/tasks.c ****             taskENTER_CRITICAL();
1745:Lib/FreeRTOS/Source/tasks.c ****             {
1746:Lib/FreeRTOS/Source/tasks.c ****                 prvResetNextTaskUnblockTime();
1747:Lib/FreeRTOS/Source/tasks.c ****             }
1748:Lib/FreeRTOS/Source/tasks.c ****             taskEXIT_CRITICAL();
1749:Lib/FreeRTOS/Source/tasks.c ****         }
1750:Lib/FreeRTOS/Source/tasks.c ****         else
1751:Lib/FreeRTOS/Source/tasks.c ****         {
1752:Lib/FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1753:Lib/FreeRTOS/Source/tasks.c ****         }
1754:Lib/FreeRTOS/Source/tasks.c **** 
1755:Lib/FreeRTOS/Source/tasks.c ****         if( pxTCB == pxCurrentTCB )
1756:Lib/FreeRTOS/Source/tasks.c ****         {
1757:Lib/FreeRTOS/Source/tasks.c ****             if( xSchedulerRunning != pdFALSE )
1758:Lib/FreeRTOS/Source/tasks.c ****             {
1759:Lib/FreeRTOS/Source/tasks.c ****                 /* The current task has just been suspended. */
1760:Lib/FreeRTOS/Source/tasks.c ****                 configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
1761:Lib/FreeRTOS/Source/tasks.c ****                 portYIELD_WITHIN_API();
1762:Lib/FreeRTOS/Source/tasks.c ****             }
1763:Lib/FreeRTOS/Source/tasks.c ****             else
1764:Lib/FreeRTOS/Source/tasks.c ****             {
1765:Lib/FreeRTOS/Source/tasks.c ****                 /* The scheduler is not running, but the task that was pointed
1766:Lib/FreeRTOS/Source/tasks.c ****                  * to by pxCurrentTCB has just been suspended and pxCurrentTCB
1767:Lib/FreeRTOS/Source/tasks.c ****                  * must be adjusted to point to a different task. */
1768:Lib/FreeRTOS/Source/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*li
1769:Lib/FreeRTOS/Source/tasks.c ****                 {
1770:Lib/FreeRTOS/Source/tasks.c ****                     /* No other tasks are ready, so set pxCurrentTCB back to
1771:Lib/FreeRTOS/Source/tasks.c ****                      * NULL so when the next task is created pxCurrentTCB will
1772:Lib/FreeRTOS/Source/tasks.c ****                      * be set to point to it no matter what its relative priority
1773:Lib/FreeRTOS/Source/tasks.c ****                      * is. */
1774:Lib/FreeRTOS/Source/tasks.c ****                     pxCurrentTCB = NULL;
1775:Lib/FreeRTOS/Source/tasks.c ****                 }
1776:Lib/FreeRTOS/Source/tasks.c ****                 else
1777:Lib/FreeRTOS/Source/tasks.c ****                 {
1778:Lib/FreeRTOS/Source/tasks.c ****                     vTaskSwitchContext();
1779:Lib/FreeRTOS/Source/tasks.c ****                 }
1780:Lib/FreeRTOS/Source/tasks.c ****             }
1781:Lib/FreeRTOS/Source/tasks.c ****         }
1782:Lib/FreeRTOS/Source/tasks.c ****         else
1783:Lib/FreeRTOS/Source/tasks.c ****         {
1784:Lib/FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1785:Lib/FreeRTOS/Source/tasks.c ****         }
1786:Lib/FreeRTOS/Source/tasks.c ****     }
1787:Lib/FreeRTOS/Source/tasks.c **** 
1788:Lib/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1789:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1790:Lib/FreeRTOS/Source/tasks.c **** 
1791:Lib/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1792:Lib/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccEd3BVV.s 			page 33


1793:Lib/FreeRTOS/Source/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1794:Lib/FreeRTOS/Source/tasks.c ****     {
1795:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn = pdFALSE;
1796:Lib/FreeRTOS/Source/tasks.c ****         const TCB_t * const pxTCB = xTask;
1797:Lib/FreeRTOS/Source/tasks.c **** 
1798:Lib/FreeRTOS/Source/tasks.c ****         /* Accesses xPendingReadyList so must be called from a critical
1799:Lib/FreeRTOS/Source/tasks.c ****          * section. */
1800:Lib/FreeRTOS/Source/tasks.c **** 
1801:Lib/FreeRTOS/Source/tasks.c ****         /* It does not make sense to check if the calling task is suspended. */
1802:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( xTask );
1803:Lib/FreeRTOS/Source/tasks.c **** 
1804:Lib/FreeRTOS/Source/tasks.c ****         /* Is the task being resumed actually in the suspended list? */
1805:Lib/FreeRTOS/Source/tasks.c ****         if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
1806:Lib/FreeRTOS/Source/tasks.c ****         {
1807:Lib/FreeRTOS/Source/tasks.c ****             /* Has the task already been resumed from within an ISR? */
1808:Lib/FreeRTOS/Source/tasks.c ****             if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALS
1809:Lib/FreeRTOS/Source/tasks.c ****             {
1810:Lib/FreeRTOS/Source/tasks.c ****                 /* Is it in the suspended list because it is in the Suspended
1811:Lib/FreeRTOS/Source/tasks.c ****                  * state, or because is is blocked with no timeout? */
1812:Lib/FreeRTOS/Source/tasks.c ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint
1813:Lib/FreeRTOS/Source/tasks.c ****                 {
1814:Lib/FreeRTOS/Source/tasks.c ****                     xReturn = pdTRUE;
1815:Lib/FreeRTOS/Source/tasks.c ****                 }
1816:Lib/FreeRTOS/Source/tasks.c ****                 else
1817:Lib/FreeRTOS/Source/tasks.c ****                 {
1818:Lib/FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1819:Lib/FreeRTOS/Source/tasks.c ****                 }
1820:Lib/FreeRTOS/Source/tasks.c ****             }
1821:Lib/FreeRTOS/Source/tasks.c ****             else
1822:Lib/FreeRTOS/Source/tasks.c ****             {
1823:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1824:Lib/FreeRTOS/Source/tasks.c ****             }
1825:Lib/FreeRTOS/Source/tasks.c ****         }
1826:Lib/FreeRTOS/Source/tasks.c ****         else
1827:Lib/FreeRTOS/Source/tasks.c ****         {
1828:Lib/FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1829:Lib/FreeRTOS/Source/tasks.c ****         }
1830:Lib/FreeRTOS/Source/tasks.c **** 
1831:Lib/FreeRTOS/Source/tasks.c ****         return xReturn;
1832:Lib/FreeRTOS/Source/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1833:Lib/FreeRTOS/Source/tasks.c **** 
1834:Lib/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1835:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1836:Lib/FreeRTOS/Source/tasks.c **** 
1837:Lib/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1838:Lib/FreeRTOS/Source/tasks.c **** 
1839:Lib/FreeRTOS/Source/tasks.c ****     void vTaskResume( TaskHandle_t xTaskToResume )
1840:Lib/FreeRTOS/Source/tasks.c ****     {
1841:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
1842:Lib/FreeRTOS/Source/tasks.c **** 
1843:Lib/FreeRTOS/Source/tasks.c ****         /* It does not make sense to resume the calling task. */
1844:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( xTaskToResume );
1845:Lib/FreeRTOS/Source/tasks.c **** 
1846:Lib/FreeRTOS/Source/tasks.c ****         /* The parameter cannot be NULL as it is impossible to resume the
1847:Lib/FreeRTOS/Source/tasks.c ****          * currently executing task. */
1848:Lib/FreeRTOS/Source/tasks.c ****         if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1849:Lib/FreeRTOS/Source/tasks.c ****         {
ARM GAS  /tmp/ccEd3BVV.s 			page 34


1850:Lib/FreeRTOS/Source/tasks.c ****             taskENTER_CRITICAL();
1851:Lib/FreeRTOS/Source/tasks.c ****             {
1852:Lib/FreeRTOS/Source/tasks.c ****                 if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1853:Lib/FreeRTOS/Source/tasks.c ****                 {
1854:Lib/FreeRTOS/Source/tasks.c ****                     traceTASK_RESUME( pxTCB );
1855:Lib/FreeRTOS/Source/tasks.c **** 
1856:Lib/FreeRTOS/Source/tasks.c ****                     /* The ready list can be accessed even if the scheduler is
1857:Lib/FreeRTOS/Source/tasks.c ****                      * suspended because this is inside a critical section. */
1858:Lib/FreeRTOS/Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1859:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1860:Lib/FreeRTOS/Source/tasks.c **** 
1861:Lib/FreeRTOS/Source/tasks.c ****                     /* A higher priority task may have just been resumed. */
1862:Lib/FreeRTOS/Source/tasks.c ****                     if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
1863:Lib/FreeRTOS/Source/tasks.c ****                     {
1864:Lib/FreeRTOS/Source/tasks.c ****                         /* This yield may not cause the task just resumed to run,
1865:Lib/FreeRTOS/Source/tasks.c ****                          * but will leave the lists in the correct state for the
1866:Lib/FreeRTOS/Source/tasks.c ****                          * next yield. */
1867:Lib/FreeRTOS/Source/tasks.c ****                         taskYIELD_IF_USING_PREEMPTION();
1868:Lib/FreeRTOS/Source/tasks.c ****                     }
1869:Lib/FreeRTOS/Source/tasks.c ****                     else
1870:Lib/FreeRTOS/Source/tasks.c ****                     {
1871:Lib/FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1872:Lib/FreeRTOS/Source/tasks.c ****                     }
1873:Lib/FreeRTOS/Source/tasks.c ****                 }
1874:Lib/FreeRTOS/Source/tasks.c ****                 else
1875:Lib/FreeRTOS/Source/tasks.c ****                 {
1876:Lib/FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1877:Lib/FreeRTOS/Source/tasks.c ****                 }
1878:Lib/FreeRTOS/Source/tasks.c ****             }
1879:Lib/FreeRTOS/Source/tasks.c ****             taskEXIT_CRITICAL();
1880:Lib/FreeRTOS/Source/tasks.c ****         }
1881:Lib/FreeRTOS/Source/tasks.c ****         else
1882:Lib/FreeRTOS/Source/tasks.c ****         {
1883:Lib/FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1884:Lib/FreeRTOS/Source/tasks.c ****         }
1885:Lib/FreeRTOS/Source/tasks.c ****     }
1886:Lib/FreeRTOS/Source/tasks.c **** 
1887:Lib/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1888:Lib/FreeRTOS/Source/tasks.c **** 
1889:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1890:Lib/FreeRTOS/Source/tasks.c **** 
1891:Lib/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1892:Lib/FreeRTOS/Source/tasks.c **** 
1893:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1894:Lib/FreeRTOS/Source/tasks.c ****     {
1895:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
1896:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
1897:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
1898:Lib/FreeRTOS/Source/tasks.c **** 
1899:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( xTaskToResume );
1900:Lib/FreeRTOS/Source/tasks.c **** 
1901:Lib/FreeRTOS/Source/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1902:Lib/FreeRTOS/Source/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1903:Lib/FreeRTOS/Source/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1904:Lib/FreeRTOS/Source/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1905:Lib/FreeRTOS/Source/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1906:Lib/FreeRTOS/Source/tasks.c ****          * is defined in FreeRTOSConfig.h then
ARM GAS  /tmp/ccEd3BVV.s 			page 35


1907:Lib/FreeRTOS/Source/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1908:Lib/FreeRTOS/Source/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1909:Lib/FreeRTOS/Source/tasks.c ****          * been assigned a priority above the configured maximum system call
1910:Lib/FreeRTOS/Source/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1911:Lib/FreeRTOS/Source/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1912:Lib/FreeRTOS/Source/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1913:Lib/FreeRTOS/Source/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1914:Lib/FreeRTOS/Source/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1915:Lib/FreeRTOS/Source/tasks.c ****          * provided on the following link:
1916:Lib/FreeRTOS/Source/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1917:Lib/FreeRTOS/Source/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1918:Lib/FreeRTOS/Source/tasks.c **** 
1919:Lib/FreeRTOS/Source/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1920:Lib/FreeRTOS/Source/tasks.c ****         {
1921:Lib/FreeRTOS/Source/tasks.c ****             if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1922:Lib/FreeRTOS/Source/tasks.c ****             {
1923:Lib/FreeRTOS/Source/tasks.c ****                 traceTASK_RESUME_FROM_ISR( pxTCB );
1924:Lib/FreeRTOS/Source/tasks.c **** 
1925:Lib/FreeRTOS/Source/tasks.c ****                 /* Check the ready lists can be accessed. */
1926:Lib/FreeRTOS/Source/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
1927:Lib/FreeRTOS/Source/tasks.c ****                 {
1928:Lib/FreeRTOS/Source/tasks.c ****                     /* Ready lists can be accessed so move the task from the
1929:Lib/FreeRTOS/Source/tasks.c ****                      * suspended list to the ready list directly. */
1930:Lib/FreeRTOS/Source/tasks.c ****                     if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
1931:Lib/FreeRTOS/Source/tasks.c ****                     {
1932:Lib/FreeRTOS/Source/tasks.c ****                         xYieldRequired = pdTRUE;
1933:Lib/FreeRTOS/Source/tasks.c **** 
1934:Lib/FreeRTOS/Source/tasks.c ****                         /* Mark that a yield is pending in case the user is not
1935:Lib/FreeRTOS/Source/tasks.c ****                          * using the return value to initiate a context switch
1936:Lib/FreeRTOS/Source/tasks.c ****                          * from the ISR using portYIELD_FROM_ISR. */
1937:Lib/FreeRTOS/Source/tasks.c ****                         xYieldPending = pdTRUE;
1938:Lib/FreeRTOS/Source/tasks.c ****                     }
1939:Lib/FreeRTOS/Source/tasks.c ****                     else
1940:Lib/FreeRTOS/Source/tasks.c ****                     {
1941:Lib/FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1942:Lib/FreeRTOS/Source/tasks.c ****                     }
1943:Lib/FreeRTOS/Source/tasks.c **** 
1944:Lib/FreeRTOS/Source/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1945:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1946:Lib/FreeRTOS/Source/tasks.c ****                 }
1947:Lib/FreeRTOS/Source/tasks.c ****                 else
1948:Lib/FreeRTOS/Source/tasks.c ****                 {
1949:Lib/FreeRTOS/Source/tasks.c ****                     /* The delayed or ready lists cannot be accessed so the task
1950:Lib/FreeRTOS/Source/tasks.c ****                      * is held in the pending ready list until the scheduler is
1951:Lib/FreeRTOS/Source/tasks.c ****                      * unsuspended. */
1952:Lib/FreeRTOS/Source/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1953:Lib/FreeRTOS/Source/tasks.c ****                 }
1954:Lib/FreeRTOS/Source/tasks.c ****             }
1955:Lib/FreeRTOS/Source/tasks.c ****             else
1956:Lib/FreeRTOS/Source/tasks.c ****             {
1957:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1958:Lib/FreeRTOS/Source/tasks.c ****             }
1959:Lib/FreeRTOS/Source/tasks.c ****         }
1960:Lib/FreeRTOS/Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1961:Lib/FreeRTOS/Source/tasks.c **** 
1962:Lib/FreeRTOS/Source/tasks.c ****         return xYieldRequired;
1963:Lib/FreeRTOS/Source/tasks.c ****     }
ARM GAS  /tmp/ccEd3BVV.s 			page 36


1964:Lib/FreeRTOS/Source/tasks.c **** 
1965:Lib/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1966:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1967:Lib/FreeRTOS/Source/tasks.c **** 
1968:Lib/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1969:Lib/FreeRTOS/Source/tasks.c **** {
1970:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xReturn;
1971:Lib/FreeRTOS/Source/tasks.c **** 
1972:Lib/FreeRTOS/Source/tasks.c ****     /* Add the idle task at the lowest priority. */
1973:Lib/FreeRTOS/Source/tasks.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
1974:Lib/FreeRTOS/Source/tasks.c ****     {
1975:Lib/FreeRTOS/Source/tasks.c ****         StaticTask_t * pxIdleTaskTCBBuffer = NULL;
1976:Lib/FreeRTOS/Source/tasks.c ****         StackType_t * pxIdleTaskStackBuffer = NULL;
1977:Lib/FreeRTOS/Source/tasks.c ****         uint32_t ulIdleTaskStackSize;
1978:Lib/FreeRTOS/Source/tasks.c **** 
1979:Lib/FreeRTOS/Source/tasks.c ****         /* The Idle task is created using user provided RAM - obtain the
1980:Lib/FreeRTOS/Source/tasks.c ****          * address of the RAM then create the idle task. */
1981:Lib/FreeRTOS/Source/tasks.c ****         vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskSta
1982:Lib/FreeRTOS/Source/tasks.c ****         xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
1983:Lib/FreeRTOS/Source/tasks.c ****                                              configIDLE_TASK_NAME,
1984:Lib/FreeRTOS/Source/tasks.c ****                                              ulIdleTaskStackSize,
1985:Lib/FreeRTOS/Source/tasks.c ****                                              ( void * ) NULL,       /*lint !e961.  The cast is not 
1986:Lib/FreeRTOS/Source/tasks.c ****                                              portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY
1987:Lib/FreeRTOS/Source/tasks.c ****                                              pxIdleTaskStackBuffer,
1988:Lib/FreeRTOS/Source/tasks.c ****                                              pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, j
1989:Lib/FreeRTOS/Source/tasks.c **** 
1990:Lib/FreeRTOS/Source/tasks.c ****         if( xIdleTaskHandle != NULL )
1991:Lib/FreeRTOS/Source/tasks.c ****         {
1992:Lib/FreeRTOS/Source/tasks.c ****             xReturn = pdPASS;
1993:Lib/FreeRTOS/Source/tasks.c ****         }
1994:Lib/FreeRTOS/Source/tasks.c ****         else
1995:Lib/FreeRTOS/Source/tasks.c ****         {
1996:Lib/FreeRTOS/Source/tasks.c ****             xReturn = pdFAIL;
1997:Lib/FreeRTOS/Source/tasks.c ****         }
1998:Lib/FreeRTOS/Source/tasks.c ****     }
1999:Lib/FreeRTOS/Source/tasks.c ****     #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
2000:Lib/FreeRTOS/Source/tasks.c ****     {
2001:Lib/FreeRTOS/Source/tasks.c ****         /* The Idle task is being created using dynamically allocated RAM. */
2002:Lib/FreeRTOS/Source/tasks.c ****         xReturn = xTaskCreate( prvIdleTask,
2003:Lib/FreeRTOS/Source/tasks.c ****                                configIDLE_TASK_NAME,
2004:Lib/FreeRTOS/Source/tasks.c ****                                configMINIMAL_STACK_SIZE,
2005:Lib/FreeRTOS/Source/tasks.c ****                                ( void * ) NULL,
2006:Lib/FreeRTOS/Source/tasks.c ****                                portPRIVILEGE_BIT,  /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_
2007:Lib/FreeRTOS/Source/tasks.c ****                                &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is
2008:Lib/FreeRTOS/Source/tasks.c ****     }
2009:Lib/FreeRTOS/Source/tasks.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
2010:Lib/FreeRTOS/Source/tasks.c **** 
2011:Lib/FreeRTOS/Source/tasks.c ****     #if ( configUSE_TIMERS == 1 )
2012:Lib/FreeRTOS/Source/tasks.c ****     {
2013:Lib/FreeRTOS/Source/tasks.c ****         if( xReturn == pdPASS )
2014:Lib/FreeRTOS/Source/tasks.c ****         {
2015:Lib/FreeRTOS/Source/tasks.c ****             xReturn = xTimerCreateTimerTask();
2016:Lib/FreeRTOS/Source/tasks.c ****         }
2017:Lib/FreeRTOS/Source/tasks.c ****         else
2018:Lib/FreeRTOS/Source/tasks.c ****         {
2019:Lib/FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2020:Lib/FreeRTOS/Source/tasks.c ****         }
ARM GAS  /tmp/ccEd3BVV.s 			page 37


2021:Lib/FreeRTOS/Source/tasks.c ****     }
2022:Lib/FreeRTOS/Source/tasks.c ****     #endif /* configUSE_TIMERS */
2023:Lib/FreeRTOS/Source/tasks.c **** 
2024:Lib/FreeRTOS/Source/tasks.c ****     if( xReturn == pdPASS )
2025:Lib/FreeRTOS/Source/tasks.c ****     {
2026:Lib/FreeRTOS/Source/tasks.c ****         /* freertos_tasks_c_additions_init() should only be called if the user
2027:Lib/FreeRTOS/Source/tasks.c ****          * definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2028:Lib/FreeRTOS/Source/tasks.c ****          * the only macro called by the function. */
2029:Lib/FreeRTOS/Source/tasks.c ****         #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2030:Lib/FreeRTOS/Source/tasks.c ****         {
2031:Lib/FreeRTOS/Source/tasks.c ****             freertos_tasks_c_additions_init();
2032:Lib/FreeRTOS/Source/tasks.c ****         }
2033:Lib/FreeRTOS/Source/tasks.c ****         #endif
2034:Lib/FreeRTOS/Source/tasks.c **** 
2035:Lib/FreeRTOS/Source/tasks.c ****         /* Interrupts are turned off here, to ensure a tick does not occur
2036:Lib/FreeRTOS/Source/tasks.c ****          * before or during the call to xPortStartScheduler().  The stacks of
2037:Lib/FreeRTOS/Source/tasks.c ****          * the created tasks contain a status word with interrupts switched on
2038:Lib/FreeRTOS/Source/tasks.c ****          * so interrupts will automatically get re-enabled when the first task
2039:Lib/FreeRTOS/Source/tasks.c ****          * starts to run. */
2040:Lib/FreeRTOS/Source/tasks.c ****         portDISABLE_INTERRUPTS();
2041:Lib/FreeRTOS/Source/tasks.c **** 
2042:Lib/FreeRTOS/Source/tasks.c ****         #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
2043:Lib/FreeRTOS/Source/tasks.c ****         {
2044:Lib/FreeRTOS/Source/tasks.c ****             /* Switch C-Runtime's TLS Block to point to the TLS
2045:Lib/FreeRTOS/Source/tasks.c ****              * block specific to the task that will run first. */
2046:Lib/FreeRTOS/Source/tasks.c ****             configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
2047:Lib/FreeRTOS/Source/tasks.c ****         }
2048:Lib/FreeRTOS/Source/tasks.c ****         #endif
2049:Lib/FreeRTOS/Source/tasks.c **** 
2050:Lib/FreeRTOS/Source/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
2051:Lib/FreeRTOS/Source/tasks.c ****         xSchedulerRunning = pdTRUE;
2052:Lib/FreeRTOS/Source/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2053:Lib/FreeRTOS/Source/tasks.c **** 
2054:Lib/FreeRTOS/Source/tasks.c ****         /* If configGENERATE_RUN_TIME_STATS is defined then the following
2055:Lib/FreeRTOS/Source/tasks.c ****          * macro must be defined to configure the timer/counter used to generate
2056:Lib/FreeRTOS/Source/tasks.c ****          * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2057:Lib/FreeRTOS/Source/tasks.c ****          * is set to 0 and the following line fails to build then ensure you do not
2058:Lib/FreeRTOS/Source/tasks.c ****          * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2059:Lib/FreeRTOS/Source/tasks.c ****          * FreeRTOSConfig.h file. */
2060:Lib/FreeRTOS/Source/tasks.c ****         portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2061:Lib/FreeRTOS/Source/tasks.c **** 
2062:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
2063:Lib/FreeRTOS/Source/tasks.c **** 
2064:Lib/FreeRTOS/Source/tasks.c ****         /* Setting up the timer tick is hardware specific and thus in the
2065:Lib/FreeRTOS/Source/tasks.c ****          * portable interface. */
2066:Lib/FreeRTOS/Source/tasks.c ****         xPortStartScheduler();
2067:Lib/FreeRTOS/Source/tasks.c **** 
2068:Lib/FreeRTOS/Source/tasks.c ****         /* In most cases, xPortStartScheduler() will not return. If it
2069:Lib/FreeRTOS/Source/tasks.c ****          * returns pdTRUE then there was not enough heap memory available
2070:Lib/FreeRTOS/Source/tasks.c ****          * to create either the Idle or the Timer task. If it returned
2071:Lib/FreeRTOS/Source/tasks.c ****          * pdFALSE, then the application called xTaskEndScheduler().
2072:Lib/FreeRTOS/Source/tasks.c ****          * Most ports don't implement xTaskEndScheduler() as there is
2073:Lib/FreeRTOS/Source/tasks.c ****          * nothing to return to. */
2074:Lib/FreeRTOS/Source/tasks.c ****     }
2075:Lib/FreeRTOS/Source/tasks.c ****     else
2076:Lib/FreeRTOS/Source/tasks.c ****     {
2077:Lib/FreeRTOS/Source/tasks.c ****         /* This line will only be reached if the kernel could not be started,
ARM GAS  /tmp/ccEd3BVV.s 			page 38


2078:Lib/FreeRTOS/Source/tasks.c ****          * because there was not enough FreeRTOS heap to create the idle task
2079:Lib/FreeRTOS/Source/tasks.c ****          * or the timer task. */
2080:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2081:Lib/FreeRTOS/Source/tasks.c ****     }
2082:Lib/FreeRTOS/Source/tasks.c **** 
2083:Lib/FreeRTOS/Source/tasks.c ****     /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2084:Lib/FreeRTOS/Source/tasks.c ****      * meaning xIdleTaskHandle is not used anywhere else. */
2085:Lib/FreeRTOS/Source/tasks.c ****     ( void ) xIdleTaskHandle;
2086:Lib/FreeRTOS/Source/tasks.c **** 
2087:Lib/FreeRTOS/Source/tasks.c ****     /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
2088:Lib/FreeRTOS/Source/tasks.c ****      * from getting optimized out as it is no longer used by the kernel. */
2089:Lib/FreeRTOS/Source/tasks.c ****     ( void ) uxTopUsedPriority;
2090:Lib/FreeRTOS/Source/tasks.c **** }
2091:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2092:Lib/FreeRTOS/Source/tasks.c **** 
2093:Lib/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2094:Lib/FreeRTOS/Source/tasks.c **** {
2095:Lib/FreeRTOS/Source/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
2096:Lib/FreeRTOS/Source/tasks.c ****      * routine so the original ISRs can be restored if necessary.  The port
2097:Lib/FreeRTOS/Source/tasks.c ****      * layer must ensure interrupts enable  bit is left in the correct state. */
2098:Lib/FreeRTOS/Source/tasks.c ****     portDISABLE_INTERRUPTS();
2099:Lib/FreeRTOS/Source/tasks.c ****     xSchedulerRunning = pdFALSE;
2100:Lib/FreeRTOS/Source/tasks.c ****     vPortEndScheduler();
2101:Lib/FreeRTOS/Source/tasks.c **** }
2102:Lib/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2103:Lib/FreeRTOS/Source/tasks.c **** 
2104:Lib/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2105:Lib/FreeRTOS/Source/tasks.c **** {
2106:Lib/FreeRTOS/Source/tasks.c ****     /* A critical section is not required as the variable is of type
2107:Lib/FreeRTOS/Source/tasks.c ****      * BaseType_t.  Please read Richard Barry's reply in the following link to a
2108:Lib/FreeRTOS/Source/tasks.c ****      * post in the FreeRTOS support forum before reporting this as a bug! -
2109:Lib/FreeRTOS/Source/tasks.c ****      * https://goo.gl/wu4acr */
2110:Lib/FreeRTOS/Source/tasks.c **** 
2111:Lib/FreeRTOS/Source/tasks.c ****     /* portSOFTWARE_BARRIER() is only implemented for emulated/simulated ports that
2112:Lib/FreeRTOS/Source/tasks.c ****      * do not otherwise exhibit real time behaviour. */
2113:Lib/FreeRTOS/Source/tasks.c ****     portSOFTWARE_BARRIER();
2114:Lib/FreeRTOS/Source/tasks.c **** 
2115:Lib/FreeRTOS/Source/tasks.c ****     /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2116:Lib/FreeRTOS/Source/tasks.c ****      * is used to allow calls to vTaskSuspendAll() to nest. */
2117:Lib/FreeRTOS/Source/tasks.c ****     ++uxSchedulerSuspended;
2118:Lib/FreeRTOS/Source/tasks.c **** 
2119:Lib/FreeRTOS/Source/tasks.c ****     /* Enforces ordering for ports and optimised compilers that may otherwise place
2120:Lib/FreeRTOS/Source/tasks.c ****      * the above increment elsewhere. */
2121:Lib/FreeRTOS/Source/tasks.c ****     portMEMORY_BARRIER();
2122:Lib/FreeRTOS/Source/tasks.c **** }
2123:Lib/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2124:Lib/FreeRTOS/Source/tasks.c **** 
2125:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2126:Lib/FreeRTOS/Source/tasks.c **** 
2127:Lib/FreeRTOS/Source/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void )
2128:Lib/FreeRTOS/Source/tasks.c ****     {
2129:Lib/FreeRTOS/Source/tasks.c ****         TickType_t xReturn;
2130:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2131:Lib/FreeRTOS/Source/tasks.c **** 
2132:Lib/FreeRTOS/Source/tasks.c ****         /* uxHigherPriorityReadyTasks takes care of the case where
2133:Lib/FreeRTOS/Source/tasks.c ****          * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2134:Lib/FreeRTOS/Source/tasks.c ****          * task that are in the Ready state, even though the idle task is
ARM GAS  /tmp/ccEd3BVV.s 			page 39


2135:Lib/FreeRTOS/Source/tasks.c ****          * running. */
2136:Lib/FreeRTOS/Source/tasks.c ****         #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2137:Lib/FreeRTOS/Source/tasks.c ****         {
2138:Lib/FreeRTOS/Source/tasks.c ****             if( uxTopReadyPriority > tskIDLE_PRIORITY )
2139:Lib/FreeRTOS/Source/tasks.c ****             {
2140:Lib/FreeRTOS/Source/tasks.c ****                 uxHigherPriorityReadyTasks = pdTRUE;
2141:Lib/FreeRTOS/Source/tasks.c ****             }
2142:Lib/FreeRTOS/Source/tasks.c ****         }
2143:Lib/FreeRTOS/Source/tasks.c ****         #else
2144:Lib/FreeRTOS/Source/tasks.c ****         {
2145:Lib/FreeRTOS/Source/tasks.c ****             const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2146:Lib/FreeRTOS/Source/tasks.c **** 
2147:Lib/FreeRTOS/Source/tasks.c ****             /* When port optimised task selection is used the uxTopReadyPriority
2148:Lib/FreeRTOS/Source/tasks.c ****              * variable is used as a bit map.  If bits other than the least
2149:Lib/FreeRTOS/Source/tasks.c ****              * significant bit are set then there are tasks that have a priority
2150:Lib/FreeRTOS/Source/tasks.c ****              * above the idle priority that are in the Ready state.  This takes
2151:Lib/FreeRTOS/Source/tasks.c ****              * care of the case where the co-operative scheduler is in use. */
2152:Lib/FreeRTOS/Source/tasks.c ****             if( uxTopReadyPriority > uxLeastSignificantBit )
2153:Lib/FreeRTOS/Source/tasks.c ****             {
2154:Lib/FreeRTOS/Source/tasks.c ****                 uxHigherPriorityReadyTasks = pdTRUE;
2155:Lib/FreeRTOS/Source/tasks.c ****             }
2156:Lib/FreeRTOS/Source/tasks.c ****         }
2157:Lib/FreeRTOS/Source/tasks.c ****         #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */
2158:Lib/FreeRTOS/Source/tasks.c **** 
2159:Lib/FreeRTOS/Source/tasks.c ****         if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2160:Lib/FreeRTOS/Source/tasks.c ****         {
2161:Lib/FreeRTOS/Source/tasks.c ****             xReturn = 0;
2162:Lib/FreeRTOS/Source/tasks.c ****         }
2163:Lib/FreeRTOS/Source/tasks.c ****         else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2164:Lib/FreeRTOS/Source/tasks.c ****         {
2165:Lib/FreeRTOS/Source/tasks.c ****             /* There are other idle priority tasks in the ready state.  If
2166:Lib/FreeRTOS/Source/tasks.c ****              * time slicing is used then the very next tick interrupt must be
2167:Lib/FreeRTOS/Source/tasks.c ****              * processed. */
2168:Lib/FreeRTOS/Source/tasks.c ****             xReturn = 0;
2169:Lib/FreeRTOS/Source/tasks.c ****         }
2170:Lib/FreeRTOS/Source/tasks.c ****         else if( uxHigherPriorityReadyTasks != pdFALSE )
2171:Lib/FreeRTOS/Source/tasks.c ****         {
2172:Lib/FreeRTOS/Source/tasks.c ****             /* There are tasks in the Ready state that have a priority above the
2173:Lib/FreeRTOS/Source/tasks.c ****              * idle priority.  This path can only be reached if
2174:Lib/FreeRTOS/Source/tasks.c ****              * configUSE_PREEMPTION is 0. */
2175:Lib/FreeRTOS/Source/tasks.c ****             xReturn = 0;
2176:Lib/FreeRTOS/Source/tasks.c ****         }
2177:Lib/FreeRTOS/Source/tasks.c ****         else
2178:Lib/FreeRTOS/Source/tasks.c ****         {
2179:Lib/FreeRTOS/Source/tasks.c ****             xReturn = xNextTaskUnblockTime - xTickCount;
2180:Lib/FreeRTOS/Source/tasks.c ****         }
2181:Lib/FreeRTOS/Source/tasks.c **** 
2182:Lib/FreeRTOS/Source/tasks.c ****         return xReturn;
2183:Lib/FreeRTOS/Source/tasks.c ****     }
2184:Lib/FreeRTOS/Source/tasks.c **** 
2185:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2186:Lib/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2187:Lib/FreeRTOS/Source/tasks.c **** 
2188:Lib/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2189:Lib/FreeRTOS/Source/tasks.c **** {
2190:Lib/FreeRTOS/Source/tasks.c ****     TCB_t * pxTCB = NULL;
2191:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
ARM GAS  /tmp/ccEd3BVV.s 			page 40


2192:Lib/FreeRTOS/Source/tasks.c **** 
2193:Lib/FreeRTOS/Source/tasks.c ****     /* If uxSchedulerSuspended is zero then this function does not match a
2194:Lib/FreeRTOS/Source/tasks.c ****      * previous call to vTaskSuspendAll(). */
2195:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
2196:Lib/FreeRTOS/Source/tasks.c **** 
2197:Lib/FreeRTOS/Source/tasks.c ****     /* It is possible that an ISR caused a task to be removed from an event
2198:Lib/FreeRTOS/Source/tasks.c ****      * list while the scheduler was suspended.  If this was the case then the
2199:Lib/FreeRTOS/Source/tasks.c ****      * removed task will have been added to the xPendingReadyList.  Once the
2200:Lib/FreeRTOS/Source/tasks.c ****      * scheduler has been resumed it is safe to move all the pending ready
2201:Lib/FreeRTOS/Source/tasks.c ****      * tasks from this list into their appropriate ready list. */
2202:Lib/FreeRTOS/Source/tasks.c ****     taskENTER_CRITICAL();
2203:Lib/FreeRTOS/Source/tasks.c ****     {
2204:Lib/FreeRTOS/Source/tasks.c ****         --uxSchedulerSuspended;
2205:Lib/FreeRTOS/Source/tasks.c **** 
2206:Lib/FreeRTOS/Source/tasks.c ****         if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
2207:Lib/FreeRTOS/Source/tasks.c ****         {
2208:Lib/FreeRTOS/Source/tasks.c ****             if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2209:Lib/FreeRTOS/Source/tasks.c ****             {
2210:Lib/FreeRTOS/Source/tasks.c ****                 /* Move any readied tasks from the pending list into the
2211:Lib/FreeRTOS/Source/tasks.c ****                  * appropriate ready list. */
2212:Lib/FreeRTOS/Source/tasks.c ****                 while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2213:Lib/FreeRTOS/Source/tasks.c ****                 {
2214:Lib/FreeRTOS/Source/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 vo
2215:Lib/FreeRTOS/Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
2216:Lib/FreeRTOS/Source/tasks.c ****                     portMEMORY_BARRIER();
2217:Lib/FreeRTOS/Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
2218:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
2219:Lib/FreeRTOS/Source/tasks.c **** 
2220:Lib/FreeRTOS/Source/tasks.c ****                     /* If the moved task has a priority higher than the current
2221:Lib/FreeRTOS/Source/tasks.c ****                      * task then a yield must be performed. */
2222:Lib/FreeRTOS/Source/tasks.c ****                     if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2223:Lib/FreeRTOS/Source/tasks.c ****                     {
2224:Lib/FreeRTOS/Source/tasks.c ****                         xYieldPending = pdTRUE;
2225:Lib/FreeRTOS/Source/tasks.c ****                     }
2226:Lib/FreeRTOS/Source/tasks.c ****                     else
2227:Lib/FreeRTOS/Source/tasks.c ****                     {
2228:Lib/FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2229:Lib/FreeRTOS/Source/tasks.c ****                     }
2230:Lib/FreeRTOS/Source/tasks.c ****                 }
2231:Lib/FreeRTOS/Source/tasks.c **** 
2232:Lib/FreeRTOS/Source/tasks.c ****                 if( pxTCB != NULL )
2233:Lib/FreeRTOS/Source/tasks.c ****                 {
2234:Lib/FreeRTOS/Source/tasks.c ****                     /* A task was unblocked while the scheduler was suspended,
2235:Lib/FreeRTOS/Source/tasks.c ****                      * which may have prevented the next unblock time from being
2236:Lib/FreeRTOS/Source/tasks.c ****                      * re-calculated, in which case re-calculate it now.  Mainly
2237:Lib/FreeRTOS/Source/tasks.c ****                      * important for low power tickless implementations, where
2238:Lib/FreeRTOS/Source/tasks.c ****                      * this can prevent an unnecessary exit from low power
2239:Lib/FreeRTOS/Source/tasks.c ****                      * state. */
2240:Lib/FreeRTOS/Source/tasks.c ****                     prvResetNextTaskUnblockTime();
2241:Lib/FreeRTOS/Source/tasks.c ****                 }
2242:Lib/FreeRTOS/Source/tasks.c **** 
2243:Lib/FreeRTOS/Source/tasks.c ****                 /* If any ticks occurred while the scheduler was suspended then
2244:Lib/FreeRTOS/Source/tasks.c ****                  * they should be processed now.  This ensures the tick count does
2245:Lib/FreeRTOS/Source/tasks.c ****                  * not  slip, and that any delayed tasks are resumed at the correct
2246:Lib/FreeRTOS/Source/tasks.c ****                  * time. */
2247:Lib/FreeRTOS/Source/tasks.c ****                 {
2248:Lib/FreeRTOS/Source/tasks.c ****                     TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
ARM GAS  /tmp/ccEd3BVV.s 			page 41


2249:Lib/FreeRTOS/Source/tasks.c **** 
2250:Lib/FreeRTOS/Source/tasks.c ****                     if( xPendedCounts > ( TickType_t ) 0U )
2251:Lib/FreeRTOS/Source/tasks.c ****                     {
2252:Lib/FreeRTOS/Source/tasks.c ****                         do
2253:Lib/FreeRTOS/Source/tasks.c ****                         {
2254:Lib/FreeRTOS/Source/tasks.c ****                             if( xTaskIncrementTick() != pdFALSE )
2255:Lib/FreeRTOS/Source/tasks.c ****                             {
2256:Lib/FreeRTOS/Source/tasks.c ****                                 xYieldPending = pdTRUE;
2257:Lib/FreeRTOS/Source/tasks.c ****                             }
2258:Lib/FreeRTOS/Source/tasks.c ****                             else
2259:Lib/FreeRTOS/Source/tasks.c ****                             {
2260:Lib/FreeRTOS/Source/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2261:Lib/FreeRTOS/Source/tasks.c ****                             }
2262:Lib/FreeRTOS/Source/tasks.c **** 
2263:Lib/FreeRTOS/Source/tasks.c ****                             --xPendedCounts;
2264:Lib/FreeRTOS/Source/tasks.c ****                         } while( xPendedCounts > ( TickType_t ) 0U );
2265:Lib/FreeRTOS/Source/tasks.c **** 
2266:Lib/FreeRTOS/Source/tasks.c ****                         xPendedTicks = 0;
2267:Lib/FreeRTOS/Source/tasks.c ****                     }
2268:Lib/FreeRTOS/Source/tasks.c ****                     else
2269:Lib/FreeRTOS/Source/tasks.c ****                     {
2270:Lib/FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2271:Lib/FreeRTOS/Source/tasks.c ****                     }
2272:Lib/FreeRTOS/Source/tasks.c ****                 }
2273:Lib/FreeRTOS/Source/tasks.c **** 
2274:Lib/FreeRTOS/Source/tasks.c ****                 if( xYieldPending != pdFALSE )
2275:Lib/FreeRTOS/Source/tasks.c ****                 {
2276:Lib/FreeRTOS/Source/tasks.c ****                     #if ( configUSE_PREEMPTION != 0 )
2277:Lib/FreeRTOS/Source/tasks.c ****                     {
2278:Lib/FreeRTOS/Source/tasks.c ****                         xAlreadyYielded = pdTRUE;
2279:Lib/FreeRTOS/Source/tasks.c ****                     }
2280:Lib/FreeRTOS/Source/tasks.c ****                     #endif
2281:Lib/FreeRTOS/Source/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
2282:Lib/FreeRTOS/Source/tasks.c ****                 }
2283:Lib/FreeRTOS/Source/tasks.c ****                 else
2284:Lib/FreeRTOS/Source/tasks.c ****                 {
2285:Lib/FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2286:Lib/FreeRTOS/Source/tasks.c ****                 }
2287:Lib/FreeRTOS/Source/tasks.c ****             }
2288:Lib/FreeRTOS/Source/tasks.c ****         }
2289:Lib/FreeRTOS/Source/tasks.c ****         else
2290:Lib/FreeRTOS/Source/tasks.c ****         {
2291:Lib/FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2292:Lib/FreeRTOS/Source/tasks.c ****         }
2293:Lib/FreeRTOS/Source/tasks.c ****     }
2294:Lib/FreeRTOS/Source/tasks.c ****     taskEXIT_CRITICAL();
2295:Lib/FreeRTOS/Source/tasks.c **** 
2296:Lib/FreeRTOS/Source/tasks.c ****     return xAlreadyYielded;
2297:Lib/FreeRTOS/Source/tasks.c **** }
2298:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2299:Lib/FreeRTOS/Source/tasks.c **** 
2300:Lib/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2301:Lib/FreeRTOS/Source/tasks.c **** {
2302:Lib/FreeRTOS/Source/tasks.c ****     TickType_t xTicks;
2303:Lib/FreeRTOS/Source/tasks.c **** 
2304:Lib/FreeRTOS/Source/tasks.c ****     /* Critical section required if running on a 16 bit processor. */
2305:Lib/FreeRTOS/Source/tasks.c ****     portTICK_TYPE_ENTER_CRITICAL();
ARM GAS  /tmp/ccEd3BVV.s 			page 42


2306:Lib/FreeRTOS/Source/tasks.c ****     {
2307:Lib/FreeRTOS/Source/tasks.c ****         xTicks = xTickCount;
2308:Lib/FreeRTOS/Source/tasks.c ****     }
2309:Lib/FreeRTOS/Source/tasks.c ****     portTICK_TYPE_EXIT_CRITICAL();
2310:Lib/FreeRTOS/Source/tasks.c **** 
2311:Lib/FreeRTOS/Source/tasks.c ****     return xTicks;
2312:Lib/FreeRTOS/Source/tasks.c **** }
2313:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2314:Lib/FreeRTOS/Source/tasks.c **** 
2315:Lib/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2316:Lib/FreeRTOS/Source/tasks.c **** {
2317:Lib/FreeRTOS/Source/tasks.c ****     TickType_t xReturn;
2318:Lib/FreeRTOS/Source/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
2319:Lib/FreeRTOS/Source/tasks.c **** 
2320:Lib/FreeRTOS/Source/tasks.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
2321:Lib/FreeRTOS/Source/tasks.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
2322:Lib/FreeRTOS/Source/tasks.c ****      * above the maximum system call priority are kept permanently enabled, even
2323:Lib/FreeRTOS/Source/tasks.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
2324:Lib/FreeRTOS/Source/tasks.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2325:Lib/FreeRTOS/Source/tasks.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2326:Lib/FreeRTOS/Source/tasks.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
2327:Lib/FreeRTOS/Source/tasks.c ****      * assigned a priority above the configured maximum system call priority.
2328:Lib/FreeRTOS/Source/tasks.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
2329:Lib/FreeRTOS/Source/tasks.c ****      * that have been assigned a priority at or (logically) below the maximum
2330:Lib/FreeRTOS/Source/tasks.c ****      * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
2331:Lib/FreeRTOS/Source/tasks.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
2332:Lib/FreeRTOS/Source/tasks.c ****      * More information (albeit Cortex-M specific) is provided on the following
2333:Lib/FreeRTOS/Source/tasks.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2334:Lib/FreeRTOS/Source/tasks.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2335:Lib/FreeRTOS/Source/tasks.c **** 
2336:Lib/FreeRTOS/Source/tasks.c ****     uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2337:Lib/FreeRTOS/Source/tasks.c ****     {
2338:Lib/FreeRTOS/Source/tasks.c ****         xReturn = xTickCount;
2339:Lib/FreeRTOS/Source/tasks.c ****     }
2340:Lib/FreeRTOS/Source/tasks.c ****     portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2341:Lib/FreeRTOS/Source/tasks.c **** 
2342:Lib/FreeRTOS/Source/tasks.c ****     return xReturn;
2343:Lib/FreeRTOS/Source/tasks.c **** }
2344:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2345:Lib/FreeRTOS/Source/tasks.c **** 
2346:Lib/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2347:Lib/FreeRTOS/Source/tasks.c **** {
2348:Lib/FreeRTOS/Source/tasks.c ****     /* A critical section is not required because the variables are of type
2349:Lib/FreeRTOS/Source/tasks.c ****      * BaseType_t. */
2350:Lib/FreeRTOS/Source/tasks.c ****     return uxCurrentNumberOfTasks;
2351:Lib/FreeRTOS/Source/tasks.c **** }
2352:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2353:Lib/FreeRTOS/Source/tasks.c **** 
2354:Lib/FreeRTOS/Source/tasks.c **** char * pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed f
2355:Lib/FreeRTOS/Source/tasks.c **** {
2356:Lib/FreeRTOS/Source/tasks.c ****     TCB_t * pxTCB;
2357:Lib/FreeRTOS/Source/tasks.c **** 
2358:Lib/FreeRTOS/Source/tasks.c ****     /* If null is passed in here then the name of the calling task is being
2359:Lib/FreeRTOS/Source/tasks.c ****      * queried. */
2360:Lib/FreeRTOS/Source/tasks.c ****     pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2361:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxTCB );
2362:Lib/FreeRTOS/Source/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
ARM GAS  /tmp/ccEd3BVV.s 			page 43


2363:Lib/FreeRTOS/Source/tasks.c **** }
2364:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2365:Lib/FreeRTOS/Source/tasks.c **** 
2366:Lib/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2367:Lib/FreeRTOS/Source/tasks.c **** 
2368:Lib/FreeRTOS/Source/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
2369:Lib/FreeRTOS/Source/tasks.c ****                                                      const char pcNameToQuery[] )
2370:Lib/FreeRTOS/Source/tasks.c ****     {
2371:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxNextTCB;
2372:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxFirstTCB;
2373:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxReturn = NULL;
2374:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t x;
2375:Lib/FreeRTOS/Source/tasks.c ****         char cNextChar;
2376:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xBreakLoop;
2377:Lib/FreeRTOS/Source/tasks.c **** 
2378:Lib/FreeRTOS/Source/tasks.c ****         /* This function is called with the scheduler suspended. */
2379:Lib/FreeRTOS/Source/tasks.c **** 
2380:Lib/FreeRTOS/Source/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2381:Lib/FreeRTOS/Source/tasks.c ****         {
2382:Lib/FreeRTOS/Source/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
2383:Lib/FreeRTOS/Source/tasks.c **** 
2384:Lib/FreeRTOS/Source/tasks.c ****             do
2385:Lib/FreeRTOS/Source/tasks.c ****             {
2386:Lib/FreeRTOS/Source/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
2387:Lib/FreeRTOS/Source/tasks.c **** 
2388:Lib/FreeRTOS/Source/tasks.c ****                 /* Check each character in the name looking for a match or
2389:Lib/FreeRTOS/Source/tasks.c ****                  * mismatch. */
2390:Lib/FreeRTOS/Source/tasks.c ****                 xBreakLoop = pdFALSE;
2391:Lib/FreeRTOS/Source/tasks.c **** 
2392:Lib/FreeRTOS/Source/tasks.c ****                 for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:Lib/FreeRTOS/Source/tasks.c ****                 {
2394:Lib/FreeRTOS/Source/tasks.c ****                     cNextChar = pxNextTCB->pcTaskName[ x ];
2395:Lib/FreeRTOS/Source/tasks.c **** 
2396:Lib/FreeRTOS/Source/tasks.c ****                     if( cNextChar != pcNameToQuery[ x ] )
2397:Lib/FreeRTOS/Source/tasks.c ****                     {
2398:Lib/FreeRTOS/Source/tasks.c ****                         /* Characters didn't match. */
2399:Lib/FreeRTOS/Source/tasks.c ****                         xBreakLoop = pdTRUE;
2400:Lib/FreeRTOS/Source/tasks.c ****                     }
2401:Lib/FreeRTOS/Source/tasks.c ****                     else if( cNextChar == ( char ) 0x00 )
2402:Lib/FreeRTOS/Source/tasks.c ****                     {
2403:Lib/FreeRTOS/Source/tasks.c ****                         /* Both strings terminated, a match must have been
2404:Lib/FreeRTOS/Source/tasks.c ****                          * found. */
2405:Lib/FreeRTOS/Source/tasks.c ****                         pxReturn = pxNextTCB;
2406:Lib/FreeRTOS/Source/tasks.c ****                         xBreakLoop = pdTRUE;
2407:Lib/FreeRTOS/Source/tasks.c ****                     }
2408:Lib/FreeRTOS/Source/tasks.c ****                     else
2409:Lib/FreeRTOS/Source/tasks.c ****                     {
2410:Lib/FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2411:Lib/FreeRTOS/Source/tasks.c ****                     }
2412:Lib/FreeRTOS/Source/tasks.c **** 
2413:Lib/FreeRTOS/Source/tasks.c ****                     if( xBreakLoop != pdFALSE )
2414:Lib/FreeRTOS/Source/tasks.c ****                     {
2415:Lib/FreeRTOS/Source/tasks.c ****                         break;
2416:Lib/FreeRTOS/Source/tasks.c ****                     }
2417:Lib/FreeRTOS/Source/tasks.c ****                 }
2418:Lib/FreeRTOS/Source/tasks.c **** 
2419:Lib/FreeRTOS/Source/tasks.c ****                 if( pxReturn != NULL )
ARM GAS  /tmp/ccEd3BVV.s 			page 44


2420:Lib/FreeRTOS/Source/tasks.c ****                 {
2421:Lib/FreeRTOS/Source/tasks.c ****                     /* The handle has been found. */
2422:Lib/FreeRTOS/Source/tasks.c ****                     break;
2423:Lib/FreeRTOS/Source/tasks.c ****                 }
2424:Lib/FreeRTOS/Source/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
2425:Lib/FreeRTOS/Source/tasks.c ****         }
2426:Lib/FreeRTOS/Source/tasks.c ****         else
2427:Lib/FreeRTOS/Source/tasks.c ****         {
2428:Lib/FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2429:Lib/FreeRTOS/Source/tasks.c ****         }
2430:Lib/FreeRTOS/Source/tasks.c **** 
2431:Lib/FreeRTOS/Source/tasks.c ****         return pxReturn;
2432:Lib/FreeRTOS/Source/tasks.c ****     }
2433:Lib/FreeRTOS/Source/tasks.c **** 
2434:Lib/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2435:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2436:Lib/FreeRTOS/Source/tasks.c **** 
2437:Lib/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2438:Lib/FreeRTOS/Source/tasks.c **** 
2439:Lib/FreeRTOS/Source/tasks.c ****     TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types a
2440:Lib/FreeRTOS/Source/tasks.c ****     {
2441:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxQueue = configMAX_PRIORITIES;
2442:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
2443:Lib/FreeRTOS/Source/tasks.c **** 
2444:Lib/FreeRTOS/Source/tasks.c ****         /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2445:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2446:Lib/FreeRTOS/Source/tasks.c **** 
2447:Lib/FreeRTOS/Source/tasks.c ****         vTaskSuspendAll();
2448:Lib/FreeRTOS/Source/tasks.c ****         {
2449:Lib/FreeRTOS/Source/tasks.c ****             /* Search the ready lists. */
2450:Lib/FreeRTOS/Source/tasks.c ****             do
2451:Lib/FreeRTOS/Source/tasks.c ****             {
2452:Lib/FreeRTOS/Source/tasks.c ****                 uxQueue--;
2453:Lib/FreeRTOS/Source/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueu
2454:Lib/FreeRTOS/Source/tasks.c **** 
2455:Lib/FreeRTOS/Source/tasks.c ****                 if( pxTCB != NULL )
2456:Lib/FreeRTOS/Source/tasks.c ****                 {
2457:Lib/FreeRTOS/Source/tasks.c ****                     /* Found the handle. */
2458:Lib/FreeRTOS/Source/tasks.c ****                     break;
2459:Lib/FreeRTOS/Source/tasks.c ****                 }
2460:Lib/FreeRTOS/Source/tasks.c ****             } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as 
2461:Lib/FreeRTOS/Source/tasks.c **** 
2462:Lib/FreeRTOS/Source/tasks.c ****             /* Search the delayed lists. */
2463:Lib/FreeRTOS/Source/tasks.c ****             if( pxTCB == NULL )
2464:Lib/FreeRTOS/Source/tasks.c ****             {
2465:Lib/FreeRTOS/Source/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQ
2466:Lib/FreeRTOS/Source/tasks.c ****             }
2467:Lib/FreeRTOS/Source/tasks.c **** 
2468:Lib/FreeRTOS/Source/tasks.c ****             if( pxTCB == NULL )
2469:Lib/FreeRTOS/Source/tasks.c ****             {
2470:Lib/FreeRTOS/Source/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, p
2471:Lib/FreeRTOS/Source/tasks.c ****             }
2472:Lib/FreeRTOS/Source/tasks.c **** 
2473:Lib/FreeRTOS/Source/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
2474:Lib/FreeRTOS/Source/tasks.c ****             {
2475:Lib/FreeRTOS/Source/tasks.c ****                 if( pxTCB == NULL )
2476:Lib/FreeRTOS/Source/tasks.c ****                 {
ARM GAS  /tmp/ccEd3BVV.s 			page 45


2477:Lib/FreeRTOS/Source/tasks.c ****                     /* Search the suspended list. */
2478:Lib/FreeRTOS/Source/tasks.c ****                     pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2479:Lib/FreeRTOS/Source/tasks.c ****                 }
2480:Lib/FreeRTOS/Source/tasks.c ****             }
2481:Lib/FreeRTOS/Source/tasks.c ****             #endif
2482:Lib/FreeRTOS/Source/tasks.c **** 
2483:Lib/FreeRTOS/Source/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
2484:Lib/FreeRTOS/Source/tasks.c ****             {
2485:Lib/FreeRTOS/Source/tasks.c ****                 if( pxTCB == NULL )
2486:Lib/FreeRTOS/Source/tasks.c ****                 {
2487:Lib/FreeRTOS/Source/tasks.c ****                     /* Search the deleted list. */
2488:Lib/FreeRTOS/Source/tasks.c ****                     pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQu
2489:Lib/FreeRTOS/Source/tasks.c ****                 }
2490:Lib/FreeRTOS/Source/tasks.c ****             }
2491:Lib/FreeRTOS/Source/tasks.c ****             #endif
2492:Lib/FreeRTOS/Source/tasks.c ****         }
2493:Lib/FreeRTOS/Source/tasks.c ****         ( void ) xTaskResumeAll();
2494:Lib/FreeRTOS/Source/tasks.c **** 
2495:Lib/FreeRTOS/Source/tasks.c ****         return pxTCB;
2496:Lib/FreeRTOS/Source/tasks.c ****     }
2497:Lib/FreeRTOS/Source/tasks.c **** 
2498:Lib/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2499:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2500:Lib/FreeRTOS/Source/tasks.c **** 
2501:Lib/FreeRTOS/Source/tasks.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
2502:Lib/FreeRTOS/Source/tasks.c **** 
2503:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xTaskGetStaticBuffers( TaskHandle_t xTask,
2504:Lib/FreeRTOS/Source/tasks.c ****                                       StackType_t ** ppuxStackBuffer,
2505:Lib/FreeRTOS/Source/tasks.c ****                                       StaticTask_t ** ppxTaskBuffer )
2506:Lib/FreeRTOS/Source/tasks.c ****     {
2507:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
2508:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
2509:Lib/FreeRTOS/Source/tasks.c **** 
2510:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( ppuxStackBuffer != NULL );
2511:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( ppxTaskBuffer != NULL );
2512:Lib/FreeRTOS/Source/tasks.c **** 
2513:Lib/FreeRTOS/Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2514:Lib/FreeRTOS/Source/tasks.c **** 
2515:Lib/FreeRTOS/Source/tasks.c ****         #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
2516:Lib/FreeRTOS/Source/tasks.c ****         {
2517:Lib/FreeRTOS/Source/tasks.c ****             if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB )
2518:Lib/FreeRTOS/Source/tasks.c ****             {
2519:Lib/FreeRTOS/Source/tasks.c ****                 *ppuxStackBuffer = pxTCB->pxStack;
2520:Lib/FreeRTOS/Source/tasks.c ****                 *ppxTaskBuffer = ( StaticTask_t * ) pxTCB;
2521:Lib/FreeRTOS/Source/tasks.c ****                 xReturn = pdTRUE;
2522:Lib/FreeRTOS/Source/tasks.c ****             }
2523:Lib/FreeRTOS/Source/tasks.c ****             else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
2524:Lib/FreeRTOS/Source/tasks.c ****             {
2525:Lib/FreeRTOS/Source/tasks.c ****                 *ppuxStackBuffer = pxTCB->pxStack;
2526:Lib/FreeRTOS/Source/tasks.c ****                 *ppxTaskBuffer = NULL;
2527:Lib/FreeRTOS/Source/tasks.c ****                 xReturn = pdTRUE;
2528:Lib/FreeRTOS/Source/tasks.c ****             }
2529:Lib/FreeRTOS/Source/tasks.c ****             else
2530:Lib/FreeRTOS/Source/tasks.c ****             {
2531:Lib/FreeRTOS/Source/tasks.c ****                 xReturn = pdFALSE;
2532:Lib/FreeRTOS/Source/tasks.c ****             }
2533:Lib/FreeRTOS/Source/tasks.c ****         }
ARM GAS  /tmp/ccEd3BVV.s 			page 46


2534:Lib/FreeRTOS/Source/tasks.c ****         #else /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 */
2535:Lib/FreeRTOS/Source/tasks.c ****         {
2536:Lib/FreeRTOS/Source/tasks.c ****             *ppuxStackBuffer = pxTCB->pxStack;
2537:Lib/FreeRTOS/Source/tasks.c ****             *ppxTaskBuffer = ( StaticTask_t * ) pxTCB;
2538:Lib/FreeRTOS/Source/tasks.c ****             xReturn = pdTRUE;
2539:Lib/FreeRTOS/Source/tasks.c ****         }
2540:Lib/FreeRTOS/Source/tasks.c ****         #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 */
2541:Lib/FreeRTOS/Source/tasks.c **** 
2542:Lib/FreeRTOS/Source/tasks.c ****         return xReturn;
2543:Lib/FreeRTOS/Source/tasks.c ****     }
2544:Lib/FreeRTOS/Source/tasks.c **** 
2545:Lib/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
2546:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2547:Lib/FreeRTOS/Source/tasks.c **** 
2548:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2549:Lib/FreeRTOS/Source/tasks.c **** 
2550:Lib/FreeRTOS/Source/tasks.c ****     UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
2551:Lib/FreeRTOS/Source/tasks.c ****                                       const UBaseType_t uxArraySize,
2552:Lib/FreeRTOS/Source/tasks.c ****                                       configRUN_TIME_COUNTER_TYPE * const pulTotalRunTime )
2553:Lib/FreeRTOS/Source/tasks.c ****     {
2554:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2555:Lib/FreeRTOS/Source/tasks.c **** 
2556:Lib/FreeRTOS/Source/tasks.c ****         vTaskSuspendAll();
2557:Lib/FreeRTOS/Source/tasks.c ****         {
2558:Lib/FreeRTOS/Source/tasks.c ****             /* Is there a space in the array for each task in the system? */
2559:Lib/FreeRTOS/Source/tasks.c ****             if( uxArraySize >= uxCurrentNumberOfTasks )
2560:Lib/FreeRTOS/Source/tasks.c ****             {
2561:Lib/FreeRTOS/Source/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2562:Lib/FreeRTOS/Source/tasks.c ****                  * task in the Ready state. */
2563:Lib/FreeRTOS/Source/tasks.c ****                 do
2564:Lib/FreeRTOS/Source/tasks.c ****                 {
2565:Lib/FreeRTOS/Source/tasks.c ****                     uxQueue--;
2566:Lib/FreeRTOS/Source/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
2567:Lib/FreeRTOS/Source/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
2568:Lib/FreeRTOS/Source/tasks.c **** 
2569:Lib/FreeRTOS/Source/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2570:Lib/FreeRTOS/Source/tasks.c ****                  * task in the Blocked state. */
2571:Lib/FreeRTOS/Source/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2572:Lib/FreeRTOS/Source/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2573:Lib/FreeRTOS/Source/tasks.c **** 
2574:Lib/FreeRTOS/Source/tasks.c ****                 #if ( INCLUDE_vTaskDelete == 1 )
2575:Lib/FreeRTOS/Source/tasks.c ****                 {
2576:Lib/FreeRTOS/Source/tasks.c ****                     /* Fill in an TaskStatus_t structure with information on
2577:Lib/FreeRTOS/Source/tasks.c ****                      * each task that has been deleted but not yet cleaned up. */
2578:Lib/FreeRTOS/Source/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTas
2579:Lib/FreeRTOS/Source/tasks.c ****                 }
2580:Lib/FreeRTOS/Source/tasks.c ****                 #endif
2581:Lib/FreeRTOS/Source/tasks.c **** 
2582:Lib/FreeRTOS/Source/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
2583:Lib/FreeRTOS/Source/tasks.c ****                 {
2584:Lib/FreeRTOS/Source/tasks.c ****                     /* Fill in an TaskStatus_t structure with information on
2585:Lib/FreeRTOS/Source/tasks.c ****                      * each task in the Suspended state. */
2586:Lib/FreeRTOS/Source/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSus
2587:Lib/FreeRTOS/Source/tasks.c ****                 }
2588:Lib/FreeRTOS/Source/tasks.c ****                 #endif
2589:Lib/FreeRTOS/Source/tasks.c **** 
2590:Lib/FreeRTOS/Source/tasks.c ****                 #if ( configGENERATE_RUN_TIME_STATS == 1 )
ARM GAS  /tmp/ccEd3BVV.s 			page 47


2591:Lib/FreeRTOS/Source/tasks.c ****                 {
2592:Lib/FreeRTOS/Source/tasks.c ****                     if( pulTotalRunTime != NULL )
2593:Lib/FreeRTOS/Source/tasks.c ****                     {
2594:Lib/FreeRTOS/Source/tasks.c ****                         #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2595:Lib/FreeRTOS/Source/tasks.c ****                             portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2596:Lib/FreeRTOS/Source/tasks.c ****                         #else
2597:Lib/FreeRTOS/Source/tasks.c ****                             *pulTotalRunTime = ( configRUN_TIME_COUNTER_TYPE ) portGET_RUN_TIME_COU
2598:Lib/FreeRTOS/Source/tasks.c ****                         #endif
2599:Lib/FreeRTOS/Source/tasks.c ****                     }
2600:Lib/FreeRTOS/Source/tasks.c ****                 }
2601:Lib/FreeRTOS/Source/tasks.c ****                 #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2602:Lib/FreeRTOS/Source/tasks.c ****                 {
2603:Lib/FreeRTOS/Source/tasks.c ****                     if( pulTotalRunTime != NULL )
2604:Lib/FreeRTOS/Source/tasks.c ****                     {
2605:Lib/FreeRTOS/Source/tasks.c ****                         *pulTotalRunTime = 0;
2606:Lib/FreeRTOS/Source/tasks.c ****                     }
2607:Lib/FreeRTOS/Source/tasks.c ****                 }
2608:Lib/FreeRTOS/Source/tasks.c ****                 #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2609:Lib/FreeRTOS/Source/tasks.c ****             }
2610:Lib/FreeRTOS/Source/tasks.c ****             else
2611:Lib/FreeRTOS/Source/tasks.c ****             {
2612:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2613:Lib/FreeRTOS/Source/tasks.c ****             }
2614:Lib/FreeRTOS/Source/tasks.c ****         }
2615:Lib/FreeRTOS/Source/tasks.c ****         ( void ) xTaskResumeAll();
2616:Lib/FreeRTOS/Source/tasks.c **** 
2617:Lib/FreeRTOS/Source/tasks.c ****         return uxTask;
2618:Lib/FreeRTOS/Source/tasks.c ****     }
2619:Lib/FreeRTOS/Source/tasks.c **** 
2620:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2621:Lib/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2622:Lib/FreeRTOS/Source/tasks.c **** 
2623:Lib/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2624:Lib/FreeRTOS/Source/tasks.c **** 
2625:Lib/FreeRTOS/Source/tasks.c ****     TaskHandle_t xTaskGetIdleTaskHandle( void )
2626:Lib/FreeRTOS/Source/tasks.c ****     {
2627:Lib/FreeRTOS/Source/tasks.c ****         /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2628:Lib/FreeRTOS/Source/tasks.c ****          * started, then xIdleTaskHandle will be NULL. */
2629:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( ( xIdleTaskHandle != NULL ) );
2630:Lib/FreeRTOS/Source/tasks.c ****         return xIdleTaskHandle;
2631:Lib/FreeRTOS/Source/tasks.c ****     }
2632:Lib/FreeRTOS/Source/tasks.c **** 
2633:Lib/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2634:Lib/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2635:Lib/FreeRTOS/Source/tasks.c **** 
2636:Lib/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2637:Lib/FreeRTOS/Source/tasks.c ****  * This is to ensure vTaskStepTick() is available when user defined low power mode
2638:Lib/FreeRTOS/Source/tasks.c ****  * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2639:Lib/FreeRTOS/Source/tasks.c ****  * 1. */
2640:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2641:Lib/FreeRTOS/Source/tasks.c **** 
2642:Lib/FreeRTOS/Source/tasks.c ****     void vTaskStepTick( TickType_t xTicksToJump )
2643:Lib/FreeRTOS/Source/tasks.c ****     {
2644:Lib/FreeRTOS/Source/tasks.c ****         /* Correct the tick count value after a period during which the tick
2645:Lib/FreeRTOS/Source/tasks.c ****          * was suppressed.  Note this does *not* call the tick hook function for
2646:Lib/FreeRTOS/Source/tasks.c ****          * each stepped tick. */
2647:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
ARM GAS  /tmp/ccEd3BVV.s 			page 48


2648:Lib/FreeRTOS/Source/tasks.c **** 
2649:Lib/FreeRTOS/Source/tasks.c ****         if( ( xTickCount + xTicksToJump ) == xNextTaskUnblockTime )
2650:Lib/FreeRTOS/Source/tasks.c ****         {
2651:Lib/FreeRTOS/Source/tasks.c ****             /* Arrange for xTickCount to reach xNextTaskUnblockTime in
2652:Lib/FreeRTOS/Source/tasks.c ****              * xTaskIncrementTick() when the scheduler resumes.  This ensures
2653:Lib/FreeRTOS/Source/tasks.c ****              * that any delayed tasks are resumed at the correct time. */
2654:Lib/FreeRTOS/Source/tasks.c ****             configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
2655:Lib/FreeRTOS/Source/tasks.c ****             configASSERT( xTicksToJump != ( TickType_t ) 0 );
2656:Lib/FreeRTOS/Source/tasks.c **** 
2657:Lib/FreeRTOS/Source/tasks.c ****             /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
2658:Lib/FreeRTOS/Source/tasks.c ****             taskENTER_CRITICAL();
2659:Lib/FreeRTOS/Source/tasks.c ****             {
2660:Lib/FreeRTOS/Source/tasks.c ****                 xPendedTicks++;
2661:Lib/FreeRTOS/Source/tasks.c ****             }
2662:Lib/FreeRTOS/Source/tasks.c ****             taskEXIT_CRITICAL();
2663:Lib/FreeRTOS/Source/tasks.c ****             xTicksToJump--;
2664:Lib/FreeRTOS/Source/tasks.c ****         }
2665:Lib/FreeRTOS/Source/tasks.c ****         else
2666:Lib/FreeRTOS/Source/tasks.c ****         {
2667:Lib/FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2668:Lib/FreeRTOS/Source/tasks.c ****         }
2669:Lib/FreeRTOS/Source/tasks.c **** 
2670:Lib/FreeRTOS/Source/tasks.c ****         xTickCount += xTicksToJump;
2671:Lib/FreeRTOS/Source/tasks.c ****         traceINCREASE_TICK_COUNT( xTicksToJump );
2672:Lib/FreeRTOS/Source/tasks.c ****     }
2673:Lib/FreeRTOS/Source/tasks.c **** 
2674:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2675:Lib/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2676:Lib/FreeRTOS/Source/tasks.c **** 
2677:Lib/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2678:Lib/FreeRTOS/Source/tasks.c **** {
2679:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xYieldOccurred;
2680:Lib/FreeRTOS/Source/tasks.c **** 
2681:Lib/FreeRTOS/Source/tasks.c ****     /* Must not be called with the scheduler suspended as the implementation
2682:Lib/FreeRTOS/Source/tasks.c ****      * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2683:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
2684:Lib/FreeRTOS/Source/tasks.c **** 
2685:Lib/FreeRTOS/Source/tasks.c ****     /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2686:Lib/FreeRTOS/Source/tasks.c ****      * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2687:Lib/FreeRTOS/Source/tasks.c ****     vTaskSuspendAll();
2688:Lib/FreeRTOS/Source/tasks.c **** 
2689:Lib/FreeRTOS/Source/tasks.c ****     /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
2690:Lib/FreeRTOS/Source/tasks.c ****     taskENTER_CRITICAL();
2691:Lib/FreeRTOS/Source/tasks.c ****     {
2692:Lib/FreeRTOS/Source/tasks.c ****         xPendedTicks += xTicksToCatchUp;
2693:Lib/FreeRTOS/Source/tasks.c ****     }
2694:Lib/FreeRTOS/Source/tasks.c ****     taskEXIT_CRITICAL();
2695:Lib/FreeRTOS/Source/tasks.c ****     xYieldOccurred = xTaskResumeAll();
2696:Lib/FreeRTOS/Source/tasks.c **** 
2697:Lib/FreeRTOS/Source/tasks.c ****     return xYieldOccurred;
2698:Lib/FreeRTOS/Source/tasks.c **** }
2699:Lib/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2700:Lib/FreeRTOS/Source/tasks.c **** 
2701:Lib/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2702:Lib/FreeRTOS/Source/tasks.c **** 
2703:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2704:Lib/FreeRTOS/Source/tasks.c ****     {
ARM GAS  /tmp/ccEd3BVV.s 			page 49


2705:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB = xTask;
2706:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
2707:Lib/FreeRTOS/Source/tasks.c **** 
2708:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( pxTCB );
2709:Lib/FreeRTOS/Source/tasks.c **** 
2710:Lib/FreeRTOS/Source/tasks.c ****         vTaskSuspendAll();
2711:Lib/FreeRTOS/Source/tasks.c ****         {
2712:Lib/FreeRTOS/Source/tasks.c ****             /* A task can only be prematurely removed from the Blocked state if
2713:Lib/FreeRTOS/Source/tasks.c ****              * it is actually in the Blocked state. */
2714:Lib/FreeRTOS/Source/tasks.c ****             if( eTaskGetState( xTask ) == eBlocked )
2715:Lib/FreeRTOS/Source/tasks.c ****             {
2716:Lib/FreeRTOS/Source/tasks.c ****                 xReturn = pdPASS;
2717:Lib/FreeRTOS/Source/tasks.c **** 
2718:Lib/FreeRTOS/Source/tasks.c ****                 /* Remove the reference to the task from the blocked list.  An
2719:Lib/FreeRTOS/Source/tasks.c ****                  * interrupt won't touch the xStateListItem because the
2720:Lib/FreeRTOS/Source/tasks.c ****                  * scheduler is suspended. */
2721:Lib/FreeRTOS/Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2722:Lib/FreeRTOS/Source/tasks.c **** 
2723:Lib/FreeRTOS/Source/tasks.c ****                 /* Is the task waiting on an event also?  If so remove it from
2724:Lib/FreeRTOS/Source/tasks.c ****                  * the event list too.  Interrupts can touch the event list item,
2725:Lib/FreeRTOS/Source/tasks.c ****                  * even though the scheduler is suspended, so a critical section
2726:Lib/FreeRTOS/Source/tasks.c ****                  * is used. */
2727:Lib/FreeRTOS/Source/tasks.c ****                 taskENTER_CRITICAL();
2728:Lib/FreeRTOS/Source/tasks.c ****                 {
2729:Lib/FreeRTOS/Source/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2730:Lib/FreeRTOS/Source/tasks.c ****                     {
2731:Lib/FreeRTOS/Source/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2732:Lib/FreeRTOS/Source/tasks.c **** 
2733:Lib/FreeRTOS/Source/tasks.c ****                         /* This lets the task know it was forcibly removed from the
2734:Lib/FreeRTOS/Source/tasks.c ****                          * blocked state so it should not re-evaluate its block time and
2735:Lib/FreeRTOS/Source/tasks.c ****                          * then block again. */
2736:Lib/FreeRTOS/Source/tasks.c ****                         pxTCB->ucDelayAborted = pdTRUE;
2737:Lib/FreeRTOS/Source/tasks.c ****                     }
2738:Lib/FreeRTOS/Source/tasks.c ****                     else
2739:Lib/FreeRTOS/Source/tasks.c ****                     {
2740:Lib/FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2741:Lib/FreeRTOS/Source/tasks.c ****                     }
2742:Lib/FreeRTOS/Source/tasks.c ****                 }
2743:Lib/FreeRTOS/Source/tasks.c ****                 taskEXIT_CRITICAL();
2744:Lib/FreeRTOS/Source/tasks.c **** 
2745:Lib/FreeRTOS/Source/tasks.c ****                 /* Place the unblocked task into the appropriate ready list. */
2746:Lib/FreeRTOS/Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
2747:Lib/FreeRTOS/Source/tasks.c **** 
2748:Lib/FreeRTOS/Source/tasks.c ****                 /* A task being unblocked cannot cause an immediate context
2749:Lib/FreeRTOS/Source/tasks.c ****                  * switch if preemption is turned off. */
2750:Lib/FreeRTOS/Source/tasks.c ****                 #if ( configUSE_PREEMPTION == 1 )
2751:Lib/FreeRTOS/Source/tasks.c ****                 {
2752:Lib/FreeRTOS/Source/tasks.c ****                     /* Preemption is on, but a context switch should only be
2753:Lib/FreeRTOS/Source/tasks.c ****                      * performed if the unblocked task has a priority that is
2754:Lib/FreeRTOS/Source/tasks.c ****                      * higher than the currently executing task. */
2755:Lib/FreeRTOS/Source/tasks.c ****                     if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2756:Lib/FreeRTOS/Source/tasks.c ****                     {
2757:Lib/FreeRTOS/Source/tasks.c ****                         /* Pend the yield to be performed when the scheduler
2758:Lib/FreeRTOS/Source/tasks.c ****                          * is unsuspended. */
2759:Lib/FreeRTOS/Source/tasks.c ****                         xYieldPending = pdTRUE;
2760:Lib/FreeRTOS/Source/tasks.c ****                     }
2761:Lib/FreeRTOS/Source/tasks.c ****                     else
ARM GAS  /tmp/ccEd3BVV.s 			page 50


2762:Lib/FreeRTOS/Source/tasks.c ****                     {
2763:Lib/FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2764:Lib/FreeRTOS/Source/tasks.c ****                     }
2765:Lib/FreeRTOS/Source/tasks.c ****                 }
2766:Lib/FreeRTOS/Source/tasks.c ****                 #endif /* configUSE_PREEMPTION */
2767:Lib/FreeRTOS/Source/tasks.c ****             }
2768:Lib/FreeRTOS/Source/tasks.c ****             else
2769:Lib/FreeRTOS/Source/tasks.c ****             {
2770:Lib/FreeRTOS/Source/tasks.c ****                 xReturn = pdFAIL;
2771:Lib/FreeRTOS/Source/tasks.c ****             }
2772:Lib/FreeRTOS/Source/tasks.c ****         }
2773:Lib/FreeRTOS/Source/tasks.c ****         ( void ) xTaskResumeAll();
2774:Lib/FreeRTOS/Source/tasks.c **** 
2775:Lib/FreeRTOS/Source/tasks.c ****         return xReturn;
2776:Lib/FreeRTOS/Source/tasks.c ****     }
2777:Lib/FreeRTOS/Source/tasks.c **** 
2778:Lib/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2779:Lib/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2780:Lib/FreeRTOS/Source/tasks.c **** 
2781:Lib/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2782:Lib/FreeRTOS/Source/tasks.c **** {
2783:Lib/FreeRTOS/Source/tasks.c ****     TCB_t * pxTCB;
2784:Lib/FreeRTOS/Source/tasks.c ****     TickType_t xItemValue;
2785:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
2786:Lib/FreeRTOS/Source/tasks.c **** 
2787:Lib/FreeRTOS/Source/tasks.c ****     /* Called by the portable layer each time a tick interrupt occurs.
2788:Lib/FreeRTOS/Source/tasks.c ****      * Increments the tick then checks to see if the new tick value will cause any
2789:Lib/FreeRTOS/Source/tasks.c ****      * tasks to be unblocked. */
2790:Lib/FreeRTOS/Source/tasks.c ****     traceTASK_INCREMENT_TICK( xTickCount );
2791:Lib/FreeRTOS/Source/tasks.c **** 
2792:Lib/FreeRTOS/Source/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
2793:Lib/FreeRTOS/Source/tasks.c ****     {
2794:Lib/FreeRTOS/Source/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this
2795:Lib/FreeRTOS/Source/tasks.c ****          * block. */
2796:Lib/FreeRTOS/Source/tasks.c ****         const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2797:Lib/FreeRTOS/Source/tasks.c **** 
2798:Lib/FreeRTOS/Source/tasks.c ****         /* Increment the RTOS tick, switching the delayed and overflowed
2799:Lib/FreeRTOS/Source/tasks.c ****          * delayed lists if it wraps to 0. */
2800:Lib/FreeRTOS/Source/tasks.c ****         xTickCount = xConstTickCount;
2801:Lib/FreeRTOS/Source/tasks.c **** 
2802:Lib/FreeRTOS/Source/tasks.c ****         if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to fa
2803:Lib/FreeRTOS/Source/tasks.c ****         {
2804:Lib/FreeRTOS/Source/tasks.c ****             taskSWITCH_DELAYED_LISTS();
2805:Lib/FreeRTOS/Source/tasks.c ****         }
2806:Lib/FreeRTOS/Source/tasks.c ****         else
2807:Lib/FreeRTOS/Source/tasks.c ****         {
2808:Lib/FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2809:Lib/FreeRTOS/Source/tasks.c ****         }
2810:Lib/FreeRTOS/Source/tasks.c **** 
2811:Lib/FreeRTOS/Source/tasks.c ****         /* See if this tick has made a timeout expire.  Tasks are stored in
2812:Lib/FreeRTOS/Source/tasks.c ****          * the  queue in the order of their wake time - meaning once one task
2813:Lib/FreeRTOS/Source/tasks.c ****          * has been found whose block time has not expired there is no need to
2814:Lib/FreeRTOS/Source/tasks.c ****          * look any further down the list. */
2815:Lib/FreeRTOS/Source/tasks.c ****         if( xConstTickCount >= xNextTaskUnblockTime )
2816:Lib/FreeRTOS/Source/tasks.c ****         {
2817:Lib/FreeRTOS/Source/tasks.c ****             for( ; ; )
2818:Lib/FreeRTOS/Source/tasks.c ****             {
ARM GAS  /tmp/ccEd3BVV.s 			page 51


2819:Lib/FreeRTOS/Source/tasks.c ****                 if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2820:Lib/FreeRTOS/Source/tasks.c ****                 {
2821:Lib/FreeRTOS/Source/tasks.c ****                     /* The delayed list is empty.  Set xNextTaskUnblockTime
2822:Lib/FreeRTOS/Source/tasks.c ****                      * to the maximum possible value so it is extremely
2823:Lib/FreeRTOS/Source/tasks.c ****                      * unlikely that the
2824:Lib/FreeRTOS/Source/tasks.c ****                      * if( xTickCount >= xNextTaskUnblockTime ) test will pass
2825:Lib/FreeRTOS/Source/tasks.c ****                      * next time through. */
2826:Lib/FreeRTOS/Source/tasks.c ****                     xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts
2827:Lib/FreeRTOS/Source/tasks.c ****                     break;
2828:Lib/FreeRTOS/Source/tasks.c ****                 }
2829:Lib/FreeRTOS/Source/tasks.c ****                 else
2830:Lib/FreeRTOS/Source/tasks.c ****                 {
2831:Lib/FreeRTOS/Source/tasks.c ****                     /* The delayed list is not empty, get the value of the
2832:Lib/FreeRTOS/Source/tasks.c ****                      * item at the head of the delayed list.  This is the time
2833:Lib/FreeRTOS/Source/tasks.c ****                      * at which the task at the head of the delayed list must
2834:Lib/FreeRTOS/Source/tasks.c ****                      * be removed from the Blocked state. */
2835:Lib/FreeRTOS/Source/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * 
2836:Lib/FreeRTOS/Source/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2837:Lib/FreeRTOS/Source/tasks.c **** 
2838:Lib/FreeRTOS/Source/tasks.c ****                     if( xConstTickCount < xItemValue )
2839:Lib/FreeRTOS/Source/tasks.c ****                     {
2840:Lib/FreeRTOS/Source/tasks.c ****                         /* It is not time to unblock this item yet, but the
2841:Lib/FreeRTOS/Source/tasks.c ****                          * item value is the time at which the task at the head
2842:Lib/FreeRTOS/Source/tasks.c ****                          * of the blocked list must be removed from the Blocked
2843:Lib/FreeRTOS/Source/tasks.c ****                          * state -  so record the item value in
2844:Lib/FreeRTOS/Source/tasks.c ****                          * xNextTaskUnblockTime. */
2845:Lib/FreeRTOS/Source/tasks.c ****                         xNextTaskUnblockTime = xItemValue;
2846:Lib/FreeRTOS/Source/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
2847:Lib/FreeRTOS/Source/tasks.c ****                     }
2848:Lib/FreeRTOS/Source/tasks.c ****                     else
2849:Lib/FreeRTOS/Source/tasks.c ****                     {
2850:Lib/FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2851:Lib/FreeRTOS/Source/tasks.c ****                     }
2852:Lib/FreeRTOS/Source/tasks.c **** 
2853:Lib/FreeRTOS/Source/tasks.c ****                     /* It is time to remove the item from the Blocked state. */
2854:Lib/FreeRTOS/Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
2855:Lib/FreeRTOS/Source/tasks.c **** 
2856:Lib/FreeRTOS/Source/tasks.c ****                     /* Is the task waiting on an event also?  If so remove
2857:Lib/FreeRTOS/Source/tasks.c ****                      * it from the event list. */
2858:Lib/FreeRTOS/Source/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2859:Lib/FreeRTOS/Source/tasks.c ****                     {
2860:Lib/FreeRTOS/Source/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
2861:Lib/FreeRTOS/Source/tasks.c ****                     }
2862:Lib/FreeRTOS/Source/tasks.c ****                     else
2863:Lib/FreeRTOS/Source/tasks.c ****                     {
2864:Lib/FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2865:Lib/FreeRTOS/Source/tasks.c ****                     }
2866:Lib/FreeRTOS/Source/tasks.c **** 
2867:Lib/FreeRTOS/Source/tasks.c ****                     /* Place the unblocked task into the appropriate ready
2868:Lib/FreeRTOS/Source/tasks.c ****                      * list. */
2869:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
2870:Lib/FreeRTOS/Source/tasks.c **** 
2871:Lib/FreeRTOS/Source/tasks.c ****                     /* A task being unblocked cannot cause an immediate
2872:Lib/FreeRTOS/Source/tasks.c ****                      * context switch if preemption is turned off. */
2873:Lib/FreeRTOS/Source/tasks.c ****                     #if ( configUSE_PREEMPTION == 1 )
2874:Lib/FreeRTOS/Source/tasks.c ****                     {
2875:Lib/FreeRTOS/Source/tasks.c ****                         /* Preemption is on, but a context switch should
ARM GAS  /tmp/ccEd3BVV.s 			page 52


2876:Lib/FreeRTOS/Source/tasks.c ****                          * only be performed if the unblocked task's
2877:Lib/FreeRTOS/Source/tasks.c ****                          * priority is higher than the currently executing
2878:Lib/FreeRTOS/Source/tasks.c ****                          * task.
2879:Lib/FreeRTOS/Source/tasks.c ****                          * The case of equal priority tasks sharing
2880:Lib/FreeRTOS/Source/tasks.c ****                          * processing time (which happens when both
2881:Lib/FreeRTOS/Source/tasks.c ****                          * preemption and time slicing are on) is
2882:Lib/FreeRTOS/Source/tasks.c ****                          * handled below.*/
2883:Lib/FreeRTOS/Source/tasks.c ****                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2884:Lib/FreeRTOS/Source/tasks.c ****                         {
2885:Lib/FreeRTOS/Source/tasks.c ****                             xSwitchRequired = pdTRUE;
2886:Lib/FreeRTOS/Source/tasks.c ****                         }
2887:Lib/FreeRTOS/Source/tasks.c ****                         else
2888:Lib/FreeRTOS/Source/tasks.c ****                         {
2889:Lib/FreeRTOS/Source/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
2890:Lib/FreeRTOS/Source/tasks.c ****                         }
2891:Lib/FreeRTOS/Source/tasks.c ****                     }
2892:Lib/FreeRTOS/Source/tasks.c ****                     #endif /* configUSE_PREEMPTION */
2893:Lib/FreeRTOS/Source/tasks.c ****                 }
2894:Lib/FreeRTOS/Source/tasks.c ****             }
2895:Lib/FreeRTOS/Source/tasks.c ****         }
2896:Lib/FreeRTOS/Source/tasks.c **** 
2897:Lib/FreeRTOS/Source/tasks.c ****         /* Tasks of equal priority to the currently running task will share
2898:Lib/FreeRTOS/Source/tasks.c ****          * processing time (time slice) if preemption is on, and the application
2899:Lib/FreeRTOS/Source/tasks.c ****          * writer has not explicitly turned time slicing off. */
2900:Lib/FreeRTOS/Source/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2901:Lib/FreeRTOS/Source/tasks.c ****         {
2902:Lib/FreeRTOS/Source/tasks.c ****             if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( U
2903:Lib/FreeRTOS/Source/tasks.c ****             {
2904:Lib/FreeRTOS/Source/tasks.c ****                 xSwitchRequired = pdTRUE;
2905:Lib/FreeRTOS/Source/tasks.c ****             }
2906:Lib/FreeRTOS/Source/tasks.c ****             else
2907:Lib/FreeRTOS/Source/tasks.c ****             {
2908:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2909:Lib/FreeRTOS/Source/tasks.c ****             }
2910:Lib/FreeRTOS/Source/tasks.c ****         }
2911:Lib/FreeRTOS/Source/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2912:Lib/FreeRTOS/Source/tasks.c **** 
2913:Lib/FreeRTOS/Source/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2914:Lib/FreeRTOS/Source/tasks.c ****         {
2915:Lib/FreeRTOS/Source/tasks.c ****             /* Guard against the tick hook being called when the pended tick
2916:Lib/FreeRTOS/Source/tasks.c ****              * count is being unwound (when the scheduler is being unlocked). */
2917:Lib/FreeRTOS/Source/tasks.c ****             if( xPendedTicks == ( TickType_t ) 0 )
2918:Lib/FreeRTOS/Source/tasks.c ****             {
2919:Lib/FreeRTOS/Source/tasks.c ****                 vApplicationTickHook();
2920:Lib/FreeRTOS/Source/tasks.c ****             }
2921:Lib/FreeRTOS/Source/tasks.c ****             else
2922:Lib/FreeRTOS/Source/tasks.c ****             {
2923:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2924:Lib/FreeRTOS/Source/tasks.c ****             }
2925:Lib/FreeRTOS/Source/tasks.c ****         }
2926:Lib/FreeRTOS/Source/tasks.c ****         #endif /* configUSE_TICK_HOOK */
2927:Lib/FreeRTOS/Source/tasks.c **** 
2928:Lib/FreeRTOS/Source/tasks.c ****         #if ( configUSE_PREEMPTION == 1 )
2929:Lib/FreeRTOS/Source/tasks.c ****         {
2930:Lib/FreeRTOS/Source/tasks.c ****             if( xYieldPending != pdFALSE )
2931:Lib/FreeRTOS/Source/tasks.c ****             {
2932:Lib/FreeRTOS/Source/tasks.c ****                 xSwitchRequired = pdTRUE;
ARM GAS  /tmp/ccEd3BVV.s 			page 53


2933:Lib/FreeRTOS/Source/tasks.c ****             }
2934:Lib/FreeRTOS/Source/tasks.c ****             else
2935:Lib/FreeRTOS/Source/tasks.c ****             {
2936:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2937:Lib/FreeRTOS/Source/tasks.c ****             }
2938:Lib/FreeRTOS/Source/tasks.c ****         }
2939:Lib/FreeRTOS/Source/tasks.c ****         #endif /* configUSE_PREEMPTION */
2940:Lib/FreeRTOS/Source/tasks.c ****     }
2941:Lib/FreeRTOS/Source/tasks.c ****     else
2942:Lib/FreeRTOS/Source/tasks.c ****     {
2943:Lib/FreeRTOS/Source/tasks.c ****         ++xPendedTicks;
2944:Lib/FreeRTOS/Source/tasks.c **** 
2945:Lib/FreeRTOS/Source/tasks.c ****         /* The tick hook gets called at regular intervals, even if the
2946:Lib/FreeRTOS/Source/tasks.c ****          * scheduler is locked. */
2947:Lib/FreeRTOS/Source/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2948:Lib/FreeRTOS/Source/tasks.c ****         {
2949:Lib/FreeRTOS/Source/tasks.c ****             vApplicationTickHook();
2950:Lib/FreeRTOS/Source/tasks.c ****         }
2951:Lib/FreeRTOS/Source/tasks.c ****         #endif
2952:Lib/FreeRTOS/Source/tasks.c ****     }
2953:Lib/FreeRTOS/Source/tasks.c **** 
2954:Lib/FreeRTOS/Source/tasks.c ****     return xSwitchRequired;
2955:Lib/FreeRTOS/Source/tasks.c **** }
2956:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2957:Lib/FreeRTOS/Source/tasks.c **** 
2958:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2959:Lib/FreeRTOS/Source/tasks.c **** 
2960:Lib/FreeRTOS/Source/tasks.c ****     void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
2961:Lib/FreeRTOS/Source/tasks.c ****                                      TaskHookFunction_t pxHookFunction )
2962:Lib/FreeRTOS/Source/tasks.c ****     {
2963:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * xTCB;
2964:Lib/FreeRTOS/Source/tasks.c **** 
2965:Lib/FreeRTOS/Source/tasks.c ****         /* If xTask is NULL then it is the task hook of the calling task that is
2966:Lib/FreeRTOS/Source/tasks.c ****          * getting set. */
2967:Lib/FreeRTOS/Source/tasks.c ****         if( xTask == NULL )
2968:Lib/FreeRTOS/Source/tasks.c ****         {
2969:Lib/FreeRTOS/Source/tasks.c ****             xTCB = ( TCB_t * ) pxCurrentTCB;
2970:Lib/FreeRTOS/Source/tasks.c ****         }
2971:Lib/FreeRTOS/Source/tasks.c ****         else
2972:Lib/FreeRTOS/Source/tasks.c ****         {
2973:Lib/FreeRTOS/Source/tasks.c ****             xTCB = xTask;
2974:Lib/FreeRTOS/Source/tasks.c ****         }
2975:Lib/FreeRTOS/Source/tasks.c **** 
2976:Lib/FreeRTOS/Source/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2977:Lib/FreeRTOS/Source/tasks.c ****          * the value can be accessed from an interrupt. */
2978:Lib/FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
2979:Lib/FreeRTOS/Source/tasks.c ****         {
2980:Lib/FreeRTOS/Source/tasks.c ****             xTCB->pxTaskTag = pxHookFunction;
2981:Lib/FreeRTOS/Source/tasks.c ****         }
2982:Lib/FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
2983:Lib/FreeRTOS/Source/tasks.c ****     }
2984:Lib/FreeRTOS/Source/tasks.c **** 
2985:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2986:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2987:Lib/FreeRTOS/Source/tasks.c **** 
2988:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2989:Lib/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccEd3BVV.s 			page 54


2990:Lib/FreeRTOS/Source/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2991:Lib/FreeRTOS/Source/tasks.c ****     {
2992:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
2993:Lib/FreeRTOS/Source/tasks.c ****         TaskHookFunction_t xReturn;
2994:Lib/FreeRTOS/Source/tasks.c **** 
2995:Lib/FreeRTOS/Source/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2996:Lib/FreeRTOS/Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2997:Lib/FreeRTOS/Source/tasks.c **** 
2998:Lib/FreeRTOS/Source/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2999:Lib/FreeRTOS/Source/tasks.c ****          * the value can be accessed from an interrupt. */
3000:Lib/FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
3001:Lib/FreeRTOS/Source/tasks.c ****         {
3002:Lib/FreeRTOS/Source/tasks.c ****             xReturn = pxTCB->pxTaskTag;
3003:Lib/FreeRTOS/Source/tasks.c ****         }
3004:Lib/FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
3005:Lib/FreeRTOS/Source/tasks.c **** 
3006:Lib/FreeRTOS/Source/tasks.c ****         return xReturn;
3007:Lib/FreeRTOS/Source/tasks.c ****     }
3008:Lib/FreeRTOS/Source/tasks.c **** 
3009:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
3010:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3011:Lib/FreeRTOS/Source/tasks.c **** 
3012:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
3013:Lib/FreeRTOS/Source/tasks.c **** 
3014:Lib/FreeRTOS/Source/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
3015:Lib/FreeRTOS/Source/tasks.c ****     {
3016:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
3017:Lib/FreeRTOS/Source/tasks.c ****         TaskHookFunction_t xReturn;
3018:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
3019:Lib/FreeRTOS/Source/tasks.c **** 
3020:Lib/FreeRTOS/Source/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
3021:Lib/FreeRTOS/Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3022:Lib/FreeRTOS/Source/tasks.c **** 
3023:Lib/FreeRTOS/Source/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
3024:Lib/FreeRTOS/Source/tasks.c ****          * the value can be accessed from an interrupt. */
3025:Lib/FreeRTOS/Source/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
3026:Lib/FreeRTOS/Source/tasks.c ****         {
3027:Lib/FreeRTOS/Source/tasks.c ****             xReturn = pxTCB->pxTaskTag;
3028:Lib/FreeRTOS/Source/tasks.c ****         }
3029:Lib/FreeRTOS/Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
3030:Lib/FreeRTOS/Source/tasks.c **** 
3031:Lib/FreeRTOS/Source/tasks.c ****         return xReturn;
3032:Lib/FreeRTOS/Source/tasks.c ****     }
3033:Lib/FreeRTOS/Source/tasks.c **** 
3034:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
3035:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3036:Lib/FreeRTOS/Source/tasks.c **** 
3037:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
3038:Lib/FreeRTOS/Source/tasks.c **** 
3039:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask,
3040:Lib/FreeRTOS/Source/tasks.c ****                                              void * pvParameter )
3041:Lib/FreeRTOS/Source/tasks.c ****     {
3042:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * xTCB;
3043:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
3044:Lib/FreeRTOS/Source/tasks.c **** 
3045:Lib/FreeRTOS/Source/tasks.c ****         /* If xTask is NULL then we are calling our own task hook. */
3046:Lib/FreeRTOS/Source/tasks.c ****         if( xTask == NULL )
ARM GAS  /tmp/ccEd3BVV.s 			page 55


3047:Lib/FreeRTOS/Source/tasks.c ****         {
3048:Lib/FreeRTOS/Source/tasks.c ****             xTCB = pxCurrentTCB;
3049:Lib/FreeRTOS/Source/tasks.c ****         }
3050:Lib/FreeRTOS/Source/tasks.c ****         else
3051:Lib/FreeRTOS/Source/tasks.c ****         {
3052:Lib/FreeRTOS/Source/tasks.c ****             xTCB = xTask;
3053:Lib/FreeRTOS/Source/tasks.c ****         }
3054:Lib/FreeRTOS/Source/tasks.c **** 
3055:Lib/FreeRTOS/Source/tasks.c ****         if( xTCB->pxTaskTag != NULL )
3056:Lib/FreeRTOS/Source/tasks.c ****         {
3057:Lib/FreeRTOS/Source/tasks.c ****             xReturn = xTCB->pxTaskTag( pvParameter );
3058:Lib/FreeRTOS/Source/tasks.c ****         }
3059:Lib/FreeRTOS/Source/tasks.c ****         else
3060:Lib/FreeRTOS/Source/tasks.c ****         {
3061:Lib/FreeRTOS/Source/tasks.c ****             xReturn = pdFAIL;
3062:Lib/FreeRTOS/Source/tasks.c ****         }
3063:Lib/FreeRTOS/Source/tasks.c **** 
3064:Lib/FreeRTOS/Source/tasks.c ****         return xReturn;
3065:Lib/FreeRTOS/Source/tasks.c ****     }
3066:Lib/FreeRTOS/Source/tasks.c **** 
3067:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
3068:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3069:Lib/FreeRTOS/Source/tasks.c **** 
3070:Lib/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
3071:Lib/FreeRTOS/Source/tasks.c **** {
3072:Lib/FreeRTOS/Source/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
3073:Lib/FreeRTOS/Source/tasks.c ****     {
3074:Lib/FreeRTOS/Source/tasks.c ****         /* The scheduler is currently suspended - do not allow a context
3075:Lib/FreeRTOS/Source/tasks.c ****          * switch. */
3076:Lib/FreeRTOS/Source/tasks.c ****         xYieldPending = pdTRUE;
3077:Lib/FreeRTOS/Source/tasks.c ****     }
3078:Lib/FreeRTOS/Source/tasks.c ****     else
3079:Lib/FreeRTOS/Source/tasks.c ****     {
3080:Lib/FreeRTOS/Source/tasks.c ****         xYieldPending = pdFALSE;
3081:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_OUT();
3082:Lib/FreeRTOS/Source/tasks.c **** 
3083:Lib/FreeRTOS/Source/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3084:Lib/FreeRTOS/Source/tasks.c ****         {
3085:Lib/FreeRTOS/Source/tasks.c ****             #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3086:Lib/FreeRTOS/Source/tasks.c ****                 portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3087:Lib/FreeRTOS/Source/tasks.c ****             #else
3088:Lib/FreeRTOS/Source/tasks.c ****                 ulTotalRunTime = ( configRUN_TIME_COUNTER_TYPE ) portGET_RUN_TIME_COUNTER_VALUE();
3089:Lib/FreeRTOS/Source/tasks.c ****             #endif
3090:Lib/FreeRTOS/Source/tasks.c **** 
3091:Lib/FreeRTOS/Source/tasks.c ****             /* Add the amount of time the task has been running to the
3092:Lib/FreeRTOS/Source/tasks.c ****              * accumulated time so far.  The time the task started running was
3093:Lib/FreeRTOS/Source/tasks.c ****              * stored in ulTaskSwitchedInTime.  Note that there is no overflow
3094:Lib/FreeRTOS/Source/tasks.c ****              * protection here so count values are only valid until the timer
3095:Lib/FreeRTOS/Source/tasks.c ****              * overflows.  The guard against negative values is to protect
3096:Lib/FreeRTOS/Source/tasks.c ****              * against suspect run time stat counter implementations - which
3097:Lib/FreeRTOS/Source/tasks.c ****              * are provided by the application, not the kernel. */
3098:Lib/FreeRTOS/Source/tasks.c ****             if( ulTotalRunTime > ulTaskSwitchedInTime )
3099:Lib/FreeRTOS/Source/tasks.c ****             {
3100:Lib/FreeRTOS/Source/tasks.c ****                 pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3101:Lib/FreeRTOS/Source/tasks.c ****             }
3102:Lib/FreeRTOS/Source/tasks.c ****             else
3103:Lib/FreeRTOS/Source/tasks.c ****             {
ARM GAS  /tmp/ccEd3BVV.s 			page 56


3104:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3105:Lib/FreeRTOS/Source/tasks.c ****             }
3106:Lib/FreeRTOS/Source/tasks.c **** 
3107:Lib/FreeRTOS/Source/tasks.c ****             ulTaskSwitchedInTime = ulTotalRunTime;
3108:Lib/FreeRTOS/Source/tasks.c ****         }
3109:Lib/FreeRTOS/Source/tasks.c ****         #endif /* configGENERATE_RUN_TIME_STATS */
3110:Lib/FreeRTOS/Source/tasks.c **** 
3111:Lib/FreeRTOS/Source/tasks.c ****         /* Check for stack overflow, if configured. */
3112:Lib/FreeRTOS/Source/tasks.c ****         taskCHECK_FOR_STACK_OVERFLOW();
3113:Lib/FreeRTOS/Source/tasks.c **** 
3114:Lib/FreeRTOS/Source/tasks.c ****         /* Before the currently running task is switched out, save its errno. */
3115:Lib/FreeRTOS/Source/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3116:Lib/FreeRTOS/Source/tasks.c ****         {
3117:Lib/FreeRTOS/Source/tasks.c ****             pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3118:Lib/FreeRTOS/Source/tasks.c ****         }
3119:Lib/FreeRTOS/Source/tasks.c ****         #endif
3120:Lib/FreeRTOS/Source/tasks.c **** 
3121:Lib/FreeRTOS/Source/tasks.c ****         /* Select a new task to run using either the generic C or port
3122:Lib/FreeRTOS/Source/tasks.c ****          * optimised asm code. */
3123:Lib/FreeRTOS/Source/tasks.c ****         taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with
3124:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
3125:Lib/FreeRTOS/Source/tasks.c **** 
3126:Lib/FreeRTOS/Source/tasks.c ****         /* After the new task is switched in, update the global errno. */
3127:Lib/FreeRTOS/Source/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3128:Lib/FreeRTOS/Source/tasks.c ****         {
3129:Lib/FreeRTOS/Source/tasks.c ****             FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3130:Lib/FreeRTOS/Source/tasks.c ****         }
3131:Lib/FreeRTOS/Source/tasks.c ****         #endif
3132:Lib/FreeRTOS/Source/tasks.c **** 
3133:Lib/FreeRTOS/Source/tasks.c ****         #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
3134:Lib/FreeRTOS/Source/tasks.c ****         {
3135:Lib/FreeRTOS/Source/tasks.c ****             /* Switch C-Runtime's TLS Block to point to the TLS
3136:Lib/FreeRTOS/Source/tasks.c ****              * Block specific to this task. */
3137:Lib/FreeRTOS/Source/tasks.c ****             configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
3138:Lib/FreeRTOS/Source/tasks.c ****         }
3139:Lib/FreeRTOS/Source/tasks.c ****         #endif
3140:Lib/FreeRTOS/Source/tasks.c ****     }
3141:Lib/FreeRTOS/Source/tasks.c **** }
3142:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3143:Lib/FreeRTOS/Source/tasks.c **** 
3144:Lib/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList,
3145:Lib/FreeRTOS/Source/tasks.c ****                             const TickType_t xTicksToWait )
3146:Lib/FreeRTOS/Source/tasks.c **** {
3147:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxEventList );
3148:Lib/FreeRTOS/Source/tasks.c **** 
3149:Lib/FreeRTOS/Source/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3150:Lib/FreeRTOS/Source/tasks.c ****      * SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3151:Lib/FreeRTOS/Source/tasks.c **** 
3152:Lib/FreeRTOS/Source/tasks.c ****     /* Place the event list item of the TCB in the appropriate event list.
3153:Lib/FreeRTOS/Source/tasks.c ****      * This is placed in the list in priority order so the highest priority task
3154:Lib/FreeRTOS/Source/tasks.c ****      * is the first to be woken by the event.
3155:Lib/FreeRTOS/Source/tasks.c ****      *
3156:Lib/FreeRTOS/Source/tasks.c ****      * Note: Lists are sorted in ascending order by ListItem_t.xItemValue.
3157:Lib/FreeRTOS/Source/tasks.c ****      * Normally, the xItemValue of a TCB's ListItem_t members is:
3158:Lib/FreeRTOS/Source/tasks.c ****      *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
3159:Lib/FreeRTOS/Source/tasks.c ****      * Therefore, the event list is sorted in descending priority order.
3160:Lib/FreeRTOS/Source/tasks.c ****      *
ARM GAS  /tmp/ccEd3BVV.s 			page 57


3161:Lib/FreeRTOS/Source/tasks.c ****      * The queue that contains the event list is locked, preventing
3162:Lib/FreeRTOS/Source/tasks.c ****      * simultaneous access from interrupts. */
3163:Lib/FreeRTOS/Source/tasks.c ****     vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3164:Lib/FreeRTOS/Source/tasks.c **** 
3165:Lib/FreeRTOS/Source/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3166:Lib/FreeRTOS/Source/tasks.c **** }
3167:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3168:Lib/FreeRTOS/Source/tasks.c **** 
3169:Lib/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
3170:Lib/FreeRTOS/Source/tasks.c ****                                      const TickType_t xItemValue,
3171:Lib/FreeRTOS/Source/tasks.c ****                                      const TickType_t xTicksToWait )
3172:Lib/FreeRTOS/Source/tasks.c **** {
3173:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxEventList );
3174:Lib/FreeRTOS/Source/tasks.c **** 
3175:Lib/FreeRTOS/Source/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3176:Lib/FreeRTOS/Source/tasks.c ****      * the event groups implementation. */
3177:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
3178:Lib/FreeRTOS/Source/tasks.c **** 
3179:Lib/FreeRTOS/Source/tasks.c ****     /* Store the item value in the event list item.  It is safe to access the
3180:Lib/FreeRTOS/Source/tasks.c ****      * event list item here as interrupts won't access the event list item of a
3181:Lib/FreeRTOS/Source/tasks.c ****      * task that is not in the Blocked state. */
3182:Lib/FreeRTOS/Source/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VA
3183:Lib/FreeRTOS/Source/tasks.c **** 
3184:Lib/FreeRTOS/Source/tasks.c ****     /* Place the event list item of the TCB at the end of the appropriate event
3185:Lib/FreeRTOS/Source/tasks.c ****      * list.  It is safe to access the event list here because it is part of an
3186:Lib/FreeRTOS/Source/tasks.c ****      * event group implementation - and interrupts don't access event groups
3187:Lib/FreeRTOS/Source/tasks.c ****      * directly (instead they access them indirectly by pending function calls to
3188:Lib/FreeRTOS/Source/tasks.c ****      * the task level). */
3189:Lib/FreeRTOS/Source/tasks.c ****     listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3190:Lib/FreeRTOS/Source/tasks.c **** 
3191:Lib/FreeRTOS/Source/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3192:Lib/FreeRTOS/Source/tasks.c **** }
3193:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3194:Lib/FreeRTOS/Source/tasks.c **** 
3195:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_TIMERS == 1 )
3196:Lib/FreeRTOS/Source/tasks.c **** 
3197:Lib/FreeRTOS/Source/tasks.c ****     void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
3198:Lib/FreeRTOS/Source/tasks.c ****                                           TickType_t xTicksToWait,
3199:Lib/FreeRTOS/Source/tasks.c ****                                           const BaseType_t xWaitIndefinitely )
3200:Lib/FreeRTOS/Source/tasks.c ****     {
3201:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( pxEventList );
3202:Lib/FreeRTOS/Source/tasks.c **** 
3203:Lib/FreeRTOS/Source/tasks.c ****         /* This function should not be called by application code hence the
3204:Lib/FreeRTOS/Source/tasks.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
3205:Lib/FreeRTOS/Source/tasks.c ****          * designed for use by kernel code, and has special calling requirements -
3206:Lib/FreeRTOS/Source/tasks.c ****          * it should be called with the scheduler suspended. */
3207:Lib/FreeRTOS/Source/tasks.c **** 
3208:Lib/FreeRTOS/Source/tasks.c **** 
3209:Lib/FreeRTOS/Source/tasks.c ****         /* Place the event list item of the TCB in the appropriate event list.
3210:Lib/FreeRTOS/Source/tasks.c ****          * In this case it is assume that this is the only task that is going to
3211:Lib/FreeRTOS/Source/tasks.c ****          * be waiting on this event list, so the faster vListInsertEnd() function
3212:Lib/FreeRTOS/Source/tasks.c ****          * can be used in place of vListInsert. */
3213:Lib/FreeRTOS/Source/tasks.c ****         listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3214:Lib/FreeRTOS/Source/tasks.c **** 
3215:Lib/FreeRTOS/Source/tasks.c ****         /* If the task should block indefinitely then set the block time to a
3216:Lib/FreeRTOS/Source/tasks.c ****          * value that will be recognised as an indefinite delay inside the
3217:Lib/FreeRTOS/Source/tasks.c ****          * prvAddCurrentTaskToDelayedList() function. */
ARM GAS  /tmp/ccEd3BVV.s 			page 58


3218:Lib/FreeRTOS/Source/tasks.c ****         if( xWaitIndefinitely != pdFALSE )
3219:Lib/FreeRTOS/Source/tasks.c ****         {
3220:Lib/FreeRTOS/Source/tasks.c ****             xTicksToWait = portMAX_DELAY;
3221:Lib/FreeRTOS/Source/tasks.c ****         }
3222:Lib/FreeRTOS/Source/tasks.c **** 
3223:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3224:Lib/FreeRTOS/Source/tasks.c ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3225:Lib/FreeRTOS/Source/tasks.c ****     }
3226:Lib/FreeRTOS/Source/tasks.c **** 
3227:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3228:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3229:Lib/FreeRTOS/Source/tasks.c **** 
3230:Lib/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3231:Lib/FreeRTOS/Source/tasks.c **** {
3232:Lib/FreeRTOS/Source/tasks.c ****     TCB_t * pxUnblockedTCB;
3233:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xReturn;
3234:Lib/FreeRTOS/Source/tasks.c **** 
3235:Lib/FreeRTOS/Source/tasks.c ****     /* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3236:Lib/FreeRTOS/Source/tasks.c ****      * called from a critical section within an ISR. */
3237:Lib/FreeRTOS/Source/tasks.c **** 
3238:Lib/FreeRTOS/Source/tasks.c ****     /* The event list is sorted in priority order, so the first in the list can
3239:Lib/FreeRTOS/Source/tasks.c ****      * be removed as it is known to be the highest priority.  Remove the TCB from
3240:Lib/FreeRTOS/Source/tasks.c ****      * the delayed list, and add it to the ready list.
3241:Lib/FreeRTOS/Source/tasks.c ****      *
3242:Lib/FreeRTOS/Source/tasks.c ****      * If an event is for a queue that is locked then this function will never
3243:Lib/FreeRTOS/Source/tasks.c ****      * get called - the lock count on the queue will get modified instead.  This
3244:Lib/FreeRTOS/Source/tasks.c ****      * means exclusive access to the event list is guaranteed here.
3245:Lib/FreeRTOS/Source/tasks.c ****      *
3246:Lib/FreeRTOS/Source/tasks.c ****      * This function assumes that a check has already been made to ensure that
3247:Lib/FreeRTOS/Source/tasks.c ****      * pxEventList is not empty. */
3248:Lib/FreeRTOS/Source/tasks.c ****     pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as th
3249:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxUnblockedTCB );
3250:Lib/FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
3251:Lib/FreeRTOS/Source/tasks.c **** 
3252:Lib/FreeRTOS/Source/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
3253:Lib/FreeRTOS/Source/tasks.c ****     {
3254:Lib/FreeRTOS/Source/tasks.c ****         listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
3255:Lib/FreeRTOS/Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
3256:Lib/FreeRTOS/Source/tasks.c **** 
3257:Lib/FreeRTOS/Source/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3258:Lib/FreeRTOS/Source/tasks.c ****         {
3259:Lib/FreeRTOS/Source/tasks.c ****             /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3260:Lib/FreeRTOS/Source/tasks.c ****              * might be set to the blocked task's time out time.  If the task is
3261:Lib/FreeRTOS/Source/tasks.c ****              * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3262:Lib/FreeRTOS/Source/tasks.c ****              * normally left unchanged, because it is automatically reset to a new
3263:Lib/FreeRTOS/Source/tasks.c ****              * value when the tick count equals xNextTaskUnblockTime.  However if
3264:Lib/FreeRTOS/Source/tasks.c ****              * tickless idling is used it might be more important to enter sleep mode
3265:Lib/FreeRTOS/Source/tasks.c ****              * at the earliest possible time - so reset xNextTaskUnblockTime here to
3266:Lib/FreeRTOS/Source/tasks.c ****              * ensure it is updated at the earliest possible time. */
3267:Lib/FreeRTOS/Source/tasks.c ****             prvResetNextTaskUnblockTime();
3268:Lib/FreeRTOS/Source/tasks.c ****         }
3269:Lib/FreeRTOS/Source/tasks.c ****         #endif
3270:Lib/FreeRTOS/Source/tasks.c ****     }
3271:Lib/FreeRTOS/Source/tasks.c ****     else
3272:Lib/FreeRTOS/Source/tasks.c ****     {
3273:Lib/FreeRTOS/Source/tasks.c ****         /* The delayed and ready lists cannot be accessed, so hold this task
3274:Lib/FreeRTOS/Source/tasks.c ****          * pending until the scheduler is resumed. */
ARM GAS  /tmp/ccEd3BVV.s 			page 59


3275:Lib/FreeRTOS/Source/tasks.c ****         listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3276:Lib/FreeRTOS/Source/tasks.c ****     }
3277:Lib/FreeRTOS/Source/tasks.c **** 
3278:Lib/FreeRTOS/Source/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3279:Lib/FreeRTOS/Source/tasks.c ****     {
3280:Lib/FreeRTOS/Source/tasks.c ****         /* Return true if the task removed from the event list has a higher
3281:Lib/FreeRTOS/Source/tasks.c ****          * priority than the calling task.  This allows the calling task to know if
3282:Lib/FreeRTOS/Source/tasks.c ****          * it should force a context switch now. */
3283:Lib/FreeRTOS/Source/tasks.c ****         xReturn = pdTRUE;
3284:Lib/FreeRTOS/Source/tasks.c **** 
3285:Lib/FreeRTOS/Source/tasks.c ****         /* Mark that a yield is pending in case the user is not using the
3286:Lib/FreeRTOS/Source/tasks.c ****          * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3287:Lib/FreeRTOS/Source/tasks.c ****         xYieldPending = pdTRUE;
3288:Lib/FreeRTOS/Source/tasks.c ****     }
3289:Lib/FreeRTOS/Source/tasks.c ****     else
3290:Lib/FreeRTOS/Source/tasks.c ****     {
3291:Lib/FreeRTOS/Source/tasks.c ****         xReturn = pdFALSE;
3292:Lib/FreeRTOS/Source/tasks.c ****     }
3293:Lib/FreeRTOS/Source/tasks.c **** 
3294:Lib/FreeRTOS/Source/tasks.c ****     return xReturn;
3295:Lib/FreeRTOS/Source/tasks.c **** }
3296:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3297:Lib/FreeRTOS/Source/tasks.c **** 
3298:Lib/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
3299:Lib/FreeRTOS/Source/tasks.c ****                                         const TickType_t xItemValue )
3300:Lib/FreeRTOS/Source/tasks.c **** {
3301:Lib/FreeRTOS/Source/tasks.c ****     TCB_t * pxUnblockedTCB;
3302:Lib/FreeRTOS/Source/tasks.c **** 
3303:Lib/FreeRTOS/Source/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3304:Lib/FreeRTOS/Source/tasks.c ****      * the event flags implementation. */
3305:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
3306:Lib/FreeRTOS/Source/tasks.c **** 
3307:Lib/FreeRTOS/Source/tasks.c ****     /* Store the new item value in the event list. */
3308:Lib/FreeRTOS/Source/tasks.c ****     listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3309:Lib/FreeRTOS/Source/tasks.c **** 
3310:Lib/FreeRTOS/Source/tasks.c ****     /* Remove the event list form the event flag.  Interrupts do not access
3311:Lib/FreeRTOS/Source/tasks.c ****      * event flags. */
3312:Lib/FreeRTOS/Source/tasks.c ****     pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as th
3313:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxUnblockedTCB );
3314:Lib/FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
3315:Lib/FreeRTOS/Source/tasks.c **** 
3316:Lib/FreeRTOS/Source/tasks.c ****     #if ( configUSE_TICKLESS_IDLE != 0 )
3317:Lib/FreeRTOS/Source/tasks.c ****     {
3318:Lib/FreeRTOS/Source/tasks.c ****         /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3319:Lib/FreeRTOS/Source/tasks.c ****          * might be set to the blocked task's time out time.  If the task is
3320:Lib/FreeRTOS/Source/tasks.c ****          * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3321:Lib/FreeRTOS/Source/tasks.c ****          * normally left unchanged, because it is automatically reset to a new
3322:Lib/FreeRTOS/Source/tasks.c ****          * value when the tick count equals xNextTaskUnblockTime.  However if
3323:Lib/FreeRTOS/Source/tasks.c ****          * tickless idling is used it might be more important to enter sleep mode
3324:Lib/FreeRTOS/Source/tasks.c ****          * at the earliest possible time - so reset xNextTaskUnblockTime here to
3325:Lib/FreeRTOS/Source/tasks.c ****          * ensure it is updated at the earliest possible time. */
3326:Lib/FreeRTOS/Source/tasks.c ****         prvResetNextTaskUnblockTime();
3327:Lib/FreeRTOS/Source/tasks.c ****     }
3328:Lib/FreeRTOS/Source/tasks.c ****     #endif
3329:Lib/FreeRTOS/Source/tasks.c **** 
3330:Lib/FreeRTOS/Source/tasks.c ****     /* Remove the task from the delayed list and add it to the ready list.  The
3331:Lib/FreeRTOS/Source/tasks.c ****      * scheduler is suspended so interrupts will not be accessing the ready
ARM GAS  /tmp/ccEd3BVV.s 			page 60


3332:Lib/FreeRTOS/Source/tasks.c ****      * lists. */
3333:Lib/FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
3334:Lib/FreeRTOS/Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
3335:Lib/FreeRTOS/Source/tasks.c **** 
3336:Lib/FreeRTOS/Source/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3337:Lib/FreeRTOS/Source/tasks.c ****     {
3338:Lib/FreeRTOS/Source/tasks.c ****         /* The unblocked task has a priority above that of the calling task, so
3339:Lib/FreeRTOS/Source/tasks.c ****          * a context switch is required.  This function is called with the
3340:Lib/FreeRTOS/Source/tasks.c ****          * scheduler suspended so xYieldPending is set so the context switch
3341:Lib/FreeRTOS/Source/tasks.c ****          * occurs immediately that the scheduler is resumed (unsuspended). */
3342:Lib/FreeRTOS/Source/tasks.c ****         xYieldPending = pdTRUE;
3343:Lib/FreeRTOS/Source/tasks.c ****     }
3344:Lib/FreeRTOS/Source/tasks.c **** }
3345:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3346:Lib/FreeRTOS/Source/tasks.c **** 
3347:Lib/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3348:Lib/FreeRTOS/Source/tasks.c **** {
3349:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxTimeOut );
3350:Lib/FreeRTOS/Source/tasks.c ****     taskENTER_CRITICAL();
3351:Lib/FreeRTOS/Source/tasks.c ****     {
3352:Lib/FreeRTOS/Source/tasks.c ****         pxTimeOut->xOverflowCount = xNumOfOverflows;
3353:Lib/FreeRTOS/Source/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
3354:Lib/FreeRTOS/Source/tasks.c ****     }
3355:Lib/FreeRTOS/Source/tasks.c ****     taskEXIT_CRITICAL();
3356:Lib/FreeRTOS/Source/tasks.c **** }
3357:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3358:Lib/FreeRTOS/Source/tasks.c **** 
3359:Lib/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3360:Lib/FreeRTOS/Source/tasks.c **** {
3361:Lib/FreeRTOS/Source/tasks.c ****     /* For internal use only as it does not use a critical section. */
3362:Lib/FreeRTOS/Source/tasks.c ****     pxTimeOut->xOverflowCount = xNumOfOverflows;
3363:Lib/FreeRTOS/Source/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
3364:Lib/FreeRTOS/Source/tasks.c **** }
3365:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3366:Lib/FreeRTOS/Source/tasks.c **** 
3367:Lib/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
3368:Lib/FreeRTOS/Source/tasks.c ****                                  TickType_t * const pxTicksToWait )
3369:Lib/FreeRTOS/Source/tasks.c **** {
3370:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xReturn;
3371:Lib/FreeRTOS/Source/tasks.c **** 
3372:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxTimeOut );
3373:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxTicksToWait );
3374:Lib/FreeRTOS/Source/tasks.c **** 
3375:Lib/FreeRTOS/Source/tasks.c ****     taskENTER_CRITICAL();
3376:Lib/FreeRTOS/Source/tasks.c ****     {
3377:Lib/FreeRTOS/Source/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this block. */
3378:Lib/FreeRTOS/Source/tasks.c ****         const TickType_t xConstTickCount = xTickCount;
3379:Lib/FreeRTOS/Source/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3380:Lib/FreeRTOS/Source/tasks.c **** 
3381:Lib/FreeRTOS/Source/tasks.c ****         #if ( INCLUDE_xTaskAbortDelay == 1 )
3382:Lib/FreeRTOS/Source/tasks.c ****             if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3383:Lib/FreeRTOS/Source/tasks.c ****             {
3384:Lib/FreeRTOS/Source/tasks.c ****                 /* The delay was aborted, which is not the same as a time out,
3385:Lib/FreeRTOS/Source/tasks.c ****                  * but has the same result. */
3386:Lib/FreeRTOS/Source/tasks.c ****                 pxCurrentTCB->ucDelayAborted = pdFALSE;
3387:Lib/FreeRTOS/Source/tasks.c ****                 xReturn = pdTRUE;
3388:Lib/FreeRTOS/Source/tasks.c ****             }
ARM GAS  /tmp/ccEd3BVV.s 			page 61


3389:Lib/FreeRTOS/Source/tasks.c ****             else
3390:Lib/FreeRTOS/Source/tasks.c ****         #endif
3391:Lib/FreeRTOS/Source/tasks.c **** 
3392:Lib/FreeRTOS/Source/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3393:Lib/FreeRTOS/Source/tasks.c ****             if( *pxTicksToWait == portMAX_DELAY )
3394:Lib/FreeRTOS/Source/tasks.c ****             {
3395:Lib/FreeRTOS/Source/tasks.c ****                 /* If INCLUDE_vTaskSuspend is set to 1 and the block time
3396:Lib/FreeRTOS/Source/tasks.c ****                  * specified is the maximum block time then the task should block
3397:Lib/FreeRTOS/Source/tasks.c ****                  * indefinitely, and therefore never time out. */
3398:Lib/FreeRTOS/Source/tasks.c ****                 xReturn = pdFALSE;
3399:Lib/FreeRTOS/Source/tasks.c ****             }
3400:Lib/FreeRTOS/Source/tasks.c ****             else
3401:Lib/FreeRTOS/Source/tasks.c ****         #endif
3402:Lib/FreeRTOS/Source/tasks.c **** 
3403:Lib/FreeRTOS/Source/tasks.c ****         if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTi
3404:Lib/FreeRTOS/Source/tasks.c ****         {
3405:Lib/FreeRTOS/Source/tasks.c ****             /* The tick count is greater than the time at which
3406:Lib/FreeRTOS/Source/tasks.c ****              * vTaskSetTimeout() was called, but has also overflowed since
3407:Lib/FreeRTOS/Source/tasks.c ****              * vTaskSetTimeOut() was called.  It must have wrapped all the way
3408:Lib/FreeRTOS/Source/tasks.c ****              * around and gone past again. This passed since vTaskSetTimeout()
3409:Lib/FreeRTOS/Source/tasks.c ****              * was called. */
3410:Lib/FreeRTOS/Source/tasks.c ****             xReturn = pdTRUE;
3411:Lib/FreeRTOS/Source/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
3412:Lib/FreeRTOS/Source/tasks.c ****         }
3413:Lib/FreeRTOS/Source/tasks.c ****         else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant wi
3414:Lib/FreeRTOS/Source/tasks.c ****         {
3415:Lib/FreeRTOS/Source/tasks.c ****             /* Not a genuine timeout. Adjust parameters for time remaining. */
3416:Lib/FreeRTOS/Source/tasks.c ****             *pxTicksToWait -= xElapsedTime;
3417:Lib/FreeRTOS/Source/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
3418:Lib/FreeRTOS/Source/tasks.c ****             xReturn = pdFALSE;
3419:Lib/FreeRTOS/Source/tasks.c ****         }
3420:Lib/FreeRTOS/Source/tasks.c ****         else
3421:Lib/FreeRTOS/Source/tasks.c ****         {
3422:Lib/FreeRTOS/Source/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
3423:Lib/FreeRTOS/Source/tasks.c ****             xReturn = pdTRUE;
3424:Lib/FreeRTOS/Source/tasks.c ****         }
3425:Lib/FreeRTOS/Source/tasks.c ****     }
3426:Lib/FreeRTOS/Source/tasks.c ****     taskEXIT_CRITICAL();
3427:Lib/FreeRTOS/Source/tasks.c **** 
3428:Lib/FreeRTOS/Source/tasks.c ****     return xReturn;
3429:Lib/FreeRTOS/Source/tasks.c **** }
3430:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3431:Lib/FreeRTOS/Source/tasks.c **** 
3432:Lib/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3433:Lib/FreeRTOS/Source/tasks.c **** {
3434:Lib/FreeRTOS/Source/tasks.c ****     xYieldPending = pdTRUE;
3435:Lib/FreeRTOS/Source/tasks.c **** }
3436:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3437:Lib/FreeRTOS/Source/tasks.c **** 
3438:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3439:Lib/FreeRTOS/Source/tasks.c **** 
3440:Lib/FreeRTOS/Source/tasks.c ****     UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3441:Lib/FreeRTOS/Source/tasks.c ****     {
3442:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxReturn;
3443:Lib/FreeRTOS/Source/tasks.c ****         TCB_t const * pxTCB;
3444:Lib/FreeRTOS/Source/tasks.c **** 
3445:Lib/FreeRTOS/Source/tasks.c ****         if( xTask != NULL )
ARM GAS  /tmp/ccEd3BVV.s 			page 62


3446:Lib/FreeRTOS/Source/tasks.c ****         {
3447:Lib/FreeRTOS/Source/tasks.c ****             pxTCB = xTask;
3448:Lib/FreeRTOS/Source/tasks.c ****             uxReturn = pxTCB->uxTaskNumber;
3449:Lib/FreeRTOS/Source/tasks.c ****         }
3450:Lib/FreeRTOS/Source/tasks.c ****         else
3451:Lib/FreeRTOS/Source/tasks.c ****         {
3452:Lib/FreeRTOS/Source/tasks.c ****             uxReturn = 0U;
3453:Lib/FreeRTOS/Source/tasks.c ****         }
3454:Lib/FreeRTOS/Source/tasks.c **** 
3455:Lib/FreeRTOS/Source/tasks.c ****         return uxReturn;
3456:Lib/FreeRTOS/Source/tasks.c ****     }
3457:Lib/FreeRTOS/Source/tasks.c **** 
3458:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3459:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3460:Lib/FreeRTOS/Source/tasks.c **** 
3461:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3462:Lib/FreeRTOS/Source/tasks.c **** 
3463:Lib/FreeRTOS/Source/tasks.c ****     void vTaskSetTaskNumber( TaskHandle_t xTask,
3464:Lib/FreeRTOS/Source/tasks.c ****                              const UBaseType_t uxHandle )
3465:Lib/FreeRTOS/Source/tasks.c ****     {
3466:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
3467:Lib/FreeRTOS/Source/tasks.c **** 
3468:Lib/FreeRTOS/Source/tasks.c ****         if( xTask != NULL )
3469:Lib/FreeRTOS/Source/tasks.c ****         {
3470:Lib/FreeRTOS/Source/tasks.c ****             pxTCB = xTask;
3471:Lib/FreeRTOS/Source/tasks.c ****             pxTCB->uxTaskNumber = uxHandle;
3472:Lib/FreeRTOS/Source/tasks.c ****         }
3473:Lib/FreeRTOS/Source/tasks.c ****     }
3474:Lib/FreeRTOS/Source/tasks.c **** 
3475:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3476:Lib/FreeRTOS/Source/tasks.c **** 
3477:Lib/FreeRTOS/Source/tasks.c **** /*
3478:Lib/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3479:Lib/FreeRTOS/Source/tasks.c ****  * The Idle task.
3480:Lib/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3481:Lib/FreeRTOS/Source/tasks.c ****  *
3482:Lib/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3483:Lib/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3484:Lib/FreeRTOS/Source/tasks.c ****  *
3485:Lib/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3486:Lib/FreeRTOS/Source/tasks.c ****  *
3487:Lib/FreeRTOS/Source/tasks.c ****  */
3488:Lib/FreeRTOS/Source/tasks.c **** 
3489:Lib/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3490:Lib/FreeRTOS/Source/tasks.c **** {
  34              		.loc 1 3490 1 view -0
  35              		.cfi_startproc
  36              		@ Volatile: function does not return.
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		.loc 1 3490 1 is_stmt 0 view .LVU1
  40 0000 08B5     		push	{r3, lr}
  41              		.cfi_def_cfa_offset 8
  42              		.cfi_offset 3, -8
  43              		.cfi_offset 14, -4
  44              	.LBB27:
  45              	.LBB28:
ARM GAS  /tmp/ccEd3BVV.s 			page 63


3491:Lib/FreeRTOS/Source/tasks.c ****     /* Stop warnings. */
3492:Lib/FreeRTOS/Source/tasks.c ****     ( void ) pvParameters;
3493:Lib/FreeRTOS/Source/tasks.c **** 
3494:Lib/FreeRTOS/Source/tasks.c ****     /** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3495:Lib/FreeRTOS/Source/tasks.c ****      * SCHEDULER IS STARTED. **/
3496:Lib/FreeRTOS/Source/tasks.c **** 
3497:Lib/FreeRTOS/Source/tasks.c ****     /* In case a task that has a secure context deletes itself, in which case
3498:Lib/FreeRTOS/Source/tasks.c ****      * the idle task is responsible for deleting the task's secure context, if
3499:Lib/FreeRTOS/Source/tasks.c ****      * any. */
3500:Lib/FreeRTOS/Source/tasks.c ****     portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3501:Lib/FreeRTOS/Source/tasks.c **** 
3502:Lib/FreeRTOS/Source/tasks.c ****     for( ; ; )
3503:Lib/FreeRTOS/Source/tasks.c ****     {
3504:Lib/FreeRTOS/Source/tasks.c ****         /* See if any tasks have deleted themselves - if so then the idle task
3505:Lib/FreeRTOS/Source/tasks.c ****          * is responsible for freeing the deleted task's TCB and stack. */
3506:Lib/FreeRTOS/Source/tasks.c ****         prvCheckTasksWaitingTermination();
3507:Lib/FreeRTOS/Source/tasks.c **** 
3508:Lib/FreeRTOS/Source/tasks.c ****         #if ( configUSE_PREEMPTION == 0 )
3509:Lib/FreeRTOS/Source/tasks.c ****         {
3510:Lib/FreeRTOS/Source/tasks.c ****             /* If we are not using preemption we keep forcing a task switch to
3511:Lib/FreeRTOS/Source/tasks.c ****              * see if any other task has become available.  If we are using
3512:Lib/FreeRTOS/Source/tasks.c ****              * preemption we don't need to do this as any task becoming available
3513:Lib/FreeRTOS/Source/tasks.c ****              * will automatically get the processor anyway. */
3514:Lib/FreeRTOS/Source/tasks.c ****             taskYIELD();
3515:Lib/FreeRTOS/Source/tasks.c ****         }
3516:Lib/FreeRTOS/Source/tasks.c ****         #endif /* configUSE_PREEMPTION */
3517:Lib/FreeRTOS/Source/tasks.c **** 
3518:Lib/FreeRTOS/Source/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3519:Lib/FreeRTOS/Source/tasks.c ****         {
3520:Lib/FreeRTOS/Source/tasks.c ****             /* When using preemption tasks of equal priority will be
3521:Lib/FreeRTOS/Source/tasks.c ****              * timesliced.  If a task that is sharing the idle priority is ready
3522:Lib/FreeRTOS/Source/tasks.c ****              * to run then the idle task should yield before the end of the
3523:Lib/FreeRTOS/Source/tasks.c ****              * timeslice.
3524:Lib/FreeRTOS/Source/tasks.c ****              *
3525:Lib/FreeRTOS/Source/tasks.c ****              * A critical region is not required here as we are just reading from
3526:Lib/FreeRTOS/Source/tasks.c ****              * the list, and an occasional incorrect value will not matter.  If
3527:Lib/FreeRTOS/Source/tasks.c ****              * the ready list at the idle priority contains more than one task
3528:Lib/FreeRTOS/Source/tasks.c ****              * then a task other than the idle task is ready to execute. */
3529:Lib/FreeRTOS/Source/tasks.c ****             if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType
3530:Lib/FreeRTOS/Source/tasks.c ****             {
3531:Lib/FreeRTOS/Source/tasks.c ****                 taskYIELD();
3532:Lib/FreeRTOS/Source/tasks.c ****             }
3533:Lib/FreeRTOS/Source/tasks.c ****             else
3534:Lib/FreeRTOS/Source/tasks.c ****             {
3535:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3536:Lib/FreeRTOS/Source/tasks.c ****             }
3537:Lib/FreeRTOS/Source/tasks.c ****         }
3538:Lib/FreeRTOS/Source/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3539:Lib/FreeRTOS/Source/tasks.c **** 
3540:Lib/FreeRTOS/Source/tasks.c ****         #if ( configUSE_IDLE_HOOK == 1 )
3541:Lib/FreeRTOS/Source/tasks.c ****         {
3542:Lib/FreeRTOS/Source/tasks.c ****             /* Call the user defined function from within the idle task. */
3543:Lib/FreeRTOS/Source/tasks.c ****             vApplicationIdleHook();
3544:Lib/FreeRTOS/Source/tasks.c ****         }
3545:Lib/FreeRTOS/Source/tasks.c ****         #endif /* configUSE_IDLE_HOOK */
3546:Lib/FreeRTOS/Source/tasks.c **** 
3547:Lib/FreeRTOS/Source/tasks.c ****         /* This conditional compilation should use inequality to 0, not equality
ARM GAS  /tmp/ccEd3BVV.s 			page 64


3548:Lib/FreeRTOS/Source/tasks.c ****          * to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3549:Lib/FreeRTOS/Source/tasks.c ****          * user defined low power mode  implementations require
3550:Lib/FreeRTOS/Source/tasks.c ****          * configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3551:Lib/FreeRTOS/Source/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3552:Lib/FreeRTOS/Source/tasks.c ****         {
3553:Lib/FreeRTOS/Source/tasks.c ****             TickType_t xExpectedIdleTime;
3554:Lib/FreeRTOS/Source/tasks.c **** 
3555:Lib/FreeRTOS/Source/tasks.c ****             /* It is not desirable to suspend then resume the scheduler on
3556:Lib/FreeRTOS/Source/tasks.c ****              * each iteration of the idle task.  Therefore, a preliminary
3557:Lib/FreeRTOS/Source/tasks.c ****              * test of the expected idle time is performed without the
3558:Lib/FreeRTOS/Source/tasks.c ****              * scheduler suspended.  The result here is not necessarily
3559:Lib/FreeRTOS/Source/tasks.c ****              * valid. */
3560:Lib/FreeRTOS/Source/tasks.c ****             xExpectedIdleTime = prvGetExpectedIdleTime();
3561:Lib/FreeRTOS/Source/tasks.c **** 
3562:Lib/FreeRTOS/Source/tasks.c ****             if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3563:Lib/FreeRTOS/Source/tasks.c ****             {
3564:Lib/FreeRTOS/Source/tasks.c ****                 vTaskSuspendAll();
3565:Lib/FreeRTOS/Source/tasks.c ****                 {
3566:Lib/FreeRTOS/Source/tasks.c ****                     /* Now the scheduler is suspended, the expected idle
3567:Lib/FreeRTOS/Source/tasks.c ****                      * time can be sampled again, and this time its value can
3568:Lib/FreeRTOS/Source/tasks.c ****                      * be used. */
3569:Lib/FreeRTOS/Source/tasks.c ****                     configASSERT( xNextTaskUnblockTime >= xTickCount );
3570:Lib/FreeRTOS/Source/tasks.c ****                     xExpectedIdleTime = prvGetExpectedIdleTime();
3571:Lib/FreeRTOS/Source/tasks.c **** 
3572:Lib/FreeRTOS/Source/tasks.c ****                     /* Define the following macro to set xExpectedIdleTime to 0
3573:Lib/FreeRTOS/Source/tasks.c ****                      * if the application does not want
3574:Lib/FreeRTOS/Source/tasks.c ****                      * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3575:Lib/FreeRTOS/Source/tasks.c ****                     configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3576:Lib/FreeRTOS/Source/tasks.c **** 
3577:Lib/FreeRTOS/Source/tasks.c ****                     if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3578:Lib/FreeRTOS/Source/tasks.c ****                     {
3579:Lib/FreeRTOS/Source/tasks.c ****                         traceLOW_POWER_IDLE_BEGIN();
3580:Lib/FreeRTOS/Source/tasks.c ****                         portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3581:Lib/FreeRTOS/Source/tasks.c ****                         traceLOW_POWER_IDLE_END();
3582:Lib/FreeRTOS/Source/tasks.c ****                     }
3583:Lib/FreeRTOS/Source/tasks.c ****                     else
3584:Lib/FreeRTOS/Source/tasks.c ****                     {
3585:Lib/FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
3586:Lib/FreeRTOS/Source/tasks.c ****                     }
3587:Lib/FreeRTOS/Source/tasks.c ****                 }
3588:Lib/FreeRTOS/Source/tasks.c ****                 ( void ) xTaskResumeAll();
3589:Lib/FreeRTOS/Source/tasks.c ****             }
3590:Lib/FreeRTOS/Source/tasks.c ****             else
3591:Lib/FreeRTOS/Source/tasks.c ****             {
3592:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3593:Lib/FreeRTOS/Source/tasks.c ****             }
3594:Lib/FreeRTOS/Source/tasks.c ****         }
3595:Lib/FreeRTOS/Source/tasks.c ****         #endif /* configUSE_TICKLESS_IDLE */
3596:Lib/FreeRTOS/Source/tasks.c ****     }
3597:Lib/FreeRTOS/Source/tasks.c **** }
3598:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3599:Lib/FreeRTOS/Source/tasks.c **** 
3600:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
3601:Lib/FreeRTOS/Source/tasks.c **** 
3602:Lib/FreeRTOS/Source/tasks.c ****     eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3603:Lib/FreeRTOS/Source/tasks.c ****     {
3604:Lib/FreeRTOS/Source/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  /tmp/ccEd3BVV.s 			page 65


3605:Lib/FreeRTOS/Source/tasks.c ****             /* The idle task exists in addition to the application tasks. */
3606:Lib/FreeRTOS/Source/tasks.c ****             const UBaseType_t uxNonApplicationTasks = 1;
3607:Lib/FreeRTOS/Source/tasks.c ****         #endif /* INCLUDE_vTaskSuspend */
3608:Lib/FreeRTOS/Source/tasks.c **** 
3609:Lib/FreeRTOS/Source/tasks.c ****         eSleepModeStatus eReturn = eStandardSleep;
3610:Lib/FreeRTOS/Source/tasks.c **** 
3611:Lib/FreeRTOS/Source/tasks.c ****         /* This function must be called from a critical section. */
3612:Lib/FreeRTOS/Source/tasks.c **** 
3613:Lib/FreeRTOS/Source/tasks.c ****         if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3614:Lib/FreeRTOS/Source/tasks.c ****         {
3615:Lib/FreeRTOS/Source/tasks.c ****             /* A task was made ready while the scheduler was suspended. */
3616:Lib/FreeRTOS/Source/tasks.c ****             eReturn = eAbortSleep;
3617:Lib/FreeRTOS/Source/tasks.c ****         }
3618:Lib/FreeRTOS/Source/tasks.c ****         else if( xYieldPending != pdFALSE )
3619:Lib/FreeRTOS/Source/tasks.c ****         {
3620:Lib/FreeRTOS/Source/tasks.c ****             /* A yield was pended while the scheduler was suspended. */
3621:Lib/FreeRTOS/Source/tasks.c ****             eReturn = eAbortSleep;
3622:Lib/FreeRTOS/Source/tasks.c ****         }
3623:Lib/FreeRTOS/Source/tasks.c ****         else if( xPendedTicks != 0 )
3624:Lib/FreeRTOS/Source/tasks.c ****         {
3625:Lib/FreeRTOS/Source/tasks.c ****             /* A tick interrupt has already occurred but was held pending
3626:Lib/FreeRTOS/Source/tasks.c ****              * because the scheduler is suspended. */
3627:Lib/FreeRTOS/Source/tasks.c ****             eReturn = eAbortSleep;
3628:Lib/FreeRTOS/Source/tasks.c ****         }
3629:Lib/FreeRTOS/Source/tasks.c **** 
3630:Lib/FreeRTOS/Source/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3631:Lib/FreeRTOS/Source/tasks.c ****             else if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - u
3632:Lib/FreeRTOS/Source/tasks.c ****             {
3633:Lib/FreeRTOS/Source/tasks.c ****                 /* If all the tasks are in the suspended list (which might mean they
3634:Lib/FreeRTOS/Source/tasks.c ****                  * have an infinite block time rather than actually being suspended)
3635:Lib/FreeRTOS/Source/tasks.c ****                  * then it is safe to turn all clocks off and just wait for external
3636:Lib/FreeRTOS/Source/tasks.c ****                  * interrupts. */
3637:Lib/FreeRTOS/Source/tasks.c ****                 eReturn = eNoTasksWaitingTimeout;
3638:Lib/FreeRTOS/Source/tasks.c ****             }
3639:Lib/FreeRTOS/Source/tasks.c ****         #endif /* INCLUDE_vTaskSuspend */
3640:Lib/FreeRTOS/Source/tasks.c ****         else
3641:Lib/FreeRTOS/Source/tasks.c ****         {
3642:Lib/FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3643:Lib/FreeRTOS/Source/tasks.c ****         }
3644:Lib/FreeRTOS/Source/tasks.c **** 
3645:Lib/FreeRTOS/Source/tasks.c ****         return eReturn;
3646:Lib/FreeRTOS/Source/tasks.c ****     }
3647:Lib/FreeRTOS/Source/tasks.c **** 
3648:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3649:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3650:Lib/FreeRTOS/Source/tasks.c **** 
3651:Lib/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3652:Lib/FreeRTOS/Source/tasks.c **** 
3653:Lib/FreeRTOS/Source/tasks.c ****     void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,
3654:Lib/FreeRTOS/Source/tasks.c ****                                             BaseType_t xIndex,
3655:Lib/FreeRTOS/Source/tasks.c ****                                             void * pvValue )
3656:Lib/FreeRTOS/Source/tasks.c ****     {
3657:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
3658:Lib/FreeRTOS/Source/tasks.c **** 
3659:Lib/FreeRTOS/Source/tasks.c ****         if( ( xIndex >= 0 ) &&
3660:Lib/FreeRTOS/Source/tasks.c ****             ( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS ) )
3661:Lib/FreeRTOS/Source/tasks.c ****         {
ARM GAS  /tmp/ccEd3BVV.s 			page 66


3662:Lib/FreeRTOS/Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSet );
3663:Lib/FreeRTOS/Source/tasks.c ****             configASSERT( pxTCB != NULL );
3664:Lib/FreeRTOS/Source/tasks.c ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3665:Lib/FreeRTOS/Source/tasks.c ****         }
3666:Lib/FreeRTOS/Source/tasks.c ****     }
3667:Lib/FreeRTOS/Source/tasks.c **** 
3668:Lib/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3669:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3670:Lib/FreeRTOS/Source/tasks.c **** 
3671:Lib/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3672:Lib/FreeRTOS/Source/tasks.c **** 
3673:Lib/FreeRTOS/Source/tasks.c ****     void * pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,
3674:Lib/FreeRTOS/Source/tasks.c ****                                                BaseType_t xIndex )
3675:Lib/FreeRTOS/Source/tasks.c ****     {
3676:Lib/FreeRTOS/Source/tasks.c ****         void * pvReturn = NULL;
3677:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
3678:Lib/FreeRTOS/Source/tasks.c **** 
3679:Lib/FreeRTOS/Source/tasks.c ****         if( ( xIndex >= 0 ) &&
3680:Lib/FreeRTOS/Source/tasks.c ****             ( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS ) )
3681:Lib/FreeRTOS/Source/tasks.c ****         {
3682:Lib/FreeRTOS/Source/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3683:Lib/FreeRTOS/Source/tasks.c ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3684:Lib/FreeRTOS/Source/tasks.c ****         }
3685:Lib/FreeRTOS/Source/tasks.c ****         else
3686:Lib/FreeRTOS/Source/tasks.c ****         {
3687:Lib/FreeRTOS/Source/tasks.c ****             pvReturn = NULL;
3688:Lib/FreeRTOS/Source/tasks.c ****         }
3689:Lib/FreeRTOS/Source/tasks.c **** 
3690:Lib/FreeRTOS/Source/tasks.c ****         return pvReturn;
3691:Lib/FreeRTOS/Source/tasks.c ****     }
3692:Lib/FreeRTOS/Source/tasks.c **** 
3693:Lib/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3694:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3695:Lib/FreeRTOS/Source/tasks.c **** 
3696:Lib/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3697:Lib/FreeRTOS/Source/tasks.c **** 
3698:Lib/FreeRTOS/Source/tasks.c ****     void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
3699:Lib/FreeRTOS/Source/tasks.c ****                                   const MemoryRegion_t * const xRegions )
3700:Lib/FreeRTOS/Source/tasks.c ****     {
3701:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
3702:Lib/FreeRTOS/Source/tasks.c **** 
3703:Lib/FreeRTOS/Source/tasks.c ****         /* If null is passed in here then we are modifying the MPU settings of
3704:Lib/FreeRTOS/Source/tasks.c ****          * the calling task. */
3705:Lib/FreeRTOS/Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTaskToModify );
3706:Lib/FreeRTOS/Source/tasks.c **** 
3707:Lib/FreeRTOS/Source/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3708:Lib/FreeRTOS/Source/tasks.c ****     }
3709:Lib/FreeRTOS/Source/tasks.c **** 
3710:Lib/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3711:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3712:Lib/FreeRTOS/Source/tasks.c **** 
3713:Lib/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3714:Lib/FreeRTOS/Source/tasks.c **** {
3715:Lib/FreeRTOS/Source/tasks.c ****     UBaseType_t uxPriority;
3716:Lib/FreeRTOS/Source/tasks.c **** 
3717:Lib/FreeRTOS/Source/tasks.c ****     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPrio
3718:Lib/FreeRTOS/Source/tasks.c ****     {
ARM GAS  /tmp/ccEd3BVV.s 			page 67


3719:Lib/FreeRTOS/Source/tasks.c ****         vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3720:Lib/FreeRTOS/Source/tasks.c ****     }
3721:Lib/FreeRTOS/Source/tasks.c **** 
3722:Lib/FreeRTOS/Source/tasks.c ****     vListInitialise( &xDelayedTaskList1 );
3723:Lib/FreeRTOS/Source/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
3724:Lib/FreeRTOS/Source/tasks.c ****     vListInitialise( &xPendingReadyList );
3725:Lib/FreeRTOS/Source/tasks.c **** 
3726:Lib/FreeRTOS/Source/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3727:Lib/FreeRTOS/Source/tasks.c ****     {
3728:Lib/FreeRTOS/Source/tasks.c ****         vListInitialise( &xTasksWaitingTermination );
3729:Lib/FreeRTOS/Source/tasks.c ****     }
3730:Lib/FreeRTOS/Source/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3731:Lib/FreeRTOS/Source/tasks.c **** 
3732:Lib/FreeRTOS/Source/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
3733:Lib/FreeRTOS/Source/tasks.c ****     {
3734:Lib/FreeRTOS/Source/tasks.c ****         vListInitialise( &xSuspendedTaskList );
3735:Lib/FreeRTOS/Source/tasks.c ****     }
3736:Lib/FreeRTOS/Source/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
3737:Lib/FreeRTOS/Source/tasks.c **** 
3738:Lib/FreeRTOS/Source/tasks.c ****     /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3739:Lib/FreeRTOS/Source/tasks.c ****      * using list2. */
3740:Lib/FreeRTOS/Source/tasks.c ****     pxDelayedTaskList = &xDelayedTaskList1;
3741:Lib/FreeRTOS/Source/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
3742:Lib/FreeRTOS/Source/tasks.c **** }
3743:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3744:Lib/FreeRTOS/Source/tasks.c **** 
3745:Lib/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3746:Lib/FreeRTOS/Source/tasks.c **** {
3747:Lib/FreeRTOS/Source/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3748:Lib/FreeRTOS/Source/tasks.c **** 
3749:Lib/FreeRTOS/Source/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3750:Lib/FreeRTOS/Source/tasks.c ****     {
3751:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
3752:Lib/FreeRTOS/Source/tasks.c **** 
3753:Lib/FreeRTOS/Source/tasks.c ****         /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3754:Lib/FreeRTOS/Source/tasks.c ****          * being called too often in the idle task. */
3755:Lib/FreeRTOS/Source/tasks.c ****         while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  46              		.loc 1 3755 45 view .LVU2
  47 0002 0E4C     		ldr	r4, .L7
3756:Lib/FreeRTOS/Source/tasks.c ****         {
3757:Lib/FreeRTOS/Source/tasks.c ****             taskENTER_CRITICAL();
3758:Lib/FreeRTOS/Source/tasks.c ****             {
3759:Lib/FreeRTOS/Source/tasks.c ****                 pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079
  48              		.loc 1 3759 25 view .LVU3
  49 0004 0E4E     		ldr	r6, .L7+4
  50              	.LVL1:
  51              	.L4:
  52              		.loc 1 3759 25 view .LVU4
  53              	.LBE28:
  54              	.LBE27:
3492:Lib/FreeRTOS/Source/tasks.c **** 
  55              		.loc 1 3492 5 is_stmt 1 view .LVU5
3500:Lib/FreeRTOS/Source/tasks.c **** 
  56              		.loc 1 3500 67 view .LVU6
3502:Lib/FreeRTOS/Source/tasks.c ****     {
  57              		.loc 1 3502 5 view .LVU7
3506:Lib/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccEd3BVV.s 			page 68


  58              		.loc 1 3506 9 view .LVU8
  59              	.LBB33:
  60              	.LBI27:
3745:Lib/FreeRTOS/Source/tasks.c **** {
  61              		.loc 1 3745 13 view .LVU9
  62              	.LBB31:
3751:Lib/FreeRTOS/Source/tasks.c **** 
  63              		.loc 1 3751 9 view .LVU10
3755:Lib/FreeRTOS/Source/tasks.c ****         {
  64              		.loc 1 3755 9 view .LVU11
3760:Lib/FreeRTOS/Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3761:Lib/FreeRTOS/Source/tasks.c ****                 --uxCurrentNumberOfTasks;
  65              		.loc 1 3761 17 is_stmt 0 view .LVU12
  66 0006 0F4D     		ldr	r5, .L7+8
  67              	.L2:
3755:Lib/FreeRTOS/Source/tasks.c ****         {
  68              		.loc 1 3755 45 is_stmt 1 view .LVU13
  69 0008 2368     		ldr	r3, [r4]
  70 000a 33B9     		cbnz	r3, .L3
  71              	.LBE31:
  72              	.LBE33:
3529:Lib/FreeRTOS/Source/tasks.c ****             {
  73              		.loc 1 3529 13 view .LVU14
3529:Lib/FreeRTOS/Source/tasks.c ****             {
  74              		.loc 1 3529 17 is_stmt 0 view .LVU15
  75 000c 0E4B     		ldr	r3, .L7+12
  76 000e 1B68     		ldr	r3, [r3]
3529:Lib/FreeRTOS/Source/tasks.c ****             {
  77              		.loc 1 3529 15 view .LVU16
  78 0010 012B     		cmp	r3, #1
  79 0012 F8D9     		bls	.L4
3531:Lib/FreeRTOS/Source/tasks.c ****             }
  80              		.loc 1 3531 17 is_stmt 1 view .LVU17
  81 0014 FFF7FEFF 		bl	vPortYield
  82              	.LVL2:
  83 0018 F5E7     		b	.L4
  84              	.L3:
  85              	.LBB34:
  86              	.LBB32:
3757:Lib/FreeRTOS/Source/tasks.c ****             {
  87              		.loc 1 3757 13 view .LVU18
  88 001a FFF7FEFF 		bl	vPortEnterCritical
  89              	.LVL3:
3759:Lib/FreeRTOS/Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  90              		.loc 1 3759 17 view .LVU19
3760:Lib/FreeRTOS/Source/tasks.c ****                 --uxCurrentNumberOfTasks;
  91              		.loc 1 3760 17 view .LVU20
3759:Lib/FreeRTOS/Source/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  92              		.loc 1 3759 23 is_stmt 0 view .LVU21
  93 001e F368     		ldr	r3, [r6, #12]
3760:Lib/FreeRTOS/Source/tasks.c ****                 --uxCurrentNumberOfTasks;
  94              		.loc 1 3760 26 view .LVU22
  95 0020 D868     		ldr	r0, [r3, #12]
  96 0022 0430     		adds	r0, r0, #4
  97 0024 FFF7FEFF 		bl	uxListRemove
  98              	.LVL4:
  99              		.loc 1 3761 17 is_stmt 1 view .LVU23
ARM GAS  /tmp/ccEd3BVV.s 			page 69


 100 0028 2B68     		ldr	r3, [r5]
 101 002a 013B     		subs	r3, r3, #1
 102 002c 2B60     		str	r3, [r5]
3762:Lib/FreeRTOS/Source/tasks.c ****                 --uxDeletedTasksWaitingCleanUp;
 103              		.loc 1 3762 17 view .LVU24
 104 002e 2368     		ldr	r3, [r4]
 105 0030 013B     		subs	r3, r3, #1
 106 0032 2360     		str	r3, [r4]
3763:Lib/FreeRTOS/Source/tasks.c ****             }
3764:Lib/FreeRTOS/Source/tasks.c ****             taskEXIT_CRITICAL();
 107              		.loc 1 3764 13 view .LVU25
 108 0034 FFF7FEFF 		bl	vPortExitCritical
 109              	.LVL5:
3765:Lib/FreeRTOS/Source/tasks.c **** 
3766:Lib/FreeRTOS/Source/tasks.c ****             prvDeleteTCB( pxTCB );
 110              		.loc 1 3766 13 view .LVU26
 111              	.LBB29:
 112              	.LBI29:
3767:Lib/FreeRTOS/Source/tasks.c ****         }
3768:Lib/FreeRTOS/Source/tasks.c ****     }
3769:Lib/FreeRTOS/Source/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3770:Lib/FreeRTOS/Source/tasks.c **** }
3771:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3772:Lib/FreeRTOS/Source/tasks.c **** 
3773:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3774:Lib/FreeRTOS/Source/tasks.c **** 
3775:Lib/FreeRTOS/Source/tasks.c ****     void vTaskGetInfo( TaskHandle_t xTask,
3776:Lib/FreeRTOS/Source/tasks.c ****                        TaskStatus_t * pxTaskStatus,
3777:Lib/FreeRTOS/Source/tasks.c ****                        BaseType_t xGetFreeStackSpace,
3778:Lib/FreeRTOS/Source/tasks.c ****                        eTaskState eState )
3779:Lib/FreeRTOS/Source/tasks.c ****     {
3780:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
3781:Lib/FreeRTOS/Source/tasks.c **** 
3782:Lib/FreeRTOS/Source/tasks.c ****         /* xTask is NULL then get the state of the calling task. */
3783:Lib/FreeRTOS/Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3784:Lib/FreeRTOS/Source/tasks.c **** 
3785:Lib/FreeRTOS/Source/tasks.c ****         pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3786:Lib/FreeRTOS/Source/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
3787:Lib/FreeRTOS/Source/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3788:Lib/FreeRTOS/Source/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
3789:Lib/FreeRTOS/Source/tasks.c ****         #if ( ( portSTACK_GROWTH > 0 ) && ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
3790:Lib/FreeRTOS/Source/tasks.c ****             pxTaskStatus->pxTopOfStack = pxTCB->pxTopOfStack;
3791:Lib/FreeRTOS/Source/tasks.c ****             pxTaskStatus->pxEndOfStack = pxTCB->pxEndOfStack;
3792:Lib/FreeRTOS/Source/tasks.c ****         #endif
3793:Lib/FreeRTOS/Source/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3794:Lib/FreeRTOS/Source/tasks.c **** 
3795:Lib/FreeRTOS/Source/tasks.c ****         #if ( configUSE_MUTEXES == 1 )
3796:Lib/FreeRTOS/Source/tasks.c ****         {
3797:Lib/FreeRTOS/Source/tasks.c ****             pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3798:Lib/FreeRTOS/Source/tasks.c ****         }
3799:Lib/FreeRTOS/Source/tasks.c ****         #else
3800:Lib/FreeRTOS/Source/tasks.c ****         {
3801:Lib/FreeRTOS/Source/tasks.c ****             pxTaskStatus->uxBasePriority = 0;
3802:Lib/FreeRTOS/Source/tasks.c ****         }
3803:Lib/FreeRTOS/Source/tasks.c ****         #endif
3804:Lib/FreeRTOS/Source/tasks.c **** 
3805:Lib/FreeRTOS/Source/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
ARM GAS  /tmp/ccEd3BVV.s 			page 70


3806:Lib/FreeRTOS/Source/tasks.c ****         {
3807:Lib/FreeRTOS/Source/tasks.c ****             pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3808:Lib/FreeRTOS/Source/tasks.c ****         }
3809:Lib/FreeRTOS/Source/tasks.c ****         #else
3810:Lib/FreeRTOS/Source/tasks.c ****         {
3811:Lib/FreeRTOS/Source/tasks.c ****             pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
3812:Lib/FreeRTOS/Source/tasks.c ****         }
3813:Lib/FreeRTOS/Source/tasks.c ****         #endif
3814:Lib/FreeRTOS/Source/tasks.c **** 
3815:Lib/FreeRTOS/Source/tasks.c ****         /* Obtaining the task state is a little fiddly, so is only done if the
3816:Lib/FreeRTOS/Source/tasks.c ****          * value of eState passed into this function is eInvalid - otherwise the
3817:Lib/FreeRTOS/Source/tasks.c ****          * state is just set to whatever is passed in. */
3818:Lib/FreeRTOS/Source/tasks.c ****         if( eState != eInvalid )
3819:Lib/FreeRTOS/Source/tasks.c ****         {
3820:Lib/FreeRTOS/Source/tasks.c ****             if( pxTCB == pxCurrentTCB )
3821:Lib/FreeRTOS/Source/tasks.c ****             {
3822:Lib/FreeRTOS/Source/tasks.c ****                 pxTaskStatus->eCurrentState = eRunning;
3823:Lib/FreeRTOS/Source/tasks.c ****             }
3824:Lib/FreeRTOS/Source/tasks.c ****             else
3825:Lib/FreeRTOS/Source/tasks.c ****             {
3826:Lib/FreeRTOS/Source/tasks.c ****                 pxTaskStatus->eCurrentState = eState;
3827:Lib/FreeRTOS/Source/tasks.c **** 
3828:Lib/FreeRTOS/Source/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
3829:Lib/FreeRTOS/Source/tasks.c ****                 {
3830:Lib/FreeRTOS/Source/tasks.c ****                     /* If the task is in the suspended list then there is a
3831:Lib/FreeRTOS/Source/tasks.c ****                      *  chance it is actually just blocked indefinitely - so really
3832:Lib/FreeRTOS/Source/tasks.c ****                      *  it should be reported as being in the Blocked state. */
3833:Lib/FreeRTOS/Source/tasks.c ****                     if( eState == eSuspended )
3834:Lib/FreeRTOS/Source/tasks.c ****                     {
3835:Lib/FreeRTOS/Source/tasks.c ****                         vTaskSuspendAll();
3836:Lib/FreeRTOS/Source/tasks.c ****                         {
3837:Lib/FreeRTOS/Source/tasks.c ****                             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3838:Lib/FreeRTOS/Source/tasks.c ****                             {
3839:Lib/FreeRTOS/Source/tasks.c ****                                 pxTaskStatus->eCurrentState = eBlocked;
3840:Lib/FreeRTOS/Source/tasks.c ****                             }
3841:Lib/FreeRTOS/Source/tasks.c ****                         }
3842:Lib/FreeRTOS/Source/tasks.c ****                         ( void ) xTaskResumeAll();
3843:Lib/FreeRTOS/Source/tasks.c ****                     }
3844:Lib/FreeRTOS/Source/tasks.c ****                 }
3845:Lib/FreeRTOS/Source/tasks.c ****                 #endif /* INCLUDE_vTaskSuspend */
3846:Lib/FreeRTOS/Source/tasks.c **** 
3847:Lib/FreeRTOS/Source/tasks.c ****                 /* Tasks can be in pending ready list and other state list at the
3848:Lib/FreeRTOS/Source/tasks.c ****                  * same time. These tasks are in ready state no matter what state
3849:Lib/FreeRTOS/Source/tasks.c ****                  * list the task is in. */
3850:Lib/FreeRTOS/Source/tasks.c ****                 taskENTER_CRITICAL();
3851:Lib/FreeRTOS/Source/tasks.c ****                 {
3852:Lib/FreeRTOS/Source/tasks.c ****                     if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) !
3853:Lib/FreeRTOS/Source/tasks.c ****                     {
3854:Lib/FreeRTOS/Source/tasks.c ****                         pxTaskStatus->eCurrentState = eReady;
3855:Lib/FreeRTOS/Source/tasks.c ****                     }
3856:Lib/FreeRTOS/Source/tasks.c ****                 }
3857:Lib/FreeRTOS/Source/tasks.c ****                 taskEXIT_CRITICAL();
3858:Lib/FreeRTOS/Source/tasks.c ****             }
3859:Lib/FreeRTOS/Source/tasks.c ****         }
3860:Lib/FreeRTOS/Source/tasks.c ****         else
3861:Lib/FreeRTOS/Source/tasks.c ****         {
3862:Lib/FreeRTOS/Source/tasks.c ****             pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
ARM GAS  /tmp/ccEd3BVV.s 			page 71


3863:Lib/FreeRTOS/Source/tasks.c ****         }
3864:Lib/FreeRTOS/Source/tasks.c **** 
3865:Lib/FreeRTOS/Source/tasks.c ****         /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3866:Lib/FreeRTOS/Source/tasks.c ****          * parameter is provided to allow it to be skipped. */
3867:Lib/FreeRTOS/Source/tasks.c ****         if( xGetFreeStackSpace != pdFALSE )
3868:Lib/FreeRTOS/Source/tasks.c ****         {
3869:Lib/FreeRTOS/Source/tasks.c ****             #if ( portSTACK_GROWTH > 0 )
3870:Lib/FreeRTOS/Source/tasks.c ****             {
3871:Lib/FreeRTOS/Source/tasks.c ****                 pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTC
3872:Lib/FreeRTOS/Source/tasks.c ****             }
3873:Lib/FreeRTOS/Source/tasks.c ****             #else
3874:Lib/FreeRTOS/Source/tasks.c ****             {
3875:Lib/FreeRTOS/Source/tasks.c ****                 pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTC
3876:Lib/FreeRTOS/Source/tasks.c ****             }
3877:Lib/FreeRTOS/Source/tasks.c ****             #endif
3878:Lib/FreeRTOS/Source/tasks.c ****         }
3879:Lib/FreeRTOS/Source/tasks.c ****         else
3880:Lib/FreeRTOS/Source/tasks.c ****         {
3881:Lib/FreeRTOS/Source/tasks.c ****             pxTaskStatus->usStackHighWaterMark = 0;
3882:Lib/FreeRTOS/Source/tasks.c ****         }
3883:Lib/FreeRTOS/Source/tasks.c ****     }
3884:Lib/FreeRTOS/Source/tasks.c **** 
3885:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3886:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3887:Lib/FreeRTOS/Source/tasks.c **** 
3888:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3889:Lib/FreeRTOS/Source/tasks.c **** 
3890:Lib/FreeRTOS/Source/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
3891:Lib/FreeRTOS/Source/tasks.c ****                                                      List_t * pxList,
3892:Lib/FreeRTOS/Source/tasks.c ****                                                      eTaskState eState )
3893:Lib/FreeRTOS/Source/tasks.c ****     {
3894:Lib/FreeRTOS/Source/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB;
3895:Lib/FreeRTOS/Source/tasks.c ****         configLIST_VOLATILE TCB_t * pxFirstTCB;
3896:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxTask = 0;
3897:Lib/FreeRTOS/Source/tasks.c **** 
3898:Lib/FreeRTOS/Source/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3899:Lib/FreeRTOS/Source/tasks.c ****         {
3900:Lib/FreeRTOS/Source/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
3901:Lib/FreeRTOS/Source/tasks.c **** 
3902:Lib/FreeRTOS/Source/tasks.c ****             /* Populate an TaskStatus_t structure within the
3903:Lib/FreeRTOS/Source/tasks.c ****              * pxTaskStatusArray array for each task that is referenced from
3904:Lib/FreeRTOS/Source/tasks.c ****              * pxList.  See the definition of TaskStatus_t in task.h for the
3905:Lib/FreeRTOS/Source/tasks.c ****              * meaning of each TaskStatus_t structure member. */
3906:Lib/FreeRTOS/Source/tasks.c ****             do
3907:Lib/FreeRTOS/Source/tasks.c ****             {
3908:Lib/FreeRTOS/Source/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
3909:Lib/FreeRTOS/Source/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
3910:Lib/FreeRTOS/Source/tasks.c ****                 uxTask++;
3911:Lib/FreeRTOS/Source/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
3912:Lib/FreeRTOS/Source/tasks.c ****         }
3913:Lib/FreeRTOS/Source/tasks.c ****         else
3914:Lib/FreeRTOS/Source/tasks.c ****         {
3915:Lib/FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3916:Lib/FreeRTOS/Source/tasks.c ****         }
3917:Lib/FreeRTOS/Source/tasks.c **** 
3918:Lib/FreeRTOS/Source/tasks.c ****         return uxTask;
3919:Lib/FreeRTOS/Source/tasks.c ****     }
ARM GAS  /tmp/ccEd3BVV.s 			page 72


3920:Lib/FreeRTOS/Source/tasks.c **** 
3921:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3922:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3923:Lib/FreeRTOS/Source/tasks.c **** 
3924:Lib/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3925:Lib/FreeRTOS/Source/tasks.c **** 
3926:Lib/FreeRTOS/Source/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3927:Lib/FreeRTOS/Source/tasks.c ****     {
3928:Lib/FreeRTOS/Source/tasks.c ****         uint32_t ulCount = 0U;
3929:Lib/FreeRTOS/Source/tasks.c **** 
3930:Lib/FreeRTOS/Source/tasks.c ****         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3931:Lib/FreeRTOS/Source/tasks.c ****         {
3932:Lib/FreeRTOS/Source/tasks.c ****             pucStackByte -= portSTACK_GROWTH;
3933:Lib/FreeRTOS/Source/tasks.c ****             ulCount++;
3934:Lib/FreeRTOS/Source/tasks.c ****         }
3935:Lib/FreeRTOS/Source/tasks.c **** 
3936:Lib/FreeRTOS/Source/tasks.c ****         ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on sma
3937:Lib/FreeRTOS/Source/tasks.c **** 
3938:Lib/FreeRTOS/Source/tasks.c ****         return ( configSTACK_DEPTH_TYPE ) ulCount;
3939:Lib/FreeRTOS/Source/tasks.c ****     }
3940:Lib/FreeRTOS/Source/tasks.c **** 
3941:Lib/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3942:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3943:Lib/FreeRTOS/Source/tasks.c **** 
3944:Lib/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3945:Lib/FreeRTOS/Source/tasks.c **** 
3946:Lib/FreeRTOS/Source/tasks.c **** /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3947:Lib/FreeRTOS/Source/tasks.c ****  * same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3948:Lib/FreeRTOS/Source/tasks.c ****  * user to determine the return type.  It gets around the problem of the value
3949:Lib/FreeRTOS/Source/tasks.c ****  * overflowing on 8-bit types without breaking backward compatibility for
3950:Lib/FreeRTOS/Source/tasks.c ****  * applications that expect an 8-bit return type. */
3951:Lib/FreeRTOS/Source/tasks.c ****     configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3952:Lib/FreeRTOS/Source/tasks.c ****     {
3953:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
3954:Lib/FreeRTOS/Source/tasks.c ****         uint8_t * pucEndOfStack;
3955:Lib/FreeRTOS/Source/tasks.c ****         configSTACK_DEPTH_TYPE uxReturn;
3956:Lib/FreeRTOS/Source/tasks.c **** 
3957:Lib/FreeRTOS/Source/tasks.c ****         /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3958:Lib/FreeRTOS/Source/tasks.c ****          * the same except for their return type.  Using configSTACK_DEPTH_TYPE
3959:Lib/FreeRTOS/Source/tasks.c ****          * allows the user to determine the return type.  It gets around the
3960:Lib/FreeRTOS/Source/tasks.c ****          * problem of the value overflowing on 8-bit types without breaking
3961:Lib/FreeRTOS/Source/tasks.c ****          * backward compatibility for applications that expect an 8-bit return
3962:Lib/FreeRTOS/Source/tasks.c ****          * type. */
3963:Lib/FreeRTOS/Source/tasks.c **** 
3964:Lib/FreeRTOS/Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3965:Lib/FreeRTOS/Source/tasks.c **** 
3966:Lib/FreeRTOS/Source/tasks.c ****         #if portSTACK_GROWTH < 0
3967:Lib/FreeRTOS/Source/tasks.c ****         {
3968:Lib/FreeRTOS/Source/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3969:Lib/FreeRTOS/Source/tasks.c ****         }
3970:Lib/FreeRTOS/Source/tasks.c ****         #else
3971:Lib/FreeRTOS/Source/tasks.c ****         {
3972:Lib/FreeRTOS/Source/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3973:Lib/FreeRTOS/Source/tasks.c ****         }
3974:Lib/FreeRTOS/Source/tasks.c ****         #endif
3975:Lib/FreeRTOS/Source/tasks.c **** 
3976:Lib/FreeRTOS/Source/tasks.c ****         uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
ARM GAS  /tmp/ccEd3BVV.s 			page 73


3977:Lib/FreeRTOS/Source/tasks.c **** 
3978:Lib/FreeRTOS/Source/tasks.c ****         return uxReturn;
3979:Lib/FreeRTOS/Source/tasks.c ****     }
3980:Lib/FreeRTOS/Source/tasks.c **** 
3981:Lib/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3982:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3983:Lib/FreeRTOS/Source/tasks.c **** 
3984:Lib/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3985:Lib/FreeRTOS/Source/tasks.c **** 
3986:Lib/FreeRTOS/Source/tasks.c ****     UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3987:Lib/FreeRTOS/Source/tasks.c ****     {
3988:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
3989:Lib/FreeRTOS/Source/tasks.c ****         uint8_t * pucEndOfStack;
3990:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxReturn;
3991:Lib/FreeRTOS/Source/tasks.c **** 
3992:Lib/FreeRTOS/Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3993:Lib/FreeRTOS/Source/tasks.c **** 
3994:Lib/FreeRTOS/Source/tasks.c ****         #if portSTACK_GROWTH < 0
3995:Lib/FreeRTOS/Source/tasks.c ****         {
3996:Lib/FreeRTOS/Source/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3997:Lib/FreeRTOS/Source/tasks.c ****         }
3998:Lib/FreeRTOS/Source/tasks.c ****         #else
3999:Lib/FreeRTOS/Source/tasks.c ****         {
4000:Lib/FreeRTOS/Source/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
4001:Lib/FreeRTOS/Source/tasks.c ****         }
4002:Lib/FreeRTOS/Source/tasks.c ****         #endif
4003:Lib/FreeRTOS/Source/tasks.c **** 
4004:Lib/FreeRTOS/Source/tasks.c ****         uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
4005:Lib/FreeRTOS/Source/tasks.c **** 
4006:Lib/FreeRTOS/Source/tasks.c ****         return uxReturn;
4007:Lib/FreeRTOS/Source/tasks.c ****     }
4008:Lib/FreeRTOS/Source/tasks.c **** 
4009:Lib/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
4010:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4011:Lib/FreeRTOS/Source/tasks.c **** 
4012:Lib/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
4013:Lib/FreeRTOS/Source/tasks.c **** 
4014:Lib/FreeRTOS/Source/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB )
 113              		.loc 1 4014 17 view .LVU27
 114              	.LBB30:
4015:Lib/FreeRTOS/Source/tasks.c ****     {
4016:Lib/FreeRTOS/Source/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
4017:Lib/FreeRTOS/Source/tasks.c ****          * above the vPortFree() calls.  The call is also used by ports/demos that
4018:Lib/FreeRTOS/Source/tasks.c ****          * want to allocate and clean RAM statically. */
4019:Lib/FreeRTOS/Source/tasks.c ****         portCLEAN_UP_TCB( pxTCB );
 115              		.loc 1 4019 9 view .LVU28
4020:Lib/FreeRTOS/Source/tasks.c **** 
4021:Lib/FreeRTOS/Source/tasks.c ****         #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
4022:Lib/FreeRTOS/Source/tasks.c ****         {
4023:Lib/FreeRTOS/Source/tasks.c ****             /* Free up the memory allocated for the task's TLS Block. */
4024:Lib/FreeRTOS/Source/tasks.c ****             configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
4025:Lib/FreeRTOS/Source/tasks.c ****         }
4026:Lib/FreeRTOS/Source/tasks.c ****         #endif
4027:Lib/FreeRTOS/Source/tasks.c **** 
4028:Lib/FreeRTOS/Source/tasks.c ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
4029:Lib/FreeRTOS/Source/tasks.c ****         {
4030:Lib/FreeRTOS/Source/tasks.c ****             /* The task can only have been allocated dynamically - free both
ARM GAS  /tmp/ccEd3BVV.s 			page 74


4031:Lib/FreeRTOS/Source/tasks.c ****              * the stack and TCB. */
4032:Lib/FreeRTOS/Source/tasks.c ****             vPortFreeStack( pxTCB->pxStack );
4033:Lib/FreeRTOS/Source/tasks.c ****             vPortFree( pxTCB );
4034:Lib/FreeRTOS/Source/tasks.c ****         }
4035:Lib/FreeRTOS/Source/tasks.c ****         #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been
4036:Lib/FreeRTOS/Source/tasks.c ****         {
4037:Lib/FreeRTOS/Source/tasks.c ****             /* The task could have been allocated statically or dynamically, so
4038:Lib/FreeRTOS/Source/tasks.c ****              * check what was statically allocated before trying to free the
4039:Lib/FreeRTOS/Source/tasks.c ****              * memory. */
4040:Lib/FreeRTOS/Source/tasks.c ****             if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
4041:Lib/FreeRTOS/Source/tasks.c ****             {
4042:Lib/FreeRTOS/Source/tasks.c ****                 /* Both the stack and TCB were allocated dynamically, so both
4043:Lib/FreeRTOS/Source/tasks.c ****                  * must be freed. */
4044:Lib/FreeRTOS/Source/tasks.c ****                 vPortFreeStack( pxTCB->pxStack );
4045:Lib/FreeRTOS/Source/tasks.c ****                 vPortFree( pxTCB );
4046:Lib/FreeRTOS/Source/tasks.c ****             }
4047:Lib/FreeRTOS/Source/tasks.c ****             else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
4048:Lib/FreeRTOS/Source/tasks.c ****             {
4049:Lib/FreeRTOS/Source/tasks.c ****                 /* Only the stack was statically allocated, so the TCB is the
4050:Lib/FreeRTOS/Source/tasks.c ****                  * only memory that must be freed. */
4051:Lib/FreeRTOS/Source/tasks.c ****                 vPortFree( pxTCB );
4052:Lib/FreeRTOS/Source/tasks.c ****             }
4053:Lib/FreeRTOS/Source/tasks.c ****             else
4054:Lib/FreeRTOS/Source/tasks.c ****             {
4055:Lib/FreeRTOS/Source/tasks.c ****                 /* Neither the stack nor the TCB were allocated dynamically, so
4056:Lib/FreeRTOS/Source/tasks.c ****                  * nothing needs to be freed. */
4057:Lib/FreeRTOS/Source/tasks.c ****                 configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB
4058:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4059:Lib/FreeRTOS/Source/tasks.c ****             }
4060:Lib/FreeRTOS/Source/tasks.c ****         }
4061:Lib/FreeRTOS/Source/tasks.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
4062:Lib/FreeRTOS/Source/tasks.c ****     }
 116              		.loc 1 4062 5 is_stmt 0 view .LVU29
 117 0038 E6E7     		b	.L2
 118              	.L8:
 119 003a 00BF     		.align	2
 120              	.L7:
 121 003c 00000000 		.word	uxDeletedTasksWaitingCleanUp
 122 0040 00000000 		.word	xTasksWaitingTermination
 123 0044 00000000 		.word	uxCurrentNumberOfTasks
 124 0048 00000000 		.word	pxReadyTasksLists
 125              	.LBE30:
 126              	.LBE29:
 127              	.LBE32:
 128              	.LBE34:
 129              		.cfi_endproc
 130              	.LFE39:
 132              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 133              		.align	1
 134              		.syntax unified
 135              		.thumb
 136              		.thumb_func
 138              	prvAddCurrentTaskToDelayedList:
 139              	.LVL6:
 140              	.LFB66:
4063:Lib/FreeRTOS/Source/tasks.c **** 
4064:Lib/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
ARM GAS  /tmp/ccEd3BVV.s 			page 75


4065:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4066:Lib/FreeRTOS/Source/tasks.c **** 
4067:Lib/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
4068:Lib/FreeRTOS/Source/tasks.c **** {
4069:Lib/FreeRTOS/Source/tasks.c ****     if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
4070:Lib/FreeRTOS/Source/tasks.c ****     {
4071:Lib/FreeRTOS/Source/tasks.c ****         /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
4072:Lib/FreeRTOS/Source/tasks.c ****          * the maximum possible value so it is  extremely unlikely that the
4073:Lib/FreeRTOS/Source/tasks.c ****          * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
4074:Lib/FreeRTOS/Source/tasks.c ****          * there is an item in the delayed list. */
4075:Lib/FreeRTOS/Source/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
4076:Lib/FreeRTOS/Source/tasks.c ****     }
4077:Lib/FreeRTOS/Source/tasks.c ****     else
4078:Lib/FreeRTOS/Source/tasks.c ****     {
4079:Lib/FreeRTOS/Source/tasks.c ****         /* The new current delayed list is not empty, get the value of
4080:Lib/FreeRTOS/Source/tasks.c ****          * the item at the head of the delayed list.  This is the time at
4081:Lib/FreeRTOS/Source/tasks.c ****          * which the task at the head of the delayed list should be removed
4082:Lib/FreeRTOS/Source/tasks.c ****          * from the Blocked state. */
4083:Lib/FreeRTOS/Source/tasks.c ****         xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
4084:Lib/FreeRTOS/Source/tasks.c ****     }
4085:Lib/FreeRTOS/Source/tasks.c **** }
4086:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4087:Lib/FreeRTOS/Source/tasks.c **** 
4088:Lib/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
4089:Lib/FreeRTOS/Source/tasks.c **** 
4090:Lib/FreeRTOS/Source/tasks.c ****     TaskHandle_t xTaskGetCurrentTaskHandle( void )
4091:Lib/FreeRTOS/Source/tasks.c ****     {
4092:Lib/FreeRTOS/Source/tasks.c ****         TaskHandle_t xReturn;
4093:Lib/FreeRTOS/Source/tasks.c **** 
4094:Lib/FreeRTOS/Source/tasks.c ****         /* A critical section is not required as this is not called from
4095:Lib/FreeRTOS/Source/tasks.c ****          * an interrupt and the current TCB will always be the same for any
4096:Lib/FreeRTOS/Source/tasks.c ****          * individual execution thread. */
4097:Lib/FreeRTOS/Source/tasks.c ****         xReturn = pxCurrentTCB;
4098:Lib/FreeRTOS/Source/tasks.c **** 
4099:Lib/FreeRTOS/Source/tasks.c ****         return xReturn;
4100:Lib/FreeRTOS/Source/tasks.c ****     }
4101:Lib/FreeRTOS/Source/tasks.c **** 
4102:Lib/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
4103:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4104:Lib/FreeRTOS/Source/tasks.c **** 
4105:Lib/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
4106:Lib/FreeRTOS/Source/tasks.c **** 
4107:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xTaskGetSchedulerState( void )
4108:Lib/FreeRTOS/Source/tasks.c ****     {
4109:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
4110:Lib/FreeRTOS/Source/tasks.c **** 
4111:Lib/FreeRTOS/Source/tasks.c ****         if( xSchedulerRunning == pdFALSE )
4112:Lib/FreeRTOS/Source/tasks.c ****         {
4113:Lib/FreeRTOS/Source/tasks.c ****             xReturn = taskSCHEDULER_NOT_STARTED;
4114:Lib/FreeRTOS/Source/tasks.c ****         }
4115:Lib/FreeRTOS/Source/tasks.c ****         else
4116:Lib/FreeRTOS/Source/tasks.c ****         {
4117:Lib/FreeRTOS/Source/tasks.c ****             if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
4118:Lib/FreeRTOS/Source/tasks.c ****             {
4119:Lib/FreeRTOS/Source/tasks.c ****                 xReturn = taskSCHEDULER_RUNNING;
4120:Lib/FreeRTOS/Source/tasks.c ****             }
4121:Lib/FreeRTOS/Source/tasks.c ****             else
ARM GAS  /tmp/ccEd3BVV.s 			page 76


4122:Lib/FreeRTOS/Source/tasks.c ****             {
4123:Lib/FreeRTOS/Source/tasks.c ****                 xReturn = taskSCHEDULER_SUSPENDED;
4124:Lib/FreeRTOS/Source/tasks.c ****             }
4125:Lib/FreeRTOS/Source/tasks.c ****         }
4126:Lib/FreeRTOS/Source/tasks.c **** 
4127:Lib/FreeRTOS/Source/tasks.c ****         return xReturn;
4128:Lib/FreeRTOS/Source/tasks.c ****     }
4129:Lib/FreeRTOS/Source/tasks.c **** 
4130:Lib/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4131:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4132:Lib/FreeRTOS/Source/tasks.c **** 
4133:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4134:Lib/FreeRTOS/Source/tasks.c **** 
4135:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4136:Lib/FreeRTOS/Source/tasks.c ****     {
4137:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4138:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn = pdFALSE;
4139:Lib/FreeRTOS/Source/tasks.c **** 
4140:Lib/FreeRTOS/Source/tasks.c ****         /* If the mutex was given back by an interrupt while the queue was
4141:Lib/FreeRTOS/Source/tasks.c ****          * locked then the mutex holder might now be NULL.  _RB_ Is this still
4142:Lib/FreeRTOS/Source/tasks.c ****          * needed as interrupts can no longer use mutexes? */
4143:Lib/FreeRTOS/Source/tasks.c ****         if( pxMutexHolder != NULL )
4144:Lib/FreeRTOS/Source/tasks.c ****         {
4145:Lib/FreeRTOS/Source/tasks.c ****             /* If the holder of the mutex has a priority below the priority of
4146:Lib/FreeRTOS/Source/tasks.c ****              * the task attempting to obtain the mutex then it will temporarily
4147:Lib/FreeRTOS/Source/tasks.c ****              * inherit the priority of the task attempting to obtain the mutex. */
4148:Lib/FreeRTOS/Source/tasks.c ****             if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4149:Lib/FreeRTOS/Source/tasks.c ****             {
4150:Lib/FreeRTOS/Source/tasks.c ****                 /* Adjust the mutex holder state to account for its new
4151:Lib/FreeRTOS/Source/tasks.c ****                  * priority.  Only reset the event list item value if the value is
4152:Lib/FreeRTOS/Source/tasks.c ****                  * not being used for anything else. */
4153:Lib/FreeRTOS/Source/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_
4154:Lib/FreeRTOS/Source/tasks.c ****                 {
4155:Lib/FreeRTOS/Source/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) 
4156:Lib/FreeRTOS/Source/tasks.c ****                 }
4157:Lib/FreeRTOS/Source/tasks.c ****                 else
4158:Lib/FreeRTOS/Source/tasks.c ****                 {
4159:Lib/FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4160:Lib/FreeRTOS/Source/tasks.c ****                 }
4161:Lib/FreeRTOS/Source/tasks.c **** 
4162:Lib/FreeRTOS/Source/tasks.c ****                 /* If the task being modified is in the ready state it will need
4163:Lib/FreeRTOS/Source/tasks.c ****                  * to be moved into a new list. */
4164:Lib/FreeRTOS/Source/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] )
4165:Lib/FreeRTOS/Source/tasks.c ****                 {
4166:Lib/FreeRTOS/Source/tasks.c ****                     if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
4167:Lib/FreeRTOS/Source/tasks.c ****                     {
4168:Lib/FreeRTOS/Source/tasks.c ****                         /* It is known that the task is in its ready list so
4169:Lib/FreeRTOS/Source/tasks.c ****                          * there is no need to check again and the port level
4170:Lib/FreeRTOS/Source/tasks.c ****                          * reset macro can be called directly. */
4171:Lib/FreeRTOS/Source/tasks.c ****                         portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority 
4172:Lib/FreeRTOS/Source/tasks.c ****                     }
4173:Lib/FreeRTOS/Source/tasks.c ****                     else
4174:Lib/FreeRTOS/Source/tasks.c ****                     {
4175:Lib/FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4176:Lib/FreeRTOS/Source/tasks.c ****                     }
4177:Lib/FreeRTOS/Source/tasks.c **** 
4178:Lib/FreeRTOS/Source/tasks.c ****                     /* Inherit the priority before being moved into the new list. */
ARM GAS  /tmp/ccEd3BVV.s 			page 77


4179:Lib/FreeRTOS/Source/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4180:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
4181:Lib/FreeRTOS/Source/tasks.c ****                 }
4182:Lib/FreeRTOS/Source/tasks.c ****                 else
4183:Lib/FreeRTOS/Source/tasks.c ****                 {
4184:Lib/FreeRTOS/Source/tasks.c ****                     /* Just inherit the priority. */
4185:Lib/FreeRTOS/Source/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4186:Lib/FreeRTOS/Source/tasks.c ****                 }
4187:Lib/FreeRTOS/Source/tasks.c **** 
4188:Lib/FreeRTOS/Source/tasks.c ****                 traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4189:Lib/FreeRTOS/Source/tasks.c **** 
4190:Lib/FreeRTOS/Source/tasks.c ****                 /* Inheritance occurred. */
4191:Lib/FreeRTOS/Source/tasks.c ****                 xReturn = pdTRUE;
4192:Lib/FreeRTOS/Source/tasks.c ****             }
4193:Lib/FreeRTOS/Source/tasks.c ****             else
4194:Lib/FreeRTOS/Source/tasks.c ****             {
4195:Lib/FreeRTOS/Source/tasks.c ****                 if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4196:Lib/FreeRTOS/Source/tasks.c ****                 {
4197:Lib/FreeRTOS/Source/tasks.c ****                     /* The base priority of the mutex holder is lower than the
4198:Lib/FreeRTOS/Source/tasks.c ****                      * priority of the task attempting to take the mutex, but the
4199:Lib/FreeRTOS/Source/tasks.c ****                      * current priority of the mutex holder is not lower than the
4200:Lib/FreeRTOS/Source/tasks.c ****                      * priority of the task attempting to take the mutex.
4201:Lib/FreeRTOS/Source/tasks.c ****                      * Therefore the mutex holder must have already inherited a
4202:Lib/FreeRTOS/Source/tasks.c ****                      * priority, but inheritance would have occurred if that had
4203:Lib/FreeRTOS/Source/tasks.c ****                      * not been the case. */
4204:Lib/FreeRTOS/Source/tasks.c ****                     xReturn = pdTRUE;
4205:Lib/FreeRTOS/Source/tasks.c ****                 }
4206:Lib/FreeRTOS/Source/tasks.c ****                 else
4207:Lib/FreeRTOS/Source/tasks.c ****                 {
4208:Lib/FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4209:Lib/FreeRTOS/Source/tasks.c ****                 }
4210:Lib/FreeRTOS/Source/tasks.c ****             }
4211:Lib/FreeRTOS/Source/tasks.c ****         }
4212:Lib/FreeRTOS/Source/tasks.c ****         else
4213:Lib/FreeRTOS/Source/tasks.c ****         {
4214:Lib/FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4215:Lib/FreeRTOS/Source/tasks.c ****         }
4216:Lib/FreeRTOS/Source/tasks.c **** 
4217:Lib/FreeRTOS/Source/tasks.c ****         return xReturn;
4218:Lib/FreeRTOS/Source/tasks.c ****     }
4219:Lib/FreeRTOS/Source/tasks.c **** 
4220:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4221:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4222:Lib/FreeRTOS/Source/tasks.c **** 
4223:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4224:Lib/FreeRTOS/Source/tasks.c **** 
4225:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4226:Lib/FreeRTOS/Source/tasks.c ****     {
4227:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
4228:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn = pdFALSE;
4229:Lib/FreeRTOS/Source/tasks.c **** 
4230:Lib/FreeRTOS/Source/tasks.c ****         if( pxMutexHolder != NULL )
4231:Lib/FreeRTOS/Source/tasks.c ****         {
4232:Lib/FreeRTOS/Source/tasks.c ****             /* A task can only have an inherited priority if it holds the mutex.
4233:Lib/FreeRTOS/Source/tasks.c ****              * If the mutex is held by a task then it cannot be given from an
4234:Lib/FreeRTOS/Source/tasks.c ****              * interrupt, and if a mutex is given by the holding task then it must
4235:Lib/FreeRTOS/Source/tasks.c ****              * be the running state task. */
ARM GAS  /tmp/ccEd3BVV.s 			page 78


4236:Lib/FreeRTOS/Source/tasks.c ****             configASSERT( pxTCB == pxCurrentTCB );
4237:Lib/FreeRTOS/Source/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
4238:Lib/FreeRTOS/Source/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
4239:Lib/FreeRTOS/Source/tasks.c **** 
4240:Lib/FreeRTOS/Source/tasks.c ****             /* Has the holder of the mutex inherited the priority of another
4241:Lib/FreeRTOS/Source/tasks.c ****              * task? */
4242:Lib/FreeRTOS/Source/tasks.c ****             if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4243:Lib/FreeRTOS/Source/tasks.c ****             {
4244:Lib/FreeRTOS/Source/tasks.c ****                 /* Only disinherit if no other mutexes are held. */
4245:Lib/FreeRTOS/Source/tasks.c ****                 if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4246:Lib/FreeRTOS/Source/tasks.c ****                 {
4247:Lib/FreeRTOS/Source/tasks.c ****                     /* A task can only have an inherited priority if it holds
4248:Lib/FreeRTOS/Source/tasks.c ****                      * the mutex.  If the mutex is held by a task then it cannot be
4249:Lib/FreeRTOS/Source/tasks.c ****                      * given from an interrupt, and if a mutex is given by the
4250:Lib/FreeRTOS/Source/tasks.c ****                      * holding task then it must be the running state task.  Remove
4251:Lib/FreeRTOS/Source/tasks.c ****                      * the holding task from the ready list. */
4252:Lib/FreeRTOS/Source/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4253:Lib/FreeRTOS/Source/tasks.c ****                     {
4254:Lib/FreeRTOS/Source/tasks.c ****                         portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4255:Lib/FreeRTOS/Source/tasks.c ****                     }
4256:Lib/FreeRTOS/Source/tasks.c ****                     else
4257:Lib/FreeRTOS/Source/tasks.c ****                     {
4258:Lib/FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4259:Lib/FreeRTOS/Source/tasks.c ****                     }
4260:Lib/FreeRTOS/Source/tasks.c **** 
4261:Lib/FreeRTOS/Source/tasks.c ****                     /* Disinherit the priority before adding the task into the
4262:Lib/FreeRTOS/Source/tasks.c ****                      * new  ready list. */
4263:Lib/FreeRTOS/Source/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4264:Lib/FreeRTOS/Source/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
4265:Lib/FreeRTOS/Source/tasks.c **** 
4266:Lib/FreeRTOS/Source/tasks.c ****                     /* Reset the event list item value.  It cannot be in use for
4267:Lib/FreeRTOS/Source/tasks.c ****                      * any other purpose if this task is running, and it must be
4268:Lib/FreeRTOS/Source/tasks.c ****                      * running to give back the mutex. */
4269:Lib/FreeRTOS/Source/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_P
4270:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
4271:Lib/FreeRTOS/Source/tasks.c **** 
4272:Lib/FreeRTOS/Source/tasks.c ****                     /* Return true to indicate that a context switch is required.
4273:Lib/FreeRTOS/Source/tasks.c ****                      * This is only actually required in the corner case whereby
4274:Lib/FreeRTOS/Source/tasks.c ****                      * multiple mutexes were held and the mutexes were given back
4275:Lib/FreeRTOS/Source/tasks.c ****                      * in an order different to that in which they were taken.
4276:Lib/FreeRTOS/Source/tasks.c ****                      * If a context switch did not occur when the first mutex was
4277:Lib/FreeRTOS/Source/tasks.c ****                      * returned, even if a task was waiting on it, then a context
4278:Lib/FreeRTOS/Source/tasks.c ****                      * switch should occur when the last mutex is returned whether
4279:Lib/FreeRTOS/Source/tasks.c ****                      * a task is waiting on it or not. */
4280:Lib/FreeRTOS/Source/tasks.c ****                     xReturn = pdTRUE;
4281:Lib/FreeRTOS/Source/tasks.c ****                 }
4282:Lib/FreeRTOS/Source/tasks.c ****                 else
4283:Lib/FreeRTOS/Source/tasks.c ****                 {
4284:Lib/FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4285:Lib/FreeRTOS/Source/tasks.c ****                 }
4286:Lib/FreeRTOS/Source/tasks.c ****             }
4287:Lib/FreeRTOS/Source/tasks.c ****             else
4288:Lib/FreeRTOS/Source/tasks.c ****             {
4289:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4290:Lib/FreeRTOS/Source/tasks.c ****             }
4291:Lib/FreeRTOS/Source/tasks.c ****         }
4292:Lib/FreeRTOS/Source/tasks.c ****         else
ARM GAS  /tmp/ccEd3BVV.s 			page 79


4293:Lib/FreeRTOS/Source/tasks.c ****         {
4294:Lib/FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4295:Lib/FreeRTOS/Source/tasks.c ****         }
4296:Lib/FreeRTOS/Source/tasks.c **** 
4297:Lib/FreeRTOS/Source/tasks.c ****         return xReturn;
4298:Lib/FreeRTOS/Source/tasks.c ****     }
4299:Lib/FreeRTOS/Source/tasks.c **** 
4300:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4301:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4302:Lib/FreeRTOS/Source/tasks.c **** 
4303:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4304:Lib/FreeRTOS/Source/tasks.c **** 
4305:Lib/FreeRTOS/Source/tasks.c ****     void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
4306:Lib/FreeRTOS/Source/tasks.c ****                                               UBaseType_t uxHighestPriorityWaitingTask )
4307:Lib/FreeRTOS/Source/tasks.c ****     {
4308:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
4309:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4310:Lib/FreeRTOS/Source/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4311:Lib/FreeRTOS/Source/tasks.c **** 
4312:Lib/FreeRTOS/Source/tasks.c ****         if( pxMutexHolder != NULL )
4313:Lib/FreeRTOS/Source/tasks.c ****         {
4314:Lib/FreeRTOS/Source/tasks.c ****             /* If pxMutexHolder is not NULL then the holder must hold at least
4315:Lib/FreeRTOS/Source/tasks.c ****              * one mutex. */
4316:Lib/FreeRTOS/Source/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
4317:Lib/FreeRTOS/Source/tasks.c **** 
4318:Lib/FreeRTOS/Source/tasks.c ****             /* Determine the priority to which the priority of the task that
4319:Lib/FreeRTOS/Source/tasks.c ****              * holds the mutex should be set.  This will be the greater of the
4320:Lib/FreeRTOS/Source/tasks.c ****              * holding task's base priority and the priority of the highest
4321:Lib/FreeRTOS/Source/tasks.c ****              * priority task that is waiting to obtain the mutex. */
4322:Lib/FreeRTOS/Source/tasks.c ****             if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4323:Lib/FreeRTOS/Source/tasks.c ****             {
4324:Lib/FreeRTOS/Source/tasks.c ****                 uxPriorityToUse = uxHighestPriorityWaitingTask;
4325:Lib/FreeRTOS/Source/tasks.c ****             }
4326:Lib/FreeRTOS/Source/tasks.c ****             else
4327:Lib/FreeRTOS/Source/tasks.c ****             {
4328:Lib/FreeRTOS/Source/tasks.c ****                 uxPriorityToUse = pxTCB->uxBasePriority;
4329:Lib/FreeRTOS/Source/tasks.c ****             }
4330:Lib/FreeRTOS/Source/tasks.c **** 
4331:Lib/FreeRTOS/Source/tasks.c ****             /* Does the priority need to change? */
4332:Lib/FreeRTOS/Source/tasks.c ****             if( pxTCB->uxPriority != uxPriorityToUse )
4333:Lib/FreeRTOS/Source/tasks.c ****             {
4334:Lib/FreeRTOS/Source/tasks.c ****                 /* Only disinherit if no other mutexes are held.  This is a
4335:Lib/FreeRTOS/Source/tasks.c ****                  * simplification in the priority inheritance implementation.  If
4336:Lib/FreeRTOS/Source/tasks.c ****                  * the task that holds the mutex is also holding other mutexes then
4337:Lib/FreeRTOS/Source/tasks.c ****                  * the other mutexes may have caused the priority inheritance. */
4338:Lib/FreeRTOS/Source/tasks.c ****                 if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4339:Lib/FreeRTOS/Source/tasks.c ****                 {
4340:Lib/FreeRTOS/Source/tasks.c ****                     /* If a task has timed out because it already holds the
4341:Lib/FreeRTOS/Source/tasks.c ****                      * mutex it was trying to obtain then it cannot of inherited
4342:Lib/FreeRTOS/Source/tasks.c ****                      * its own priority. */
4343:Lib/FreeRTOS/Source/tasks.c ****                     configASSERT( pxTCB != pxCurrentTCB );
4344:Lib/FreeRTOS/Source/tasks.c **** 
4345:Lib/FreeRTOS/Source/tasks.c ****                     /* Disinherit the priority, remembering the previous
4346:Lib/FreeRTOS/Source/tasks.c ****                      * priority to facilitate determining the subject task's
4347:Lib/FreeRTOS/Source/tasks.c ****                      * state. */
4348:Lib/FreeRTOS/Source/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
4349:Lib/FreeRTOS/Source/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
ARM GAS  /tmp/ccEd3BVV.s 			page 80


4350:Lib/FreeRTOS/Source/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
4351:Lib/FreeRTOS/Source/tasks.c **** 
4352:Lib/FreeRTOS/Source/tasks.c ****                     /* Only reset the event list item value if the value is not
4353:Lib/FreeRTOS/Source/tasks.c ****                      * being used for anything else. */
4354:Lib/FreeRTOS/Source/tasks.c ****                     if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_IT
4355:Lib/FreeRTOS/Source/tasks.c ****                     {
4356:Lib/FreeRTOS/Source/tasks.c ****                         listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configM
4357:Lib/FreeRTOS/Source/tasks.c ****                     }
4358:Lib/FreeRTOS/Source/tasks.c ****                     else
4359:Lib/FreeRTOS/Source/tasks.c ****                     {
4360:Lib/FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4361:Lib/FreeRTOS/Source/tasks.c ****                     }
4362:Lib/FreeRTOS/Source/tasks.c **** 
4363:Lib/FreeRTOS/Source/tasks.c ****                     /* If the running task is not the task that holds the mutex
4364:Lib/FreeRTOS/Source/tasks.c ****                      * then the task that holds the mutex could be in either the
4365:Lib/FreeRTOS/Source/tasks.c ****                      * Ready, Blocked or Suspended states.  Only remove the task
4366:Lib/FreeRTOS/Source/tasks.c ****                      * from its current state list if it is in the Ready state as
4367:Lib/FreeRTOS/Source/tasks.c ****                      * the task's priority is going to change and there is one
4368:Lib/FreeRTOS/Source/tasks.c ****                      * Ready list per priority. */
4369:Lib/FreeRTOS/Source/tasks.c ****                     if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &
4370:Lib/FreeRTOS/Source/tasks.c ****                     {
4371:Lib/FreeRTOS/Source/tasks.c ****                         if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4372:Lib/FreeRTOS/Source/tasks.c ****                         {
4373:Lib/FreeRTOS/Source/tasks.c ****                             /* It is known that the task is in its ready list so
4374:Lib/FreeRTOS/Source/tasks.c ****                              * there is no need to check again and the port level
4375:Lib/FreeRTOS/Source/tasks.c ****                              * reset macro can be called directly. */
4376:Lib/FreeRTOS/Source/tasks.c ****                             portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4377:Lib/FreeRTOS/Source/tasks.c ****                         }
4378:Lib/FreeRTOS/Source/tasks.c ****                         else
4379:Lib/FreeRTOS/Source/tasks.c ****                         {
4380:Lib/FreeRTOS/Source/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
4381:Lib/FreeRTOS/Source/tasks.c ****                         }
4382:Lib/FreeRTOS/Source/tasks.c **** 
4383:Lib/FreeRTOS/Source/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
4384:Lib/FreeRTOS/Source/tasks.c ****                     }
4385:Lib/FreeRTOS/Source/tasks.c ****                     else
4386:Lib/FreeRTOS/Source/tasks.c ****                     {
4387:Lib/FreeRTOS/Source/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4388:Lib/FreeRTOS/Source/tasks.c ****                     }
4389:Lib/FreeRTOS/Source/tasks.c ****                 }
4390:Lib/FreeRTOS/Source/tasks.c ****                 else
4391:Lib/FreeRTOS/Source/tasks.c ****                 {
4392:Lib/FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4393:Lib/FreeRTOS/Source/tasks.c ****                 }
4394:Lib/FreeRTOS/Source/tasks.c ****             }
4395:Lib/FreeRTOS/Source/tasks.c ****             else
4396:Lib/FreeRTOS/Source/tasks.c ****             {
4397:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4398:Lib/FreeRTOS/Source/tasks.c ****             }
4399:Lib/FreeRTOS/Source/tasks.c ****         }
4400:Lib/FreeRTOS/Source/tasks.c ****         else
4401:Lib/FreeRTOS/Source/tasks.c ****         {
4402:Lib/FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4403:Lib/FreeRTOS/Source/tasks.c ****         }
4404:Lib/FreeRTOS/Source/tasks.c ****     }
4405:Lib/FreeRTOS/Source/tasks.c **** 
4406:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
ARM GAS  /tmp/ccEd3BVV.s 			page 81


4407:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4408:Lib/FreeRTOS/Source/tasks.c **** 
4409:Lib/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4410:Lib/FreeRTOS/Source/tasks.c **** 
4411:Lib/FreeRTOS/Source/tasks.c ****     void vTaskEnterCritical( void )
4412:Lib/FreeRTOS/Source/tasks.c ****     {
4413:Lib/FreeRTOS/Source/tasks.c ****         portDISABLE_INTERRUPTS();
4414:Lib/FreeRTOS/Source/tasks.c **** 
4415:Lib/FreeRTOS/Source/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4416:Lib/FreeRTOS/Source/tasks.c ****         {
4417:Lib/FreeRTOS/Source/tasks.c ****             ( pxCurrentTCB->uxCriticalNesting )++;
4418:Lib/FreeRTOS/Source/tasks.c **** 
4419:Lib/FreeRTOS/Source/tasks.c ****             /* This is not the interrupt safe version of the enter critical
4420:Lib/FreeRTOS/Source/tasks.c ****              * function so  assert() if it is being called from an interrupt
4421:Lib/FreeRTOS/Source/tasks.c ****              * context.  Only API functions that end in "FromISR" can be used in an
4422:Lib/FreeRTOS/Source/tasks.c ****              * interrupt.  Only assert if the critical nesting count is 1 to
4423:Lib/FreeRTOS/Source/tasks.c ****              * protect against recursive calls if the assert function also uses a
4424:Lib/FreeRTOS/Source/tasks.c ****              * critical section. */
4425:Lib/FreeRTOS/Source/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting == 1 )
4426:Lib/FreeRTOS/Source/tasks.c ****             {
4427:Lib/FreeRTOS/Source/tasks.c ****                 portASSERT_IF_IN_ISR();
4428:Lib/FreeRTOS/Source/tasks.c ****             }
4429:Lib/FreeRTOS/Source/tasks.c ****         }
4430:Lib/FreeRTOS/Source/tasks.c ****         else
4431:Lib/FreeRTOS/Source/tasks.c ****         {
4432:Lib/FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4433:Lib/FreeRTOS/Source/tasks.c ****         }
4434:Lib/FreeRTOS/Source/tasks.c ****     }
4435:Lib/FreeRTOS/Source/tasks.c **** 
4436:Lib/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4437:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4438:Lib/FreeRTOS/Source/tasks.c **** 
4439:Lib/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4440:Lib/FreeRTOS/Source/tasks.c **** 
4441:Lib/FreeRTOS/Source/tasks.c ****     void vTaskExitCritical( void )
4442:Lib/FreeRTOS/Source/tasks.c ****     {
4443:Lib/FreeRTOS/Source/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4444:Lib/FreeRTOS/Source/tasks.c ****         {
4445:Lib/FreeRTOS/Source/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting > 0U )
4446:Lib/FreeRTOS/Source/tasks.c ****             {
4447:Lib/FreeRTOS/Source/tasks.c ****                 ( pxCurrentTCB->uxCriticalNesting )--;
4448:Lib/FreeRTOS/Source/tasks.c **** 
4449:Lib/FreeRTOS/Source/tasks.c ****                 if( pxCurrentTCB->uxCriticalNesting == 0U )
4450:Lib/FreeRTOS/Source/tasks.c ****                 {
4451:Lib/FreeRTOS/Source/tasks.c ****                     portENABLE_INTERRUPTS();
4452:Lib/FreeRTOS/Source/tasks.c ****                 }
4453:Lib/FreeRTOS/Source/tasks.c ****                 else
4454:Lib/FreeRTOS/Source/tasks.c ****                 {
4455:Lib/FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4456:Lib/FreeRTOS/Source/tasks.c ****                 }
4457:Lib/FreeRTOS/Source/tasks.c ****             }
4458:Lib/FreeRTOS/Source/tasks.c ****             else
4459:Lib/FreeRTOS/Source/tasks.c ****             {
4460:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4461:Lib/FreeRTOS/Source/tasks.c ****             }
4462:Lib/FreeRTOS/Source/tasks.c ****         }
4463:Lib/FreeRTOS/Source/tasks.c ****         else
ARM GAS  /tmp/ccEd3BVV.s 			page 82


4464:Lib/FreeRTOS/Source/tasks.c ****         {
4465:Lib/FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4466:Lib/FreeRTOS/Source/tasks.c ****         }
4467:Lib/FreeRTOS/Source/tasks.c ****     }
4468:Lib/FreeRTOS/Source/tasks.c **** 
4469:Lib/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4470:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4471:Lib/FreeRTOS/Source/tasks.c **** 
4472:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 )
4473:Lib/FreeRTOS/Source/tasks.c **** 
4474:Lib/FreeRTOS/Source/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
4475:Lib/FreeRTOS/Source/tasks.c ****                                         const char * pcTaskName )
4476:Lib/FreeRTOS/Source/tasks.c ****     {
4477:Lib/FreeRTOS/Source/tasks.c ****         size_t x;
4478:Lib/FreeRTOS/Source/tasks.c **** 
4479:Lib/FreeRTOS/Source/tasks.c ****         /* Start by copying the entire string. */
4480:Lib/FreeRTOS/Source/tasks.c ****         strcpy( pcBuffer, pcTaskName );
4481:Lib/FreeRTOS/Source/tasks.c **** 
4482:Lib/FreeRTOS/Source/tasks.c ****         /* Pad the end of the string with spaces to ensure columns line up when
4483:Lib/FreeRTOS/Source/tasks.c ****          * printed out. */
4484:Lib/FreeRTOS/Source/tasks.c ****         for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4485:Lib/FreeRTOS/Source/tasks.c ****         {
4486:Lib/FreeRTOS/Source/tasks.c ****             pcBuffer[ x ] = ' ';
4487:Lib/FreeRTOS/Source/tasks.c ****         }
4488:Lib/FreeRTOS/Source/tasks.c **** 
4489:Lib/FreeRTOS/Source/tasks.c ****         /* Terminate. */
4490:Lib/FreeRTOS/Source/tasks.c ****         pcBuffer[ x ] = ( char ) 0x00;
4491:Lib/FreeRTOS/Source/tasks.c **** 
4492:Lib/FreeRTOS/Source/tasks.c ****         /* Return the new end of string. */
4493:Lib/FreeRTOS/Source/tasks.c ****         return &( pcBuffer[ x ] );
4494:Lib/FreeRTOS/Source/tasks.c ****     }
4495:Lib/FreeRTOS/Source/tasks.c **** 
4496:Lib/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4497:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4498:Lib/FreeRTOS/Source/tasks.c **** 
4499:Lib/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4500:Lib/FreeRTOS/Source/tasks.c **** 
4501:Lib/FreeRTOS/Source/tasks.c ****     void vTaskList( char * pcWriteBuffer )
4502:Lib/FreeRTOS/Source/tasks.c ****     {
4503:Lib/FreeRTOS/Source/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4504:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxArraySize, x;
4505:Lib/FreeRTOS/Source/tasks.c ****         char cStatus;
4506:Lib/FreeRTOS/Source/tasks.c **** 
4507:Lib/FreeRTOS/Source/tasks.c ****         /*
4508:Lib/FreeRTOS/Source/tasks.c ****          * PLEASE NOTE:
4509:Lib/FreeRTOS/Source/tasks.c ****          *
4510:Lib/FreeRTOS/Source/tasks.c ****          * This function is provided for convenience only, and is used by many
4511:Lib/FreeRTOS/Source/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4512:Lib/FreeRTOS/Source/tasks.c ****          * scheduler.
4513:Lib/FreeRTOS/Source/tasks.c ****          *
4514:Lib/FreeRTOS/Source/tasks.c ****          * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4515:Lib/FreeRTOS/Source/tasks.c ****          * uxTaskGetSystemState() output into a human readable table that
4516:Lib/FreeRTOS/Source/tasks.c ****          * displays task: names, states, priority, stack usage and task number.
4517:Lib/FreeRTOS/Source/tasks.c ****          * Stack usage specified as the number of unused StackType_t words stack can hold
4518:Lib/FreeRTOS/Source/tasks.c ****          * on top of stack - not the number of bytes.
4519:Lib/FreeRTOS/Source/tasks.c ****          *
4520:Lib/FreeRTOS/Source/tasks.c ****          * vTaskList() has a dependency on the sprintf() C library function that
ARM GAS  /tmp/ccEd3BVV.s 			page 83


4521:Lib/FreeRTOS/Source/tasks.c ****          * might bloat the code size, use a lot of stack, and provide different
4522:Lib/FreeRTOS/Source/tasks.c ****          * results on different platforms.  An alternative, tiny, third party,
4523:Lib/FreeRTOS/Source/tasks.c ****          * and limited functionality implementation of sprintf() is provided in
4524:Lib/FreeRTOS/Source/tasks.c ****          * many of the FreeRTOS/Demo sub-directories in a file called
4525:Lib/FreeRTOS/Source/tasks.c ****          * printf-stdarg.c (note printf-stdarg.c does not provide a full
4526:Lib/FreeRTOS/Source/tasks.c ****          * snprintf() implementation!).
4527:Lib/FreeRTOS/Source/tasks.c ****          *
4528:Lib/FreeRTOS/Source/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4529:Lib/FreeRTOS/Source/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4530:Lib/FreeRTOS/Source/tasks.c ****          * through a call to vTaskList().
4531:Lib/FreeRTOS/Source/tasks.c ****          */
4532:Lib/FreeRTOS/Source/tasks.c **** 
4533:Lib/FreeRTOS/Source/tasks.c **** 
4534:Lib/FreeRTOS/Source/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4535:Lib/FreeRTOS/Source/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4536:Lib/FreeRTOS/Source/tasks.c **** 
4537:Lib/FreeRTOS/Source/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4538:Lib/FreeRTOS/Source/tasks.c ****          * function is executing. */
4539:Lib/FreeRTOS/Source/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4540:Lib/FreeRTOS/Source/tasks.c **** 
4541:Lib/FreeRTOS/Source/tasks.c ****         /* Allocate an array index for each task.  NOTE!  if
4542:Lib/FreeRTOS/Source/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4543:Lib/FreeRTOS/Source/tasks.c ****          * equate to NULL. */
4544:Lib/FreeRTOS/Source/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4545:Lib/FreeRTOS/Source/tasks.c **** 
4546:Lib/FreeRTOS/Source/tasks.c ****         if( pxTaskStatusArray != NULL )
4547:Lib/FreeRTOS/Source/tasks.c ****         {
4548:Lib/FreeRTOS/Source/tasks.c ****             /* Generate the (binary) data. */
4549:Lib/FreeRTOS/Source/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4550:Lib/FreeRTOS/Source/tasks.c **** 
4551:Lib/FreeRTOS/Source/tasks.c ****             /* Create a human readable table from the binary data. */
4552:Lib/FreeRTOS/Source/tasks.c ****             for( x = 0; x < uxArraySize; x++ )
4553:Lib/FreeRTOS/Source/tasks.c ****             {
4554:Lib/FreeRTOS/Source/tasks.c ****                 switch( pxTaskStatusArray[ x ].eCurrentState )
4555:Lib/FreeRTOS/Source/tasks.c ****                 {
4556:Lib/FreeRTOS/Source/tasks.c ****                     case eRunning:
4557:Lib/FreeRTOS/Source/tasks.c ****                         cStatus = tskRUNNING_CHAR;
4558:Lib/FreeRTOS/Source/tasks.c ****                         break;
4559:Lib/FreeRTOS/Source/tasks.c **** 
4560:Lib/FreeRTOS/Source/tasks.c ****                     case eReady:
4561:Lib/FreeRTOS/Source/tasks.c ****                         cStatus = tskREADY_CHAR;
4562:Lib/FreeRTOS/Source/tasks.c ****                         break;
4563:Lib/FreeRTOS/Source/tasks.c **** 
4564:Lib/FreeRTOS/Source/tasks.c ****                     case eBlocked:
4565:Lib/FreeRTOS/Source/tasks.c ****                         cStatus = tskBLOCKED_CHAR;
4566:Lib/FreeRTOS/Source/tasks.c ****                         break;
4567:Lib/FreeRTOS/Source/tasks.c **** 
4568:Lib/FreeRTOS/Source/tasks.c ****                     case eSuspended:
4569:Lib/FreeRTOS/Source/tasks.c ****                         cStatus = tskSUSPENDED_CHAR;
4570:Lib/FreeRTOS/Source/tasks.c ****                         break;
4571:Lib/FreeRTOS/Source/tasks.c **** 
4572:Lib/FreeRTOS/Source/tasks.c ****                     case eDeleted:
4573:Lib/FreeRTOS/Source/tasks.c ****                         cStatus = tskDELETED_CHAR;
4574:Lib/FreeRTOS/Source/tasks.c ****                         break;
4575:Lib/FreeRTOS/Source/tasks.c **** 
4576:Lib/FreeRTOS/Source/tasks.c ****                     case eInvalid: /* Fall through. */
4577:Lib/FreeRTOS/Source/tasks.c ****                     default:       /* Should not get here, but it is included
ARM GAS  /tmp/ccEd3BVV.s 			page 84


4578:Lib/FreeRTOS/Source/tasks.c ****                                     * to prevent static checking errors. */
4579:Lib/FreeRTOS/Source/tasks.c ****                         cStatus = ( char ) 0x00;
4580:Lib/FreeRTOS/Source/tasks.c ****                         break;
4581:Lib/FreeRTOS/Source/tasks.c ****                 }
4582:Lib/FreeRTOS/Source/tasks.c **** 
4583:Lib/FreeRTOS/Source/tasks.c ****                 /* Write the task name to the string, padding with spaces so it
4584:Lib/FreeRTOS/Source/tasks.c ****                  * can be printed in tabular form more easily. */
4585:Lib/FreeRTOS/Source/tasks.c ****                 pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskN
4586:Lib/FreeRTOS/Source/tasks.c **** 
4587:Lib/FreeRTOS/Source/tasks.c ****                 /* Write the rest of the string. */
4588:Lib/FreeRTOS/Source/tasks.c ****                 sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskSta
4589:Lib/FreeRTOS/Source/tasks.c ****                 pcWriteBuffer += strlen( pcWriteBuffer );                                          
4590:Lib/FreeRTOS/Source/tasks.c ****             }
4591:Lib/FreeRTOS/Source/tasks.c **** 
4592:Lib/FreeRTOS/Source/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4593:Lib/FreeRTOS/Source/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4594:Lib/FreeRTOS/Source/tasks.c ****             vPortFree( pxTaskStatusArray );
4595:Lib/FreeRTOS/Source/tasks.c ****         }
4596:Lib/FreeRTOS/Source/tasks.c ****         else
4597:Lib/FreeRTOS/Source/tasks.c ****         {
4598:Lib/FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4599:Lib/FreeRTOS/Source/tasks.c ****         }
4600:Lib/FreeRTOS/Source/tasks.c ****     }
4601:Lib/FreeRTOS/Source/tasks.c **** 
4602:Lib/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4603:Lib/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4604:Lib/FreeRTOS/Source/tasks.c **** 
4605:Lib/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4606:Lib/FreeRTOS/Source/tasks.c **** 
4607:Lib/FreeRTOS/Source/tasks.c ****     void vTaskGetRunTimeStats( char * pcWriteBuffer )
4608:Lib/FreeRTOS/Source/tasks.c ****     {
4609:Lib/FreeRTOS/Source/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4610:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxArraySize, x;
4611:Lib/FreeRTOS/Source/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulStatsAsPercentage;
4612:Lib/FreeRTOS/Source/tasks.c **** 
4613:Lib/FreeRTOS/Source/tasks.c ****         /*
4614:Lib/FreeRTOS/Source/tasks.c ****          * PLEASE NOTE:
4615:Lib/FreeRTOS/Source/tasks.c ****          *
4616:Lib/FreeRTOS/Source/tasks.c ****          * This function is provided for convenience only, and is used by many
4617:Lib/FreeRTOS/Source/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4618:Lib/FreeRTOS/Source/tasks.c ****          * scheduler.
4619:Lib/FreeRTOS/Source/tasks.c ****          *
4620:Lib/FreeRTOS/Source/tasks.c ****          * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4621:Lib/FreeRTOS/Source/tasks.c ****          * of the uxTaskGetSystemState() output into a human readable table that
4622:Lib/FreeRTOS/Source/tasks.c ****          * displays the amount of time each task has spent in the Running state
4623:Lib/FreeRTOS/Source/tasks.c ****          * in both absolute and percentage terms.
4624:Lib/FreeRTOS/Source/tasks.c ****          *
4625:Lib/FreeRTOS/Source/tasks.c ****          * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4626:Lib/FreeRTOS/Source/tasks.c ****          * function that might bloat the code size, use a lot of stack, and
4627:Lib/FreeRTOS/Source/tasks.c ****          * provide different results on different platforms.  An alternative,
4628:Lib/FreeRTOS/Source/tasks.c ****          * tiny, third party, and limited functionality implementation of
4629:Lib/FreeRTOS/Source/tasks.c ****          * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4630:Lib/FreeRTOS/Source/tasks.c ****          * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4631:Lib/FreeRTOS/Source/tasks.c ****          * a full snprintf() implementation!).
4632:Lib/FreeRTOS/Source/tasks.c ****          *
4633:Lib/FreeRTOS/Source/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4634:Lib/FreeRTOS/Source/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
ARM GAS  /tmp/ccEd3BVV.s 			page 85


4635:Lib/FreeRTOS/Source/tasks.c ****          * through a call to vTaskGetRunTimeStats().
4636:Lib/FreeRTOS/Source/tasks.c ****          */
4637:Lib/FreeRTOS/Source/tasks.c **** 
4638:Lib/FreeRTOS/Source/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4639:Lib/FreeRTOS/Source/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4640:Lib/FreeRTOS/Source/tasks.c **** 
4641:Lib/FreeRTOS/Source/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4642:Lib/FreeRTOS/Source/tasks.c ****          * function is executing. */
4643:Lib/FreeRTOS/Source/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4644:Lib/FreeRTOS/Source/tasks.c **** 
4645:Lib/FreeRTOS/Source/tasks.c ****         /* Allocate an array index for each task.  NOTE!  If
4646:Lib/FreeRTOS/Source/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4647:Lib/FreeRTOS/Source/tasks.c ****          * equate to NULL. */
4648:Lib/FreeRTOS/Source/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4649:Lib/FreeRTOS/Source/tasks.c **** 
4650:Lib/FreeRTOS/Source/tasks.c ****         if( pxTaskStatusArray != NULL )
4651:Lib/FreeRTOS/Source/tasks.c ****         {
4652:Lib/FreeRTOS/Source/tasks.c ****             /* Generate the (binary) data. */
4653:Lib/FreeRTOS/Source/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4654:Lib/FreeRTOS/Source/tasks.c **** 
4655:Lib/FreeRTOS/Source/tasks.c ****             /* For percentage calculations. */
4656:Lib/FreeRTOS/Source/tasks.c ****             ulTotalTime /= 100UL;
4657:Lib/FreeRTOS/Source/tasks.c **** 
4658:Lib/FreeRTOS/Source/tasks.c ****             /* Avoid divide by zero errors. */
4659:Lib/FreeRTOS/Source/tasks.c ****             if( ulTotalTime > 0UL )
4660:Lib/FreeRTOS/Source/tasks.c ****             {
4661:Lib/FreeRTOS/Source/tasks.c ****                 /* Create a human readable table from the binary data. */
4662:Lib/FreeRTOS/Source/tasks.c ****                 for( x = 0; x < uxArraySize; x++ )
4663:Lib/FreeRTOS/Source/tasks.c ****                 {
4664:Lib/FreeRTOS/Source/tasks.c ****                     /* What percentage of the total run time has the task used?
4665:Lib/FreeRTOS/Source/tasks.c ****                      * This will always be rounded down to the nearest integer.
4666:Lib/FreeRTOS/Source/tasks.c ****                      * ulTotalRunTime has already been divided by 100. */
4667:Lib/FreeRTOS/Source/tasks.c ****                     ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4668:Lib/FreeRTOS/Source/tasks.c **** 
4669:Lib/FreeRTOS/Source/tasks.c ****                     /* Write the task name to the string, padding with
4670:Lib/FreeRTOS/Source/tasks.c ****                      * spaces so it can be printed in tabular form more
4671:Lib/FreeRTOS/Source/tasks.c ****                      * easily. */
4672:Lib/FreeRTOS/Source/tasks.c ****                     pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcT
4673:Lib/FreeRTOS/Source/tasks.c **** 
4674:Lib/FreeRTOS/Source/tasks.c ****                     if( ulStatsAsPercentage > 0UL )
4675:Lib/FreeRTOS/Source/tasks.c ****                     {
4676:Lib/FreeRTOS/Source/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4677:Lib/FreeRTOS/Source/tasks.c ****                         {
4678:Lib/FreeRTOS/Source/tasks.c ****                             sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ul
4679:Lib/FreeRTOS/Source/tasks.c ****                         }
4680:Lib/FreeRTOS/Source/tasks.c ****                         #else
4681:Lib/FreeRTOS/Source/tasks.c ****                         {
4682:Lib/FreeRTOS/Source/tasks.c ****                             /* sizeof( int ) == sizeof( long ) so a smaller
4683:Lib/FreeRTOS/Source/tasks.c ****                              * printf() library can be used. */
4684:Lib/FreeRTOS/Source/tasks.c ****                             sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStat
4685:Lib/FreeRTOS/Source/tasks.c ****                         }
4686:Lib/FreeRTOS/Source/tasks.c ****                         #endif
4687:Lib/FreeRTOS/Source/tasks.c ****                     }
4688:Lib/FreeRTOS/Source/tasks.c ****                     else
4689:Lib/FreeRTOS/Source/tasks.c ****                     {
4690:Lib/FreeRTOS/Source/tasks.c ****                         /* If the percentage is zero here then the task has
4691:Lib/FreeRTOS/Source/tasks.c ****                          * consumed less than 1% of the total run time. */
ARM GAS  /tmp/ccEd3BVV.s 			page 86


4692:Lib/FreeRTOS/Source/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4693:Lib/FreeRTOS/Source/tasks.c ****                         {
4694:Lib/FreeRTOS/Source/tasks.c ****                             sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulR
4695:Lib/FreeRTOS/Source/tasks.c ****                         }
4696:Lib/FreeRTOS/Source/tasks.c ****                         #else
4697:Lib/FreeRTOS/Source/tasks.c ****                         {
4698:Lib/FreeRTOS/Source/tasks.c ****                             /* sizeof( int ) == sizeof( long ) so a smaller
4699:Lib/FreeRTOS/Source/tasks.c ****                              * printf() library can be used. */
4700:Lib/FreeRTOS/Source/tasks.c ****                             sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStat
4701:Lib/FreeRTOS/Source/tasks.c ****                         }
4702:Lib/FreeRTOS/Source/tasks.c ****                         #endif
4703:Lib/FreeRTOS/Source/tasks.c ****                     }
4704:Lib/FreeRTOS/Source/tasks.c **** 
4705:Lib/FreeRTOS/Source/tasks.c ****                     pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok o
4706:Lib/FreeRTOS/Source/tasks.c ****                 }
4707:Lib/FreeRTOS/Source/tasks.c ****             }
4708:Lib/FreeRTOS/Source/tasks.c ****             else
4709:Lib/FreeRTOS/Source/tasks.c ****             {
4710:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4711:Lib/FreeRTOS/Source/tasks.c ****             }
4712:Lib/FreeRTOS/Source/tasks.c **** 
4713:Lib/FreeRTOS/Source/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4714:Lib/FreeRTOS/Source/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4715:Lib/FreeRTOS/Source/tasks.c ****             vPortFree( pxTaskStatusArray );
4716:Lib/FreeRTOS/Source/tasks.c ****         }
4717:Lib/FreeRTOS/Source/tasks.c ****         else
4718:Lib/FreeRTOS/Source/tasks.c ****         {
4719:Lib/FreeRTOS/Source/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4720:Lib/FreeRTOS/Source/tasks.c ****         }
4721:Lib/FreeRTOS/Source/tasks.c ****     }
4722:Lib/FreeRTOS/Source/tasks.c **** 
4723:Lib/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4724:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4725:Lib/FreeRTOS/Source/tasks.c **** 
4726:Lib/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4727:Lib/FreeRTOS/Source/tasks.c **** {
4728:Lib/FreeRTOS/Source/tasks.c ****     TickType_t uxReturn;
4729:Lib/FreeRTOS/Source/tasks.c **** 
4730:Lib/FreeRTOS/Source/tasks.c ****     uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4731:Lib/FreeRTOS/Source/tasks.c **** 
4732:Lib/FreeRTOS/Source/tasks.c ****     /* Reset the event list item to its normal value - so it can be used with
4733:Lib/FreeRTOS/Source/tasks.c ****      * queues and semaphores. */
4734:Lib/FreeRTOS/Source/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITI
4735:Lib/FreeRTOS/Source/tasks.c **** 
4736:Lib/FreeRTOS/Source/tasks.c ****     return uxReturn;
4737:Lib/FreeRTOS/Source/tasks.c **** }
4738:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4739:Lib/FreeRTOS/Source/tasks.c **** 
4740:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4741:Lib/FreeRTOS/Source/tasks.c **** 
4742:Lib/FreeRTOS/Source/tasks.c ****     TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4743:Lib/FreeRTOS/Source/tasks.c ****     {
4744:Lib/FreeRTOS/Source/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
4745:Lib/FreeRTOS/Source/tasks.c ****          * then pxCurrentTCB will be NULL. */
4746:Lib/FreeRTOS/Source/tasks.c ****         if( pxCurrentTCB != NULL )
4747:Lib/FreeRTOS/Source/tasks.c ****         {
4748:Lib/FreeRTOS/Source/tasks.c ****             ( pxCurrentTCB->uxMutexesHeld )++;
ARM GAS  /tmp/ccEd3BVV.s 			page 87


4749:Lib/FreeRTOS/Source/tasks.c ****         }
4750:Lib/FreeRTOS/Source/tasks.c **** 
4751:Lib/FreeRTOS/Source/tasks.c ****         return pxCurrentTCB;
4752:Lib/FreeRTOS/Source/tasks.c ****     }
4753:Lib/FreeRTOS/Source/tasks.c **** 
4754:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4755:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4756:Lib/FreeRTOS/Source/tasks.c **** 
4757:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4758:Lib/FreeRTOS/Source/tasks.c **** 
4759:Lib/FreeRTOS/Source/tasks.c ****     uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
4760:Lib/FreeRTOS/Source/tasks.c ****                                       BaseType_t xClearCountOnExit,
4761:Lib/FreeRTOS/Source/tasks.c ****                                       TickType_t xTicksToWait )
4762:Lib/FreeRTOS/Source/tasks.c ****     {
4763:Lib/FreeRTOS/Source/tasks.c ****         uint32_t ulReturn;
4764:Lib/FreeRTOS/Source/tasks.c **** 
4765:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4766:Lib/FreeRTOS/Source/tasks.c **** 
4767:Lib/FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
4768:Lib/FreeRTOS/Source/tasks.c ****         {
4769:Lib/FreeRTOS/Source/tasks.c ****             /* Only block if the notification count is not already non-zero. */
4770:Lib/FreeRTOS/Source/tasks.c ****             if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
4771:Lib/FreeRTOS/Source/tasks.c ****             {
4772:Lib/FreeRTOS/Source/tasks.c ****                 /* Mark this task as waiting for a notification. */
4773:Lib/FreeRTOS/Source/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
4774:Lib/FreeRTOS/Source/tasks.c **** 
4775:Lib/FreeRTOS/Source/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
4776:Lib/FreeRTOS/Source/tasks.c ****                 {
4777:Lib/FreeRTOS/Source/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4778:Lib/FreeRTOS/Source/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
4779:Lib/FreeRTOS/Source/tasks.c **** 
4780:Lib/FreeRTOS/Source/tasks.c ****                     /* All ports are written to allow a yield in a critical
4781:Lib/FreeRTOS/Source/tasks.c ****                      * section (some will yield immediately, others wait until the
4782:Lib/FreeRTOS/Source/tasks.c ****                      * critical section exits) - but it is not something that
4783:Lib/FreeRTOS/Source/tasks.c ****                      * application code should ever do. */
4784:Lib/FreeRTOS/Source/tasks.c ****                     portYIELD_WITHIN_API();
4785:Lib/FreeRTOS/Source/tasks.c ****                 }
4786:Lib/FreeRTOS/Source/tasks.c ****                 else
4787:Lib/FreeRTOS/Source/tasks.c ****                 {
4788:Lib/FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4789:Lib/FreeRTOS/Source/tasks.c ****                 }
4790:Lib/FreeRTOS/Source/tasks.c ****             }
4791:Lib/FreeRTOS/Source/tasks.c ****             else
4792:Lib/FreeRTOS/Source/tasks.c ****             {
4793:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4794:Lib/FreeRTOS/Source/tasks.c ****             }
4795:Lib/FreeRTOS/Source/tasks.c ****         }
4796:Lib/FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
4797:Lib/FreeRTOS/Source/tasks.c **** 
4798:Lib/FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
4799:Lib/FreeRTOS/Source/tasks.c ****         {
4800:Lib/FreeRTOS/Source/tasks.c ****             traceTASK_NOTIFY_TAKE( uxIndexToWait );
4801:Lib/FreeRTOS/Source/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
4802:Lib/FreeRTOS/Source/tasks.c **** 
4803:Lib/FreeRTOS/Source/tasks.c ****             if( ulReturn != 0UL )
4804:Lib/FreeRTOS/Source/tasks.c ****             {
4805:Lib/FreeRTOS/Source/tasks.c ****                 if( xClearCountOnExit != pdFALSE )
ARM GAS  /tmp/ccEd3BVV.s 			page 88


4806:Lib/FreeRTOS/Source/tasks.c ****                 {
4807:Lib/FreeRTOS/Source/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
4808:Lib/FreeRTOS/Source/tasks.c ****                 }
4809:Lib/FreeRTOS/Source/tasks.c ****                 else
4810:Lib/FreeRTOS/Source/tasks.c ****                 {
4811:Lib/FreeRTOS/Source/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
4812:Lib/FreeRTOS/Source/tasks.c ****                 }
4813:Lib/FreeRTOS/Source/tasks.c ****             }
4814:Lib/FreeRTOS/Source/tasks.c ****             else
4815:Lib/FreeRTOS/Source/tasks.c ****             {
4816:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4817:Lib/FreeRTOS/Source/tasks.c ****             }
4818:Lib/FreeRTOS/Source/tasks.c **** 
4819:Lib/FreeRTOS/Source/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
4820:Lib/FreeRTOS/Source/tasks.c ****         }
4821:Lib/FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
4822:Lib/FreeRTOS/Source/tasks.c **** 
4823:Lib/FreeRTOS/Source/tasks.c ****         return ulReturn;
4824:Lib/FreeRTOS/Source/tasks.c ****     }
4825:Lib/FreeRTOS/Source/tasks.c **** 
4826:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4827:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4828:Lib/FreeRTOS/Source/tasks.c **** 
4829:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4830:Lib/FreeRTOS/Source/tasks.c **** 
4831:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
4832:Lib/FreeRTOS/Source/tasks.c ****                                        uint32_t ulBitsToClearOnEntry,
4833:Lib/FreeRTOS/Source/tasks.c ****                                        uint32_t ulBitsToClearOnExit,
4834:Lib/FreeRTOS/Source/tasks.c ****                                        uint32_t * pulNotificationValue,
4835:Lib/FreeRTOS/Source/tasks.c ****                                        TickType_t xTicksToWait )
4836:Lib/FreeRTOS/Source/tasks.c ****     {
4837:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
4838:Lib/FreeRTOS/Source/tasks.c **** 
4839:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4840:Lib/FreeRTOS/Source/tasks.c **** 
4841:Lib/FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
4842:Lib/FreeRTOS/Source/tasks.c ****         {
4843:Lib/FreeRTOS/Source/tasks.c ****             /* Only block if a notification is not already pending. */
4844:Lib/FreeRTOS/Source/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
4845:Lib/FreeRTOS/Source/tasks.c ****             {
4846:Lib/FreeRTOS/Source/tasks.c ****                 /* Clear bits in the task's notification value as bits may get
4847:Lib/FreeRTOS/Source/tasks.c ****                  * set  by the notifying task or interrupt.  This can be used to
4848:Lib/FreeRTOS/Source/tasks.c ****                  * clear the value to zero. */
4849:Lib/FreeRTOS/Source/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
4850:Lib/FreeRTOS/Source/tasks.c **** 
4851:Lib/FreeRTOS/Source/tasks.c ****                 /* Mark this task as waiting for a notification. */
4852:Lib/FreeRTOS/Source/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
4853:Lib/FreeRTOS/Source/tasks.c **** 
4854:Lib/FreeRTOS/Source/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
4855:Lib/FreeRTOS/Source/tasks.c ****                 {
4856:Lib/FreeRTOS/Source/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4857:Lib/FreeRTOS/Source/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
4858:Lib/FreeRTOS/Source/tasks.c **** 
4859:Lib/FreeRTOS/Source/tasks.c ****                     /* All ports are written to allow a yield in a critical
4860:Lib/FreeRTOS/Source/tasks.c ****                      * section (some will yield immediately, others wait until the
4861:Lib/FreeRTOS/Source/tasks.c ****                      * critical section exits) - but it is not something that
4862:Lib/FreeRTOS/Source/tasks.c ****                      * application code should ever do. */
ARM GAS  /tmp/ccEd3BVV.s 			page 89


4863:Lib/FreeRTOS/Source/tasks.c ****                     portYIELD_WITHIN_API();
4864:Lib/FreeRTOS/Source/tasks.c ****                 }
4865:Lib/FreeRTOS/Source/tasks.c ****                 else
4866:Lib/FreeRTOS/Source/tasks.c ****                 {
4867:Lib/FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4868:Lib/FreeRTOS/Source/tasks.c ****                 }
4869:Lib/FreeRTOS/Source/tasks.c ****             }
4870:Lib/FreeRTOS/Source/tasks.c ****             else
4871:Lib/FreeRTOS/Source/tasks.c ****             {
4872:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4873:Lib/FreeRTOS/Source/tasks.c ****             }
4874:Lib/FreeRTOS/Source/tasks.c ****         }
4875:Lib/FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
4876:Lib/FreeRTOS/Source/tasks.c **** 
4877:Lib/FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
4878:Lib/FreeRTOS/Source/tasks.c ****         {
4879:Lib/FreeRTOS/Source/tasks.c ****             traceTASK_NOTIFY_WAIT( uxIndexToWait );
4880:Lib/FreeRTOS/Source/tasks.c **** 
4881:Lib/FreeRTOS/Source/tasks.c ****             if( pulNotificationValue != NULL )
4882:Lib/FreeRTOS/Source/tasks.c ****             {
4883:Lib/FreeRTOS/Source/tasks.c ****                 /* Output the current notification value, which may or may not
4884:Lib/FreeRTOS/Source/tasks.c ****                  * have changed. */
4885:Lib/FreeRTOS/Source/tasks.c ****                 *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
4886:Lib/FreeRTOS/Source/tasks.c ****             }
4887:Lib/FreeRTOS/Source/tasks.c **** 
4888:Lib/FreeRTOS/Source/tasks.c ****             /* If ucNotifyValue is set then either the task never entered the
4889:Lib/FreeRTOS/Source/tasks.c ****              * blocked state (because a notification was already pending) or the
4890:Lib/FreeRTOS/Source/tasks.c ****              * task unblocked because of a notification.  Otherwise the task
4891:Lib/FreeRTOS/Source/tasks.c ****              * unblocked because of a timeout. */
4892:Lib/FreeRTOS/Source/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
4893:Lib/FreeRTOS/Source/tasks.c ****             {
4894:Lib/FreeRTOS/Source/tasks.c ****                 /* A notification was not received. */
4895:Lib/FreeRTOS/Source/tasks.c ****                 xReturn = pdFALSE;
4896:Lib/FreeRTOS/Source/tasks.c ****             }
4897:Lib/FreeRTOS/Source/tasks.c ****             else
4898:Lib/FreeRTOS/Source/tasks.c ****             {
4899:Lib/FreeRTOS/Source/tasks.c ****                 /* A notification was already pending or a notification was
4900:Lib/FreeRTOS/Source/tasks.c ****                  * received while the task was waiting. */
4901:Lib/FreeRTOS/Source/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
4902:Lib/FreeRTOS/Source/tasks.c ****                 xReturn = pdTRUE;
4903:Lib/FreeRTOS/Source/tasks.c ****             }
4904:Lib/FreeRTOS/Source/tasks.c **** 
4905:Lib/FreeRTOS/Source/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
4906:Lib/FreeRTOS/Source/tasks.c ****         }
4907:Lib/FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
4908:Lib/FreeRTOS/Source/tasks.c **** 
4909:Lib/FreeRTOS/Source/tasks.c ****         return xReturn;
4910:Lib/FreeRTOS/Source/tasks.c ****     }
4911:Lib/FreeRTOS/Source/tasks.c **** 
4912:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4913:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4914:Lib/FreeRTOS/Source/tasks.c **** 
4915:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4916:Lib/FreeRTOS/Source/tasks.c **** 
4917:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
4918:Lib/FreeRTOS/Source/tasks.c ****                                    UBaseType_t uxIndexToNotify,
4919:Lib/FreeRTOS/Source/tasks.c ****                                    uint32_t ulValue,
ARM GAS  /tmp/ccEd3BVV.s 			page 90


4920:Lib/FreeRTOS/Source/tasks.c ****                                    eNotifyAction eAction,
4921:Lib/FreeRTOS/Source/tasks.c ****                                    uint32_t * pulPreviousNotificationValue )
4922:Lib/FreeRTOS/Source/tasks.c ****     {
4923:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
4924:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn = pdPASS;
4925:Lib/FreeRTOS/Source/tasks.c ****         uint8_t ucOriginalNotifyState;
4926:Lib/FreeRTOS/Source/tasks.c **** 
4927:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4928:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( xTaskToNotify );
4929:Lib/FreeRTOS/Source/tasks.c ****         pxTCB = xTaskToNotify;
4930:Lib/FreeRTOS/Source/tasks.c **** 
4931:Lib/FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
4932:Lib/FreeRTOS/Source/tasks.c ****         {
4933:Lib/FreeRTOS/Source/tasks.c ****             if( pulPreviousNotificationValue != NULL )
4934:Lib/FreeRTOS/Source/tasks.c ****             {
4935:Lib/FreeRTOS/Source/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
4936:Lib/FreeRTOS/Source/tasks.c ****             }
4937:Lib/FreeRTOS/Source/tasks.c **** 
4938:Lib/FreeRTOS/Source/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
4939:Lib/FreeRTOS/Source/tasks.c **** 
4940:Lib/FreeRTOS/Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
4941:Lib/FreeRTOS/Source/tasks.c **** 
4942:Lib/FreeRTOS/Source/tasks.c ****             switch( eAction )
4943:Lib/FreeRTOS/Source/tasks.c ****             {
4944:Lib/FreeRTOS/Source/tasks.c ****                 case eSetBits:
4945:Lib/FreeRTOS/Source/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
4946:Lib/FreeRTOS/Source/tasks.c ****                     break;
4947:Lib/FreeRTOS/Source/tasks.c **** 
4948:Lib/FreeRTOS/Source/tasks.c ****                 case eIncrement:
4949:Lib/FreeRTOS/Source/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
4950:Lib/FreeRTOS/Source/tasks.c ****                     break;
4951:Lib/FreeRTOS/Source/tasks.c **** 
4952:Lib/FreeRTOS/Source/tasks.c ****                 case eSetValueWithOverwrite:
4953:Lib/FreeRTOS/Source/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
4954:Lib/FreeRTOS/Source/tasks.c ****                     break;
4955:Lib/FreeRTOS/Source/tasks.c **** 
4956:Lib/FreeRTOS/Source/tasks.c ****                 case eSetValueWithoutOverwrite:
4957:Lib/FreeRTOS/Source/tasks.c **** 
4958:Lib/FreeRTOS/Source/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4959:Lib/FreeRTOS/Source/tasks.c ****                     {
4960:Lib/FreeRTOS/Source/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
4961:Lib/FreeRTOS/Source/tasks.c ****                     }
4962:Lib/FreeRTOS/Source/tasks.c ****                     else
4963:Lib/FreeRTOS/Source/tasks.c ****                     {
4964:Lib/FreeRTOS/Source/tasks.c ****                         /* The value could not be written to the task. */
4965:Lib/FreeRTOS/Source/tasks.c ****                         xReturn = pdFAIL;
4966:Lib/FreeRTOS/Source/tasks.c ****                     }
4967:Lib/FreeRTOS/Source/tasks.c **** 
4968:Lib/FreeRTOS/Source/tasks.c ****                     break;
4969:Lib/FreeRTOS/Source/tasks.c **** 
4970:Lib/FreeRTOS/Source/tasks.c ****                 case eNoAction:
4971:Lib/FreeRTOS/Source/tasks.c **** 
4972:Lib/FreeRTOS/Source/tasks.c ****                     /* The task is being notified without its notify value being
4973:Lib/FreeRTOS/Source/tasks.c ****                      * updated. */
4974:Lib/FreeRTOS/Source/tasks.c ****                     break;
4975:Lib/FreeRTOS/Source/tasks.c **** 
4976:Lib/FreeRTOS/Source/tasks.c ****                 default:
ARM GAS  /tmp/ccEd3BVV.s 			page 91


4977:Lib/FreeRTOS/Source/tasks.c **** 
4978:Lib/FreeRTOS/Source/tasks.c ****                     /* Should not get here if all enums are handled.
4979:Lib/FreeRTOS/Source/tasks.c ****                      * Artificially force an assert by testing a value the
4980:Lib/FreeRTOS/Source/tasks.c ****                      * compiler can't assume is const. */
4981:Lib/FreeRTOS/Source/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
4982:Lib/FreeRTOS/Source/tasks.c **** 
4983:Lib/FreeRTOS/Source/tasks.c ****                     break;
4984:Lib/FreeRTOS/Source/tasks.c ****             }
4985:Lib/FreeRTOS/Source/tasks.c **** 
4986:Lib/FreeRTOS/Source/tasks.c ****             traceTASK_NOTIFY( uxIndexToNotify );
4987:Lib/FreeRTOS/Source/tasks.c **** 
4988:Lib/FreeRTOS/Source/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
4989:Lib/FreeRTOS/Source/tasks.c ****              * notification then unblock it now. */
4990:Lib/FreeRTOS/Source/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4991:Lib/FreeRTOS/Source/tasks.c ****             {
4992:Lib/FreeRTOS/Source/tasks.c ****                 listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
4993:Lib/FreeRTOS/Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
4994:Lib/FreeRTOS/Source/tasks.c **** 
4995:Lib/FreeRTOS/Source/tasks.c ****                 /* The task should not have been on an event list. */
4996:Lib/FreeRTOS/Source/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4997:Lib/FreeRTOS/Source/tasks.c **** 
4998:Lib/FreeRTOS/Source/tasks.c ****                 #if ( configUSE_TICKLESS_IDLE != 0 )
4999:Lib/FreeRTOS/Source/tasks.c ****                 {
5000:Lib/FreeRTOS/Source/tasks.c ****                     /* If a task is blocked waiting for a notification then
5001:Lib/FreeRTOS/Source/tasks.c ****                      * xNextTaskUnblockTime might be set to the blocked task's time
5002:Lib/FreeRTOS/Source/tasks.c ****                      * out time.  If the task is unblocked for a reason other than
5003:Lib/FreeRTOS/Source/tasks.c ****                      * a timeout xNextTaskUnblockTime is normally left unchanged,
5004:Lib/FreeRTOS/Source/tasks.c ****                      * because it will automatically get reset to a new value when
5005:Lib/FreeRTOS/Source/tasks.c ****                      * the tick count equals xNextTaskUnblockTime.  However if
5006:Lib/FreeRTOS/Source/tasks.c ****                      * tickless idling is used it might be more important to enter
5007:Lib/FreeRTOS/Source/tasks.c ****                      * sleep mode at the earliest possible time - so reset
5008:Lib/FreeRTOS/Source/tasks.c ****                      * xNextTaskUnblockTime here to ensure it is updated at the
5009:Lib/FreeRTOS/Source/tasks.c ****                      * earliest possible time. */
5010:Lib/FreeRTOS/Source/tasks.c ****                     prvResetNextTaskUnblockTime();
5011:Lib/FreeRTOS/Source/tasks.c ****                 }
5012:Lib/FreeRTOS/Source/tasks.c ****                 #endif
5013:Lib/FreeRTOS/Source/tasks.c **** 
5014:Lib/FreeRTOS/Source/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5015:Lib/FreeRTOS/Source/tasks.c ****                 {
5016:Lib/FreeRTOS/Source/tasks.c ****                     /* The notified task has a priority above the currently
5017:Lib/FreeRTOS/Source/tasks.c ****                      * executing task so a yield is required. */
5018:Lib/FreeRTOS/Source/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
5019:Lib/FreeRTOS/Source/tasks.c ****                 }
5020:Lib/FreeRTOS/Source/tasks.c ****                 else
5021:Lib/FreeRTOS/Source/tasks.c ****                 {
5022:Lib/FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5023:Lib/FreeRTOS/Source/tasks.c ****                 }
5024:Lib/FreeRTOS/Source/tasks.c ****             }
5025:Lib/FreeRTOS/Source/tasks.c ****             else
5026:Lib/FreeRTOS/Source/tasks.c ****             {
5027:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
5028:Lib/FreeRTOS/Source/tasks.c ****             }
5029:Lib/FreeRTOS/Source/tasks.c ****         }
5030:Lib/FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
5031:Lib/FreeRTOS/Source/tasks.c **** 
5032:Lib/FreeRTOS/Source/tasks.c ****         return xReturn;
5033:Lib/FreeRTOS/Source/tasks.c ****     }
ARM GAS  /tmp/ccEd3BVV.s 			page 92


5034:Lib/FreeRTOS/Source/tasks.c **** 
5035:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5036:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5037:Lib/FreeRTOS/Source/tasks.c **** 
5038:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5039:Lib/FreeRTOS/Source/tasks.c **** 
5040:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
5041:Lib/FreeRTOS/Source/tasks.c ****                                           UBaseType_t uxIndexToNotify,
5042:Lib/FreeRTOS/Source/tasks.c ****                                           uint32_t ulValue,
5043:Lib/FreeRTOS/Source/tasks.c ****                                           eNotifyAction eAction,
5044:Lib/FreeRTOS/Source/tasks.c ****                                           uint32_t * pulPreviousNotificationValue,
5045:Lib/FreeRTOS/Source/tasks.c ****                                           BaseType_t * pxHigherPriorityTaskWoken )
5046:Lib/FreeRTOS/Source/tasks.c ****     {
5047:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
5048:Lib/FreeRTOS/Source/tasks.c ****         uint8_t ucOriginalNotifyState;
5049:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn = pdPASS;
5050:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
5051:Lib/FreeRTOS/Source/tasks.c **** 
5052:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( xTaskToNotify );
5053:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5054:Lib/FreeRTOS/Source/tasks.c **** 
5055:Lib/FreeRTOS/Source/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
5056:Lib/FreeRTOS/Source/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
5057:Lib/FreeRTOS/Source/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
5058:Lib/FreeRTOS/Source/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
5059:Lib/FreeRTOS/Source/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5060:Lib/FreeRTOS/Source/tasks.c ****          * is defined in FreeRTOSConfig.h then
5061:Lib/FreeRTOS/Source/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5062:Lib/FreeRTOS/Source/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
5063:Lib/FreeRTOS/Source/tasks.c ****          * been assigned a priority above the configured maximum system call
5064:Lib/FreeRTOS/Source/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
5065:Lib/FreeRTOS/Source/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
5066:Lib/FreeRTOS/Source/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
5067:Lib/FreeRTOS/Source/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5068:Lib/FreeRTOS/Source/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5069:Lib/FreeRTOS/Source/tasks.c ****          * provided on the following link:
5070:Lib/FreeRTOS/Source/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5071:Lib/FreeRTOS/Source/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5072:Lib/FreeRTOS/Source/tasks.c **** 
5073:Lib/FreeRTOS/Source/tasks.c ****         pxTCB = xTaskToNotify;
5074:Lib/FreeRTOS/Source/tasks.c **** 
5075:Lib/FreeRTOS/Source/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5076:Lib/FreeRTOS/Source/tasks.c ****         {
5077:Lib/FreeRTOS/Source/tasks.c ****             if( pulPreviousNotificationValue != NULL )
5078:Lib/FreeRTOS/Source/tasks.c ****             {
5079:Lib/FreeRTOS/Source/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
5080:Lib/FreeRTOS/Source/tasks.c ****             }
5081:Lib/FreeRTOS/Source/tasks.c **** 
5082:Lib/FreeRTOS/Source/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
5083:Lib/FreeRTOS/Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
5084:Lib/FreeRTOS/Source/tasks.c **** 
5085:Lib/FreeRTOS/Source/tasks.c ****             switch( eAction )
5086:Lib/FreeRTOS/Source/tasks.c ****             {
5087:Lib/FreeRTOS/Source/tasks.c ****                 case eSetBits:
5088:Lib/FreeRTOS/Source/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
5089:Lib/FreeRTOS/Source/tasks.c ****                     break;
5090:Lib/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccEd3BVV.s 			page 93


5091:Lib/FreeRTOS/Source/tasks.c ****                 case eIncrement:
5092:Lib/FreeRTOS/Source/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
5093:Lib/FreeRTOS/Source/tasks.c ****                     break;
5094:Lib/FreeRTOS/Source/tasks.c **** 
5095:Lib/FreeRTOS/Source/tasks.c ****                 case eSetValueWithOverwrite:
5096:Lib/FreeRTOS/Source/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
5097:Lib/FreeRTOS/Source/tasks.c ****                     break;
5098:Lib/FreeRTOS/Source/tasks.c **** 
5099:Lib/FreeRTOS/Source/tasks.c ****                 case eSetValueWithoutOverwrite:
5100:Lib/FreeRTOS/Source/tasks.c **** 
5101:Lib/FreeRTOS/Source/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
5102:Lib/FreeRTOS/Source/tasks.c ****                     {
5103:Lib/FreeRTOS/Source/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
5104:Lib/FreeRTOS/Source/tasks.c ****                     }
5105:Lib/FreeRTOS/Source/tasks.c ****                     else
5106:Lib/FreeRTOS/Source/tasks.c ****                     {
5107:Lib/FreeRTOS/Source/tasks.c ****                         /* The value could not be written to the task. */
5108:Lib/FreeRTOS/Source/tasks.c ****                         xReturn = pdFAIL;
5109:Lib/FreeRTOS/Source/tasks.c ****                     }
5110:Lib/FreeRTOS/Source/tasks.c **** 
5111:Lib/FreeRTOS/Source/tasks.c ****                     break;
5112:Lib/FreeRTOS/Source/tasks.c **** 
5113:Lib/FreeRTOS/Source/tasks.c ****                 case eNoAction:
5114:Lib/FreeRTOS/Source/tasks.c **** 
5115:Lib/FreeRTOS/Source/tasks.c ****                     /* The task is being notified without its notify value being
5116:Lib/FreeRTOS/Source/tasks.c ****                      * updated. */
5117:Lib/FreeRTOS/Source/tasks.c ****                     break;
5118:Lib/FreeRTOS/Source/tasks.c **** 
5119:Lib/FreeRTOS/Source/tasks.c ****                 default:
5120:Lib/FreeRTOS/Source/tasks.c **** 
5121:Lib/FreeRTOS/Source/tasks.c ****                     /* Should not get here if all enums are handled.
5122:Lib/FreeRTOS/Source/tasks.c ****                      * Artificially force an assert by testing a value the
5123:Lib/FreeRTOS/Source/tasks.c ****                      * compiler can't assume is const. */
5124:Lib/FreeRTOS/Source/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
5125:Lib/FreeRTOS/Source/tasks.c ****                     break;
5126:Lib/FreeRTOS/Source/tasks.c ****             }
5127:Lib/FreeRTOS/Source/tasks.c **** 
5128:Lib/FreeRTOS/Source/tasks.c ****             traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );
5129:Lib/FreeRTOS/Source/tasks.c **** 
5130:Lib/FreeRTOS/Source/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5131:Lib/FreeRTOS/Source/tasks.c ****              * notification then unblock it now. */
5132:Lib/FreeRTOS/Source/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5133:Lib/FreeRTOS/Source/tasks.c ****             {
5134:Lib/FreeRTOS/Source/tasks.c ****                 /* The task should not have been on an event list. */
5135:Lib/FreeRTOS/Source/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5136:Lib/FreeRTOS/Source/tasks.c **** 
5137:Lib/FreeRTOS/Source/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
5138:Lib/FreeRTOS/Source/tasks.c ****                 {
5139:Lib/FreeRTOS/Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
5140:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
5141:Lib/FreeRTOS/Source/tasks.c ****                 }
5142:Lib/FreeRTOS/Source/tasks.c ****                 else
5143:Lib/FreeRTOS/Source/tasks.c ****                 {
5144:Lib/FreeRTOS/Source/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5145:Lib/FreeRTOS/Source/tasks.c ****                      * this task pending until the scheduler is resumed. */
5146:Lib/FreeRTOS/Source/tasks.c ****                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5147:Lib/FreeRTOS/Source/tasks.c ****                 }
ARM GAS  /tmp/ccEd3BVV.s 			page 94


5148:Lib/FreeRTOS/Source/tasks.c **** 
5149:Lib/FreeRTOS/Source/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5150:Lib/FreeRTOS/Source/tasks.c ****                 {
5151:Lib/FreeRTOS/Source/tasks.c ****                     /* The notified task has a priority above the currently
5152:Lib/FreeRTOS/Source/tasks.c ****                      * executing task so a yield is required. */
5153:Lib/FreeRTOS/Source/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
5154:Lib/FreeRTOS/Source/tasks.c ****                     {
5155:Lib/FreeRTOS/Source/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
5156:Lib/FreeRTOS/Source/tasks.c ****                     }
5157:Lib/FreeRTOS/Source/tasks.c **** 
5158:Lib/FreeRTOS/Source/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5159:Lib/FreeRTOS/Source/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter to an ISR
5160:Lib/FreeRTOS/Source/tasks.c ****                      * safe FreeRTOS function. */
5161:Lib/FreeRTOS/Source/tasks.c ****                     xYieldPending = pdTRUE;
5162:Lib/FreeRTOS/Source/tasks.c ****                 }
5163:Lib/FreeRTOS/Source/tasks.c ****                 else
5164:Lib/FreeRTOS/Source/tasks.c ****                 {
5165:Lib/FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5166:Lib/FreeRTOS/Source/tasks.c ****                 }
5167:Lib/FreeRTOS/Source/tasks.c ****             }
5168:Lib/FreeRTOS/Source/tasks.c ****         }
5169:Lib/FreeRTOS/Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5170:Lib/FreeRTOS/Source/tasks.c **** 
5171:Lib/FreeRTOS/Source/tasks.c ****         return xReturn;
5172:Lib/FreeRTOS/Source/tasks.c ****     }
5173:Lib/FreeRTOS/Source/tasks.c **** 
5174:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5175:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5176:Lib/FreeRTOS/Source/tasks.c **** 
5177:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5178:Lib/FreeRTOS/Source/tasks.c **** 
5179:Lib/FreeRTOS/Source/tasks.c ****     void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
5180:Lib/FreeRTOS/Source/tasks.c ****                                         UBaseType_t uxIndexToNotify,
5181:Lib/FreeRTOS/Source/tasks.c ****                                         BaseType_t * pxHigherPriorityTaskWoken )
5182:Lib/FreeRTOS/Source/tasks.c ****     {
5183:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
5184:Lib/FreeRTOS/Source/tasks.c ****         uint8_t ucOriginalNotifyState;
5185:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
5186:Lib/FreeRTOS/Source/tasks.c **** 
5187:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( xTaskToNotify );
5188:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5189:Lib/FreeRTOS/Source/tasks.c **** 
5190:Lib/FreeRTOS/Source/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
5191:Lib/FreeRTOS/Source/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
5192:Lib/FreeRTOS/Source/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
5193:Lib/FreeRTOS/Source/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
5194:Lib/FreeRTOS/Source/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5195:Lib/FreeRTOS/Source/tasks.c ****          * is defined in FreeRTOSConfig.h then
5196:Lib/FreeRTOS/Source/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5197:Lib/FreeRTOS/Source/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
5198:Lib/FreeRTOS/Source/tasks.c ****          * been assigned a priority above the configured maximum system call
5199:Lib/FreeRTOS/Source/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
5200:Lib/FreeRTOS/Source/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
5201:Lib/FreeRTOS/Source/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
5202:Lib/FreeRTOS/Source/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5203:Lib/FreeRTOS/Source/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5204:Lib/FreeRTOS/Source/tasks.c ****          * provided on the following link:
ARM GAS  /tmp/ccEd3BVV.s 			page 95


5205:Lib/FreeRTOS/Source/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5206:Lib/FreeRTOS/Source/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5207:Lib/FreeRTOS/Source/tasks.c **** 
5208:Lib/FreeRTOS/Source/tasks.c ****         pxTCB = xTaskToNotify;
5209:Lib/FreeRTOS/Source/tasks.c **** 
5210:Lib/FreeRTOS/Source/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5211:Lib/FreeRTOS/Source/tasks.c ****         {
5212:Lib/FreeRTOS/Source/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
5213:Lib/FreeRTOS/Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
5214:Lib/FreeRTOS/Source/tasks.c **** 
5215:Lib/FreeRTOS/Source/tasks.c ****             /* 'Giving' is equivalent to incrementing a count in a counting
5216:Lib/FreeRTOS/Source/tasks.c ****              * semaphore. */
5217:Lib/FreeRTOS/Source/tasks.c ****             ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
5218:Lib/FreeRTOS/Source/tasks.c **** 
5219:Lib/FreeRTOS/Source/tasks.c ****             traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );
5220:Lib/FreeRTOS/Source/tasks.c **** 
5221:Lib/FreeRTOS/Source/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5222:Lib/FreeRTOS/Source/tasks.c ****              * notification then unblock it now. */
5223:Lib/FreeRTOS/Source/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5224:Lib/FreeRTOS/Source/tasks.c ****             {
5225:Lib/FreeRTOS/Source/tasks.c ****                 /* The task should not have been on an event list. */
5226:Lib/FreeRTOS/Source/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5227:Lib/FreeRTOS/Source/tasks.c **** 
5228:Lib/FreeRTOS/Source/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
5229:Lib/FreeRTOS/Source/tasks.c ****                 {
5230:Lib/FreeRTOS/Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
5231:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
5232:Lib/FreeRTOS/Source/tasks.c ****                 }
5233:Lib/FreeRTOS/Source/tasks.c ****                 else
5234:Lib/FreeRTOS/Source/tasks.c ****                 {
5235:Lib/FreeRTOS/Source/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5236:Lib/FreeRTOS/Source/tasks.c ****                      * this task pending until the scheduler is resumed. */
5237:Lib/FreeRTOS/Source/tasks.c ****                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5238:Lib/FreeRTOS/Source/tasks.c ****                 }
5239:Lib/FreeRTOS/Source/tasks.c **** 
5240:Lib/FreeRTOS/Source/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5241:Lib/FreeRTOS/Source/tasks.c ****                 {
5242:Lib/FreeRTOS/Source/tasks.c ****                     /* The notified task has a priority above the currently
5243:Lib/FreeRTOS/Source/tasks.c ****                      * executing task so a yield is required. */
5244:Lib/FreeRTOS/Source/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
5245:Lib/FreeRTOS/Source/tasks.c ****                     {
5246:Lib/FreeRTOS/Source/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
5247:Lib/FreeRTOS/Source/tasks.c ****                     }
5248:Lib/FreeRTOS/Source/tasks.c **** 
5249:Lib/FreeRTOS/Source/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5250:Lib/FreeRTOS/Source/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter in an ISR
5251:Lib/FreeRTOS/Source/tasks.c ****                      * safe FreeRTOS function. */
5252:Lib/FreeRTOS/Source/tasks.c ****                     xYieldPending = pdTRUE;
5253:Lib/FreeRTOS/Source/tasks.c ****                 }
5254:Lib/FreeRTOS/Source/tasks.c ****                 else
5255:Lib/FreeRTOS/Source/tasks.c ****                 {
5256:Lib/FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5257:Lib/FreeRTOS/Source/tasks.c ****                 }
5258:Lib/FreeRTOS/Source/tasks.c ****             }
5259:Lib/FreeRTOS/Source/tasks.c ****         }
5260:Lib/FreeRTOS/Source/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5261:Lib/FreeRTOS/Source/tasks.c ****     }
ARM GAS  /tmp/ccEd3BVV.s 			page 96


5262:Lib/FreeRTOS/Source/tasks.c **** 
5263:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5264:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5265:Lib/FreeRTOS/Source/tasks.c **** 
5266:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5267:Lib/FreeRTOS/Source/tasks.c **** 
5268:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
5269:Lib/FreeRTOS/Source/tasks.c ****                                              UBaseType_t uxIndexToClear )
5270:Lib/FreeRTOS/Source/tasks.c ****     {
5271:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
5272:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
5273:Lib/FreeRTOS/Source/tasks.c **** 
5274:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5275:Lib/FreeRTOS/Source/tasks.c **** 
5276:Lib/FreeRTOS/Source/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5277:Lib/FreeRTOS/Source/tasks.c ****          * its notification state cleared. */
5278:Lib/FreeRTOS/Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
5279:Lib/FreeRTOS/Source/tasks.c **** 
5280:Lib/FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
5281:Lib/FreeRTOS/Source/tasks.c ****         {
5282:Lib/FreeRTOS/Source/tasks.c ****             if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
5283:Lib/FreeRTOS/Source/tasks.c ****             {
5284:Lib/FreeRTOS/Source/tasks.c ****                 pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
5285:Lib/FreeRTOS/Source/tasks.c ****                 xReturn = pdPASS;
5286:Lib/FreeRTOS/Source/tasks.c ****             }
5287:Lib/FreeRTOS/Source/tasks.c ****             else
5288:Lib/FreeRTOS/Source/tasks.c ****             {
5289:Lib/FreeRTOS/Source/tasks.c ****                 xReturn = pdFAIL;
5290:Lib/FreeRTOS/Source/tasks.c ****             }
5291:Lib/FreeRTOS/Source/tasks.c ****         }
5292:Lib/FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
5293:Lib/FreeRTOS/Source/tasks.c **** 
5294:Lib/FreeRTOS/Source/tasks.c ****         return xReturn;
5295:Lib/FreeRTOS/Source/tasks.c ****     }
5296:Lib/FreeRTOS/Source/tasks.c **** 
5297:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5298:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5299:Lib/FreeRTOS/Source/tasks.c **** 
5300:Lib/FreeRTOS/Source/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5301:Lib/FreeRTOS/Source/tasks.c **** 
5302:Lib/FreeRTOS/Source/tasks.c ****     uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
5303:Lib/FreeRTOS/Source/tasks.c ****                                             UBaseType_t uxIndexToClear,
5304:Lib/FreeRTOS/Source/tasks.c ****                                             uint32_t ulBitsToClear )
5305:Lib/FreeRTOS/Source/tasks.c ****     {
5306:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
5307:Lib/FreeRTOS/Source/tasks.c ****         uint32_t ulReturn;
5308:Lib/FreeRTOS/Source/tasks.c **** 
5309:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5310:Lib/FreeRTOS/Source/tasks.c **** 
5311:Lib/FreeRTOS/Source/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5312:Lib/FreeRTOS/Source/tasks.c ****          * its notification state cleared. */
5313:Lib/FreeRTOS/Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
5314:Lib/FreeRTOS/Source/tasks.c **** 
5315:Lib/FreeRTOS/Source/tasks.c ****         taskENTER_CRITICAL();
5316:Lib/FreeRTOS/Source/tasks.c ****         {
5317:Lib/FreeRTOS/Source/tasks.c ****             /* Return the notification as it was before the bits were cleared,
5318:Lib/FreeRTOS/Source/tasks.c ****              * then clear the bit mask. */
ARM GAS  /tmp/ccEd3BVV.s 			page 97


5319:Lib/FreeRTOS/Source/tasks.c ****             ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
5320:Lib/FreeRTOS/Source/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
5321:Lib/FreeRTOS/Source/tasks.c ****         }
5322:Lib/FreeRTOS/Source/tasks.c ****         taskEXIT_CRITICAL();
5323:Lib/FreeRTOS/Source/tasks.c **** 
5324:Lib/FreeRTOS/Source/tasks.c ****         return ulReturn;
5325:Lib/FreeRTOS/Source/tasks.c ****     }
5326:Lib/FreeRTOS/Source/tasks.c **** 
5327:Lib/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5328:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5329:Lib/FreeRTOS/Source/tasks.c **** 
5330:Lib/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
5331:Lib/FreeRTOS/Source/tasks.c **** 
5332:Lib/FreeRTOS/Source/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetRunTimeCounter( const TaskHandle_t xTask )
5333:Lib/FreeRTOS/Source/tasks.c ****     {
5334:Lib/FreeRTOS/Source/tasks.c ****         return xTask->ulRunTimeCounter;
5335:Lib/FreeRTOS/Source/tasks.c ****     }
5336:Lib/FreeRTOS/Source/tasks.c **** 
5337:Lib/FreeRTOS/Source/tasks.c **** #endif
5338:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5339:Lib/FreeRTOS/Source/tasks.c **** 
5340:Lib/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
5341:Lib/FreeRTOS/Source/tasks.c **** 
5342:Lib/FreeRTOS/Source/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetRunTimePercent( const TaskHandle_t xTask )
5343:Lib/FreeRTOS/Source/tasks.c ****     {
5344:Lib/FreeRTOS/Source/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulReturn;
5345:Lib/FreeRTOS/Source/tasks.c **** 
5346:Lib/FreeRTOS/Source/tasks.c ****         ulTotalTime = ( configRUN_TIME_COUNTER_TYPE ) portGET_RUN_TIME_COUNTER_VALUE();
5347:Lib/FreeRTOS/Source/tasks.c **** 
5348:Lib/FreeRTOS/Source/tasks.c ****         /* For percentage calculations. */
5349:Lib/FreeRTOS/Source/tasks.c ****         ulTotalTime /= ( configRUN_TIME_COUNTER_TYPE ) 100;
5350:Lib/FreeRTOS/Source/tasks.c **** 
5351:Lib/FreeRTOS/Source/tasks.c ****         /* Avoid divide by zero errors. */
5352:Lib/FreeRTOS/Source/tasks.c ****         if( ulTotalTime > ( configRUN_TIME_COUNTER_TYPE ) 0 )
5353:Lib/FreeRTOS/Source/tasks.c ****         {
5354:Lib/FreeRTOS/Source/tasks.c ****             ulReturn = xTask->ulRunTimeCounter / ulTotalTime;
5355:Lib/FreeRTOS/Source/tasks.c ****         }
5356:Lib/FreeRTOS/Source/tasks.c ****         else
5357:Lib/FreeRTOS/Source/tasks.c ****         {
5358:Lib/FreeRTOS/Source/tasks.c ****             ulReturn = 0;
5359:Lib/FreeRTOS/Source/tasks.c ****         }
5360:Lib/FreeRTOS/Source/tasks.c **** 
5361:Lib/FreeRTOS/Source/tasks.c ****         return ulReturn;
5362:Lib/FreeRTOS/Source/tasks.c ****     }
5363:Lib/FreeRTOS/Source/tasks.c **** 
5364:Lib/FreeRTOS/Source/tasks.c **** #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
5365:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5366:Lib/FreeRTOS/Source/tasks.c **** 
5367:Lib/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
5368:Lib/FreeRTOS/Source/tasks.c **** 
5369:Lib/FreeRTOS/Source/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimeCounter( void )
5370:Lib/FreeRTOS/Source/tasks.c ****     {
5371:Lib/FreeRTOS/Source/tasks.c ****         return ulTaskGetRunTimeCounter( xIdleTaskHandle );
5372:Lib/FreeRTOS/Source/tasks.c ****     }
5373:Lib/FreeRTOS/Source/tasks.c **** 
5374:Lib/FreeRTOS/Source/tasks.c **** #endif
5375:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccEd3BVV.s 			page 98


5376:Lib/FreeRTOS/Source/tasks.c **** 
5377:Lib/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
5378:Lib/FreeRTOS/Source/tasks.c **** 
5379:Lib/FreeRTOS/Source/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimePercent( void )
5380:Lib/FreeRTOS/Source/tasks.c ****     {
5381:Lib/FreeRTOS/Source/tasks.c ****         return ulTaskGetRunTimePercent( xIdleTaskHandle );
5382:Lib/FreeRTOS/Source/tasks.c ****     }
5383:Lib/FreeRTOS/Source/tasks.c **** 
5384:Lib/FreeRTOS/Source/tasks.c **** #endif
5385:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5386:Lib/FreeRTOS/Source/tasks.c **** 
5387:Lib/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
5388:Lib/FreeRTOS/Source/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely )
5389:Lib/FreeRTOS/Source/tasks.c **** {
 141              		.loc 1 5389 1 is_stmt 1 view -0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
5390:Lib/FreeRTOS/Source/tasks.c ****     TickType_t xTimeToWake;
 145              		.loc 1 5390 5 view .LVU31
5391:Lib/FreeRTOS/Source/tasks.c ****     const TickType_t xConstTickCount = xTickCount;
 146              		.loc 1 5391 5 view .LVU32
5389:Lib/FreeRTOS/Source/tasks.c ****     TickType_t xTimeToWake;
 147              		.loc 1 5389 1 is_stmt 0 view .LVU33
 148 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 149              		.cfi_def_cfa_offset 24
 150              		.cfi_offset 3, -24
 151              		.cfi_offset 4, -20
 152              		.cfi_offset 5, -16
 153              		.cfi_offset 6, -12
 154              		.cfi_offset 7, -8
 155              		.cfi_offset 14, -4
5389:Lib/FreeRTOS/Source/tasks.c ****     TickType_t xTimeToWake;
 156              		.loc 1 5389 1 view .LVU34
 157 0002 0646     		mov	r6, r0
 158              		.loc 1 5391 22 view .LVU35
 159 0004 1A4B     		ldr	r3, .L18
5392:Lib/FreeRTOS/Source/tasks.c **** 
5393:Lib/FreeRTOS/Source/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
5394:Lib/FreeRTOS/Source/tasks.c ****     {
5395:Lib/FreeRTOS/Source/tasks.c ****         /* About to enter a delayed list, so ensure the ucDelayAborted flag is
5396:Lib/FreeRTOS/Source/tasks.c ****          * reset to pdFALSE so it can be detected as having been set to pdTRUE
5397:Lib/FreeRTOS/Source/tasks.c ****          * when the task leaves the Blocked state. */
5398:Lib/FreeRTOS/Source/tasks.c ****         pxCurrentTCB->ucDelayAborted = pdFALSE;
5399:Lib/FreeRTOS/Source/tasks.c ****     }
5400:Lib/FreeRTOS/Source/tasks.c ****     #endif
5401:Lib/FreeRTOS/Source/tasks.c **** 
5402:Lib/FreeRTOS/Source/tasks.c ****     /* Remove the task from the ready list before adding it to the blocked list
5403:Lib/FreeRTOS/Source/tasks.c ****      * as the same list item is used for both lists. */
5404:Lib/FreeRTOS/Source/tasks.c ****     if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 160              		.loc 1 5404 38 view .LVU36
 161 0006 1B4C     		ldr	r4, .L18+4
5391:Lib/FreeRTOS/Source/tasks.c **** 
 162              		.loc 1 5391 22 view .LVU37
 163 0008 1D68     		ldr	r5, [r3]
 164              	.LVL7:
 165              		.loc 1 5404 5 is_stmt 1 view .LVU38
ARM GAS  /tmp/ccEd3BVV.s 			page 99


 166              		.loc 1 5404 38 is_stmt 0 view .LVU39
 167 000a 2068     		ldr	r0, [r4]
 168              	.LVL8:
5389:Lib/FreeRTOS/Source/tasks.c ****     TickType_t xTimeToWake;
 169              		.loc 1 5389 1 view .LVU40
 170 000c 0F46     		mov	r7, r1
 171              		.loc 1 5404 9 view .LVU41
 172 000e 0430     		adds	r0, r0, #4
 173 0010 FFF7FEFF 		bl	uxListRemove
 174              	.LVL9:
5405:Lib/FreeRTOS/Source/tasks.c ****     {
5406:Lib/FreeRTOS/Source/tasks.c ****         /* The current task must be in a ready list, so there is no need to
5407:Lib/FreeRTOS/Source/tasks.c ****          * check, and the port reset macro can be called directly. */
5408:Lib/FreeRTOS/Source/tasks.c ****         portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCu
 175              		.loc 1 5408 81 is_stmt 1 view .LVU42
5409:Lib/FreeRTOS/Source/tasks.c ****     }
5410:Lib/FreeRTOS/Source/tasks.c ****     else
5411:Lib/FreeRTOS/Source/tasks.c ****     {
5412:Lib/FreeRTOS/Source/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 176              		.loc 1 5412 33 view .LVU43
5413:Lib/FreeRTOS/Source/tasks.c ****     }
5414:Lib/FreeRTOS/Source/tasks.c **** 
5415:Lib/FreeRTOS/Source/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
5416:Lib/FreeRTOS/Source/tasks.c ****     {
5417:Lib/FreeRTOS/Source/tasks.c ****         if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 177              		.loc 1 5417 9 view .LVU44
 178              		.loc 1 5417 11 is_stmt 0 view .LVU45
 179 0014 731C     		adds	r3, r6, #1
 180 0016 13D1     		bne	.L10
 181              		.loc 1 5417 47 discriminator 1 view .LVU46
 182 0018 97B1     		cbz	r7, .L10
5418:Lib/FreeRTOS/Source/tasks.c ****         {
5419:Lib/FreeRTOS/Source/tasks.c ****             /* Add the task to the suspended task list instead of a delayed task
5420:Lib/FreeRTOS/Source/tasks.c ****              * list to ensure it is not woken by a timing event.  It will block
5421:Lib/FreeRTOS/Source/tasks.c ****              * indefinitely. */
5422:Lib/FreeRTOS/Source/tasks.c ****             listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 183              		.loc 1 5422 13 is_stmt 1 view .LVU47
 184              	.LBB35:
 185              		.loc 1 5422 13 view .LVU48
 186 001a 174B     		ldr	r3, .L18+8
 187 001c 2168     		ldr	r1, [r4]
 188 001e 5A68     		ldr	r2, [r3, #4]
 189              	.LVL10:
 190              		.loc 1 5422 13 view .LVU49
 191              		.loc 1 5422 13 view .LVU50
 192              		.loc 1 5422 13 view .LVU51
 193 0020 8A60     		str	r2, [r1, #8]
 194              		.loc 1 5422 13 view .LVU52
 195 0022 9068     		ldr	r0, [r2, #8]
 196 0024 2168     		ldr	r1, [r4]
 197 0026 C860     		str	r0, [r1, #12]
 198              		.loc 1 5422 13 view .LVU53
 199 0028 2168     		ldr	r1, [r4]
 200 002a 0431     		adds	r1, r1, #4
 201 002c 4160     		str	r1, [r0, #4]
 202              		.loc 1 5422 13 view .LVU54
 203 002e 2168     		ldr	r1, [r4]
ARM GAS  /tmp/ccEd3BVV.s 			page 100


 204 0030 0431     		adds	r1, r1, #4
 205 0032 9160     		str	r1, [r2, #8]
 206              		.loc 1 5422 13 view .LVU55
 207 0034 2268     		ldr	r2, [r4]
 208              	.LVL11:
 209              		.loc 1 5422 13 is_stmt 0 view .LVU56
 210 0036 5361     		str	r3, [r2, #20]
 211              		.loc 1 5422 13 is_stmt 1 view .LVU57
 212 0038 1A68     		ldr	r2, [r3]
 213 003a 0132     		adds	r2, r2, #1
 214 003c 1A60     		str	r2, [r3]
 215              	.LBE35:
 216              		.loc 1 5422 13 view .LVU58
 217              	.LVL12:
 218              	.L9:
5423:Lib/FreeRTOS/Source/tasks.c ****         }
5424:Lib/FreeRTOS/Source/tasks.c ****         else
5425:Lib/FreeRTOS/Source/tasks.c ****         {
5426:Lib/FreeRTOS/Source/tasks.c ****             /* Calculate the time at which the task should be woken if the event
5427:Lib/FreeRTOS/Source/tasks.c ****              * does not occur.  This may overflow but this doesn't matter, the
5428:Lib/FreeRTOS/Source/tasks.c ****              * kernel will manage it correctly. */
5429:Lib/FreeRTOS/Source/tasks.c ****             xTimeToWake = xConstTickCount + xTicksToWait;
5430:Lib/FreeRTOS/Source/tasks.c **** 
5431:Lib/FreeRTOS/Source/tasks.c ****             /* The list item will be inserted in wake time order. */
5432:Lib/FreeRTOS/Source/tasks.c ****             listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5433:Lib/FreeRTOS/Source/tasks.c **** 
5434:Lib/FreeRTOS/Source/tasks.c ****             if( xTimeToWake < xConstTickCount )
5435:Lib/FreeRTOS/Source/tasks.c ****             {
5436:Lib/FreeRTOS/Source/tasks.c ****                 /* Wake time has overflowed.  Place this item in the overflow
5437:Lib/FreeRTOS/Source/tasks.c ****                  * list. */
5438:Lib/FreeRTOS/Source/tasks.c ****                 vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5439:Lib/FreeRTOS/Source/tasks.c ****             }
5440:Lib/FreeRTOS/Source/tasks.c ****             else
5441:Lib/FreeRTOS/Source/tasks.c ****             {
5442:Lib/FreeRTOS/Source/tasks.c ****                 /* The wake time has not overflowed, so the current block list
5443:Lib/FreeRTOS/Source/tasks.c ****                  * is used. */
5444:Lib/FreeRTOS/Source/tasks.c ****                 vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5445:Lib/FreeRTOS/Source/tasks.c **** 
5446:Lib/FreeRTOS/Source/tasks.c ****                 /* If the task entering the blocked state was placed at the
5447:Lib/FreeRTOS/Source/tasks.c ****                  * head of the list of blocked tasks then xNextTaskUnblockTime
5448:Lib/FreeRTOS/Source/tasks.c ****                  * needs to be updated too. */
5449:Lib/FreeRTOS/Source/tasks.c ****                 if( xTimeToWake < xNextTaskUnblockTime )
5450:Lib/FreeRTOS/Source/tasks.c ****                 {
5451:Lib/FreeRTOS/Source/tasks.c ****                     xNextTaskUnblockTime = xTimeToWake;
5452:Lib/FreeRTOS/Source/tasks.c ****                 }
5453:Lib/FreeRTOS/Source/tasks.c ****                 else
5454:Lib/FreeRTOS/Source/tasks.c ****                 {
5455:Lib/FreeRTOS/Source/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5456:Lib/FreeRTOS/Source/tasks.c ****                 }
5457:Lib/FreeRTOS/Source/tasks.c ****             }
5458:Lib/FreeRTOS/Source/tasks.c ****         }
5459:Lib/FreeRTOS/Source/tasks.c ****     }
5460:Lib/FreeRTOS/Source/tasks.c ****     #else /* INCLUDE_vTaskSuspend */
5461:Lib/FreeRTOS/Source/tasks.c ****     {
5462:Lib/FreeRTOS/Source/tasks.c ****         /* Calculate the time at which the task should be woken if the event
5463:Lib/FreeRTOS/Source/tasks.c ****          * does not occur.  This may overflow but this doesn't matter, the kernel
5464:Lib/FreeRTOS/Source/tasks.c ****          * will manage it correctly. */
ARM GAS  /tmp/ccEd3BVV.s 			page 101


5465:Lib/FreeRTOS/Source/tasks.c ****         xTimeToWake = xConstTickCount + xTicksToWait;
5466:Lib/FreeRTOS/Source/tasks.c **** 
5467:Lib/FreeRTOS/Source/tasks.c ****         /* The list item will be inserted in wake time order. */
5468:Lib/FreeRTOS/Source/tasks.c ****         listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5469:Lib/FreeRTOS/Source/tasks.c **** 
5470:Lib/FreeRTOS/Source/tasks.c ****         if( xTimeToWake < xConstTickCount )
5471:Lib/FreeRTOS/Source/tasks.c ****         {
5472:Lib/FreeRTOS/Source/tasks.c ****             /* Wake time has overflowed.  Place this item in the overflow list. */
5473:Lib/FreeRTOS/Source/tasks.c ****             vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5474:Lib/FreeRTOS/Source/tasks.c ****         }
5475:Lib/FreeRTOS/Source/tasks.c ****         else
5476:Lib/FreeRTOS/Source/tasks.c ****         {
5477:Lib/FreeRTOS/Source/tasks.c ****             /* The wake time has not overflowed, so the current block list is used. */
5478:Lib/FreeRTOS/Source/tasks.c ****             vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5479:Lib/FreeRTOS/Source/tasks.c **** 
5480:Lib/FreeRTOS/Source/tasks.c ****             /* If the task entering the blocked state was placed at the head of the
5481:Lib/FreeRTOS/Source/tasks.c ****              * list of blocked tasks then xNextTaskUnblockTime needs to be updated
5482:Lib/FreeRTOS/Source/tasks.c ****              * too. */
5483:Lib/FreeRTOS/Source/tasks.c ****             if( xTimeToWake < xNextTaskUnblockTime )
5484:Lib/FreeRTOS/Source/tasks.c ****             {
5485:Lib/FreeRTOS/Source/tasks.c ****                 xNextTaskUnblockTime = xTimeToWake;
5486:Lib/FreeRTOS/Source/tasks.c ****             }
5487:Lib/FreeRTOS/Source/tasks.c ****             else
5488:Lib/FreeRTOS/Source/tasks.c ****             {
5489:Lib/FreeRTOS/Source/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
5490:Lib/FreeRTOS/Source/tasks.c ****             }
5491:Lib/FreeRTOS/Source/tasks.c ****         }
5492:Lib/FreeRTOS/Source/tasks.c **** 
5493:Lib/FreeRTOS/Source/tasks.c ****         /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5494:Lib/FreeRTOS/Source/tasks.c ****         ( void ) xCanBlockIndefinitely;
5495:Lib/FreeRTOS/Source/tasks.c ****     }
5496:Lib/FreeRTOS/Source/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
5497:Lib/FreeRTOS/Source/tasks.c **** }
 219              		.loc 1 5497 1 is_stmt 0 view .LVU59
 220 003e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 221              	.LVL13:
 222              	.L10:
5429:Lib/FreeRTOS/Source/tasks.c **** 
 223              		.loc 1 5429 13 is_stmt 1 view .LVU60
5432:Lib/FreeRTOS/Source/tasks.c **** 
 224              		.loc 1 5432 13 is_stmt 0 view .LVU61
 225 0040 2368     		ldr	r3, [r4]
 226 0042 AD19     		adds	r5, r5, r6
 227              	.LVL14:
5432:Lib/FreeRTOS/Source/tasks.c **** 
 228              		.loc 1 5432 13 is_stmt 1 view .LVU62
 229 0044 5D60     		str	r5, [r3, #4]
5434:Lib/FreeRTOS/Source/tasks.c ****             {
 230              		.loc 1 5434 13 view .LVU63
5434:Lib/FreeRTOS/Source/tasks.c ****             {
 231              		.loc 1 5434 15 is_stmt 0 view .LVU64
 232 0046 07D3     		bcc	.L14
5438:Lib/FreeRTOS/Source/tasks.c ****             }
 233              		.loc 1 5438 17 is_stmt 1 view .LVU65
 234 0048 0C4B     		ldr	r3, .L18+12
 235 004a 1868     		ldr	r0, [r3]
5438:Lib/FreeRTOS/Source/tasks.c ****             }
ARM GAS  /tmp/ccEd3BVV.s 			page 102


 236              		.loc 1 5438 72 is_stmt 0 view .LVU66
 237 004c 2168     		ldr	r1, [r4]
 238              		.loc 1 5497 1 view .LVU67
 239 004e BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 240              		.cfi_remember_state
 241              		.cfi_restore 14
 242              		.cfi_restore 7
 243              		.cfi_restore 6
 244              		.cfi_restore 5
 245              		.cfi_restore 4
 246              		.cfi_restore 3
 247              		.cfi_def_cfa_offset 0
 248              	.LVL15:
5438:Lib/FreeRTOS/Source/tasks.c ****             }
 249              		.loc 1 5438 17 view .LVU68
 250 0052 0431     		adds	r1, r1, #4
 251 0054 FFF7FEBF 		b	vListInsert
 252              	.LVL16:
 253              	.L14:
 254              		.cfi_restore_state
5444:Lib/FreeRTOS/Source/tasks.c **** 
 255              		.loc 1 5444 17 is_stmt 1 view .LVU69
 256 0058 094B     		ldr	r3, .L18+16
 257 005a 1868     		ldr	r0, [r3]
5444:Lib/FreeRTOS/Source/tasks.c **** 
 258              		.loc 1 5444 64 is_stmt 0 view .LVU70
 259 005c 2168     		ldr	r1, [r4]
5444:Lib/FreeRTOS/Source/tasks.c **** 
 260              		.loc 1 5444 17 view .LVU71
 261 005e 0431     		adds	r1, r1, #4
 262 0060 FFF7FEFF 		bl	vListInsert
 263              	.LVL17:
5449:Lib/FreeRTOS/Source/tasks.c ****                 {
 264              		.loc 1 5449 17 is_stmt 1 view .LVU72
5449:Lib/FreeRTOS/Source/tasks.c ****                 {
 265              		.loc 1 5449 33 is_stmt 0 view .LVU73
 266 0064 074B     		ldr	r3, .L18+20
 267 0066 1A68     		ldr	r2, [r3]
5449:Lib/FreeRTOS/Source/tasks.c ****                 {
 268              		.loc 1 5449 19 view .LVU74
 269 0068 AA42     		cmp	r2, r5
5451:Lib/FreeRTOS/Source/tasks.c ****                 }
 270              		.loc 1 5451 21 is_stmt 1 view .LVU75
5451:Lib/FreeRTOS/Source/tasks.c ****                 }
 271              		.loc 1 5451 42 is_stmt 0 view .LVU76
 272 006a 88BF     		it	hi
 273 006c 1D60     		strhi	r5, [r3]
5455:Lib/FreeRTOS/Source/tasks.c ****                 }
 274              		.loc 1 5455 45 is_stmt 1 view .LVU77
 275              		.loc 1 5497 1 is_stmt 0 view .LVU78
 276 006e E6E7     		b	.L9
 277              	.L19:
 278              		.align	2
 279              	.L18:
 280 0070 00000000 		.word	xTickCount
 281 0074 00000000 		.word	pxCurrentTCB
 282 0078 00000000 		.word	xSuspendedTaskList
ARM GAS  /tmp/ccEd3BVV.s 			page 103


 283 007c 00000000 		.word	pxOverflowDelayedTaskList
 284 0080 00000000 		.word	pxDelayedTaskList
 285 0084 00000000 		.word	xNextTaskUnblockTime
 286              		.cfi_endproc
 287              	.LFE66:
 289              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 290              		.align	1
 291              		.syntax unified
 292              		.thumb
 293              		.thumb_func
 295              	prvResetNextTaskUnblockTime:
 296              	.LFB47:
4068:Lib/FreeRTOS/Source/tasks.c ****     if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 297              		.loc 1 4068 1 is_stmt 1 view -0
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 0
 300              		@ frame_needed = 0, uses_anonymous_args = 0
 301              		@ link register save eliminated.
4069:Lib/FreeRTOS/Source/tasks.c ****     {
 302              		.loc 1 4069 5 view .LVU80
4069:Lib/FreeRTOS/Source/tasks.c ****     {
 303              		.loc 1 4069 9 is_stmt 0 view .LVU81
 304 0000 064A     		ldr	r2, .L24
 305 0002 1368     		ldr	r3, [r2]
 306 0004 1968     		ldr	r1, [r3]
 307 0006 064B     		ldr	r3, .L24+4
4069:Lib/FreeRTOS/Source/tasks.c ****     {
 308              		.loc 1 4069 7 view .LVU82
 309 0008 19B9     		cbnz	r1, .L21
4075:Lib/FreeRTOS/Source/tasks.c ****     }
 310              		.loc 1 4075 9 is_stmt 1 view .LVU83
4075:Lib/FreeRTOS/Source/tasks.c ****     }
 311              		.loc 1 4075 30 is_stmt 0 view .LVU84
 312 000a 4FF0FF32 		mov	r2, #-1
 313              	.L23:
 314              	.LBB38:
 315              	.LBB39:
4083:Lib/FreeRTOS/Source/tasks.c ****     }
 316              		.loc 1 4083 30 view .LVU85
 317 000e 1A60     		str	r2, [r3]
 318              	.LBE39:
 319              	.LBE38:
4085:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 320              		.loc 1 4085 1 view .LVU86
 321 0010 7047     		bx	lr
 322              	.L21:
 323              	.LBB41:
 324              	.LBI38:
4067:Lib/FreeRTOS/Source/tasks.c **** {
 325              		.loc 1 4067 13 is_stmt 1 view .LVU87
 326              	.LBB40:
4083:Lib/FreeRTOS/Source/tasks.c ****     }
 327              		.loc 1 4083 9 view .LVU88
4083:Lib/FreeRTOS/Source/tasks.c ****     }
 328              		.loc 1 4083 32 is_stmt 0 view .LVU89
 329 0012 1268     		ldr	r2, [r2]
 330 0014 D268     		ldr	r2, [r2, #12]
ARM GAS  /tmp/ccEd3BVV.s 			page 104


 331 0016 1268     		ldr	r2, [r2]
 332 0018 F9E7     		b	.L23
 333              	.L25:
 334 001a 00BF     		.align	2
 335              	.L24:
 336 001c 00000000 		.word	pxDelayedTaskList
 337 0020 00000000 		.word	xNextTaskUnblockTime
 338              	.LBE40:
 339              	.LBE41:
 340              		.cfi_endproc
 341              	.LFE47:
 343              		.section	.rodata.prvTaskIsTaskSuspended.str1.1,"aMS",%progbits,1
 344              	.LC0:
 345 0000 3000     		.ascii	"0\000"
 346              	.LC1:
 347 0002 4C69622F 		.ascii	"Lib/FreeRTOS/Source/tasks.c\000"
 347      46726565 
 347      52544F53 
 347      2F536F75 
 347      7263652F 
 348              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 349              		.align	1
 350              		.syntax unified
 351              		.thumb
 352              		.thumb_func
 354              	prvTaskIsTaskSuspended:
 355              	.LVL18:
 356              	.LFB11:
1794:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn = pdFALSE;
 357              		.loc 1 1794 5 is_stmt 1 view -0
 358              		.cfi_startproc
 359              		@ args = 0, pretend = 0, frame = 0
 360              		@ frame_needed = 0, uses_anonymous_args = 0
1795:Lib/FreeRTOS/Source/tasks.c ****         const TCB_t * const pxTCB = xTask;
 361              		.loc 1 1795 9 view .LVU91
1796:Lib/FreeRTOS/Source/tasks.c **** 
 362              		.loc 1 1796 9 view .LVU92
1802:Lib/FreeRTOS/Source/tasks.c **** 
 363              		.loc 1 1802 9 view .LVU93
1794:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn = pdFALSE;
 364              		.loc 1 1794 5 is_stmt 0 view .LVU94
 365 0000 08B5     		push	{r3, lr}
 366              		.cfi_def_cfa_offset 8
 367              		.cfi_offset 3, -8
 368              		.cfi_offset 14, -4
1802:Lib/FreeRTOS/Source/tasks.c **** 
 369              		.loc 1 1802 9 view .LVU95
 370 0002 40B9     		cbnz	r0, .L27
 371              	.LBB44:
 372              	.LBI44:
1793:Lib/FreeRTOS/Source/tasks.c ****     {
 373              		.loc 1 1793 23 is_stmt 1 view .LVU96
 374              	.LVL19:
 375              	.LBB45:
1802:Lib/FreeRTOS/Source/tasks.c **** 
 376              		.loc 1 1802 9 discriminator 1 view .LVU97
 377 0004 FFF7FEFF 		bl	ulSetInterruptMask
ARM GAS  /tmp/ccEd3BVV.s 			page 105


 378              	.LVL20:
1802:Lib/FreeRTOS/Source/tasks.c **** 
 379              		.loc 1 1802 9 discriminator 1 view .LVU98
 380 0008 40F20A71 		movw	r1, #1802
 381 000c 0A4B     		ldr	r3, .L31
 382 000e 0B4A     		ldr	r2, .L31+4
 383 0010 0B48     		ldr	r0, .L31+8
 384 0012 FFF7FEFF 		bl	__assert_func
 385              	.LVL21:
 386              	.L27:
1802:Lib/FreeRTOS/Source/tasks.c **** 
 387              		.loc 1 1802 9 is_stmt 0 discriminator 1 view .LVU99
 388              	.LBE45:
 389              	.LBE44:
1802:Lib/FreeRTOS/Source/tasks.c **** 
 390              		.loc 1 1802 30 is_stmt 1 discriminator 2 view .LVU100
1805:Lib/FreeRTOS/Source/tasks.c ****         {
 391              		.loc 1 1805 9 view .LVU101
1805:Lib/FreeRTOS/Source/tasks.c ****         {
 392              		.loc 1 1805 11 is_stmt 0 view .LVU102
 393 0016 4269     		ldr	r2, [r0, #20]
 394 0018 0A4B     		ldr	r3, .L31+12
 395 001a 9A42     		cmp	r2, r3
 396 001c 09D1     		bne	.L29
1808:Lib/FreeRTOS/Source/tasks.c ****             {
 397              		.loc 1 1808 13 is_stmt 1 view .LVU103
1808:Lib/FreeRTOS/Source/tasks.c ****             {
 398              		.loc 1 1808 17 is_stmt 0 view .LVU104
 399 001e 836A     		ldr	r3, [r0, #40]
1808:Lib/FreeRTOS/Source/tasks.c ****             {
 400              		.loc 1 1808 15 view .LVU105
 401 0020 094A     		ldr	r2, .L31+16
1812:Lib/FreeRTOS/Source/tasks.c ****                 {
 402              		.loc 1 1812 19 view .LVU106
 403 0022 B3FA83F0 		clz	r0, r3
 404              	.LVL22:
1808:Lib/FreeRTOS/Source/tasks.c ****             {
 405              		.loc 1 1808 15 view .LVU107
 406 0026 9342     		cmp	r3, r2
1812:Lib/FreeRTOS/Source/tasks.c ****                 {
 407              		.loc 1 1812 19 view .LVU108
 408 0028 4FEA5010 		lsr	r0, r0, #5
 409 002c 08BF     		it	eq
 410 002e 0020     		moveq	r0, #0
 411              	.L26:
1832:Lib/FreeRTOS/Source/tasks.c **** 
 412              		.loc 1 1832 5 view .LVU109
 413 0030 08BD     		pop	{r3, pc}
 414              	.LVL23:
 415              	.L29:
1795:Lib/FreeRTOS/Source/tasks.c ****         const TCB_t * const pxTCB = xTask;
 416              		.loc 1 1795 20 view .LVU110
 417 0032 0020     		movs	r0, #0
 418              	.LVL24:
1795:Lib/FreeRTOS/Source/tasks.c ****         const TCB_t * const pxTCB = xTask;
 419              		.loc 1 1795 20 view .LVU111
 420 0034 FCE7     		b	.L26
ARM GAS  /tmp/ccEd3BVV.s 			page 106


 421              	.L32:
 422 0036 00BF     		.align	2
 423              	.L31:
 424 0038 00000000 		.word	.LC0
 425 003c 00000000 		.word	__func__.25
 426 0040 02000000 		.word	.LC1
 427 0044 00000000 		.word	xSuspendedTaskList
 428 0048 00000000 		.word	xPendingReadyList
 429              		.cfi_endproc
 430              	.LFE11:
 432              		.section	.text.xTaskCreateStatic,"ax",%progbits
 433              		.align	1
 434              		.global	xTaskCreateStatic
 435              		.syntax unified
 436              		.thumb
 437              		.thumb_func
 439              	xTaskCreateStatic:
 440              	.LVL25:
 441              	.LFB0:
 575:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxNewTCB;
 442              		.loc 1 575 5 is_stmt 1 view -0
 443              		.cfi_startproc
 444              		@ args = 12, pretend = 0, frame = 8
 445              		@ frame_needed = 0, uses_anonymous_args = 0
 575:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxNewTCB;
 446              		.loc 1 575 5 is_stmt 0 view .LVU113
 447 0000 2DE9F347 		push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
 448              		.cfi_def_cfa_offset 40
 449              		.cfi_offset 4, -32
 450              		.cfi_offset 5, -28
 451              		.cfi_offset 6, -24
 452              		.cfi_offset 7, -20
 453              		.cfi_offset 8, -16
 454              		.cfi_offset 9, -12
 455              		.cfi_offset 10, -8
 456              		.cfi_offset 14, -4
 575:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxNewTCB;
 457              		.loc 1 575 5 view .LVU114
 458 0004 0C9C     		ldr	r4, [sp, #48]
 459 0006 0746     		mov	r7, r0
 576:Lib/FreeRTOS/Source/tasks.c ****         TaskHandle_t xReturn;
 460              		.loc 1 576 9 is_stmt 1 view .LVU115
 577:Lib/FreeRTOS/Source/tasks.c **** 
 461              		.loc 1 577 9 view .LVU116
 579:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 462              		.loc 1 579 9 view .LVU117
 575:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxNewTCB;
 463              		.loc 1 575 5 is_stmt 0 view .LVU118
 464 0008 DDE90A9A 		ldrd	r9, r10, [sp, #40]
 465 000c 0E46     		mov	r6, r1
 466 000e 1546     		mov	r5, r2
 467 0010 9846     		mov	r8, r3
 579:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 468              		.loc 1 579 9 view .LVU119
 469 0012 BAF1000F 		cmp	r10, #0
 470 0016 08D1     		bne	.L34
 579:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
ARM GAS  /tmp/ccEd3BVV.s 			page 107


 471              		.loc 1 579 9 is_stmt 1 discriminator 1 view .LVU120
 472 0018 FFF7FEFF 		bl	ulSetInterruptMask
 473              	.LVL26:
 579:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 474              		.loc 1 579 9 discriminator 1 view .LVU121
 475 001c 40F24321 		movw	r1, #579
 476 0020 604B     		ldr	r3, .L60
 477 0022 614A     		ldr	r2, .L60+4
 478              	.LVL27:
 479              	.L59:
 580:Lib/FreeRTOS/Source/tasks.c **** 
 480              		.loc 1 580 9 is_stmt 0 discriminator 1 view .LVU122
 481 0024 6148     		ldr	r0, .L60+8
 482 0026 FFF7FEFF 		bl	__assert_func
 483              	.LVL28:
 484              	.L34:
 579:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 485              		.loc 1 579 47 is_stmt 1 discriminator 2 view .LVU123
 580:Lib/FreeRTOS/Source/tasks.c **** 
 486              		.loc 1 580 9 view .LVU124
 487 002a 34B9     		cbnz	r4, .L35
 580:Lib/FreeRTOS/Source/tasks.c **** 
 488              		.loc 1 580 9 discriminator 1 view .LVU125
 489 002c FFF7FEFF 		bl	ulSetInterruptMask
 490              	.LVL29:
 580:Lib/FreeRTOS/Source/tasks.c **** 
 491              		.loc 1 580 9 discriminator 1 view .LVU126
 492 0030 4FF41171 		mov	r1, #580
 493 0034 5B4B     		ldr	r3, .L60
 494 0036 5C4A     		ldr	r2, .L60+4
 495 0038 F4E7     		b	.L59
 496              	.LVL30:
 497              	.L35:
 580:Lib/FreeRTOS/Source/tasks.c **** 
 498              		.loc 1 580 45 discriminator 2 view .LVU127
 499              	.LBB54:
 587:Lib/FreeRTOS/Source/tasks.c ****             configASSERT( xSize == sizeof( TCB_t ) );
 500              		.loc 1 587 13 view .LVU128
 587:Lib/FreeRTOS/Source/tasks.c ****             configASSERT( xSize == sizeof( TCB_t ) );
 501              		.loc 1 587 29 is_stmt 0 view .LVU129
 502 003a 6023     		movs	r3, #96
 503              	.LVL31:
 587:Lib/FreeRTOS/Source/tasks.c ****             configASSERT( xSize == sizeof( TCB_t ) );
 504              		.loc 1 587 29 view .LVU130
 505 003c 0193     		str	r3, [sp, #4]
 588:Lib/FreeRTOS/Source/tasks.c ****             ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 506              		.loc 1 588 13 is_stmt 1 view .LVU131
 507 003e 019A     		ldr	r2, [sp, #4]
 508              	.LVL32:
 588:Lib/FreeRTOS/Source/tasks.c ****             ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 509              		.loc 1 588 13 is_stmt 0 view .LVU132
 510 0040 9A42     		cmp	r2, r3
 511 0042 06D0     		beq	.L36
 588:Lib/FreeRTOS/Source/tasks.c ****             ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 512              		.loc 1 588 13 is_stmt 1 discriminator 1 view .LVU133
 513 0044 FFF7FEFF 		bl	ulSetInterruptMask
 514              	.LVL33:
ARM GAS  /tmp/ccEd3BVV.s 			page 108


 588:Lib/FreeRTOS/Source/tasks.c ****             ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 515              		.loc 1 588 13 discriminator 1 view .LVU134
 516 0048 4FF41371 		mov	r1, #588
 517 004c 554B     		ldr	r3, .L60
 518 004e 564A     		ldr	r2, .L60+4
 519 0050 E8E7     		b	.L59
 520              	.LVL34:
 521              	.L36:
 588:Lib/FreeRTOS/Source/tasks.c ****             ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 522              		.loc 1 588 53 discriminator 2 view .LVU135
 589:Lib/FreeRTOS/Source/tasks.c ****         }
 523              		.loc 1 589 13 view .LVU136
 524              	.LBE54:
 598:Lib/FreeRTOS/Source/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 525              		.loc 1 598 13 is_stmt 0 view .LVU137
 526 0052 0021     		movs	r1, #0
 527              	.LVL35:
 528              	.LBB55:
 529              	.LBB56:
 851:Lib/FreeRTOS/Source/tasks.c ****     }
 530              		.loc 1 851 18 view .LVU138
 531 0054 AD00     		lsls	r5, r5, #2
 532              	.LVL36:
 851:Lib/FreeRTOS/Source/tasks.c ****     }
 533              		.loc 1 851 18 view .LVU139
 534              	.LBE56:
 535              	.LBE55:
 598:Lib/FreeRTOS/Source/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 536              		.loc 1 598 13 view .LVU140
 537 0056 2046     		mov	r0, r4
 538              	.LVL37:
 539              	.LBB59:
 589:Lib/FreeRTOS/Source/tasks.c ****         }
 540              		.loc 1 589 13 view .LVU141
 541 0058 019B     		ldr	r3, [sp, #4]
 542              	.LBE59:
 593:Lib/FreeRTOS/Source/tasks.c ****         {
 543              		.loc 1 593 9 is_stmt 1 view .LVU142
 597:Lib/FreeRTOS/Source/tasks.c ****             memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 544              		.loc 1 597 13 view .LVU143
 545              	.LVL38:
 598:Lib/FreeRTOS/Source/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 546              		.loc 1 598 13 view .LVU144
 547 005a FFF7FEFF 		bl	memset
 548              	.LVL39:
 599:Lib/FreeRTOS/Source/tasks.c **** 
 549              		.loc 1 599 13 view .LVU145
 550              	.LBB60:
 551              	.LBB57:
 851:Lib/FreeRTOS/Source/tasks.c ****     }
 552              		.loc 1 851 18 is_stmt 0 view .LVU146
 553 005e 2A46     		mov	r2, r5
 554 0060 A521     		movs	r1, #165
 555 0062 5046     		mov	r0, r10
 556              	.LBE57:
 557              	.LBE60:
 599:Lib/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccEd3BVV.s 			page 109


 558              		.loc 1 599 31 view .LVU147
 559 0064 C4F830A0 		str	r10, [r4, #48]
 609:Lib/FreeRTOS/Source/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 560              		.loc 1 609 13 is_stmt 1 view .LVU148
 561              	.LVL40:
 562              	.LBB61:
 563              	.LBI55:
 820:Lib/FreeRTOS/Source/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 564              		.loc 1 820 13 view .LVU149
 565              	.LBB58:
 829:Lib/FreeRTOS/Source/tasks.c ****     UBaseType_t x;
 566              		.loc 1 829 5 view .LVU150
 830:Lib/FreeRTOS/Source/tasks.c **** 
 567              		.loc 1 830 5 view .LVU151
 851:Lib/FreeRTOS/Source/tasks.c ****     }
 568              		.loc 1 851 9 view .LVU152
 851:Lib/FreeRTOS/Source/tasks.c ****     }
 569              		.loc 1 851 18 is_stmt 0 view .LVU153
 570 0068 FFF7FEFF 		bl	memset
 571              	.LVL41:
 861:Lib/FreeRTOS/Source/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 572              		.loc 1 861 9 is_stmt 1 view .LVU154
 862:Lib/FreeRTOS/Source/tasks.c **** 
 573              		.loc 1 862 9 view .LVU155
 861:Lib/FreeRTOS/Source/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 574              		.loc 1 861 22 is_stmt 0 view .LVU156
 575 006c 236B     		ldr	r3, [r4, #48]
 861:Lib/FreeRTOS/Source/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 576              		.loc 1 861 44 view .LVU157
 577 006e 043D     		subs	r5, r5, #4
 578              	.LVL42:
 861:Lib/FreeRTOS/Source/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 579              		.loc 1 861 22 view .LVU158
 580 0070 1D44     		add	r5, r5, r3
 581              	.LVL43:
 862:Lib/FreeRTOS/Source/tasks.c **** 
 582              		.loc 1 862 87 view .LVU159
 583 0072 25F00705 		bic	r5, r5, #7
 584              	.LVL44:
 865:Lib/FreeRTOS/Source/tasks.c **** 
 585              		.loc 1 865 9 is_stmt 1 view .LVU160
 865:Lib/FreeRTOS/Source/tasks.c **** 
 586              		.loc 1 865 130 discriminator 2 view .LVU161
 889:Lib/FreeRTOS/Source/tasks.c ****     {
 587              		.loc 1 889 5 view .LVU162
 889:Lib/FreeRTOS/Source/tasks.c ****     {
 588              		.loc 1 889 7 is_stmt 0 view .LVU163
 589 0076 6EB1     		cbz	r6, .L37
 590 0078 1023     		movs	r3, #16
 591 007a 013E     		subs	r6, r6, #1
 592              	.LVL45:
 889:Lib/FreeRTOS/Source/tasks.c ****     {
 593              		.loc 1 889 7 view .LVU164
 594 007c 04F13302 		add	r2, r4, #51
 595              	.LVL46:
 596              	.L39:
 893:Lib/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccEd3BVV.s 			page 110


 597              		.loc 1 893 13 is_stmt 1 view .LVU165
 893:Lib/FreeRTOS/Source/tasks.c **** 
 598              		.loc 1 893 47 is_stmt 0 view .LVU166
 599 0080 16F8011F 		ldrb	r1, [r6, #1]!	@ zero_extendqisi2
 600              	.LVL47:
 893:Lib/FreeRTOS/Source/tasks.c **** 
 601              		.loc 1 893 39 view .LVU167
 602 0084 02F8011F 		strb	r1, [r2, #1]!
 898:Lib/FreeRTOS/Source/tasks.c ****             {
 603              		.loc 1 898 13 is_stmt 1 view .LVU168
 898:Lib/FreeRTOS/Source/tasks.c ****             {
 604              		.loc 1 898 15 is_stmt 0 view .LVU169
 605 0088 09B1     		cbz	r1, .L38
 904:Lib/FreeRTOS/Source/tasks.c ****             }
 606              		.loc 1 904 41 is_stmt 1 view .LVU170
 891:Lib/FreeRTOS/Source/tasks.c ****         {
 607              		.loc 1 891 83 discriminator 2 view .LVU171
 608              	.LVL48:
 891:Lib/FreeRTOS/Source/tasks.c ****         {
 609              		.loc 1 891 39 discriminator 1 view .LVU172
 610 008a 013B     		subs	r3, r3, #1
 611 008c F8D1     		bne	.L39
 612              	.LVL49:
 613              	.L38:
 910:Lib/FreeRTOS/Source/tasks.c ****     }
 614              		.loc 1 910 9 view .LVU173
 910:Lib/FreeRTOS/Source/tasks.c ****     }
 615              		.loc 1 910 61 is_stmt 0 view .LVU174
 616 008e 0023     		movs	r3, #0
 617 0090 84F84330 		strb	r3, [r4, #67]
 618              	.L37:
 914:Lib/FreeRTOS/Source/tasks.c ****     }
 619              		.loc 1 914 33 is_stmt 1 view .LVU175
 918:Lib/FreeRTOS/Source/tasks.c **** 
 620              		.loc 1 918 5 view .LVU176
 621 0094 B9F1370F 		cmp	r9, #55
 622 0098 06D9     		bls	.L40
 918:Lib/FreeRTOS/Source/tasks.c **** 
 623              		.loc 1 918 5 discriminator 1 view .LVU177
 624 009a FFF7FEFF 		bl	ulSetInterruptMask
 625              	.LVL50:
 918:Lib/FreeRTOS/Source/tasks.c **** 
 626              		.loc 1 918 5 discriminator 1 view .LVU178
 627 009e 40F29631 		movw	r1, #918
 628 00a2 404B     		ldr	r3, .L60
 629 00a4 424A     		ldr	r2, .L60+12
 630 00a6 BDE7     		b	.L59
 631              	.L40:
 918:Lib/FreeRTOS/Source/tasks.c **** 
 632              		.loc 1 918 54 discriminator 2 view .LVU179
 920:Lib/FreeRTOS/Source/tasks.c ****     {
 633              		.loc 1 920 5 view .LVU180
 926:Lib/FreeRTOS/Source/tasks.c ****     }
 634              		.loc 1 926 33 view .LVU181
 929:Lib/FreeRTOS/Source/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 635              		.loc 1 929 5 view .LVU182
 936:Lib/FreeRTOS/Source/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
ARM GAS  /tmp/ccEd3BVV.s 			page 111


 636              		.loc 1 936 5 is_stmt 0 view .LVU183
 637 00a8 261D     		adds	r6, r4, #4
 638 00aa 3046     		mov	r0, r6
 929:Lib/FreeRTOS/Source/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 639              		.loc 1 929 26 view .LVU184
 640 00ac C4F82C90 		str	r9, [r4, #44]
 932:Lib/FreeRTOS/Source/tasks.c ****     }
 641              		.loc 1 932 9 is_stmt 1 view .LVU185
 932:Lib/FreeRTOS/Source/tasks.c ****     }
 642              		.loc 1 932 34 is_stmt 0 view .LVU186
 643 00b0 C4F84C90 		str	r9, [r4, #76]
 936:Lib/FreeRTOS/Source/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 644              		.loc 1 936 5 is_stmt 1 view .LVU187
 645 00b4 FFF7FEFF 		bl	vListInitialiseItem
 646              	.LVL51:
 937:Lib/FreeRTOS/Source/tasks.c **** 
 647              		.loc 1 937 5 view .LVU188
 648 00b8 04F11800 		add	r0, r4, #24
 649 00bc FFF7FEFF 		bl	vListInitialiseItem
 650              	.LVL52:
 941:Lib/FreeRTOS/Source/tasks.c **** 
 651              		.loc 1 941 5 view .LVU189
 944:Lib/FreeRTOS/Source/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 652              		.loc 1 944 5 is_stmt 0 view .LVU190
 653 00c0 C9F13801 		rsb	r1, r9, #56
1001:Lib/FreeRTOS/Source/tasks.c ****             }
 654              		.loc 1 1001 42 view .LVU191
 655 00c4 4346     		mov	r3, r8
 656 00c6 3A46     		mov	r2, r7
 657 00c8 2846     		mov	r0, r5
 944:Lib/FreeRTOS/Source/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 658              		.loc 1 944 5 view .LVU192
 659 00ca A161     		str	r1, [r4, #24]
 941:Lib/FreeRTOS/Source/tasks.c **** 
 660              		.loc 1 941 5 view .LVU193
 661 00cc 2461     		str	r4, [r4, #16]
 944:Lib/FreeRTOS/Source/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 662              		.loc 1 944 5 is_stmt 1 view .LVU194
 945:Lib/FreeRTOS/Source/tasks.c **** 
 663              		.loc 1 945 5 view .LVU195
1001:Lib/FreeRTOS/Source/tasks.c ****             }
 664              		.loc 1 1001 42 is_stmt 0 view .LVU196
 665 00ce 216B     		ldr	r1, [r4, #48]
 945:Lib/FreeRTOS/Source/tasks.c **** 
 666              		.loc 1 945 5 view .LVU197
 667 00d0 6462     		str	r4, [r4, #36]
 954:Lib/FreeRTOS/Source/tasks.c ****     }
 668              		.loc 1 954 9 is_stmt 1 view .LVU198
1001:Lib/FreeRTOS/Source/tasks.c ****             }
 669              		.loc 1 1001 17 view .LVU199
1001:Lib/FreeRTOS/Source/tasks.c ****             }
 670              		.loc 1 1001 42 is_stmt 0 view .LVU200
 671 00d2 FFF7FEFF 		bl	pxPortInitialiseStack
 672              	.LVL53:
1001:Lib/FreeRTOS/Source/tasks.c ****             }
 673              		.loc 1 1001 40 discriminator 1 view .LVU201
 674 00d6 2060     		str	r0, [r4]
ARM GAS  /tmp/ccEd3BVV.s 			page 112


1017:Lib/FreeRTOS/Source/tasks.c ****     {
 675              		.loc 1 1017 5 is_stmt 1 view .LVU202
1021:Lib/FreeRTOS/Source/tasks.c ****     }
 676              		.loc 1 1021 9 view .LVU203
 677              	.LVL54:
1025:Lib/FreeRTOS/Source/tasks.c ****     }
 678              		.loc 1 1025 33 view .LVU204
1025:Lib/FreeRTOS/Source/tasks.c ****     }
 679              		.loc 1 1025 33 is_stmt 0 view .LVU205
 680              	.LBE58:
 681              	.LBE61:
 610:Lib/FreeRTOS/Source/tasks.c ****         }
 682              		.loc 1 610 13 is_stmt 1 view .LVU206
 683              	.LBB62:
 684              	.LBI62:
1030:Lib/FreeRTOS/Source/tasks.c **** {
 685              		.loc 1 1030 13 view .LVU207
 686              	.LBB63:
1034:Lib/FreeRTOS/Source/tasks.c ****     {
 687              		.loc 1 1034 5 view .LVU208
 688 00d8 FFF7FEFF 		bl	vPortEnterCritical
 689              	.LVL55:
1036:Lib/FreeRTOS/Source/tasks.c **** 
 690              		.loc 1 1036 9 view .LVU209
1036:Lib/FreeRTOS/Source/tasks.c **** 
 691              		.loc 1 1036 31 is_stmt 0 view .LVU210
 692 00dc 354B     		ldr	r3, .L60+16
1038:Lib/FreeRTOS/Source/tasks.c ****         {
 693              		.loc 1 1038 26 view .LVU211
 694 00de 364F     		ldr	r7, .L60+20
 695              	.LVL56:
1036:Lib/FreeRTOS/Source/tasks.c **** 
 696              		.loc 1 1036 31 view .LVU212
 697 00e0 1A68     		ldr	r2, [r3]
 698 00e2 DFF8FC80 		ldr	r8, .L60+60
 699              	.LVL57:
1036:Lib/FreeRTOS/Source/tasks.c **** 
 700              		.loc 1 1036 31 view .LVU213
 701 00e6 0132     		adds	r2, r2, #1
 702 00e8 1A60     		str	r2, [r3]
1038:Lib/FreeRTOS/Source/tasks.c ****         {
 703              		.loc 1 1038 9 is_stmt 1 view .LVU214
1038:Lib/FreeRTOS/Source/tasks.c ****         {
 704              		.loc 1 1038 26 is_stmt 0 view .LVU215
 705 00ea 3D68     		ldr	r5, [r7]
1038:Lib/FreeRTOS/Source/tasks.c ****         {
 706              		.loc 1 1038 11 view .LVU216
 707 00ec 002D     		cmp	r5, #0
 708 00ee 4ED1     		bne	.L41
1042:Lib/FreeRTOS/Source/tasks.c **** 
 709              		.loc 1 1042 13 is_stmt 1 view .LVU217
1042:Lib/FreeRTOS/Source/tasks.c **** 
 710              		.loc 1 1042 26 is_stmt 0 view .LVU218
 711 00f0 3C60     		str	r4, [r7]
1044:Lib/FreeRTOS/Source/tasks.c ****             {
 712              		.loc 1 1044 13 is_stmt 1 view .LVU219
1044:Lib/FreeRTOS/Source/tasks.c ****             {
ARM GAS  /tmp/ccEd3BVV.s 			page 113


 713              		.loc 1 1044 40 is_stmt 0 view .LVU220
 714 00f2 1B68     		ldr	r3, [r3]
1044:Lib/FreeRTOS/Source/tasks.c ****             {
 715              		.loc 1 1044 15 view .LVU221
 716 00f4 012B     		cmp	r3, #1
 717 00f6 1FD1     		bne	.L43
1044:Lib/FreeRTOS/Source/tasks.c ****             {
 718              		.loc 1 1044 15 view .LVU222
 719 00f8 C146     		mov	r9, r8
 720              	.L44:
 721              	.LVL58:
 722              	.LBB64:
 723              	.LBB65:
3719:Lib/FreeRTOS/Source/tasks.c ****     }
 724              		.loc 1 3719 9 is_stmt 1 view .LVU223
 725 00fa 4846     		mov	r0, r9
3717:Lib/FreeRTOS/Source/tasks.c ****     {
 726              		.loc 1 3717 104 is_stmt 0 discriminator 3 view .LVU224
 727 00fc 0135     		adds	r5, r5, #1
 728              	.LVL59:
3719:Lib/FreeRTOS/Source/tasks.c ****     }
 729              		.loc 1 3719 9 view .LVU225
 730 00fe FFF7FEFF 		bl	vListInitialise
 731              	.LVL60:
3717:Lib/FreeRTOS/Source/tasks.c ****     {
 732              		.loc 1 3717 104 is_stmt 1 discriminator 3 view .LVU226
3717:Lib/FreeRTOS/Source/tasks.c ****     {
 733              		.loc 1 3717 54 discriminator 1 view .LVU227
 734 0102 382D     		cmp	r5, #56
 735 0104 09F11409 		add	r9, r9, #20
 736 0108 F7D1     		bne	.L44
3722:Lib/FreeRTOS/Source/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
 737              		.loc 1 3722 5 view .LVU228
 738 010a DFF8D890 		ldr	r9, .L60+64
3723:Lib/FreeRTOS/Source/tasks.c ****     vListInitialise( &xPendingReadyList );
 739              		.loc 1 3723 5 is_stmt 0 view .LVU229
 740 010e 2B4D     		ldr	r5, .L60+24
 741              	.LVL61:
3722:Lib/FreeRTOS/Source/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
 742              		.loc 1 3722 5 view .LVU230
 743 0110 4846     		mov	r0, r9
 744 0112 FFF7FEFF 		bl	vListInitialise
 745              	.LVL62:
3723:Lib/FreeRTOS/Source/tasks.c ****     vListInitialise( &xPendingReadyList );
 746              		.loc 1 3723 5 is_stmt 1 view .LVU231
 747 0116 2846     		mov	r0, r5
 748 0118 FFF7FEFF 		bl	vListInitialise
 749              	.LVL63:
3724:Lib/FreeRTOS/Source/tasks.c **** 
 750              		.loc 1 3724 5 view .LVU232
 751 011c 2848     		ldr	r0, .L60+28
 752 011e FFF7FEFF 		bl	vListInitialise
 753              	.LVL64:
3728:Lib/FreeRTOS/Source/tasks.c ****     }
 754              		.loc 1 3728 9 view .LVU233
 755 0122 2848     		ldr	r0, .L60+32
 756 0124 FFF7FEFF 		bl	vListInitialise
ARM GAS  /tmp/ccEd3BVV.s 			page 114


 757              	.LVL65:
3734:Lib/FreeRTOS/Source/tasks.c ****     }
 758              		.loc 1 3734 9 view .LVU234
 759 0128 2748     		ldr	r0, .L60+36
 760 012a FFF7FEFF 		bl	vListInitialise
 761              	.LVL66:
3740:Lib/FreeRTOS/Source/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 762              		.loc 1 3740 5 view .LVU235
3740:Lib/FreeRTOS/Source/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 763              		.loc 1 3740 23 is_stmt 0 view .LVU236
 764 012e 274B     		ldr	r3, .L60+40
 765 0130 C3F80090 		str	r9, [r3]
3741:Lib/FreeRTOS/Source/tasks.c **** }
 766              		.loc 1 3741 5 is_stmt 1 view .LVU237
3741:Lib/FreeRTOS/Source/tasks.c **** }
 767              		.loc 1 3741 31 is_stmt 0 view .LVU238
 768 0134 264B     		ldr	r3, .L60+44
 769 0136 1D60     		str	r5, [r3]
 770              	.LVL67:
 771              	.L43:
3741:Lib/FreeRTOS/Source/tasks.c **** }
 772              		.loc 1 3741 31 view .LVU239
 773              	.LBE65:
 774              	.LBE64:
1074:Lib/FreeRTOS/Source/tasks.c ****             }
 775              		.loc 1 1074 41 is_stmt 1 view .LVU240
1078:Lib/FreeRTOS/Source/tasks.c **** 
 776              		.loc 1 1078 9 view .LVU241
1078:Lib/FreeRTOS/Source/tasks.c **** 
 777              		.loc 1 1078 21 is_stmt 0 view .LVU242
 778 0138 264A     		ldr	r2, .L60+48
 779 013a 1368     		ldr	r3, [r2]
 780 013c 0133     		adds	r3, r3, #1
 781 013e 1360     		str	r3, [r2]
1083:Lib/FreeRTOS/Source/tasks.c ****         }
 782              		.loc 1 1083 13 is_stmt 1 view .LVU243
1088:Lib/FreeRTOS/Source/tasks.c **** 
 783              		.loc 1 1088 9 is_stmt 0 view .LVU244
 784 0140 254A     		ldr	r2, .L60+52
1083:Lib/FreeRTOS/Source/tasks.c ****         }
 785              		.loc 1 1083 35 view .LVU245
 786 0142 6364     		str	r3, [r4, #68]
1086:Lib/FreeRTOS/Source/tasks.c **** 
 787              		.loc 1 1086 37 is_stmt 1 view .LVU246
1088:Lib/FreeRTOS/Source/tasks.c **** 
 788              		.loc 1 1088 9 view .LVU247
1088:Lib/FreeRTOS/Source/tasks.c **** 
 789              		.loc 1 1088 9 view .LVU248
1088:Lib/FreeRTOS/Source/tasks.c **** 
 790              		.loc 1 1088 9 view .LVU249
1088:Lib/FreeRTOS/Source/tasks.c **** 
 791              		.loc 1 1088 9 view .LVU250
 792 0144 1168     		ldr	r1, [r2]
 793 0146 E36A     		ldr	r3, [r4, #44]
 794 0148 8B42     		cmp	r3, r1
1088:Lib/FreeRTOS/Source/tasks.c **** 
 795              		.loc 1 1088 9 discriminator 1 view .LVU251
ARM GAS  /tmp/ccEd3BVV.s 			page 115


 796 014a 88BF     		it	hi
 797 014c 1360     		strhi	r3, [r2]
1088:Lib/FreeRTOS/Source/tasks.c **** 
 798              		.loc 1 1088 9 discriminator 3 view .LVU252
1088:Lib/FreeRTOS/Source/tasks.c **** 
 799              		.loc 1 1088 9 discriminator 3 view .LVU253
 800              	.LBB66:
1088:Lib/FreeRTOS/Source/tasks.c **** 
 801              		.loc 1 1088 9 discriminator 3 view .LVU254
 802 014e 1422     		movs	r2, #20
 803 0150 5343     		muls	r3, r2, r3
 804 0152 08EB0301 		add	r1, r8, r3
 805 0156 4A68     		ldr	r2, [r1, #4]
 806              	.LVL68:
1088:Lib/FreeRTOS/Source/tasks.c **** 
 807              		.loc 1 1088 9 discriminator 3 view .LVU255
1088:Lib/FreeRTOS/Source/tasks.c **** 
 808              		.loc 1 1088 9 discriminator 3 view .LVU256
1088:Lib/FreeRTOS/Source/tasks.c **** 
 809              		.loc 1 1088 9 discriminator 3 view .LVU257
 810 0158 9068     		ldr	r0, [r2, #8]
 811 015a A260     		str	r2, [r4, #8]
1088:Lib/FreeRTOS/Source/tasks.c **** 
 812              		.loc 1 1088 9 discriminator 3 view .LVU258
 813 015c E060     		str	r0, [r4, #12]
1088:Lib/FreeRTOS/Source/tasks.c **** 
 814              		.loc 1 1088 9 discriminator 3 view .LVU259
 815 015e 4660     		str	r6, [r0, #4]
1088:Lib/FreeRTOS/Source/tasks.c **** 
 816              		.loc 1 1088 9 discriminator 3 view .LVU260
 817 0160 9660     		str	r6, [r2, #8]
1088:Lib/FreeRTOS/Source/tasks.c **** 
 818              		.loc 1 1088 9 discriminator 3 view .LVU261
 819 0162 58F80320 		ldr	r2, [r8, r3]
 820              	.LVL69:
1088:Lib/FreeRTOS/Source/tasks.c **** 
 821              		.loc 1 1088 9 is_stmt 0 discriminator 3 view .LVU262
 822 0166 6161     		str	r1, [r4, #20]
1088:Lib/FreeRTOS/Source/tasks.c **** 
 823              		.loc 1 1088 9 is_stmt 1 discriminator 3 view .LVU263
 824 0168 0132     		adds	r2, r2, #1
 825 016a 48F80320 		str	r2, [r8, r3]
 826              	.LBE66:
1088:Lib/FreeRTOS/Source/tasks.c **** 
 827              		.loc 1 1088 9 discriminator 3 view .LVU264
1088:Lib/FreeRTOS/Source/tasks.c **** 
 828              		.loc 1 1088 9 discriminator 3 view .LVU265
1088:Lib/FreeRTOS/Source/tasks.c **** 
 829              		.loc 1 1088 9 discriminator 3 view .LVU266
1090:Lib/FreeRTOS/Source/tasks.c ****     }
 830              		.loc 1 1090 9 view .LVU267
1092:Lib/FreeRTOS/Source/tasks.c **** 
 831              		.loc 1 1092 5 view .LVU268
 832 016e FFF7FEFF 		bl	vPortExitCritical
 833              	.LVL70:
1094:Lib/FreeRTOS/Source/tasks.c ****     {
 834              		.loc 1 1094 5 view .LVU269
ARM GAS  /tmp/ccEd3BVV.s 			page 116


1094:Lib/FreeRTOS/Source/tasks.c ****     {
 835              		.loc 1 1094 27 is_stmt 0 view .LVU270
 836 0172 1A4B     		ldr	r3, .L60+56
 837 0174 1B68     		ldr	r3, [r3]
1094:Lib/FreeRTOS/Source/tasks.c ****     {
 838              		.loc 1 1094 7 view .LVU271
 839 0176 33B1     		cbz	r3, .L47
1098:Lib/FreeRTOS/Source/tasks.c ****         {
 840              		.loc 1 1098 9 is_stmt 1 view .LVU272
1098:Lib/FreeRTOS/Source/tasks.c ****         {
 841              		.loc 1 1098 25 is_stmt 0 view .LVU273
 842 0178 3B68     		ldr	r3, [r7]
1098:Lib/FreeRTOS/Source/tasks.c ****         {
 843              		.loc 1 1098 11 view .LVU274
 844 017a DA6A     		ldr	r2, [r3, #44]
 845 017c E36A     		ldr	r3, [r4, #44]
 846 017e 9A42     		cmp	r2, r3
 847 0180 01D2     		bcs	.L47
1100:Lib/FreeRTOS/Source/tasks.c ****         }
 848              		.loc 1 1100 13 is_stmt 1 view .LVU275
 849 0182 FFF7FEFF 		bl	vPortYield
 850              	.LVL71:
 851              	.L47:
1109:Lib/FreeRTOS/Source/tasks.c ****     }
 852              		.loc 1 1109 33 view .LVU276
1109:Lib/FreeRTOS/Source/tasks.c ****     }
 853              		.loc 1 1109 33 is_stmt 0 view .LVU277
 854              	.LBE63:
 855              	.LBE62:
 617:Lib/FreeRTOS/Source/tasks.c ****     }
 856              		.loc 1 617 9 is_stmt 1 view .LVU278
 618:Lib/FreeRTOS/Source/tasks.c **** 
 857              		.loc 1 618 5 is_stmt 0 view .LVU279
 858 0186 2046     		mov	r0, r4
 859 0188 02B0     		add	sp, sp, #8
 860              		.cfi_remember_state
 861              		.cfi_def_cfa_offset 32
 862              		@ sp needed
 863 018a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 864              	.LVL72:
 865              	.L41:
 866              		.cfi_restore_state
 867              	.LBB68:
 868              	.LBB67:
1061:Lib/FreeRTOS/Source/tasks.c ****             {
 869              		.loc 1 1061 13 is_stmt 1 view .LVU280
1061:Lib/FreeRTOS/Source/tasks.c ****             {
 870              		.loc 1 1061 35 is_stmt 0 view .LVU281
 871 018e 134B     		ldr	r3, .L60+56
 872 0190 1A68     		ldr	r2, [r3]
1063:Lib/FreeRTOS/Source/tasks.c ****                 {
 873              		.loc 1 1063 57 view .LVU282
 874 0192 E36A     		ldr	r3, [r4, #44]
1061:Lib/FreeRTOS/Source/tasks.c ****             {
 875              		.loc 1 1061 15 view .LVU283
 876 0194 002A     		cmp	r2, #0
 877 0196 CFD1     		bne	.L43
ARM GAS  /tmp/ccEd3BVV.s 			page 117


1063:Lib/FreeRTOS/Source/tasks.c ****                 {
 878              		.loc 1 1063 17 is_stmt 1 view .LVU284
1063:Lib/FreeRTOS/Source/tasks.c ****                 {
 879              		.loc 1 1063 33 is_stmt 0 view .LVU285
 880 0198 3A68     		ldr	r2, [r7]
1063:Lib/FreeRTOS/Source/tasks.c ****                 {
 881              		.loc 1 1063 19 view .LVU286
 882 019a D26A     		ldr	r2, [r2, #44]
 883 019c 9A42     		cmp	r2, r3
1065:Lib/FreeRTOS/Source/tasks.c ****                 }
 884              		.loc 1 1065 21 is_stmt 1 view .LVU287
1065:Lib/FreeRTOS/Source/tasks.c ****                 }
 885              		.loc 1 1065 34 is_stmt 0 view .LVU288
 886 019e 98BF     		it	ls
 887 01a0 3C60     		strls	r4, [r7]
 888 01a2 C9E7     		b	.L43
 889              	.L61:
 890              		.align	2
 891              	.L60:
 892 01a4 00000000 		.word	.LC0
 893 01a8 00000000 		.word	__func__.34
 894 01ac 02000000 		.word	.LC1
 895 01b0 00000000 		.word	__func__.33
 896 01b4 00000000 		.word	uxCurrentNumberOfTasks
 897 01b8 00000000 		.word	pxCurrentTCB
 898 01bc 00000000 		.word	xDelayedTaskList2
 899 01c0 00000000 		.word	xPendingReadyList
 900 01c4 00000000 		.word	xTasksWaitingTermination
 901 01c8 00000000 		.word	xSuspendedTaskList
 902 01cc 00000000 		.word	pxDelayedTaskList
 903 01d0 00000000 		.word	pxOverflowDelayedTaskList
 904 01d4 00000000 		.word	uxTaskNumber
 905 01d8 00000000 		.word	uxTopReadyPriority
 906 01dc 00000000 		.word	xSchedulerRunning
 907 01e0 00000000 		.word	pxReadyTasksLists
 908 01e4 00000000 		.word	xDelayedTaskList1
 909              	.LBE67:
 910              	.LBE68:
 911              		.cfi_endproc
 912              	.LFE0:
 914              		.section	.text.vTaskDelete,"ax",%progbits
 915              		.align	1
 916              		.global	vTaskDelete
 917              		.syntax unified
 918              		.thumb
 919              		.thumb_func
 921              	vTaskDelete:
 922              	.LVL73:
 923              	.LFB3:
1117:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 924              		.loc 1 1117 5 is_stmt 1 view -0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 0
 927              		@ frame_needed = 0, uses_anonymous_args = 0
1118:Lib/FreeRTOS/Source/tasks.c **** 
 928              		.loc 1 1118 9 view .LVU290
1120:Lib/FreeRTOS/Source/tasks.c ****         {
ARM GAS  /tmp/ccEd3BVV.s 			page 118


 929              		.loc 1 1120 9 view .LVU291
1117:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 930              		.loc 1 1117 5 is_stmt 0 view .LVU292
 931 0000 70B5     		push	{r4, r5, r6, lr}
 932              		.cfi_def_cfa_offset 16
 933              		.cfi_offset 4, -16
 934              		.cfi_offset 5, -12
 935              		.cfi_offset 6, -8
 936              		.cfi_offset 14, -4
1117:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 937              		.loc 1 1117 5 view .LVU293
 938 0002 0446     		mov	r4, r0
 939 0004 1F4D     		ldr	r5, .L75
1120:Lib/FreeRTOS/Source/tasks.c ****         {
 940              		.loc 1 1120 9 view .LVU294
 941 0006 FFF7FEFF 		bl	vPortEnterCritical
 942              	.LVL74:
1124:Lib/FreeRTOS/Source/tasks.c **** 
 943              		.loc 1 1124 13 is_stmt 1 view .LVU295
1124:Lib/FreeRTOS/Source/tasks.c **** 
 944              		.loc 1 1124 21 is_stmt 0 view .LVU296
 945 000a 04B9     		cbnz	r4, .L63
1124:Lib/FreeRTOS/Source/tasks.c **** 
 946              		.loc 1 1124 21 discriminator 1 view .LVU297
 947 000c 2C68     		ldr	r4, [r5]
 948              	.LVL75:
 949              	.L63:
1127:Lib/FreeRTOS/Source/tasks.c ****             {
 950              		.loc 1 1127 13 is_stmt 1 view .LVU298
1127:Lib/FreeRTOS/Source/tasks.c ****             {
 951              		.loc 1 1127 17 is_stmt 0 view .LVU299
 952 000e 261D     		adds	r6, r4, #4
 953 0010 3046     		mov	r0, r6
 954 0012 FFF7FEFF 		bl	uxListRemove
 955              	.LVL76:
1129:Lib/FreeRTOS/Source/tasks.c ****             }
 956              		.loc 1 1129 62 is_stmt 1 view .LVU300
1133:Lib/FreeRTOS/Source/tasks.c ****             }
 957              		.loc 1 1133 41 view .LVU301
1137:Lib/FreeRTOS/Source/tasks.c ****             {
 958              		.loc 1 1137 13 view .LVU302
1137:Lib/FreeRTOS/Source/tasks.c ****             {
 959              		.loc 1 1137 15 is_stmt 0 view .LVU303
 960 0016 A36A     		ldr	r3, [r4, #40]
 961 0018 1BB1     		cbz	r3, .L64
1139:Lib/FreeRTOS/Source/tasks.c ****             }
 962              		.loc 1 1139 17 is_stmt 1 view .LVU304
1139:Lib/FreeRTOS/Source/tasks.c ****             }
 963              		.loc 1 1139 26 is_stmt 0 view .LVU305
 964 001a 04F11800 		add	r0, r4, #24
 965 001e FFF7FEFF 		bl	uxListRemove
 966              	.LVL77:
 967              	.L64:
1143:Lib/FreeRTOS/Source/tasks.c ****             }
 968              		.loc 1 1143 41 is_stmt 1 view .LVU306
1150:Lib/FreeRTOS/Source/tasks.c **** 
 969              		.loc 1 1150 13 view .LVU307
ARM GAS  /tmp/ccEd3BVV.s 			page 119


1150:Lib/FreeRTOS/Source/tasks.c **** 
 970              		.loc 1 1150 25 is_stmt 0 view .LVU308
 971 0022 194A     		ldr	r2, .L75+4
 972 0024 1368     		ldr	r3, [r2]
 973 0026 0133     		adds	r3, r3, #1
 974 0028 1360     		str	r3, [r2]
1152:Lib/FreeRTOS/Source/tasks.c ****             {
 975              		.loc 1 1152 13 is_stmt 1 view .LVU309
1152:Lib/FreeRTOS/Source/tasks.c ****             {
 976              		.loc 1 1152 23 is_stmt 0 view .LVU310
 977 002a 2B68     		ldr	r3, [r5]
1152:Lib/FreeRTOS/Source/tasks.c ****             {
 978              		.loc 1 1152 15 view .LVU311
 979 002c A342     		cmp	r3, r4
 980 002e 1CD1     		bne	.L65
1159:Lib/FreeRTOS/Source/tasks.c **** 
 981              		.loc 1 1159 17 is_stmt 1 view .LVU312
 982 0030 3146     		mov	r1, r6
 983 0032 1648     		ldr	r0, .L75+8
 984 0034 FFF7FEFF 		bl	vListInsertEnd
 985              	.LVL78:
1164:Lib/FreeRTOS/Source/tasks.c **** 
 986              		.loc 1 1164 17 view .LVU313
 987 0038 154A     		ldr	r2, .L75+12
 988 003a 1368     		ldr	r3, [r2]
 989 003c 0133     		adds	r3, r3, #1
 990 003e 1360     		str	r3, [r2]
1168:Lib/FreeRTOS/Source/tasks.c **** 
 991              		.loc 1 1168 42 view .LVU314
1175:Lib/FreeRTOS/Source/tasks.c ****             }
 992              		.loc 1 1175 66 view .LVU315
 993              	.L66:
1187:Lib/FreeRTOS/Source/tasks.c **** 
 994              		.loc 1 1187 9 view .LVU316
 995 0040 FFF7FEFF 		bl	vPortExitCritical
 996              	.LVL79:
1192:Lib/FreeRTOS/Source/tasks.c ****         {
 997              		.loc 1 1192 9 view .LVU317
1192:Lib/FreeRTOS/Source/tasks.c ****         {
 998              		.loc 1 1192 19 is_stmt 0 view .LVU318
 999 0044 2B68     		ldr	r3, [r5]
1194:Lib/FreeRTOS/Source/tasks.c ****         }
 1000              		.loc 1 1194 13 is_stmt 1 view .LVU319
1199:Lib/FreeRTOS/Source/tasks.c ****         {
 1001              		.loc 1 1199 9 view .LVU320
1199:Lib/FreeRTOS/Source/tasks.c ****         {
 1002              		.loc 1 1199 31 is_stmt 0 view .LVU321
 1003 0046 134B     		ldr	r3, .L75+16
 1004 0048 1B68     		ldr	r3, [r3]
1199:Lib/FreeRTOS/Source/tasks.c ****         {
 1005              		.loc 1 1199 11 view .LVU322
 1006 004a CBB1     		cbz	r3, .L62
1201:Lib/FreeRTOS/Source/tasks.c ****             {
 1007              		.loc 1 1201 13 is_stmt 1 view .LVU323
1201:Lib/FreeRTOS/Source/tasks.c ****             {
 1008              		.loc 1 1201 23 is_stmt 0 view .LVU324
 1009 004c 2B68     		ldr	r3, [r5]
ARM GAS  /tmp/ccEd3BVV.s 			page 120


1201:Lib/FreeRTOS/Source/tasks.c ****             {
 1010              		.loc 1 1201 15 view .LVU325
 1011 004e A342     		cmp	r3, r4
 1012 0050 16D1     		bne	.L62
1203:Lib/FreeRTOS/Source/tasks.c ****                 portYIELD_WITHIN_API();
 1013              		.loc 1 1203 17 is_stmt 1 view .LVU326
 1014 0052 114B     		ldr	r3, .L75+20
 1015 0054 1B68     		ldr	r3, [r3]
 1016 0056 7BB1     		cbz	r3, .L68
1203:Lib/FreeRTOS/Source/tasks.c ****                 portYIELD_WITHIN_API();
 1017              		.loc 1 1203 17 discriminator 1 view .LVU327
 1018 0058 FFF7FEFF 		bl	ulSetInterruptMask
 1019              	.LVL80:
1203:Lib/FreeRTOS/Source/tasks.c ****                 portYIELD_WITHIN_API();
 1020              		.loc 1 1203 17 discriminator 1 view .LVU328
 1021 005c 40F2B341 		movw	r1, #1203
 1022 0060 0E4B     		ldr	r3, .L75+24
 1023 0062 0F4A     		ldr	r2, .L75+28
 1024 0064 0F48     		ldr	r0, .L75+32
 1025 0066 FFF7FEFF 		bl	__assert_func
 1026              	.LVL81:
 1027              	.L65:
1179:Lib/FreeRTOS/Source/tasks.c ****                 traceTASK_DELETE( pxTCB );
 1028              		.loc 1 1179 17 view .LVU329
 1029 006a 0F4A     		ldr	r2, .L75+36
 1030 006c 1368     		ldr	r3, [r2]
 1031 006e 013B     		subs	r3, r3, #1
 1032 0070 1360     		str	r3, [r2]
1180:Lib/FreeRTOS/Source/tasks.c **** 
 1033              		.loc 1 1180 42 view .LVU330
1184:Lib/FreeRTOS/Source/tasks.c ****             }
 1034              		.loc 1 1184 17 view .LVU331
 1035 0072 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1036              	.LVL82:
 1037 0076 E3E7     		b	.L66
 1038              	.L68:
1203:Lib/FreeRTOS/Source/tasks.c ****                 portYIELD_WITHIN_API();
 1039              		.loc 1 1203 75 discriminator 2 view .LVU332
1204:Lib/FreeRTOS/Source/tasks.c ****             }
 1040              		.loc 1 1204 17 view .LVU333
1211:Lib/FreeRTOS/Source/tasks.c **** 
 1041              		.loc 1 1211 5 is_stmt 0 view .LVU334
 1042 0078 BDE87040 		pop	{r4, r5, r6, lr}
 1043              		.cfi_remember_state
 1044              		.cfi_restore 14
 1045              		.cfi_restore 6
 1046              		.cfi_restore 5
 1047              		.cfi_restore 4
 1048              		.cfi_def_cfa_offset 0
 1049              	.LVL83:
1204:Lib/FreeRTOS/Source/tasks.c ****             }
 1050              		.loc 1 1204 17 view .LVU335
 1051 007c FFF7FEBF 		b	vPortYield
 1052              	.LVL84:
 1053              	.L62:
 1054              		.cfi_restore_state
1211:Lib/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccEd3BVV.s 			page 121


 1055              		.loc 1 1211 5 view .LVU336
 1056 0080 70BD     		pop	{r4, r5, r6, pc}
 1057              	.LVL85:
 1058              	.L76:
1211:Lib/FreeRTOS/Source/tasks.c **** 
 1059              		.loc 1 1211 5 view .LVU337
 1060 0082 00BF     		.align	2
 1061              	.L75:
 1062 0084 00000000 		.word	pxCurrentTCB
 1063 0088 00000000 		.word	uxTaskNumber
 1064 008c 00000000 		.word	xTasksWaitingTermination
 1065 0090 00000000 		.word	uxDeletedTasksWaitingCleanUp
 1066 0094 00000000 		.word	xSchedulerRunning
 1067 0098 00000000 		.word	uxSchedulerSuspended
 1068 009c 00000000 		.word	.LC0
 1069 00a0 00000000 		.word	__func__.32
 1070 00a4 02000000 		.word	.LC1
 1071 00a8 00000000 		.word	uxCurrentNumberOfTasks
 1072              		.cfi_endproc
 1073              	.LFE3:
 1075              		.section	.text.eTaskGetState,"ax",%progbits
 1076              		.align	1
 1077              		.global	eTaskGetState
 1078              		.syntax unified
 1079              		.thumb
 1080              		.thumb_func
 1082              	eTaskGetState:
 1083              	.LVL86:
 1084              	.LFB6:
1351:Lib/FreeRTOS/Source/tasks.c ****         eTaskState eReturn;
 1085              		.loc 1 1351 5 is_stmt 1 view -0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 0
 1088              		@ frame_needed = 0, uses_anonymous_args = 0
1352:Lib/FreeRTOS/Source/tasks.c ****         List_t const * pxStateList;
 1089              		.loc 1 1352 9 view .LVU339
1353:Lib/FreeRTOS/Source/tasks.c ****         List_t const * pxEventList;
 1090              		.loc 1 1353 9 view .LVU340
1354:Lib/FreeRTOS/Source/tasks.c ****         List_t const * pxDelayedList;
 1091              		.loc 1 1354 9 view .LVU341
1355:Lib/FreeRTOS/Source/tasks.c ****         List_t const * pxOverflowedDelayedList;
 1092              		.loc 1 1355 9 view .LVU342
1356:Lib/FreeRTOS/Source/tasks.c ****         const TCB_t * const pxTCB = xTask;
 1093              		.loc 1 1356 9 view .LVU343
1357:Lib/FreeRTOS/Source/tasks.c **** 
 1094              		.loc 1 1357 9 view .LVU344
1359:Lib/FreeRTOS/Source/tasks.c **** 
 1095              		.loc 1 1359 9 view .LVU345
1351:Lib/FreeRTOS/Source/tasks.c ****         eTaskState eReturn;
 1096              		.loc 1 1351 5 is_stmt 0 view .LVU346
 1097 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1098              		.cfi_def_cfa_offset 24
 1099              		.cfi_offset 4, -24
 1100              		.cfi_offset 5, -20
 1101              		.cfi_offset 6, -16
 1102              		.cfi_offset 7, -12
 1103              		.cfi_offset 8, -8
ARM GAS  /tmp/ccEd3BVV.s 			page 122


 1104              		.cfi_offset 14, -4
1359:Lib/FreeRTOS/Source/tasks.c **** 
 1105              		.loc 1 1359 9 view .LVU347
 1106 0004 0446     		mov	r4, r0
 1107 0006 40B9     		cbnz	r0, .L78
1359:Lib/FreeRTOS/Source/tasks.c **** 
 1108              		.loc 1 1359 9 is_stmt 1 discriminator 1 view .LVU348
 1109 0008 FFF7FEFF 		bl	ulSetInterruptMask
 1110              	.LVL87:
1359:Lib/FreeRTOS/Source/tasks.c **** 
 1111              		.loc 1 1359 9 discriminator 1 view .LVU349
 1112 000c 40F24F51 		movw	r1, #1359
 1113 0010 1B4B     		ldr	r3, .L89
 1114 0012 1C4A     		ldr	r2, .L89+4
 1115 0014 1C48     		ldr	r0, .L89+8
 1116 0016 FFF7FEFF 		bl	__assert_func
 1117              	.LVL88:
 1118              	.L78:
1359:Lib/FreeRTOS/Source/tasks.c **** 
 1119              		.loc 1 1359 30 discriminator 2 view .LVU350
1361:Lib/FreeRTOS/Source/tasks.c ****         {
 1120              		.loc 1 1361 9 view .LVU351
1361:Lib/FreeRTOS/Source/tasks.c ****         {
 1121              		.loc 1 1361 19 is_stmt 0 view .LVU352
 1122 001a 1C4B     		ldr	r3, .L89+12
 1123 001c 1B68     		ldr	r3, [r3]
1361:Lib/FreeRTOS/Source/tasks.c ****         {
 1124              		.loc 1 1361 11 view .LVU353
 1125 001e 8342     		cmp	r3, r0
 1126 0020 26D0     		beq	.L81
 1127              	.LVL89:
 1128              	.LBB72:
 1129              	.LBI72:
1350:Lib/FreeRTOS/Source/tasks.c ****     {
 1130              		.loc 1 1350 16 is_stmt 1 view .LVU354
 1131              	.LBB73:
1368:Lib/FreeRTOS/Source/tasks.c ****             {
 1132              		.loc 1 1368 13 view .LVU355
 1133 0022 FFF7FEFF 		bl	vPortEnterCritical
 1134              	.LVL90:
1370:Lib/FreeRTOS/Source/tasks.c ****                 pxEventList = listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) );
 1135              		.loc 1 1370 17 view .LVU356
1372:Lib/FreeRTOS/Source/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1136              		.loc 1 1372 31 is_stmt 0 view .LVU357
 1137 0026 1A4B     		ldr	r3, .L89+16
1371:Lib/FreeRTOS/Source/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
 1138              		.loc 1 1371 29 view .LVU358
 1139 0028 D4F82880 		ldr	r8, [r4, #40]
1372:Lib/FreeRTOS/Source/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1140              		.loc 1 1372 31 view .LVU359
 1141 002c 1F68     		ldr	r7, [r3]
1373:Lib/FreeRTOS/Source/tasks.c ****             }
 1142              		.loc 1 1373 41 view .LVU360
 1143 002e 194B     		ldr	r3, .L89+20
1370:Lib/FreeRTOS/Source/tasks.c ****                 pxEventList = listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) );
 1144              		.loc 1 1370 29 view .LVU361
 1145 0030 6569     		ldr	r5, [r4, #20]
ARM GAS  /tmp/ccEd3BVV.s 			page 123


 1146              	.LVL91:
1371:Lib/FreeRTOS/Source/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
 1147              		.loc 1 1371 17 is_stmt 1 view .LVU362
1372:Lib/FreeRTOS/Source/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1148              		.loc 1 1372 17 view .LVU363
1373:Lib/FreeRTOS/Source/tasks.c ****             }
 1149              		.loc 1 1373 17 view .LVU364
1373:Lib/FreeRTOS/Source/tasks.c ****             }
 1150              		.loc 1 1373 41 is_stmt 0 view .LVU365
 1151 0032 1E68     		ldr	r6, [r3]
 1152              	.LVL92:
1375:Lib/FreeRTOS/Source/tasks.c **** 
 1153              		.loc 1 1375 13 is_stmt 1 view .LVU366
 1154 0034 FFF7FEFF 		bl	vPortExitCritical
 1155              	.LVL93:
1377:Lib/FreeRTOS/Source/tasks.c ****             {
 1156              		.loc 1 1377 13 view .LVU367
1377:Lib/FreeRTOS/Source/tasks.c ****             {
 1157              		.loc 1 1377 15 is_stmt 0 view .LVU368
 1158 0038 174B     		ldr	r3, .L89+24
 1159 003a 9845     		cmp	r8, r3
 1160 003c 1AD0     		beq	.L82
1384:Lib/FreeRTOS/Source/tasks.c ****             {
 1161              		.loc 1 1384 18 is_stmt 1 view .LVU369
1384:Lib/FreeRTOS/Source/tasks.c ****             {
 1162              		.loc 1 1384 20 is_stmt 0 view .LVU370
 1163 003e BD42     		cmp	r5, r7
 1164 0040 1AD0     		beq	.L85
1384:Lib/FreeRTOS/Source/tasks.c ****             {
 1165              		.loc 1 1384 55 discriminator 1 view .LVU371
 1166 0042 B542     		cmp	r5, r6
 1167 0044 18D0     		beq	.L85
1392:Lib/FreeRTOS/Source/tasks.c ****                 {
 1168              		.loc 1 1392 22 is_stmt 1 view .LVU372
1392:Lib/FreeRTOS/Source/tasks.c ****                 {
 1169              		.loc 1 1392 24 is_stmt 0 view .LVU373
 1170 0046 154B     		ldr	r3, .L89+28
 1171 0048 9D42     		cmp	r5, r3
 1172 004a 09D1     		bne	.L80
1397:Lib/FreeRTOS/Source/tasks.c ****                     {
 1173              		.loc 1 1397 21 is_stmt 1 view .LVU374
1397:Lib/FreeRTOS/Source/tasks.c ****                     {
 1174              		.loc 1 1397 23 is_stmt 0 view .LVU375
 1175 004c A36A     		ldr	r3, [r4, #40]
 1176 004e 9BB9     		cbnz	r3, .L85
 1177              	.LVL94:
 1178              	.LBB74:
1410:Lib/FreeRTOS/Source/tasks.c ****                             {
 1179              		.loc 1 1410 43 is_stmt 1 discriminator 1 view .LVU376
1412:Lib/FreeRTOS/Source/tasks.c ****                                 {
 1180              		.loc 1 1412 33 view .LVU377
1412:Lib/FreeRTOS/Source/tasks.c ****                                 {
 1181              		.loc 1 1412 57 is_stmt 0 view .LVU378
 1182 0050 94F85C30 		ldrb	r3, [r4, #92]	@ zero_extendqisi2
1408:Lib/FreeRTOS/Source/tasks.c **** 
 1183              		.loc 1 1408 37 view .LVU379
 1184 0054 012B     		cmp	r3, #1
ARM GAS  /tmp/ccEd3BVV.s 			page 124


 1185 0056 0CBF     		ite	eq
 1186 0058 0220     		moveq	r0, #2
 1187 005a 0320     		movne	r0, #3
 1188              	.LVL95:
 1189              	.L79:
1408:Lib/FreeRTOS/Source/tasks.c **** 
 1190              		.loc 1 1408 37 view .LVU380
 1191              	.LBE74:
 1192              	.LBE73:
 1193              	.LBE72:
1450:Lib/FreeRTOS/Source/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1194              		.loc 1 1450 9 is_stmt 1 view .LVU381
1451:Lib/FreeRTOS/Source/tasks.c **** 
 1195              		.loc 1 1451 5 is_stmt 0 view .LVU382
 1196 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1197              	.LVL96:
 1198              	.L80:
 1199              	.LBB77:
 1200              	.LBB75:
1433:Lib/FreeRTOS/Source/tasks.c ****                 {
 1201              		.loc 1 1433 22 is_stmt 1 view .LVU383
1433:Lib/FreeRTOS/Source/tasks.c ****                 {
 1202              		.loc 1 1433 24 is_stmt 0 view .LVU384
 1203 0060 0F4B     		ldr	r3, .L89+32
 1204 0062 9D42     		cmp	r5, r3
 1205 0064 0AD0     		beq	.L87
1382:Lib/FreeRTOS/Source/tasks.c ****             }
 1206              		.loc 1 1382 25 view .LVU385
 1207 0066 002D     		cmp	r5, #0
 1208 0068 0CBF     		ite	eq
 1209 006a 0420     		moveq	r0, #4
 1210 006c 0120     		movne	r0, #1
 1211 006e F5E7     		b	.L79
 1212              	.LVL97:
 1213              	.L81:
1382:Lib/FreeRTOS/Source/tasks.c ****             }
 1214              		.loc 1 1382 25 view .LVU386
 1215              	.LBE75:
 1216              	.LBE77:
1364:Lib/FreeRTOS/Source/tasks.c ****         }
 1217              		.loc 1 1364 21 view .LVU387
 1218 0070 0020     		movs	r0, #0
 1219              	.LVL98:
1364:Lib/FreeRTOS/Source/tasks.c ****         }
 1220              		.loc 1 1364 21 view .LVU388
 1221 0072 F3E7     		b	.L79
 1222              	.LVL99:
 1223              	.L82:
 1224              	.LBB78:
 1225              	.LBB76:
1382:Lib/FreeRTOS/Source/tasks.c ****             }
 1226              		.loc 1 1382 25 view .LVU389
 1227 0074 0120     		movs	r0, #1
 1228 0076 F1E7     		b	.L79
 1229              	.L85:
1388:Lib/FreeRTOS/Source/tasks.c ****             }
 1230              		.loc 1 1388 25 view .LVU390
ARM GAS  /tmp/ccEd3BVV.s 			page 125


 1231 0078 0220     		movs	r0, #2
 1232 007a EFE7     		b	.L79
 1233              	.L87:
1438:Lib/FreeRTOS/Source/tasks.c ****                 }
 1234              		.loc 1 1438 29 view .LVU391
 1235 007c 0420     		movs	r0, #4
 1236 007e EDE7     		b	.L79
 1237              	.L90:
 1238              		.align	2
 1239              	.L89:
 1240 0080 00000000 		.word	.LC0
 1241 0084 00000000 		.word	__func__.29
 1242 0088 02000000 		.word	.LC1
 1243 008c 00000000 		.word	pxCurrentTCB
 1244 0090 00000000 		.word	pxDelayedTaskList
 1245 0094 00000000 		.word	pxOverflowDelayedTaskList
 1246 0098 00000000 		.word	xPendingReadyList
 1247 009c 00000000 		.word	xSuspendedTaskList
 1248 00a0 00000000 		.word	xTasksWaitingTermination
 1249              	.LBE76:
 1250              	.LBE78:
 1251              		.cfi_endproc
 1252              	.LFE6:
 1254              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1255              		.align	1
 1256              		.global	uxTaskPriorityGet
 1257              		.syntax unified
 1258              		.thumb
 1259              		.thumb_func
 1261              	uxTaskPriorityGet:
 1262              	.LVL100:
 1263              	.LFB7:
1459:Lib/FreeRTOS/Source/tasks.c ****         TCB_t const * pxTCB;
 1264              		.loc 1 1459 5 is_stmt 1 view -0
 1265              		.cfi_startproc
 1266              		@ args = 0, pretend = 0, frame = 0
 1267              		@ frame_needed = 0, uses_anonymous_args = 0
1460:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxReturn;
 1268              		.loc 1 1460 9 view .LVU393
1461:Lib/FreeRTOS/Source/tasks.c **** 
 1269              		.loc 1 1461 9 view .LVU394
1463:Lib/FreeRTOS/Source/tasks.c ****         {
 1270              		.loc 1 1463 9 view .LVU395
1459:Lib/FreeRTOS/Source/tasks.c ****         TCB_t const * pxTCB;
 1271              		.loc 1 1459 5 is_stmt 0 view .LVU396
 1272 0000 10B5     		push	{r4, lr}
 1273              		.cfi_def_cfa_offset 8
 1274              		.cfi_offset 4, -8
 1275              		.cfi_offset 14, -4
1459:Lib/FreeRTOS/Source/tasks.c ****         TCB_t const * pxTCB;
 1276              		.loc 1 1459 5 view .LVU397
 1277 0002 0446     		mov	r4, r0
1463:Lib/FreeRTOS/Source/tasks.c ****         {
 1278              		.loc 1 1463 9 view .LVU398
 1279 0004 FFF7FEFF 		bl	vPortEnterCritical
 1280              	.LVL101:
1467:Lib/FreeRTOS/Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
ARM GAS  /tmp/ccEd3BVV.s 			page 126


 1281              		.loc 1 1467 13 is_stmt 1 view .LVU399
1467:Lib/FreeRTOS/Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1282              		.loc 1 1467 21 is_stmt 0 view .LVU400
 1283 0008 0CB9     		cbnz	r4, .L92
1467:Lib/FreeRTOS/Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1284              		.loc 1 1467 21 discriminator 1 view .LVU401
 1285 000a 034B     		ldr	r3, .L93
 1286 000c 1C68     		ldr	r4, [r3]
 1287              	.LVL102:
 1288              	.L92:
1468:Lib/FreeRTOS/Source/tasks.c ****         }
 1289              		.loc 1 1468 13 is_stmt 1 view .LVU402
1468:Lib/FreeRTOS/Source/tasks.c ****         }
 1290              		.loc 1 1468 22 is_stmt 0 view .LVU403
 1291 000e E46A     		ldr	r4, [r4, #44]
 1292              	.LVL103:
1470:Lib/FreeRTOS/Source/tasks.c **** 
 1293              		.loc 1 1470 9 is_stmt 1 view .LVU404
 1294 0010 FFF7FEFF 		bl	vPortExitCritical
 1295              	.LVL104:
1472:Lib/FreeRTOS/Source/tasks.c ****     }
 1296              		.loc 1 1472 9 view .LVU405
1473:Lib/FreeRTOS/Source/tasks.c **** 
 1297              		.loc 1 1473 5 is_stmt 0 view .LVU406
 1298 0014 2046     		mov	r0, r4
 1299 0016 10BD     		pop	{r4, pc}
 1300              	.LVL105:
 1301              	.L94:
1473:Lib/FreeRTOS/Source/tasks.c **** 
 1302              		.loc 1 1473 5 view .LVU407
 1303              		.align	2
 1304              	.L93:
 1305 0018 00000000 		.word	pxCurrentTCB
 1306              		.cfi_endproc
 1307              	.LFE7:
 1309              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1310              		.align	1
 1311              		.global	uxTaskPriorityGetFromISR
 1312              		.syntax unified
 1313              		.thumb
 1314              		.thumb_func
 1316              	uxTaskPriorityGetFromISR:
 1317              	.LVL106:
 1318              	.LFB8:
1481:Lib/FreeRTOS/Source/tasks.c ****         TCB_t const * pxTCB;
 1319              		.loc 1 1481 5 is_stmt 1 view -0
 1320              		.cfi_startproc
 1321              		@ args = 0, pretend = 0, frame = 0
 1322              		@ frame_needed = 0, uses_anonymous_args = 0
1482:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxReturn;
 1323              		.loc 1 1482 9 view .LVU409
1483:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxSavedInterruptState;
 1324              		.loc 1 1483 9 view .LVU410
1484:Lib/FreeRTOS/Source/tasks.c **** 
 1325              		.loc 1 1484 9 view .LVU411
1502:Lib/FreeRTOS/Source/tasks.c **** 
 1326              		.loc 1 1502 9 view .LVU412
ARM GAS  /tmp/ccEd3BVV.s 			page 127


1481:Lib/FreeRTOS/Source/tasks.c ****         TCB_t const * pxTCB;
 1327              		.loc 1 1481 5 is_stmt 0 view .LVU413
 1328 0000 10B5     		push	{r4, lr}
 1329              		.cfi_def_cfa_offset 8
 1330              		.cfi_offset 4, -8
 1331              		.cfi_offset 14, -4
1481:Lib/FreeRTOS/Source/tasks.c ****         TCB_t const * pxTCB;
 1332              		.loc 1 1481 5 view .LVU414
 1333 0002 0446     		mov	r4, r0
1502:Lib/FreeRTOS/Source/tasks.c **** 
 1334              		.loc 1 1502 9 view .LVU415
 1335 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1336              	.LVL107:
1504:Lib/FreeRTOS/Source/tasks.c ****         {
 1337              		.loc 1 1504 9 is_stmt 1 view .LVU416
1504:Lib/FreeRTOS/Source/tasks.c ****         {
 1338              		.loc 1 1504 33 is_stmt 0 view .LVU417
 1339 0008 FFF7FEFF 		bl	ulSetInterruptMask
 1340              	.LVL108:
1508:Lib/FreeRTOS/Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1341              		.loc 1 1508 13 is_stmt 1 view .LVU418
1508:Lib/FreeRTOS/Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1342              		.loc 1 1508 21 is_stmt 0 view .LVU419
 1343 000c 0CB9     		cbnz	r4, .L96
1508:Lib/FreeRTOS/Source/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1344              		.loc 1 1508 21 discriminator 1 view .LVU420
 1345 000e 034B     		ldr	r3, .L97
 1346 0010 1C68     		ldr	r4, [r3]
 1347              	.LVL109:
 1348              	.L96:
1509:Lib/FreeRTOS/Source/tasks.c ****         }
 1349              		.loc 1 1509 13 is_stmt 1 view .LVU421
1509:Lib/FreeRTOS/Source/tasks.c ****         }
 1350              		.loc 1 1509 22 is_stmt 0 view .LVU422
 1351 0012 E46A     		ldr	r4, [r4, #44]
 1352              	.LVL110:
1511:Lib/FreeRTOS/Source/tasks.c **** 
 1353              		.loc 1 1511 9 is_stmt 1 view .LVU423
 1354 0014 FFF7FEFF 		bl	vClearInterruptMask
 1355              	.LVL111:
1513:Lib/FreeRTOS/Source/tasks.c ****     }
 1356              		.loc 1 1513 9 view .LVU424
1514:Lib/FreeRTOS/Source/tasks.c **** 
 1357              		.loc 1 1514 5 is_stmt 0 view .LVU425
 1358 0018 2046     		mov	r0, r4
 1359 001a 10BD     		pop	{r4, pc}
 1360              	.LVL112:
 1361              	.L98:
1514:Lib/FreeRTOS/Source/tasks.c **** 
 1362              		.loc 1 1514 5 view .LVU426
 1363              		.align	2
 1364              	.L97:
 1365 001c 00000000 		.word	pxCurrentTCB
 1366              		.cfi_endproc
 1367              	.LFE8:
 1369              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1370              		.align	1
ARM GAS  /tmp/ccEd3BVV.s 			page 128


 1371              		.global	vTaskPrioritySet
 1372              		.syntax unified
 1373              		.thumb
 1374              		.thumb_func
 1376              	vTaskPrioritySet:
 1377              	.LVL113:
 1378              	.LFB9:
1523:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 1379              		.loc 1 1523 5 is_stmt 1 view -0
 1380              		.cfi_startproc
 1381              		@ args = 0, pretend = 0, frame = 0
 1382              		@ frame_needed = 0, uses_anonymous_args = 0
1524:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
 1383              		.loc 1 1524 9 view .LVU428
1525:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1384              		.loc 1 1525 9 view .LVU429
1526:Lib/FreeRTOS/Source/tasks.c **** 
 1385              		.loc 1 1526 9 view .LVU430
1528:Lib/FreeRTOS/Source/tasks.c **** 
 1386              		.loc 1 1528 9 view .LVU431
 1387 0000 3729     		cmp	r1, #55
1523:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 1388              		.loc 1 1523 5 is_stmt 0 view .LVU432
 1389 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1390              		.cfi_def_cfa_offset 24
 1391              		.cfi_offset 3, -24
 1392              		.cfi_offset 4, -20
 1393              		.cfi_offset 5, -16
 1394              		.cfi_offset 6, -12
 1395              		.cfi_offset 7, -8
 1396              		.cfi_offset 14, -4
1523:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 1397              		.loc 1 1523 5 view .LVU433
 1398 0004 0446     		mov	r4, r0
 1399 0006 0D46     		mov	r5, r1
1528:Lib/FreeRTOS/Source/tasks.c **** 
 1400              		.loc 1 1528 9 view .LVU434
 1401 0008 08D9     		bls	.L100
1528:Lib/FreeRTOS/Source/tasks.c **** 
 1402              		.loc 1 1528 9 is_stmt 1 discriminator 1 view .LVU435
 1403 000a FFF7FEFF 		bl	ulSetInterruptMask
 1404              	.LVL114:
1528:Lib/FreeRTOS/Source/tasks.c **** 
 1405              		.loc 1 1528 9 discriminator 1 view .LVU436
 1406 000e 4FF4BF61 		mov	r1, #1528
 1407 0012 284B     		ldr	r3, .L115
 1408 0014 284A     		ldr	r2, .L115+4
 1409 0016 2948     		ldr	r0, .L115+8
 1410 0018 FFF7FEFF 		bl	__assert_func
 1411              	.LVL115:
 1412              	.L100:
1528:Lib/FreeRTOS/Source/tasks.c **** 
 1413              		.loc 1 1528 61 discriminator 2 view .LVU437
1531:Lib/FreeRTOS/Source/tasks.c ****         {
 1414              		.loc 1 1531 9 view .LVU438
1537:Lib/FreeRTOS/Source/tasks.c ****         }
 1415              		.loc 1 1537 37 view .LVU439
ARM GAS  /tmp/ccEd3BVV.s 			page 129


1540:Lib/FreeRTOS/Source/tasks.c ****         {
 1416              		.loc 1 1540 9 view .LVU440
 1417 001c FFF7FEFF 		bl	vPortEnterCritical
 1418              	.LVL116:
1544:Lib/FreeRTOS/Source/tasks.c **** 
 1419              		.loc 1 1544 13 view .LVU441
1544:Lib/FreeRTOS/Source/tasks.c **** 
 1420              		.loc 1 1544 21 is_stmt 0 view .LVU442
 1421 0020 0CB9     		cbnz	r4, .L101
1544:Lib/FreeRTOS/Source/tasks.c **** 
 1422              		.loc 1 1544 21 discriminator 1 view .LVU443
 1423 0022 274B     		ldr	r3, .L115+12
 1424 0024 1C68     		ldr	r4, [r3]
 1425              	.LVL117:
 1426              	.L101:
1546:Lib/FreeRTOS/Source/tasks.c **** 
 1427              		.loc 1 1546 59 is_stmt 1 view .LVU444
1550:Lib/FreeRTOS/Source/tasks.c ****             }
 1428              		.loc 1 1550 17 view .LVU445
1550:Lib/FreeRTOS/Source/tasks.c ****             }
 1429              		.loc 1 1550 39 is_stmt 0 view .LVU446
 1430 0026 E26C     		ldr	r2, [r4, #76]
 1431              	.LVL118:
1558:Lib/FreeRTOS/Source/tasks.c ****             {
 1432              		.loc 1 1558 13 is_stmt 1 view .LVU447
1558:Lib/FreeRTOS/Source/tasks.c ****             {
 1433              		.loc 1 1558 15 is_stmt 0 view .LVU448
 1434 0028 9542     		cmp	r5, r2
 1435 002a 37D0     		beq	.L103
1562:Lib/FreeRTOS/Source/tasks.c ****                 {
 1436              		.loc 1 1562 17 is_stmt 1 view .LVU449
 1437 002c 244B     		ldr	r3, .L115+12
1562:Lib/FreeRTOS/Source/tasks.c ****                 {
 1438              		.loc 1 1562 19 is_stmt 0 view .LVU450
 1439 002e 39D9     		bls	.L104
1564:Lib/FreeRTOS/Source/tasks.c ****                     {
 1440              		.loc 1 1564 21 is_stmt 1 view .LVU451
1564:Lib/FreeRTOS/Source/tasks.c ****                     {
 1441              		.loc 1 1564 31 is_stmt 0 view .LVU452
 1442 0030 1968     		ldr	r1, [r3]
1564:Lib/FreeRTOS/Source/tasks.c ****                     {
 1443              		.loc 1 1564 23 view .LVU453
 1444 0032 A142     		cmp	r1, r4
 1445 0034 3BD0     		beq	.L111
1569:Lib/FreeRTOS/Source/tasks.c ****                         {
 1446              		.loc 1 1569 25 is_stmt 1 view .LVU454
1569:Lib/FreeRTOS/Source/tasks.c ****                         {
 1447              		.loc 1 1569 57 is_stmt 0 view .LVU455
 1448 0036 1B68     		ldr	r3, [r3]
1569:Lib/FreeRTOS/Source/tasks.c ****                         {
 1449              		.loc 1 1569 27 view .LVU456
 1450 0038 DE6A     		ldr	r6, [r3, #44]
 1451 003a AE42     		cmp	r6, r5
 1452 003c 2CBF     		ite	cs
 1453 003e 0026     		movcs	r6, #0
 1454 0040 0126     		movcc	r6, #1
 1455              	.L105:
ARM GAS  /tmp/ccEd3BVV.s 			page 130


 1456              	.LVL119:
1597:Lib/FreeRTOS/Source/tasks.c **** 
 1457              		.loc 1 1597 17 is_stmt 1 view .LVU457
1602:Lib/FreeRTOS/Source/tasks.c **** 
 1458              		.loc 1 1602 17 view .LVU458
1602:Lib/FreeRTOS/Source/tasks.c **** 
 1459              		.loc 1 1602 39 is_stmt 0 view .LVU459
 1460 0042 E36A     		ldr	r3, [r4, #44]
 1461              	.LVL120:
1608:Lib/FreeRTOS/Source/tasks.c ****                     {
 1462              		.loc 1 1608 21 is_stmt 1 view .LVU460
1618:Lib/FreeRTOS/Source/tasks.c ****                 }
 1463              		.loc 1 1618 43 is_stmt 0 view .LVU461
 1464 0044 E564     		str	r5, [r4, #76]
1608:Lib/FreeRTOS/Source/tasks.c ****                     {
 1465              		.loc 1 1608 23 view .LVU462
 1466 0046 9A42     		cmp	r2, r3
1610:Lib/FreeRTOS/Source/tasks.c ****                     }
 1467              		.loc 1 1610 25 is_stmt 1 view .LVU463
1628:Lib/FreeRTOS/Source/tasks.c ****                 {
 1468              		.loc 1 1628 19 is_stmt 0 view .LVU464
 1469 0048 A269     		ldr	r2, [r4, #24]
 1470              	.LVL121:
1610:Lib/FreeRTOS/Source/tasks.c ****                     }
 1471              		.loc 1 1610 43 view .LVU465
 1472 004a 08BF     		it	eq
 1473 004c E562     		streq	r5, [r4, #44]
1614:Lib/FreeRTOS/Source/tasks.c ****                     }
 1474              		.loc 1 1614 49 is_stmt 1 view .LVU466
1618:Lib/FreeRTOS/Source/tasks.c ****                 }
 1475              		.loc 1 1618 21 view .LVU467
1628:Lib/FreeRTOS/Source/tasks.c ****                 {
 1476              		.loc 1 1628 17 view .LVU468
1628:Lib/FreeRTOS/Source/tasks.c ****                 {
 1477              		.loc 1 1628 19 is_stmt 0 view .LVU469
 1478 004e 002A     		cmp	r2, #0
1630:Lib/FreeRTOS/Source/tasks.c ****                 }
 1479              		.loc 1 1630 21 is_stmt 1 view .LVU470
1641:Lib/FreeRTOS/Source/tasks.c ****                 {
 1480              		.loc 1 1641 21 is_stmt 0 view .LVU471
 1481 0050 4FF01402 		mov	r2, #20
1630:Lib/FreeRTOS/Source/tasks.c ****                 }
 1482              		.loc 1 1630 21 view .LVU472
 1483 0054 A4BF     		itt	ge
 1484 0056 C5F13805 		rsbge	r5, r5, #56
 1485              	.LVL122:
1630:Lib/FreeRTOS/Source/tasks.c ****                 }
 1486              		.loc 1 1630 21 view .LVU473
 1487 005a A561     		strge	r5, [r4, #24]
1634:Lib/FreeRTOS/Source/tasks.c ****                 }
 1488              		.loc 1 1634 45 is_stmt 1 view .LVU474
1641:Lib/FreeRTOS/Source/tasks.c ****                 {
 1489              		.loc 1 1641 17 view .LVU475
1641:Lib/FreeRTOS/Source/tasks.c ****                 {
 1490              		.loc 1 1641 21 is_stmt 0 view .LVU476
 1491 005c 194D     		ldr	r5, .L115+16
 1492 005e 02FB0353 		mla	r3, r2, r3, r5
ARM GAS  /tmp/ccEd3BVV.s 			page 131


 1493              	.LVL123:
1641:Lib/FreeRTOS/Source/tasks.c ****                 {
 1494              		.loc 1 1641 19 view .LVU477
 1495 0062 6269     		ldr	r2, [r4, #20]
 1496 0064 9A42     		cmp	r2, r3
 1497 0066 16D1     		bne	.L108
1646:Lib/FreeRTOS/Source/tasks.c ****                     {
 1498              		.loc 1 1646 21 is_stmt 1 view .LVU478
1646:Lib/FreeRTOS/Source/tasks.c ****                     {
 1499              		.loc 1 1646 25 is_stmt 0 view .LVU479
 1500 0068 271D     		adds	r7, r4, #4
 1501 006a 3846     		mov	r0, r7
 1502 006c FFF7FEFF 		bl	uxListRemove
 1503              	.LVL124:
1651:Lib/FreeRTOS/Source/tasks.c ****                     }
 1504              		.loc 1 1651 94 is_stmt 1 view .LVU480
1655:Lib/FreeRTOS/Source/tasks.c ****                     }
 1505              		.loc 1 1655 49 view .LVU481
1658:Lib/FreeRTOS/Source/tasks.c ****                 }
 1506              		.loc 1 1658 21 view .LVU482
1658:Lib/FreeRTOS/Source/tasks.c ****                 }
 1507              		.loc 1 1658 21 view .LVU483
1658:Lib/FreeRTOS/Source/tasks.c ****                 }
 1508              		.loc 1 1658 21 view .LVU484
1658:Lib/FreeRTOS/Source/tasks.c ****                 }
 1509              		.loc 1 1658 21 view .LVU485
 1510 0070 154A     		ldr	r2, .L115+20
 1511 0072 E36A     		ldr	r3, [r4, #44]
 1512 0074 1168     		ldr	r1, [r2]
 1513 0076 8B42     		cmp	r3, r1
1658:Lib/FreeRTOS/Source/tasks.c ****                 }
 1514              		.loc 1 1658 21 discriminator 1 view .LVU486
 1515 0078 88BF     		it	hi
 1516 007a 1360     		strhi	r3, [r2]
1658:Lib/FreeRTOS/Source/tasks.c ****                 }
 1517              		.loc 1 1658 21 discriminator 3 view .LVU487
1658:Lib/FreeRTOS/Source/tasks.c ****                 }
 1518              		.loc 1 1658 21 discriminator 3 view .LVU488
 1519              	.LBB79:
1658:Lib/FreeRTOS/Source/tasks.c ****                 }
 1520              		.loc 1 1658 21 discriminator 3 view .LVU489
 1521 007c 1422     		movs	r2, #20
 1522 007e 5343     		muls	r3, r2, r3
 1523 0080 E918     		adds	r1, r5, r3
 1524 0082 4A68     		ldr	r2, [r1, #4]
 1525              	.LVL125:
1658:Lib/FreeRTOS/Source/tasks.c ****                 }
 1526              		.loc 1 1658 21 discriminator 3 view .LVU490
1658:Lib/FreeRTOS/Source/tasks.c ****                 }
 1527              		.loc 1 1658 21 discriminator 3 view .LVU491
1658:Lib/FreeRTOS/Source/tasks.c ****                 }
 1528              		.loc 1 1658 21 discriminator 3 view .LVU492
 1529 0084 9068     		ldr	r0, [r2, #8]
 1530 0086 A260     		str	r2, [r4, #8]
1658:Lib/FreeRTOS/Source/tasks.c ****                 }
 1531              		.loc 1 1658 21 discriminator 3 view .LVU493
 1532 0088 E060     		str	r0, [r4, #12]
ARM GAS  /tmp/ccEd3BVV.s 			page 132


1658:Lib/FreeRTOS/Source/tasks.c ****                 }
 1533              		.loc 1 1658 21 discriminator 3 view .LVU494
 1534 008a 4760     		str	r7, [r0, #4]
1658:Lib/FreeRTOS/Source/tasks.c ****                 }
 1535              		.loc 1 1658 21 discriminator 3 view .LVU495
 1536 008c 9760     		str	r7, [r2, #8]
1658:Lib/FreeRTOS/Source/tasks.c ****                 }
 1537              		.loc 1 1658 21 discriminator 3 view .LVU496
 1538 008e EA58     		ldr	r2, [r5, r3]
 1539              	.LVL126:
1658:Lib/FreeRTOS/Source/tasks.c ****                 }
 1540              		.loc 1 1658 21 is_stmt 0 discriminator 3 view .LVU497
 1541 0090 6161     		str	r1, [r4, #20]
1658:Lib/FreeRTOS/Source/tasks.c ****                 }
 1542              		.loc 1 1658 21 is_stmt 1 discriminator 3 view .LVU498
 1543 0092 0132     		adds	r2, r2, #1
 1544 0094 EA50     		str	r2, [r5, r3]
 1545              	.LBE79:
1658:Lib/FreeRTOS/Source/tasks.c ****                 }
 1546              		.loc 1 1658 21 discriminator 3 view .LVU499
1658:Lib/FreeRTOS/Source/tasks.c ****                 }
 1547              		.loc 1 1658 21 discriminator 3 view .LVU500
1658:Lib/FreeRTOS/Source/tasks.c ****                 }
 1548              		.loc 1 1658 21 discriminator 3 view .LVU501
 1549              	.LVL127:
 1550              	.L108:
1662:Lib/FreeRTOS/Source/tasks.c ****                 }
 1551              		.loc 1 1662 45 view .LVU502
1665:Lib/FreeRTOS/Source/tasks.c ****                 {
 1552              		.loc 1 1665 17 view .LVU503
1665:Lib/FreeRTOS/Source/tasks.c ****                 {
 1553              		.loc 1 1665 19 is_stmt 0 view .LVU504
 1554 0096 0EB1     		cbz	r6, .L103
1667:Lib/FreeRTOS/Source/tasks.c ****                 }
 1555              		.loc 1 1667 21 is_stmt 1 view .LVU505
 1556 0098 FFF7FEFF 		bl	vPortYield
 1557              	.LVL128:
 1558              	.L103:
1671:Lib/FreeRTOS/Source/tasks.c ****                 }
 1559              		.loc 1 1671 45 view .LVU506
1676:Lib/FreeRTOS/Source/tasks.c ****             }
 1560              		.loc 1 1676 17 view .LVU507
1679:Lib/FreeRTOS/Source/tasks.c ****     }
 1561              		.loc 1 1679 9 view .LVU508
1680:Lib/FreeRTOS/Source/tasks.c **** 
 1562              		.loc 1 1680 5 is_stmt 0 view .LVU509
 1563 009c BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 1564              		.cfi_remember_state
 1565              		.cfi_restore 14
 1566              		.cfi_restore 7
 1567              		.cfi_restore 6
 1568              		.cfi_restore 5
 1569              		.cfi_restore 4
 1570              		.cfi_restore 3
 1571              		.cfi_def_cfa_offset 0
 1572              	.LVL129:
1679:Lib/FreeRTOS/Source/tasks.c ****     }
ARM GAS  /tmp/ccEd3BVV.s 			page 133


 1573              		.loc 1 1679 9 view .LVU510
 1574 00a0 FFF7FEBF 		b	vPortExitCritical
 1575              	.LVL130:
 1576              	.L104:
 1577              		.cfi_restore_state
1585:Lib/FreeRTOS/Source/tasks.c ****                 {
 1578              		.loc 1 1585 22 is_stmt 1 view .LVU511
1585:Lib/FreeRTOS/Source/tasks.c ****                 {
 1579              		.loc 1 1585 32 is_stmt 0 view .LVU512
 1580 00a4 1E68     		ldr	r6, [r3]
1585:Lib/FreeRTOS/Source/tasks.c ****                 {
 1581              		.loc 1 1585 24 view .LVU513
 1582 00a6 331B     		subs	r3, r6, r4
 1583 00a8 5E42     		rsbs	r6, r3, #0
 1584 00aa 5E41     		adcs	r6, r6, r3
 1585 00ac C9E7     		b	.L105
 1586              	.L111:
1526:Lib/FreeRTOS/Source/tasks.c **** 
 1587              		.loc 1 1526 20 view .LVU514
 1588 00ae 0026     		movs	r6, #0
 1589 00b0 C7E7     		b	.L105
 1590              	.L116:
 1591 00b2 00BF     		.align	2
 1592              	.L115:
 1593 00b4 00000000 		.word	.LC0
 1594 00b8 00000000 		.word	__func__.28
 1595 00bc 02000000 		.word	.LC1
 1596 00c0 00000000 		.word	pxCurrentTCB
 1597 00c4 00000000 		.word	pxReadyTasksLists
 1598 00c8 00000000 		.word	uxTopReadyPriority
 1599              		.cfi_endproc
 1600              	.LFE9:
 1602              		.section	.text.vTaskResume,"ax",%progbits
 1603              		.align	1
 1604              		.global	vTaskResume
 1605              		.syntax unified
 1606              		.thumb
 1607              		.thumb_func
 1609              	vTaskResume:
 1610              	.LVL131:
 1611              	.LFB12:
1840:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1612              		.loc 1 1840 5 is_stmt 1 view -0
 1613              		.cfi_startproc
 1614              		@ args = 0, pretend = 0, frame = 0
 1615              		@ frame_needed = 0, uses_anonymous_args = 0
1841:Lib/FreeRTOS/Source/tasks.c **** 
 1616              		.loc 1 1841 9 view .LVU516
1844:Lib/FreeRTOS/Source/tasks.c **** 
 1617              		.loc 1 1844 9 view .LVU517
1840:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1618              		.loc 1 1840 5 is_stmt 0 view .LVU518
 1619 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1620              		.cfi_def_cfa_offset 24
 1621              		.cfi_offset 3, -24
 1622              		.cfi_offset 4, -20
 1623              		.cfi_offset 5, -16
ARM GAS  /tmp/ccEd3BVV.s 			page 134


 1624              		.cfi_offset 6, -12
 1625              		.cfi_offset 7, -8
 1626              		.cfi_offset 14, -4
1844:Lib/FreeRTOS/Source/tasks.c **** 
 1627              		.loc 1 1844 9 view .LVU519
 1628 0002 0446     		mov	r4, r0
 1629 0004 40B9     		cbnz	r0, .L118
1844:Lib/FreeRTOS/Source/tasks.c **** 
 1630              		.loc 1 1844 9 is_stmt 1 discriminator 1 view .LVU520
 1631 0006 FFF7FEFF 		bl	ulSetInterruptMask
 1632              	.LVL132:
1844:Lib/FreeRTOS/Source/tasks.c **** 
 1633              		.loc 1 1844 9 discriminator 1 view .LVU521
 1634 000a 40F23471 		movw	r1, #1844
 1635 000e 1A4B     		ldr	r3, .L124
 1636 0010 1A4A     		ldr	r2, .L124+4
 1637 0012 1B48     		ldr	r0, .L124+8
 1638 0014 FFF7FEFF 		bl	__assert_func
 1639              	.LVL133:
 1640              	.L118:
1844:Lib/FreeRTOS/Source/tasks.c **** 
 1641              		.loc 1 1844 38 discriminator 2 view .LVU522
1848:Lib/FreeRTOS/Source/tasks.c ****         {
 1642              		.loc 1 1848 9 view .LVU523
1848:Lib/FreeRTOS/Source/tasks.c ****         {
 1643              		.loc 1 1848 21 is_stmt 0 view .LVU524
 1644 0018 1A4D     		ldr	r5, .L124+12
 1645 001a 2B68     		ldr	r3, [r5]
1848:Lib/FreeRTOS/Source/tasks.c ****         {
 1646              		.loc 1 1848 11 view .LVU525
 1647 001c 8342     		cmp	r3, r0
 1648 001e 2AD0     		beq	.L117
1850:Lib/FreeRTOS/Source/tasks.c ****             {
 1649              		.loc 1 1850 13 is_stmt 1 view .LVU526
 1650 0020 FFF7FEFF 		bl	vPortEnterCritical
 1651              	.LVL134:
1852:Lib/FreeRTOS/Source/tasks.c ****                 {
 1652              		.loc 1 1852 17 view .LVU527
1852:Lib/FreeRTOS/Source/tasks.c ****                 {
 1653              		.loc 1 1852 21 is_stmt 0 view .LVU528
 1654 0024 2046     		mov	r0, r4
 1655 0026 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1656              	.LVL135:
1852:Lib/FreeRTOS/Source/tasks.c ****                 {
 1657              		.loc 1 1852 19 discriminator 1 view .LVU529
 1658 002a 00B3     		cbz	r0, .L121
1854:Lib/FreeRTOS/Source/tasks.c **** 
 1659              		.loc 1 1854 46 is_stmt 1 view .LVU530
1858:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1660              		.loc 1 1858 21 view .LVU531
1858:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1661              		.loc 1 1858 30 is_stmt 0 view .LVU532
 1662 002c 261D     		adds	r6, r4, #4
 1663 002e 3046     		mov	r0, r6
 1664 0030 FFF7FEFF 		bl	uxListRemove
 1665              	.LVL136:
1859:Lib/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccEd3BVV.s 			page 135


 1666              		.loc 1 1859 21 is_stmt 1 view .LVU533
1859:Lib/FreeRTOS/Source/tasks.c **** 
 1667              		.loc 1 1859 21 view .LVU534
1859:Lib/FreeRTOS/Source/tasks.c **** 
 1668              		.loc 1 1859 21 view .LVU535
1859:Lib/FreeRTOS/Source/tasks.c **** 
 1669              		.loc 1 1859 21 view .LVU536
 1670 0034 144B     		ldr	r3, .L124+16
 1671 0036 E26A     		ldr	r2, [r4, #44]
 1672 0038 1968     		ldr	r1, [r3]
 1673 003a 8A42     		cmp	r2, r1
1859:Lib/FreeRTOS/Source/tasks.c **** 
 1674              		.loc 1 1859 21 discriminator 1 view .LVU537
 1675 003c 88BF     		it	hi
 1676 003e 1A60     		strhi	r2, [r3]
1859:Lib/FreeRTOS/Source/tasks.c **** 
 1677              		.loc 1 1859 21 discriminator 3 view .LVU538
1859:Lib/FreeRTOS/Source/tasks.c **** 
 1678              		.loc 1 1859 21 discriminator 3 view .LVU539
 1679              	.LBB80:
1859:Lib/FreeRTOS/Source/tasks.c **** 
 1680              		.loc 1 1859 21 discriminator 3 view .LVU540
 1681 0040 1423     		movs	r3, #20
 1682 0042 5343     		muls	r3, r2, r3
 1683 0044 1149     		ldr	r1, .L124+20
 1684 0046 CF18     		adds	r7, r1, r3
 1685 0048 7868     		ldr	r0, [r7, #4]
 1686              	.LVL137:
1859:Lib/FreeRTOS/Source/tasks.c **** 
 1687              		.loc 1 1859 21 discriminator 3 view .LVU541
1859:Lib/FreeRTOS/Source/tasks.c **** 
 1688              		.loc 1 1859 21 discriminator 3 view .LVU542
1859:Lib/FreeRTOS/Source/tasks.c **** 
 1689              		.loc 1 1859 21 discriminator 3 view .LVU543
 1690 004a D0F808C0 		ldr	ip, [r0, #8]
 1691 004e A060     		str	r0, [r4, #8]
1859:Lib/FreeRTOS/Source/tasks.c **** 
 1692              		.loc 1 1859 21 discriminator 3 view .LVU544
 1693 0050 C4F80CC0 		str	ip, [r4, #12]
1859:Lib/FreeRTOS/Source/tasks.c **** 
 1694              		.loc 1 1859 21 discriminator 3 view .LVU545
 1695 0054 CCF80460 		str	r6, [ip, #4]
1859:Lib/FreeRTOS/Source/tasks.c **** 
 1696              		.loc 1 1859 21 discriminator 3 view .LVU546
 1697 0058 8660     		str	r6, [r0, #8]
1859:Lib/FreeRTOS/Source/tasks.c **** 
 1698              		.loc 1 1859 21 discriminator 3 view .LVU547
 1699 005a C858     		ldr	r0, [r1, r3]
 1700              	.LVL138:
1859:Lib/FreeRTOS/Source/tasks.c **** 
 1701              		.loc 1 1859 21 is_stmt 0 discriminator 3 view .LVU548
 1702 005c 6761     		str	r7, [r4, #20]
1859:Lib/FreeRTOS/Source/tasks.c **** 
 1703              		.loc 1 1859 21 is_stmt 1 discriminator 3 view .LVU549
 1704 005e 0130     		adds	r0, r0, #1
 1705 0060 C850     		str	r0, [r1, r3]
 1706              	.LBE80:
ARM GAS  /tmp/ccEd3BVV.s 			page 136


1859:Lib/FreeRTOS/Source/tasks.c **** 
 1707              		.loc 1 1859 21 discriminator 3 view .LVU550
1859:Lib/FreeRTOS/Source/tasks.c **** 
 1708              		.loc 1 1859 21 discriminator 3 view .LVU551
1859:Lib/FreeRTOS/Source/tasks.c **** 
 1709              		.loc 1 1859 21 discriminator 3 view .LVU552
1862:Lib/FreeRTOS/Source/tasks.c ****                     {
 1710              		.loc 1 1862 21 view .LVU553
1862:Lib/FreeRTOS/Source/tasks.c ****                     {
 1711              		.loc 1 1862 57 is_stmt 0 view .LVU554
 1712 0062 2B68     		ldr	r3, [r5]
1862:Lib/FreeRTOS/Source/tasks.c ****                     {
 1713              		.loc 1 1862 23 view .LVU555
 1714 0064 DB6A     		ldr	r3, [r3, #44]
 1715 0066 9A42     		cmp	r2, r3
 1716 0068 01D9     		bls	.L121
1867:Lib/FreeRTOS/Source/tasks.c ****                     }
 1717              		.loc 1 1867 25 is_stmt 1 view .LVU556
 1718 006a FFF7FEFF 		bl	vPortYield
 1719              	.LVL139:
 1720              	.L121:
1876:Lib/FreeRTOS/Source/tasks.c ****                 }
 1721              		.loc 1 1876 45 view .LVU557
1879:Lib/FreeRTOS/Source/tasks.c ****         }
 1722              		.loc 1 1879 13 view .LVU558
1885:Lib/FreeRTOS/Source/tasks.c **** 
 1723              		.loc 1 1885 5 is_stmt 0 view .LVU559
 1724 006e BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 1725              		.cfi_remember_state
 1726              		.cfi_restore 14
 1727              		.cfi_restore 7
 1728              		.cfi_restore 6
 1729              		.cfi_restore 5
 1730              		.cfi_restore 4
 1731              		.cfi_restore 3
 1732              		.cfi_def_cfa_offset 0
 1733              	.LVL140:
1879:Lib/FreeRTOS/Source/tasks.c ****         }
 1734              		.loc 1 1879 13 view .LVU560
 1735 0072 FFF7FEBF 		b	vPortExitCritical
 1736              	.LVL141:
 1737              	.L117:
 1738              		.cfi_restore_state
1885:Lib/FreeRTOS/Source/tasks.c **** 
 1739              		.loc 1 1885 5 view .LVU561
 1740 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1741              	.L125:
 1742              		.align	2
 1743              	.L124:
 1744 0078 00000000 		.word	.LC0
 1745 007c 00000000 		.word	__func__.26
 1746 0080 02000000 		.word	.LC1
 1747 0084 00000000 		.word	pxCurrentTCB
 1748 0088 00000000 		.word	uxTopReadyPriority
 1749 008c 00000000 		.word	pxReadyTasksLists
 1750              		.cfi_endproc
 1751              	.LFE12:
ARM GAS  /tmp/ccEd3BVV.s 			page 137


 1753              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1754              		.align	1
 1755              		.global	xTaskResumeFromISR
 1756              		.syntax unified
 1757              		.thumb
 1758              		.thumb_func
 1760              	xTaskResumeFromISR:
 1761              	.LVL142:
 1762              	.LFB13:
1894:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1763              		.loc 1 1894 5 is_stmt 1 view -0
 1764              		.cfi_startproc
 1765              		@ args = 0, pretend = 0, frame = 0
 1766              		@ frame_needed = 0, uses_anonymous_args = 0
1895:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1767              		.loc 1 1895 9 view .LVU563
1896:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 1768              		.loc 1 1896 9 view .LVU564
1897:Lib/FreeRTOS/Source/tasks.c **** 
 1769              		.loc 1 1897 9 view .LVU565
1899:Lib/FreeRTOS/Source/tasks.c **** 
 1770              		.loc 1 1899 9 view .LVU566
1894:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1771              		.loc 1 1894 5 is_stmt 0 view .LVU567
 1772 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1773              		.cfi_def_cfa_offset 24
 1774              		.cfi_offset 3, -24
 1775              		.cfi_offset 4, -20
 1776              		.cfi_offset 5, -16
 1777              		.cfi_offset 6, -12
 1778              		.cfi_offset 7, -8
 1779              		.cfi_offset 14, -4
1899:Lib/FreeRTOS/Source/tasks.c **** 
 1780              		.loc 1 1899 9 view .LVU568
 1781 0002 0446     		mov	r4, r0
 1782 0004 40B9     		cbnz	r0, .L127
1899:Lib/FreeRTOS/Source/tasks.c **** 
 1783              		.loc 1 1899 9 is_stmt 1 discriminator 1 view .LVU569
 1784 0006 FFF7FEFF 		bl	ulSetInterruptMask
 1785              	.LVL143:
1899:Lib/FreeRTOS/Source/tasks.c **** 
 1786              		.loc 1 1899 9 discriminator 1 view .LVU570
 1787 000a 40F26B71 		movw	r1, #1899
 1788 000e 214B     		ldr	r3, .L137
 1789 0010 214A     		ldr	r2, .L137+4
 1790 0012 2248     		ldr	r0, .L137+8
 1791 0014 FFF7FEFF 		bl	__assert_func
 1792              	.LVL144:
 1793              	.L127:
1899:Lib/FreeRTOS/Source/tasks.c **** 
 1794              		.loc 1 1899 38 discriminator 2 view .LVU571
1917:Lib/FreeRTOS/Source/tasks.c **** 
 1795              		.loc 1 1917 9 view .LVU572
 1796 0018 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1797              	.LVL145:
1919:Lib/FreeRTOS/Source/tasks.c ****         {
 1798              		.loc 1 1919 9 view .LVU573
ARM GAS  /tmp/ccEd3BVV.s 			page 138


1919:Lib/FreeRTOS/Source/tasks.c ****         {
 1799              		.loc 1 1919 34 is_stmt 0 view .LVU574
 1800 001c FFF7FEFF 		bl	ulSetInterruptMask
 1801              	.LVL146:
 1802 0020 0646     		mov	r6, r0
 1803              	.LVL147:
1921:Lib/FreeRTOS/Source/tasks.c ****             {
 1804              		.loc 1 1921 13 is_stmt 1 view .LVU575
1921:Lib/FreeRTOS/Source/tasks.c ****             {
 1805              		.loc 1 1921 17 is_stmt 0 view .LVU576
 1806 0022 2046     		mov	r0, r4
 1807              	.LVL148:
1921:Lib/FreeRTOS/Source/tasks.c ****             {
 1808              		.loc 1 1921 17 view .LVU577
 1809 0024 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1810              	.LVL149:
1921:Lib/FreeRTOS/Source/tasks.c ****             {
 1811              		.loc 1 1921 15 discriminator 1 view .LVU578
 1812 0028 0028     		cmp	r0, #0
 1813 002a 31D0     		beq	.L128
1923:Lib/FreeRTOS/Source/tasks.c **** 
 1814              		.loc 1 1923 51 is_stmt 1 view .LVU579
1926:Lib/FreeRTOS/Source/tasks.c ****                 {
 1815              		.loc 1 1926 17 view .LVU580
1926:Lib/FreeRTOS/Source/tasks.c ****                 {
 1816              		.loc 1 1926 42 is_stmt 0 view .LVU581
 1817 002c 1C4B     		ldr	r3, .L137+12
 1818 002e 1D68     		ldr	r5, [r3]
1926:Lib/FreeRTOS/Source/tasks.c ****                 {
 1819              		.loc 1 1926 19 view .LVU582
 1820 0030 4DBB     		cbnz	r5, .L129
1930:Lib/FreeRTOS/Source/tasks.c ****                     {
 1821              		.loc 1 1930 21 is_stmt 1 view .LVU583
1930:Lib/FreeRTOS/Source/tasks.c ****                     {
 1822              		.loc 1 1930 57 is_stmt 0 view .LVU584
 1823 0032 1C4B     		ldr	r3, .L137+16
1930:Lib/FreeRTOS/Source/tasks.c ****                     {
 1824              		.loc 1 1930 23 view .LVU585
 1825 0034 E26A     		ldr	r2, [r4, #44]
1930:Lib/FreeRTOS/Source/tasks.c ****                     {
 1826              		.loc 1 1930 57 view .LVU586
 1827 0036 1B68     		ldr	r3, [r3]
1944:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1828              		.loc 1 1944 30 view .LVU587
 1829 0038 271D     		adds	r7, r4, #4
1930:Lib/FreeRTOS/Source/tasks.c ****                     {
 1830              		.loc 1 1930 23 view .LVU588
 1831 003a DB6A     		ldr	r3, [r3, #44]
1944:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1832              		.loc 1 1944 30 view .LVU589
 1833 003c 3846     		mov	r0, r7
1930:Lib/FreeRTOS/Source/tasks.c ****                     {
 1834              		.loc 1 1930 23 view .LVU590
 1835 003e 9A42     		cmp	r2, r3
1932:Lib/FreeRTOS/Source/tasks.c **** 
 1836              		.loc 1 1932 25 is_stmt 1 view .LVU591
 1837              	.LVL150:
ARM GAS  /tmp/ccEd3BVV.s 			page 139


1937:Lib/FreeRTOS/Source/tasks.c ****                     }
 1838              		.loc 1 1937 25 view .LVU592
1937:Lib/FreeRTOS/Source/tasks.c ****                     }
 1839              		.loc 1 1937 39 is_stmt 0 view .LVU593
 1840 0040 82BF     		ittt	hi
 1841 0042 0125     		movhi	r5, #1
 1842 0044 184B     		ldrhi	r3, .L137+20
 1843 0046 1D60     		strhi	r5, [r3]
 1844              	.LVL151:
1941:Lib/FreeRTOS/Source/tasks.c ****                     }
 1845              		.loc 1 1941 49 is_stmt 1 view .LVU594
1944:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1846              		.loc 1 1944 21 view .LVU595
1944:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1847              		.loc 1 1944 30 is_stmt 0 view .LVU596
 1848 0048 FFF7FEFF 		bl	uxListRemove
 1849              	.LVL152:
1945:Lib/FreeRTOS/Source/tasks.c ****                 }
 1850              		.loc 1 1945 21 is_stmt 1 view .LVU597
1945:Lib/FreeRTOS/Source/tasks.c ****                 }
 1851              		.loc 1 1945 21 view .LVU598
1945:Lib/FreeRTOS/Source/tasks.c ****                 }
 1852              		.loc 1 1945 21 view .LVU599
1945:Lib/FreeRTOS/Source/tasks.c ****                 }
 1853              		.loc 1 1945 21 view .LVU600
 1854 004c 174A     		ldr	r2, .L137+24
 1855 004e E36A     		ldr	r3, [r4, #44]
 1856 0050 1168     		ldr	r1, [r2]
 1857 0052 8B42     		cmp	r3, r1
1945:Lib/FreeRTOS/Source/tasks.c ****                 }
 1858              		.loc 1 1945 21 discriminator 1 view .LVU601
 1859              	.LBB81:
1945:Lib/FreeRTOS/Source/tasks.c ****                 }
 1860              		.loc 1 1945 21 is_stmt 0 discriminator 3 view .LVU602
 1861 0054 4FF01401 		mov	r1, #20
 1862              	.LBE81:
1945:Lib/FreeRTOS/Source/tasks.c ****                 }
 1863              		.loc 1 1945 21 discriminator 1 view .LVU603
 1864 0058 88BF     		it	hi
 1865 005a 1360     		strhi	r3, [r2]
1945:Lib/FreeRTOS/Source/tasks.c ****                 }
 1866              		.loc 1 1945 21 is_stmt 1 discriminator 3 view .LVU604
1945:Lib/FreeRTOS/Source/tasks.c ****                 }
 1867              		.loc 1 1945 21 discriminator 3 view .LVU605
 1868              	.LBB82:
1945:Lib/FreeRTOS/Source/tasks.c ****                 }
 1869              		.loc 1 1945 21 discriminator 3 view .LVU606
 1870 005c 4B43     		muls	r3, r1, r3
 1871 005e 144A     		ldr	r2, .L137+28
 1872 0060 D018     		adds	r0, r2, r3
 1873 0062 4168     		ldr	r1, [r0, #4]
 1874              	.LVL153:
1945:Lib/FreeRTOS/Source/tasks.c ****                 }
 1875              		.loc 1 1945 21 discriminator 3 view .LVU607
1945:Lib/FreeRTOS/Source/tasks.c ****                 }
 1876              		.loc 1 1945 21 discriminator 3 view .LVU608
1945:Lib/FreeRTOS/Source/tasks.c ****                 }
ARM GAS  /tmp/ccEd3BVV.s 			page 140


 1877              		.loc 1 1945 21 discriminator 3 view .LVU609
 1878 0064 D1F808C0 		ldr	ip, [r1, #8]
 1879 0068 A160     		str	r1, [r4, #8]
1945:Lib/FreeRTOS/Source/tasks.c ****                 }
 1880              		.loc 1 1945 21 discriminator 3 view .LVU610
 1881 006a C4F80CC0 		str	ip, [r4, #12]
1945:Lib/FreeRTOS/Source/tasks.c ****                 }
 1882              		.loc 1 1945 21 discriminator 3 view .LVU611
 1883 006e CCF80470 		str	r7, [ip, #4]
1945:Lib/FreeRTOS/Source/tasks.c ****                 }
 1884              		.loc 1 1945 21 discriminator 3 view .LVU612
 1885 0072 8F60     		str	r7, [r1, #8]
1945:Lib/FreeRTOS/Source/tasks.c ****                 }
 1886              		.loc 1 1945 21 discriminator 3 view .LVU613
 1887 0074 D158     		ldr	r1, [r2, r3]
 1888              	.LVL154:
1945:Lib/FreeRTOS/Source/tasks.c ****                 }
 1889              		.loc 1 1945 21 is_stmt 0 discriminator 3 view .LVU614
 1890 0076 6061     		str	r0, [r4, #20]
1945:Lib/FreeRTOS/Source/tasks.c ****                 }
 1891              		.loc 1 1945 21 is_stmt 1 discriminator 3 view .LVU615
 1892 0078 0131     		adds	r1, r1, #1
 1893 007a D150     		str	r1, [r2, r3]
 1894              	.LBE82:
1945:Lib/FreeRTOS/Source/tasks.c ****                 }
 1895              		.loc 1 1945 21 discriminator 3 view .LVU616
1945:Lib/FreeRTOS/Source/tasks.c ****                 }
 1896              		.loc 1 1945 21 discriminator 3 view .LVU617
1945:Lib/FreeRTOS/Source/tasks.c ****                 }
 1897              		.loc 1 1945 21 discriminator 3 view .LVU618
 1898              	.LVL155:
 1899              	.L132:
1957:Lib/FreeRTOS/Source/tasks.c ****             }
 1900              		.loc 1 1957 41 view .LVU619
1960:Lib/FreeRTOS/Source/tasks.c **** 
 1901              		.loc 1 1960 9 view .LVU620
 1902 007c 3046     		mov	r0, r6
 1903 007e FFF7FEFF 		bl	vClearInterruptMask
 1904              	.LVL156:
1962:Lib/FreeRTOS/Source/tasks.c ****     }
 1905              		.loc 1 1962 9 view .LVU621
1963:Lib/FreeRTOS/Source/tasks.c **** 
 1906              		.loc 1 1963 5 is_stmt 0 view .LVU622
 1907 0082 2846     		mov	r0, r5
 1908 0084 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1909              	.LVL157:
 1910              	.L129:
1952:Lib/FreeRTOS/Source/tasks.c ****                 }
 1911              		.loc 1 1952 21 is_stmt 1 view .LVU623
 1912 0086 0B48     		ldr	r0, .L137+32
 1913 0088 04F11801 		add	r1, r4, #24
 1914 008c FFF7FEFF 		bl	vListInsertEnd
 1915              	.LVL158:
 1916              	.L128:
1895:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1917              		.loc 1 1895 20 is_stmt 0 view .LVU624
 1918 0090 0025     		movs	r5, #0
ARM GAS  /tmp/ccEd3BVV.s 			page 141


 1919 0092 F3E7     		b	.L132
 1920              	.L138:
 1921              		.align	2
 1922              	.L137:
 1923 0094 00000000 		.word	.LC0
 1924 0098 00000000 		.word	__func__.24
 1925 009c 02000000 		.word	.LC1
 1926 00a0 00000000 		.word	uxSchedulerSuspended
 1927 00a4 00000000 		.word	pxCurrentTCB
 1928 00a8 00000000 		.word	xYieldPending
 1929 00ac 00000000 		.word	uxTopReadyPriority
 1930 00b0 00000000 		.word	pxReadyTasksLists
 1931 00b4 00000000 		.word	xPendingReadyList
 1932              		.cfi_endproc
 1933              	.LFE13:
 1935              		.section	.rodata.vTaskStartScheduler.str1.1,"aMS",%progbits,1
 1936              	.LC2:
 1937 0000 49444C45 		.ascii	"IDLE\000"
 1937      00
 1938              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1939              		.align	1
 1940              		.global	vTaskStartScheduler
 1941              		.syntax unified
 1942              		.thumb
 1943              		.thumb_func
 1945              	vTaskStartScheduler:
 1946              	.LFB14:
1969:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xReturn;
 1947              		.loc 1 1969 1 is_stmt 1 view -0
 1948              		.cfi_startproc
 1949              		@ args = 0, pretend = 0, frame = 16
 1950              		@ frame_needed = 0, uses_anonymous_args = 0
1970:Lib/FreeRTOS/Source/tasks.c **** 
 1951              		.loc 1 1970 5 view .LVU626
 1952              	.LBB83:
1975:Lib/FreeRTOS/Source/tasks.c ****         StackType_t * pxIdleTaskStackBuffer = NULL;
 1953              		.loc 1 1975 9 view .LVU627
 1954              	.LBE83:
1969:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xReturn;
 1955              		.loc 1 1969 1 is_stmt 0 view .LVU628
 1956 0000 30B5     		push	{r4, r5, lr}
 1957              		.cfi_def_cfa_offset 12
 1958              		.cfi_offset 4, -12
 1959              		.cfi_offset 5, -8
 1960              		.cfi_offset 14, -4
 1961              	.LBB84:
1975:Lib/FreeRTOS/Source/tasks.c ****         StackType_t * pxIdleTaskStackBuffer = NULL;
 1962              		.loc 1 1975 24 view .LVU629
 1963 0002 0025     		movs	r5, #0
 1964              	.LBE84:
1969:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xReturn;
 1965              		.loc 1 1969 1 view .LVU630
 1966 0004 89B0     		sub	sp, sp, #36
 1967              		.cfi_def_cfa_offset 48
 1968              	.LBB85:
1981:Lib/FreeRTOS/Source/tasks.c ****         xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 1969              		.loc 1 1981 9 view .LVU631
ARM GAS  /tmp/ccEd3BVV.s 			page 142


 1970 0006 07AA     		add	r2, sp, #28
 1971 0008 06A9     		add	r1, sp, #24
 1972 000a 05A8     		add	r0, sp, #20
1976:Lib/FreeRTOS/Source/tasks.c ****         uint32_t ulIdleTaskStackSize;
 1973              		.loc 1 1976 23 view .LVU632
 1974 000c CDE90555 		strd	r5, r5, [sp, #20]
1977:Lib/FreeRTOS/Source/tasks.c **** 
 1975              		.loc 1 1977 9 is_stmt 1 view .LVU633
1981:Lib/FreeRTOS/Source/tasks.c ****         xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 1976              		.loc 1 1981 9 view .LVU634
 1977 0010 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
 1978              	.LVL159:
1982:Lib/FreeRTOS/Source/tasks.c ****                                              configIDLE_TASK_NAME,
 1979              		.loc 1 1982 9 view .LVU635
1982:Lib/FreeRTOS/Source/tasks.c ****                                              configIDLE_TASK_NAME,
 1980              		.loc 1 1982 27 is_stmt 0 view .LVU636
 1981 0014 059B     		ldr	r3, [sp, #20]
 1982 0016 079A     		ldr	r2, [sp, #28]
 1983 0018 0293     		str	r3, [sp, #8]
 1984 001a 069B     		ldr	r3, [sp, #24]
 1985 001c 1649     		ldr	r1, .L148
 1986 001e CDE90053 		strd	r5, r3, [sp]
 1987 0022 1648     		ldr	r0, .L148+4
 1988 0024 2B46     		mov	r3, r5
 1989 0026 FFF7FEFF 		bl	xTaskCreateStatic
 1990              	.LVL160:
1982:Lib/FreeRTOS/Source/tasks.c ****                                              configIDLE_TASK_NAME,
 1991              		.loc 1 1982 25 discriminator 1 view .LVU637
 1992 002a 154B     		ldr	r3, .L148+8
 1993 002c 1860     		str	r0, [r3]
1990:Lib/FreeRTOS/Source/tasks.c ****         {
 1994              		.loc 1 1990 9 is_stmt 1 view .LVU638
1990:Lib/FreeRTOS/Source/tasks.c ****         {
 1995              		.loc 1 1990 11 is_stmt 0 view .LVU639
 1996 002e A0B1     		cbz	r0, .L143
 1997              	.LVL161:
1990:Lib/FreeRTOS/Source/tasks.c ****         {
 1998              		.loc 1 1990 11 view .LVU640
 1999              	.LBE85:
2013:Lib/FreeRTOS/Source/tasks.c ****         {
 2000              		.loc 1 2013 9 is_stmt 1 view .LVU641
2015:Lib/FreeRTOS/Source/tasks.c ****         }
 2001              		.loc 1 2015 13 view .LVU642
2015:Lib/FreeRTOS/Source/tasks.c ****         }
 2002              		.loc 1 2015 23 is_stmt 0 view .LVU643
 2003 0030 FFF7FEFF 		bl	xTimerCreateTimerTask
 2004              	.LVL162:
2024:Lib/FreeRTOS/Source/tasks.c ****     {
 2005              		.loc 1 2024 7 view .LVU644
 2006 0034 0128     		cmp	r0, #1
2015:Lib/FreeRTOS/Source/tasks.c ****         }
 2007              		.loc 1 2015 23 view .LVU645
 2008 0036 0446     		mov	r4, r0
 2009              	.LVL163:
2019:Lib/FreeRTOS/Source/tasks.c ****         }
 2010              		.loc 1 2019 37 is_stmt 1 view .LVU646
2024:Lib/FreeRTOS/Source/tasks.c ****     {
ARM GAS  /tmp/ccEd3BVV.s 			page 143


 2011              		.loc 1 2024 5 view .LVU647
2024:Lib/FreeRTOS/Source/tasks.c ****     {
 2012              		.loc 1 2024 7 is_stmt 0 view .LVU648
 2013 0038 13D1     		bne	.L147
2031:Lib/FreeRTOS/Source/tasks.c ****         }
 2014              		.loc 1 2031 13 is_stmt 1 view .LVU649
 2015              	.LBB86:
 2016              	.LBI86:
5498:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5499:Lib/FreeRTOS/Source/tasks.c **** 
5500:Lib/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
5501:Lib/FreeRTOS/Source/tasks.c **** 
5502:Lib/FreeRTOS/Source/tasks.c ****     xMPU_SETTINGS * xTaskGetMPUSettings( TaskHandle_t xTask )
5503:Lib/FreeRTOS/Source/tasks.c ****     {
5504:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
5505:Lib/FreeRTOS/Source/tasks.c **** 
5506:Lib/FreeRTOS/Source/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
5507:Lib/FreeRTOS/Source/tasks.c **** 
5508:Lib/FreeRTOS/Source/tasks.c ****         return &( pxTCB->xMPUSettings );
5509:Lib/FreeRTOS/Source/tasks.c ****     }
5510:Lib/FreeRTOS/Source/tasks.c **** 
5511:Lib/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
5512:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5513:Lib/FreeRTOS/Source/tasks.c **** 
5514:Lib/FreeRTOS/Source/tasks.c **** /* Code below here allows additional code to be inserted into this source file,
5515:Lib/FreeRTOS/Source/tasks.c ****  * especially where access to file scope functions and data is needed (for example
5516:Lib/FreeRTOS/Source/tasks.c ****  * when performing module tests). */
5517:Lib/FreeRTOS/Source/tasks.c **** 
5518:Lib/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_MODULE_TEST
5519:Lib/FreeRTOS/Source/tasks.c ****     #include "tasks_test_access_functions.h"
5520:Lib/FreeRTOS/Source/tasks.c **** #endif
5521:Lib/FreeRTOS/Source/tasks.c **** 
5522:Lib/FreeRTOS/Source/tasks.c **** 
5523:Lib/FreeRTOS/Source/tasks.c **** #if ( configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H == 1 )
5524:Lib/FreeRTOS/Source/tasks.c **** 
5525:Lib/FreeRTOS/Source/tasks.c ****     #include "freertos_tasks_c_additions.h"
5526:Lib/FreeRTOS/Source/tasks.c **** 
5527:Lib/FreeRTOS/Source/tasks.c ****     #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
5528:Lib/FreeRTOS/Source/tasks.c ****         static void freertos_tasks_c_additions_init( void )
 2017              		.loc 1 5528 21 view .LVU650
 2018              	.LBB87:
5529:Lib/FreeRTOS/Source/tasks.c ****         {
5530:Lib/FreeRTOS/Source/tasks.c ****             FREERTOS_TASKS_C_ADDITIONS_INIT();
 2019              		.loc 1 5530 13 view .LVU651
 2020 003a FFF7FEFF 		bl	freertos_libc_init
 2021              	.LVL164:
 2022              		.loc 1 5530 13 is_stmt 0 view .LVU652
 2023              	.LBE87:
 2024              	.LBE86:
2040:Lib/FreeRTOS/Source/tasks.c **** 
 2025              		.loc 1 2040 9 is_stmt 1 view .LVU653
 2026 003e FFF7FEFF 		bl	ulSetInterruptMask
 2027              	.LVL165:
2050:Lib/FreeRTOS/Source/tasks.c ****         xSchedulerRunning = pdTRUE;
 2028              		.loc 1 2050 9 view .LVU654
2050:Lib/FreeRTOS/Source/tasks.c ****         xSchedulerRunning = pdTRUE;
 2029              		.loc 1 2050 30 is_stmt 0 view .LVU655
ARM GAS  /tmp/ccEd3BVV.s 			page 144


 2030 0042 4FF0FF32 		mov	r2, #-1
 2031 0046 0F4B     		ldr	r3, .L148+12
 2032 0048 1A60     		str	r2, [r3]
2051:Lib/FreeRTOS/Source/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2033              		.loc 1 2051 9 is_stmt 1 view .LVU656
2051:Lib/FreeRTOS/Source/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2034              		.loc 1 2051 27 is_stmt 0 view .LVU657
 2035 004a 0F4B     		ldr	r3, .L148+16
 2036 004c 1C60     		str	r4, [r3]
2052:Lib/FreeRTOS/Source/tasks.c **** 
 2037              		.loc 1 2052 9 is_stmt 1 view .LVU658
2052:Lib/FreeRTOS/Source/tasks.c **** 
 2038              		.loc 1 2052 20 is_stmt 0 view .LVU659
 2039 004e 0F4B     		ldr	r3, .L148+20
 2040 0050 1D60     		str	r5, [r3]
2060:Lib/FreeRTOS/Source/tasks.c **** 
 2041              		.loc 1 2060 9 is_stmt 1 view .LVU660
 2042 0052 FFF7FEFF 		bl	TIM4_Config
 2043              	.LVL166:
2062:Lib/FreeRTOS/Source/tasks.c **** 
 2044              		.loc 1 2062 32 view .LVU661
2066:Lib/FreeRTOS/Source/tasks.c **** 
 2045              		.loc 1 2066 9 view .LVU662
 2046 0056 FFF7FEFF 		bl	xPortStartScheduler
 2047              	.LVL167:
 2048              	.L143:
2080:Lib/FreeRTOS/Source/tasks.c ****     }
 2049              		.loc 1 2080 73 discriminator 2 view .LVU663
2085:Lib/FreeRTOS/Source/tasks.c **** 
 2050              		.loc 1 2085 5 view .LVU664
2089:Lib/FreeRTOS/Source/tasks.c **** }
 2051              		.loc 1 2089 5 view .LVU665
 2052 005a 0D4B     		ldr	r3, .L148+24
 2053 005c 1B68     		ldr	r3, [r3]
2090:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2054              		.loc 1 2090 1 is_stmt 0 view .LVU666
 2055 005e 09B0     		add	sp, sp, #36
 2056              		.cfi_remember_state
 2057              		.cfi_def_cfa_offset 12
 2058              		@ sp needed
 2059 0060 30BD     		pop	{r4, r5, pc}
 2060              	.LVL168:
 2061              	.L147:
 2062              		.cfi_restore_state
2080:Lib/FreeRTOS/Source/tasks.c ****     }
 2063              		.loc 1 2080 9 is_stmt 1 view .LVU667
 2064 0062 0134     		adds	r4, r4, #1
 2065 0064 F9D1     		bne	.L143
2080:Lib/FreeRTOS/Source/tasks.c ****     }
 2066              		.loc 1 2080 9 discriminator 1 view .LVU668
 2067 0066 FFF7FEFF 		bl	ulSetInterruptMask
 2068              	.LVL169:
2080:Lib/FreeRTOS/Source/tasks.c ****     }
 2069              		.loc 1 2080 9 discriminator 1 view .LVU669
 2070 006a 4FF40261 		mov	r1, #2080
 2071 006e 094B     		ldr	r3, .L148+28
 2072 0070 094A     		ldr	r2, .L148+32
ARM GAS  /tmp/ccEd3BVV.s 			page 145


 2073 0072 0A48     		ldr	r0, .L148+36
 2074 0074 FFF7FEFF 		bl	__assert_func
 2075              	.LVL170:
 2076              	.L149:
 2077              		.align	2
 2078              	.L148:
 2079 0078 00000000 		.word	.LC2
 2080 007c 00000000 		.word	prvIdleTask
 2081 0080 00000000 		.word	xIdleTaskHandle
 2082 0084 00000000 		.word	xNextTaskUnblockTime
 2083 0088 00000000 		.word	xSchedulerRunning
 2084 008c 00000000 		.word	xTickCount
 2085 0090 00000000 		.word	uxTopUsedPriority
 2086 0094 00000000 		.word	.LC0
 2087 0098 00000000 		.word	__func__.23
 2088 009c 02000000 		.word	.LC1
 2089              		.cfi_endproc
 2090              	.LFE14:
 2092              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2093              		.align	1
 2094              		.global	vTaskEndScheduler
 2095              		.syntax unified
 2096              		.thumb
 2097              		.thumb_func
 2099              	vTaskEndScheduler:
 2100              	.LFB15:
2094:Lib/FreeRTOS/Source/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
 2101              		.loc 1 2094 1 view -0
 2102              		.cfi_startproc
 2103              		@ args = 0, pretend = 0, frame = 0
 2104              		@ frame_needed = 0, uses_anonymous_args = 0
2098:Lib/FreeRTOS/Source/tasks.c ****     xSchedulerRunning = pdFALSE;
 2105              		.loc 1 2098 5 view .LVU671
2094:Lib/FreeRTOS/Source/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
 2106              		.loc 1 2094 1 is_stmt 0 view .LVU672
 2107 0000 08B5     		push	{r3, lr}
 2108              		.cfi_def_cfa_offset 8
 2109              		.cfi_offset 3, -8
 2110              		.cfi_offset 14, -4
2098:Lib/FreeRTOS/Source/tasks.c ****     xSchedulerRunning = pdFALSE;
 2111              		.loc 1 2098 5 view .LVU673
 2112 0002 FFF7FEFF 		bl	ulSetInterruptMask
 2113              	.LVL171:
2099:Lib/FreeRTOS/Source/tasks.c ****     vPortEndScheduler();
 2114              		.loc 1 2099 5 is_stmt 1 view .LVU674
2099:Lib/FreeRTOS/Source/tasks.c ****     vPortEndScheduler();
 2115              		.loc 1 2099 23 is_stmt 0 view .LVU675
 2116 0006 0022     		movs	r2, #0
 2117 0008 024B     		ldr	r3, .L151
 2118 000a 1A60     		str	r2, [r3]
2100:Lib/FreeRTOS/Source/tasks.c **** }
 2119              		.loc 1 2100 5 is_stmt 1 view .LVU676
2101:Lib/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 2120              		.loc 1 2101 1 is_stmt 0 view .LVU677
 2121 000c BDE80840 		pop	{r3, lr}
 2122              		.cfi_restore 14
 2123              		.cfi_restore 3
ARM GAS  /tmp/ccEd3BVV.s 			page 146


 2124              		.cfi_def_cfa_offset 0
2100:Lib/FreeRTOS/Source/tasks.c **** }
 2125              		.loc 1 2100 5 view .LVU678
 2126 0010 FFF7FEBF 		b	vPortEndScheduler
 2127              	.LVL172:
 2128              	.L152:
 2129              		.align	2
 2130              	.L151:
 2131 0014 00000000 		.word	xSchedulerRunning
 2132              		.cfi_endproc
 2133              	.LFE15:
 2135              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2136              		.align	1
 2137              		.global	vTaskSuspendAll
 2138              		.syntax unified
 2139              		.thumb
 2140              		.thumb_func
 2142              	vTaskSuspendAll:
 2143              	.LFB16:
2105:Lib/FreeRTOS/Source/tasks.c ****     /* A critical section is not required as the variable is of type
 2144              		.loc 1 2105 1 is_stmt 1 view -0
 2145              		.cfi_startproc
 2146              		@ args = 0, pretend = 0, frame = 0
 2147              		@ frame_needed = 0, uses_anonymous_args = 0
 2148              		@ link register save eliminated.
2113:Lib/FreeRTOS/Source/tasks.c **** 
 2149              		.loc 1 2113 27 view .LVU680
2117:Lib/FreeRTOS/Source/tasks.c **** 
 2150              		.loc 1 2117 5 view .LVU681
 2151 0000 024A     		ldr	r2, .L154
 2152 0002 1368     		ldr	r3, [r2]
 2153 0004 0133     		adds	r3, r3, #1
 2154 0006 1360     		str	r3, [r2]
2121:Lib/FreeRTOS/Source/tasks.c **** }
 2155              		.loc 1 2121 5 view .LVU682
2122:Lib/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 2156              		.loc 1 2122 1 is_stmt 0 view .LVU683
 2157 0008 7047     		bx	lr
 2158              	.L155:
 2159 000a 00BF     		.align	2
 2160              	.L154:
 2161 000c 00000000 		.word	uxSchedulerSuspended
 2162              		.cfi_endproc
 2163              	.LFE16:
 2165              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2166              		.align	1
 2167              		.global	xTaskGetTickCount
 2168              		.syntax unified
 2169              		.thumb
 2170              		.thumb_func
 2172              	xTaskGetTickCount:
 2173              	.LFB18:
2301:Lib/FreeRTOS/Source/tasks.c ****     TickType_t xTicks;
 2174              		.loc 1 2301 1 is_stmt 1 view -0
 2175              		.cfi_startproc
 2176              		@ args = 0, pretend = 0, frame = 0
 2177              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccEd3BVV.s 			page 147


 2178              		@ link register save eliminated.
2302:Lib/FreeRTOS/Source/tasks.c **** 
 2179              		.loc 1 2302 5 view .LVU685
2305:Lib/FreeRTOS/Source/tasks.c ****     {
 2180              		.loc 1 2305 35 view .LVU686
2307:Lib/FreeRTOS/Source/tasks.c ****     }
 2181              		.loc 1 2307 9 view .LVU687
2307:Lib/FreeRTOS/Source/tasks.c ****     }
 2182              		.loc 1 2307 16 is_stmt 0 view .LVU688
 2183 0000 014B     		ldr	r3, .L157
 2184 0002 1868     		ldr	r0, [r3]
 2185              	.LVL173:
2309:Lib/FreeRTOS/Source/tasks.c **** 
 2186              		.loc 1 2309 34 is_stmt 1 view .LVU689
2311:Lib/FreeRTOS/Source/tasks.c **** }
 2187              		.loc 1 2311 5 view .LVU690
2312:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2188              		.loc 1 2312 1 is_stmt 0 view .LVU691
 2189 0004 7047     		bx	lr
 2190              	.L158:
 2191 0006 00BF     		.align	2
 2192              	.L157:
 2193 0008 00000000 		.word	xTickCount
 2194              		.cfi_endproc
 2195              	.LFE18:
 2197              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2198              		.align	1
 2199              		.global	xTaskGetTickCountFromISR
 2200              		.syntax unified
 2201              		.thumb
 2202              		.thumb_func
 2204              	xTaskGetTickCountFromISR:
 2205              	.LFB19:
2316:Lib/FreeRTOS/Source/tasks.c ****     TickType_t xReturn;
 2206              		.loc 1 2316 1 is_stmt 1 view -0
 2207              		.cfi_startproc
 2208              		@ args = 0, pretend = 0, frame = 0
 2209              		@ frame_needed = 0, uses_anonymous_args = 0
2317:Lib/FreeRTOS/Source/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
 2210              		.loc 1 2317 5 view .LVU693
2318:Lib/FreeRTOS/Source/tasks.c **** 
 2211              		.loc 1 2318 5 view .LVU694
2334:Lib/FreeRTOS/Source/tasks.c **** 
 2212              		.loc 1 2334 5 view .LVU695
2316:Lib/FreeRTOS/Source/tasks.c ****     TickType_t xReturn;
 2213              		.loc 1 2316 1 is_stmt 0 view .LVU696
 2214 0000 08B5     		push	{r3, lr}
 2215              		.cfi_def_cfa_offset 8
 2216              		.cfi_offset 3, -8
 2217              		.cfi_offset 14, -4
2334:Lib/FreeRTOS/Source/tasks.c **** 
 2218              		.loc 1 2334 5 view .LVU697
 2219 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2220              	.LVL174:
2336:Lib/FreeRTOS/Source/tasks.c ****     {
 2221              		.loc 1 2336 5 is_stmt 1 view .LVU698
2338:Lib/FreeRTOS/Source/tasks.c ****     }
ARM GAS  /tmp/ccEd3BVV.s 			page 148


 2222              		.loc 1 2338 9 view .LVU699
2338:Lib/FreeRTOS/Source/tasks.c ****     }
 2223              		.loc 1 2338 17 is_stmt 0 view .LVU700
 2224 0006 014B     		ldr	r3, .L160
 2225 0008 1868     		ldr	r0, [r3]
 2226              	.LVL175:
2340:Lib/FreeRTOS/Source/tasks.c **** 
 2227              		.loc 1 2340 5 is_stmt 1 view .LVU701
2342:Lib/FreeRTOS/Source/tasks.c **** }
 2228              		.loc 1 2342 5 view .LVU702
2343:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2229              		.loc 1 2343 1 is_stmt 0 view .LVU703
 2230 000a 08BD     		pop	{r3, pc}
 2231              	.L161:
 2232              		.align	2
 2233              	.L160:
 2234 000c 00000000 		.word	xTickCount
 2235              		.cfi_endproc
 2236              	.LFE19:
 2238              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2239              		.align	1
 2240              		.global	uxTaskGetNumberOfTasks
 2241              		.syntax unified
 2242              		.thumb
 2243              		.thumb_func
 2245              	uxTaskGetNumberOfTasks:
 2246              	.LFB20:
2347:Lib/FreeRTOS/Source/tasks.c ****     /* A critical section is not required because the variables are of type
 2247              		.loc 1 2347 1 is_stmt 1 view -0
 2248              		.cfi_startproc
 2249              		@ args = 0, pretend = 0, frame = 0
 2250              		@ frame_needed = 0, uses_anonymous_args = 0
 2251              		@ link register save eliminated.
2350:Lib/FreeRTOS/Source/tasks.c **** }
 2252              		.loc 1 2350 5 view .LVU705
2350:Lib/FreeRTOS/Source/tasks.c **** }
 2253              		.loc 1 2350 12 is_stmt 0 view .LVU706
 2254 0000 014B     		ldr	r3, .L163
 2255 0002 1868     		ldr	r0, [r3]
2351:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2256              		.loc 1 2351 1 view .LVU707
 2257 0004 7047     		bx	lr
 2258              	.L164:
 2259 0006 00BF     		.align	2
 2260              	.L163:
 2261 0008 00000000 		.word	uxCurrentNumberOfTasks
 2262              		.cfi_endproc
 2263              	.LFE20:
 2265              		.section	.text.pcTaskGetName,"ax",%progbits
 2266              		.align	1
 2267              		.global	pcTaskGetName
 2268              		.syntax unified
 2269              		.thumb
 2270              		.thumb_func
 2272              	pcTaskGetName:
 2273              	.LVL176:
 2274              	.LFB21:
ARM GAS  /tmp/ccEd3BVV.s 			page 149


2355:Lib/FreeRTOS/Source/tasks.c ****     TCB_t * pxTCB;
 2275              		.loc 1 2355 1 is_stmt 1 view -0
 2276              		.cfi_startproc
 2277              		@ args = 0, pretend = 0, frame = 0
 2278              		@ frame_needed = 0, uses_anonymous_args = 0
2356:Lib/FreeRTOS/Source/tasks.c **** 
 2279              		.loc 1 2356 5 view .LVU709
2360:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxTCB );
 2280              		.loc 1 2360 5 view .LVU710
2355:Lib/FreeRTOS/Source/tasks.c ****     TCB_t * pxTCB;
 2281              		.loc 1 2355 1 is_stmt 0 view .LVU711
 2282 0000 08B5     		push	{r3, lr}
 2283              		.cfi_def_cfa_offset 8
 2284              		.cfi_offset 3, -8
 2285              		.cfi_offset 14, -4
2360:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxTCB );
 2286              		.loc 1 2360 13 view .LVU712
 2287 0002 58B9     		cbnz	r0, .L166
2360:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxTCB );
 2288              		.loc 1 2360 13 discriminator 1 view .LVU713
 2289 0004 064B     		ldr	r3, .L167
 2290 0006 1868     		ldr	r0, [r3]
 2291              	.LVL177:
2361:Lib/FreeRTOS/Source/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2292              		.loc 1 2361 5 is_stmt 1 view .LVU714
 2293 0008 40B9     		cbnz	r0, .L166
2361:Lib/FreeRTOS/Source/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2294              		.loc 1 2361 5 discriminator 1 view .LVU715
 2295 000a FFF7FEFF 		bl	ulSetInterruptMask
 2296              	.LVL178:
2361:Lib/FreeRTOS/Source/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2297              		.loc 1 2361 5 discriminator 1 view .LVU716
 2298 000e 40F63911 		movw	r1, #2361
 2299 0012 044B     		ldr	r3, .L167+4
 2300 0014 044A     		ldr	r2, .L167+8
 2301 0016 0548     		ldr	r0, .L167+12
 2302 0018 FFF7FEFF 		bl	__assert_func
 2303              	.LVL179:
 2304              	.L166:
2361:Lib/FreeRTOS/Source/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2305              		.loc 1 2361 26 discriminator 2 view .LVU717
2362:Lib/FreeRTOS/Source/tasks.c **** }
 2306              		.loc 1 2362 5 view .LVU718
2363:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2307              		.loc 1 2363 1 is_stmt 0 view .LVU719
 2308 001c 3430     		adds	r0, r0, #52
 2309 001e 08BD     		pop	{r3, pc}
 2310              	.L168:
 2311              		.align	2
 2312              	.L167:
 2313 0020 00000000 		.word	pxCurrentTCB
 2314 0024 00000000 		.word	.LC0
 2315 0028 00000000 		.word	__func__.21
 2316 002c 02000000 		.word	.LC1
 2317              		.cfi_endproc
 2318              	.LFE21:
 2320              		.section	.text.xTaskGetStaticBuffers,"ax",%progbits
ARM GAS  /tmp/ccEd3BVV.s 			page 150


 2321              		.align	1
 2322              		.global	xTaskGetStaticBuffers
 2323              		.syntax unified
 2324              		.thumb
 2325              		.thumb_func
 2327              	xTaskGetStaticBuffers:
 2328              	.LVL180:
 2329              	.LFB22:
2506:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
 2330              		.loc 1 2506 5 is_stmt 1 view -0
 2331              		.cfi_startproc
 2332              		@ args = 0, pretend = 0, frame = 0
 2333              		@ frame_needed = 0, uses_anonymous_args = 0
2507:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 2334              		.loc 1 2507 9 view .LVU721
2508:Lib/FreeRTOS/Source/tasks.c **** 
 2335              		.loc 1 2508 9 view .LVU722
2510:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( ppxTaskBuffer != NULL );
 2336              		.loc 1 2510 9 view .LVU723
2506:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
 2337              		.loc 1 2506 5 is_stmt 0 view .LVU724
 2338 0000 08B5     		push	{r3, lr}
 2339              		.cfi_def_cfa_offset 8
 2340              		.cfi_offset 3, -8
 2341              		.cfi_offset 14, -4
2510:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( ppxTaskBuffer != NULL );
 2342              		.loc 1 2510 9 view .LVU725
 2343 0002 41B9     		cbnz	r1, .L170
2510:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( ppxTaskBuffer != NULL );
 2344              		.loc 1 2510 9 is_stmt 1 discriminator 1 view .LVU726
 2345 0004 FFF7FEFF 		bl	ulSetInterruptMask
 2346              	.LVL181:
2510:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( ppxTaskBuffer != NULL );
 2347              		.loc 1 2510 9 discriminator 1 view .LVU727
 2348 0008 40F6CE11 		movw	r1, #2510
 2349 000c 0A4B     		ldr	r3, .L174
 2350 000e 0B4A     		ldr	r2, .L174+4
 2351              	.L173:
2511:Lib/FreeRTOS/Source/tasks.c **** 
 2352              		.loc 1 2511 9 is_stmt 0 discriminator 1 view .LVU728
 2353 0010 0B48     		ldr	r0, .L174+8
 2354 0012 FFF7FEFF 		bl	__assert_func
 2355              	.LVL182:
 2356              	.L170:
2510:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( ppxTaskBuffer != NULL );
 2357              		.loc 1 2510 48 is_stmt 1 discriminator 2 view .LVU729
2511:Lib/FreeRTOS/Source/tasks.c **** 
 2358              		.loc 1 2511 9 view .LVU730
 2359 0016 32B9     		cbnz	r2, .L171
2511:Lib/FreeRTOS/Source/tasks.c **** 
 2360              		.loc 1 2511 9 discriminator 1 view .LVU731
 2361 0018 FFF7FEFF 		bl	ulSetInterruptMask
 2362              	.LVL183:
2511:Lib/FreeRTOS/Source/tasks.c **** 
 2363              		.loc 1 2511 9 discriminator 1 view .LVU732
 2364 001c 40F6CF11 		movw	r1, #2511
 2365 0020 054B     		ldr	r3, .L174
ARM GAS  /tmp/ccEd3BVV.s 			page 151


 2366 0022 064A     		ldr	r2, .L174+4
 2367 0024 F4E7     		b	.L173
 2368              	.LVL184:
 2369              	.L171:
2511:Lib/FreeRTOS/Source/tasks.c **** 
 2370              		.loc 1 2511 46 discriminator 2 view .LVU733
2513:Lib/FreeRTOS/Source/tasks.c **** 
 2371              		.loc 1 2513 9 view .LVU734
2513:Lib/FreeRTOS/Source/tasks.c **** 
 2372              		.loc 1 2513 17 is_stmt 0 view .LVU735
 2373 0026 08B9     		cbnz	r0, .L172
2513:Lib/FreeRTOS/Source/tasks.c **** 
 2374              		.loc 1 2513 17 discriminator 1 view .LVU736
 2375 0028 064B     		ldr	r3, .L174+12
 2376 002a 1868     		ldr	r0, [r3]
 2377              	.LVL185:
 2378              	.L172:
2536:Lib/FreeRTOS/Source/tasks.c ****             *ppxTaskBuffer = ( StaticTask_t * ) pxTCB;
 2379              		.loc 1 2536 13 is_stmt 1 view .LVU737
2536:Lib/FreeRTOS/Source/tasks.c ****             *ppxTaskBuffer = ( StaticTask_t * ) pxTCB;
 2380              		.loc 1 2536 37 is_stmt 0 view .LVU738
 2381 002c 036B     		ldr	r3, [r0, #48]
2536:Lib/FreeRTOS/Source/tasks.c ****             *ppxTaskBuffer = ( StaticTask_t * ) pxTCB;
 2382              		.loc 1 2536 30 view .LVU739
 2383 002e 0B60     		str	r3, [r1]
2537:Lib/FreeRTOS/Source/tasks.c ****             xReturn = pdTRUE;
 2384              		.loc 1 2537 13 is_stmt 1 view .LVU740
2537:Lib/FreeRTOS/Source/tasks.c ****             xReturn = pdTRUE;
 2385              		.loc 1 2537 28 is_stmt 0 view .LVU741
 2386 0030 1060     		str	r0, [r2]
2538:Lib/FreeRTOS/Source/tasks.c ****         }
 2387              		.loc 1 2538 13 is_stmt 1 view .LVU742
 2388              	.LVL186:
2542:Lib/FreeRTOS/Source/tasks.c ****     }
 2389              		.loc 1 2542 9 view .LVU743
2543:Lib/FreeRTOS/Source/tasks.c **** 
 2390              		.loc 1 2543 5 is_stmt 0 view .LVU744
 2391 0032 0120     		movs	r0, #1
 2392              	.LVL187:
2543:Lib/FreeRTOS/Source/tasks.c **** 
 2393              		.loc 1 2543 5 view .LVU745
 2394 0034 08BD     		pop	{r3, pc}
 2395              	.L175:
 2396 0036 00BF     		.align	2
 2397              	.L174:
 2398 0038 00000000 		.word	.LC0
 2399 003c 00000000 		.word	__func__.20
 2400 0040 02000000 		.word	.LC1
 2401 0044 00000000 		.word	pxCurrentTCB
 2402              		.cfi_endproc
 2403              	.LFE22:
 2405              		.section	.text.xTaskGetIdleTaskHandle,"ax",%progbits
 2406              		.align	1
 2407              		.global	xTaskGetIdleTaskHandle
 2408              		.syntax unified
 2409              		.thumb
 2410              		.thumb_func
ARM GAS  /tmp/ccEd3BVV.s 			page 152


 2412              	xTaskGetIdleTaskHandle:
 2413              	.LFB24:
2626:Lib/FreeRTOS/Source/tasks.c ****         /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
 2414              		.loc 1 2626 5 is_stmt 1 view -0
 2415              		.cfi_startproc
 2416              		@ args = 0, pretend = 0, frame = 0
 2417              		@ frame_needed = 0, uses_anonymous_args = 0
2629:Lib/FreeRTOS/Source/tasks.c ****         return xIdleTaskHandle;
 2418              		.loc 1 2629 9 view .LVU747
2626:Lib/FreeRTOS/Source/tasks.c ****         /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
 2419              		.loc 1 2626 5 is_stmt 0 view .LVU748
 2420 0000 08B5     		push	{r3, lr}
 2421              		.cfi_def_cfa_offset 8
 2422              		.cfi_offset 3, -8
 2423              		.cfi_offset 14, -4
2629:Lib/FreeRTOS/Source/tasks.c ****         return xIdleTaskHandle;
 2424              		.loc 1 2629 9 view .LVU749
 2425 0002 064B     		ldr	r3, .L178
 2426 0004 1868     		ldr	r0, [r3]
 2427 0006 40B9     		cbnz	r0, .L176
2629:Lib/FreeRTOS/Source/tasks.c ****         return xIdleTaskHandle;
 2428              		.loc 1 2629 9 is_stmt 1 discriminator 1 view .LVU750
 2429 0008 FFF7FEFF 		bl	ulSetInterruptMask
 2430              	.LVL188:
2629:Lib/FreeRTOS/Source/tasks.c ****         return xIdleTaskHandle;
 2431              		.loc 1 2629 9 discriminator 1 view .LVU751
 2432 000c 40F64521 		movw	r1, #2629
 2433 0010 034B     		ldr	r3, .L178+4
 2434 0012 044A     		ldr	r2, .L178+8
 2435 0014 0448     		ldr	r0, .L178+12
 2436 0016 FFF7FEFF 		bl	__assert_func
 2437              	.LVL189:
 2438              	.L176:
2631:Lib/FreeRTOS/Source/tasks.c **** 
 2439              		.loc 1 2631 5 is_stmt 0 view .LVU752
 2440 001a 08BD     		pop	{r3, pc}
 2441              	.L179:
 2442              		.align	2
 2443              	.L178:
 2444 001c 00000000 		.word	xIdleTaskHandle
 2445 0020 00000000 		.word	.LC0
 2446 0024 00000000 		.word	__func__.19
 2447 0028 02000000 		.word	.LC1
 2448              		.cfi_endproc
 2449              	.LFE24:
 2451              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2452              		.align	1
 2453              		.global	xTaskIncrementTick
 2454              		.syntax unified
 2455              		.thumb
 2456              		.thumb_func
 2458              	xTaskIncrementTick:
 2459              	.LFB26:
2782:Lib/FreeRTOS/Source/tasks.c ****     TCB_t * pxTCB;
 2460              		.loc 1 2782 1 is_stmt 1 view -0
 2461              		.cfi_startproc
 2462              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccEd3BVV.s 			page 153


 2463              		@ frame_needed = 0, uses_anonymous_args = 0
2783:Lib/FreeRTOS/Source/tasks.c ****     TickType_t xItemValue;
 2464              		.loc 1 2783 5 view .LVU754
2784:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
 2465              		.loc 1 2784 5 view .LVU755
2785:Lib/FreeRTOS/Source/tasks.c **** 
 2466              		.loc 1 2785 5 view .LVU756
 2467              	.LVL190:
2790:Lib/FreeRTOS/Source/tasks.c **** 
 2468              		.loc 1 2790 43 view .LVU757
2792:Lib/FreeRTOS/Source/tasks.c ****     {
 2469              		.loc 1 2792 5 view .LVU758
2782:Lib/FreeRTOS/Source/tasks.c ****     TCB_t * pxTCB;
 2470              		.loc 1 2782 1 is_stmt 0 view .LVU759
 2471 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2472              		.cfi_def_cfa_offset 40
 2473              		.cfi_offset 3, -40
 2474              		.cfi_offset 4, -36
 2475              		.cfi_offset 5, -32
 2476              		.cfi_offset 6, -28
 2477              		.cfi_offset 7, -24
 2478              		.cfi_offset 8, -20
 2479              		.cfi_offset 9, -16
 2480              		.cfi_offset 10, -12
 2481              		.cfi_offset 11, -8
 2482              		.cfi_offset 14, -4
2792:Lib/FreeRTOS/Source/tasks.c ****     {
 2483              		.loc 1 2792 30 view .LVU760
 2484 0004 4E4B     		ldr	r3, .L204
 2485 0006 1B68     		ldr	r3, [r3]
2792:Lib/FreeRTOS/Source/tasks.c ****     {
 2486              		.loc 1 2792 7 view .LVU761
 2487 0008 002B     		cmp	r3, #0
 2488 000a 40F09380 		bne	.L181
 2489              	.LBB95:
 2490              	.LBI95:
2781:Lib/FreeRTOS/Source/tasks.c **** {
 2491              		.loc 1 2781 12 is_stmt 1 view .LVU762
 2492              	.LBB96:
 2493              	.LBB97:
2796:Lib/FreeRTOS/Source/tasks.c **** 
 2494              		.loc 1 2796 9 view .LVU763
2796:Lib/FreeRTOS/Source/tasks.c **** 
 2495              		.loc 1 2796 55 is_stmt 0 view .LVU764
 2496 000e 4D4B     		ldr	r3, .L204+4
 2497 0010 1C68     		ldr	r4, [r3]
2796:Lib/FreeRTOS/Source/tasks.c **** 
 2498              		.loc 1 2796 26 view .LVU765
 2499 0012 0134     		adds	r4, r4, #1
 2500              	.LVL191:
2800:Lib/FreeRTOS/Source/tasks.c **** 
 2501              		.loc 1 2800 9 is_stmt 1 view .LVU766
2800:Lib/FreeRTOS/Source/tasks.c **** 
 2502              		.loc 1 2800 20 is_stmt 0 view .LVU767
 2503 0014 1C60     		str	r4, [r3]
2802:Lib/FreeRTOS/Source/tasks.c ****         {
 2504              		.loc 1 2802 9 is_stmt 1 view .LVU768
ARM GAS  /tmp/ccEd3BVV.s 			page 154


2802:Lib/FreeRTOS/Source/tasks.c ****         {
 2505              		.loc 1 2802 11 is_stmt 0 view .LVU769
 2506 0016 BCB9     		cbnz	r4, .L182
2804:Lib/FreeRTOS/Source/tasks.c ****         }
 2507              		.loc 1 2804 13 is_stmt 1 view .LVU770
 2508              	.LBB98:
2804:Lib/FreeRTOS/Source/tasks.c ****         }
 2509              		.loc 1 2804 13 view .LVU771
2804:Lib/FreeRTOS/Source/tasks.c ****         }
 2510              		.loc 1 2804 13 view .LVU772
 2511 0018 4B4B     		ldr	r3, .L204+8
 2512 001a 1A68     		ldr	r2, [r3]
 2513 001c 1268     		ldr	r2, [r2]
 2514 001e 42B1     		cbz	r2, .L183
2804:Lib/FreeRTOS/Source/tasks.c ****         }
 2515              		.loc 1 2804 13 discriminator 1 view .LVU773
 2516 0020 FFF7FEFF 		bl	ulSetInterruptMask
 2517              	.LVL192:
2804:Lib/FreeRTOS/Source/tasks.c ****         }
 2518              		.loc 1 2804 13 discriminator 1 view .LVU774
 2519 0024 40F6F421 		movw	r1, #2804
 2520 0028 484B     		ldr	r3, .L204+12
 2521 002a 494A     		ldr	r2, .L204+16
 2522 002c 4948     		ldr	r0, .L204+20
 2523 002e FFF7FEFF 		bl	__assert_func
 2524              	.LVL193:
 2525              	.L183:
2804:Lib/FreeRTOS/Source/tasks.c ****         }
 2526              		.loc 1 2804 13 discriminator 2 view .LVU775
2804:Lib/FreeRTOS/Source/tasks.c ****         }
 2527              		.loc 1 2804 13 discriminator 2 view .LVU776
 2528 0032 494A     		ldr	r2, .L204+24
 2529 0034 1968     		ldr	r1, [r3]
 2530              	.LVL194:
2804:Lib/FreeRTOS/Source/tasks.c ****         }
 2531              		.loc 1 2804 13 discriminator 2 view .LVU777
 2532 0036 1068     		ldr	r0, [r2]
 2533 0038 1860     		str	r0, [r3]
2804:Lib/FreeRTOS/Source/tasks.c ****         }
 2534              		.loc 1 2804 13 discriminator 2 view .LVU778
 2535 003a 1160     		str	r1, [r2]
2804:Lib/FreeRTOS/Source/tasks.c ****         }
 2536              		.loc 1 2804 13 discriminator 2 view .LVU779
 2537 003c 474A     		ldr	r2, .L204+28
 2538 003e 1368     		ldr	r3, [r2]
 2539 0040 0133     		adds	r3, r3, #1
 2540 0042 1360     		str	r3, [r2]
2804:Lib/FreeRTOS/Source/tasks.c ****         }
 2541              		.loc 1 2804 13 discriminator 2 view .LVU780
 2542 0044 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2543              	.LVL195:
2804:Lib/FreeRTOS/Source/tasks.c ****         }
 2544              		.loc 1 2804 13 is_stmt 0 discriminator 2 view .LVU781
 2545              	.LBE98:
2804:Lib/FreeRTOS/Source/tasks.c ****         }
 2546              		.loc 1 2804 13 is_stmt 1 discriminator 1 view .LVU782
 2547              	.L182:
ARM GAS  /tmp/ccEd3BVV.s 			page 155


2808:Lib/FreeRTOS/Source/tasks.c ****         }
 2548              		.loc 1 2808 37 view .LVU783
2815:Lib/FreeRTOS/Source/tasks.c ****         {
 2549              		.loc 1 2815 9 view .LVU784
2815:Lib/FreeRTOS/Source/tasks.c ****         {
 2550              		.loc 1 2815 29 is_stmt 0 view .LVU785
 2551 0048 DFF820C1 		ldr	ip, .L204+44
 2552              	.LBE97:
2785:Lib/FreeRTOS/Source/tasks.c **** 
 2553              		.loc 1 2785 16 view .LVU786
 2554 004c 0020     		movs	r0, #0
 2555              	.LBB103:
2815:Lib/FreeRTOS/Source/tasks.c ****         {
 2556              		.loc 1 2815 29 view .LVU787
 2557 004e DCF80030 		ldr	r3, [ip]
 2558 0052 434A     		ldr	r2, .L204+32
2815:Lib/FreeRTOS/Source/tasks.c ****         {
 2559              		.loc 1 2815 11 view .LVU788
 2560 0054 9C42     		cmp	r4, r3
 2561 0056 DFF81881 		ldr	r8, .L204+48
 2562 005a 0FD2     		bcs	.L197
 2563              	.L185:
 2564              	.LVL196:
2902:Lib/FreeRTOS/Source/tasks.c ****             {
 2565              		.loc 1 2902 13 is_stmt 1 view .LVU789
2902:Lib/FreeRTOS/Source/tasks.c ****             {
 2566              		.loc 1 2902 17 is_stmt 0 view .LVU790
 2567 005c 1421     		movs	r1, #20
 2568 005e D8F80030 		ldr	r3, [r8]
 2569 0062 DB6A     		ldr	r3, [r3, #44]
 2570 0064 4B43     		muls	r3, r1, r3
 2571 0066 D358     		ldr	r3, [r2, r3]
2904:Lib/FreeRTOS/Source/tasks.c ****             }
 2572              		.loc 1 2904 33 view .LVU791
 2573 0068 022B     		cmp	r3, #2
2930:Lib/FreeRTOS/Source/tasks.c ****             {
 2574              		.loc 1 2930 31 view .LVU792
 2575 006a 3E4B     		ldr	r3, .L204+36
2904:Lib/FreeRTOS/Source/tasks.c ****             }
 2576              		.loc 1 2904 33 view .LVU793
 2577 006c 28BF     		it	cs
 2578 006e 0120     		movcs	r0, #1
 2579              	.LVL197:
2908:Lib/FreeRTOS/Source/tasks.c ****             }
 2580              		.loc 1 2908 41 is_stmt 1 view .LVU794
2930:Lib/FreeRTOS/Source/tasks.c ****             {
 2581              		.loc 1 2930 13 view .LVU795
2930:Lib/FreeRTOS/Source/tasks.c ****             {
 2582              		.loc 1 2930 31 is_stmt 0 view .LVU796
 2583 0070 1B68     		ldr	r3, [r3]
2932:Lib/FreeRTOS/Source/tasks.c ****             }
 2584              		.loc 1 2932 33 view .LVU797
 2585 0072 002B     		cmp	r3, #0
 2586 0074 18BF     		it	ne
 2587 0076 0120     		movne	r0, #1
 2588              	.LVL198:
 2589              	.L180:
ARM GAS  /tmp/ccEd3BVV.s 			page 156


2932:Lib/FreeRTOS/Source/tasks.c ****             }
 2590              		.loc 1 2932 33 view .LVU798
 2591              	.LBE103:
 2592              	.LBE96:
 2593              	.LBE95:
2955:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2594              		.loc 1 2955 1 view .LVU799
 2595 0078 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2596              	.LVL199:
 2597              	.L197:
 2598              	.LBB106:
 2599              	.LBB105:
 2600              	.LBB104:
2819:Lib/FreeRTOS/Source/tasks.c ****                 {
 2601              		.loc 1 2819 21 view .LVU800
 2602 007c DFF8C8E0 		ldr	lr, .L204+8
2869:Lib/FreeRTOS/Source/tasks.c **** 
 2603              		.loc 1 2869 21 view .LVU801
 2604 0080 DFF8F090 		ldr	r9, .L204+52
 2605              	.L184:
 2606              	.LVL200:
2817:Lib/FreeRTOS/Source/tasks.c ****             {
 2607              		.loc 1 2817 13 is_stmt 1 view .LVU802
2819:Lib/FreeRTOS/Source/tasks.c ****                 {
 2608              		.loc 1 2819 17 view .LVU803
2819:Lib/FreeRTOS/Source/tasks.c ****                 {
 2609              		.loc 1 2819 21 is_stmt 0 view .LVU804
 2610 0084 DEF80030 		ldr	r3, [lr]
 2611 0088 1B68     		ldr	r3, [r3]
2819:Lib/FreeRTOS/Source/tasks.c ****                 {
 2612              		.loc 1 2819 19 view .LVU805
 2613 008a 23B9     		cbnz	r3, .L186
2826:Lib/FreeRTOS/Source/tasks.c ****                     break;
 2614              		.loc 1 2826 21 is_stmt 1 view .LVU806
2826:Lib/FreeRTOS/Source/tasks.c ****                     break;
 2615              		.loc 1 2826 42 is_stmt 0 view .LVU807
 2616 008c 4FF0FF33 		mov	r3, #-1
 2617 0090 CCF80030 		str	r3, [ip]
2827:Lib/FreeRTOS/Source/tasks.c ****                 }
 2618              		.loc 1 2827 21 is_stmt 1 view .LVU808
 2619 0094 E2E7     		b	.L185
 2620              	.L186:
2835:Lib/FreeRTOS/Source/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2621              		.loc 1 2835 21 view .LVU809
2835:Lib/FreeRTOS/Source/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2622              		.loc 1 2835 29 is_stmt 0 view .LVU810
 2623 0096 DEF80030 		ldr	r3, [lr]
2835:Lib/FreeRTOS/Source/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2624              		.loc 1 2835 27 view .LVU811
 2625 009a DB68     		ldr	r3, [r3, #12]
 2626 009c DB68     		ldr	r3, [r3, #12]
 2627              	.LVL201:
2836:Lib/FreeRTOS/Source/tasks.c **** 
 2628              		.loc 1 2836 21 is_stmt 1 view .LVU812
2836:Lib/FreeRTOS/Source/tasks.c **** 
 2629              		.loc 1 2836 32 is_stmt 0 view .LVU813
 2630 009e 5968     		ldr	r1, [r3, #4]
ARM GAS  /tmp/ccEd3BVV.s 			page 157


 2631              	.LVL202:
2838:Lib/FreeRTOS/Source/tasks.c ****                     {
 2632              		.loc 1 2838 21 is_stmt 1 view .LVU814
2838:Lib/FreeRTOS/Source/tasks.c ****                     {
 2633              		.loc 1 2838 23 is_stmt 0 view .LVU815
 2634 00a0 8C42     		cmp	r4, r1
 2635 00a2 02D2     		bcs	.L188
2845:Lib/FreeRTOS/Source/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
 2636              		.loc 1 2845 25 is_stmt 1 view .LVU816
2845:Lib/FreeRTOS/Source/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
 2637              		.loc 1 2845 46 is_stmt 0 view .LVU817
 2638 00a4 CCF80010 		str	r1, [ip]
2846:Lib/FreeRTOS/Source/tasks.c ****                     }
 2639              		.loc 1 2846 25 is_stmt 1 view .LVU818
 2640 00a8 D8E7     		b	.L185
 2641              	.L188:
2850:Lib/FreeRTOS/Source/tasks.c ****                     }
 2642              		.loc 1 2850 49 view .LVU819
2854:Lib/FreeRTOS/Source/tasks.c **** 
 2643              		.loc 1 2854 21 view .LVU820
 2644              	.LBB99:
2854:Lib/FreeRTOS/Source/tasks.c **** 
 2645              		.loc 1 2854 21 view .LVU821
 2646 00aa 5D69     		ldr	r5, [r3, #20]
 2647              	.LVL203:
2854:Lib/FreeRTOS/Source/tasks.c **** 
 2648              		.loc 1 2854 21 view .LVU822
 2649 00ac D3E90216 		ldrd	r1, r6, [r3, #8]
 2650              	.LVL204:
2854:Lib/FreeRTOS/Source/tasks.c **** 
 2651              		.loc 1 2854 21 is_stmt 0 view .LVU823
 2652 00b0 8E60     		str	r6, [r1, #8]
2854:Lib/FreeRTOS/Source/tasks.c **** 
 2653              		.loc 1 2854 21 is_stmt 1 view .LVU824
 2654 00b2 7160     		str	r1, [r6, #4]
2854:Lib/FreeRTOS/Source/tasks.c **** 
 2655              		.loc 1 2854 21 view .LVU825
 2656 00b4 6968     		ldr	r1, [r5, #4]
 2657 00b6 1F1D     		adds	r7, r3, #4
 2658 00b8 B942     		cmp	r1, r7
2854:Lib/FreeRTOS/Source/tasks.c **** 
 2659              		.loc 1 2854 21 discriminator 1 view .LVU826
2854:Lib/FreeRTOS/Source/tasks.c **** 
 2660              		.loc 1 2854 21 is_stmt 0 discriminator 3 view .LVU827
 2661 00ba 4FF00001 		mov	r1, #0
2854:Lib/FreeRTOS/Source/tasks.c **** 
 2662              		.loc 1 2854 21 discriminator 1 view .LVU828
 2663 00be 08BF     		it	eq
 2664 00c0 6E60     		streq	r6, [r5, #4]
2854:Lib/FreeRTOS/Source/tasks.c **** 
 2665              		.loc 1 2854 21 is_stmt 1 discriminator 3 view .LVU829
 2666 00c2 5961     		str	r1, [r3, #20]
2854:Lib/FreeRTOS/Source/tasks.c **** 
 2667              		.loc 1 2854 21 discriminator 3 view .LVU830
 2668 00c4 2968     		ldr	r1, [r5]
 2669 00c6 0139     		subs	r1, r1, #1
 2670 00c8 2960     		str	r1, [r5]
ARM GAS  /tmp/ccEd3BVV.s 			page 158


 2671              	.LBE99:
2854:Lib/FreeRTOS/Source/tasks.c **** 
 2672              		.loc 1 2854 21 discriminator 3 view .LVU831
2858:Lib/FreeRTOS/Source/tasks.c ****                     {
 2673              		.loc 1 2858 21 view .LVU832
2858:Lib/FreeRTOS/Source/tasks.c ****                     {
 2674              		.loc 1 2858 25 is_stmt 0 view .LVU833
 2675 00ca 9D6A     		ldr	r5, [r3, #40]
 2676              	.LVL205:
2858:Lib/FreeRTOS/Source/tasks.c ****                     {
 2677              		.loc 1 2858 23 view .LVU834
 2678 00cc 7DB1     		cbz	r5, .L190
2860:Lib/FreeRTOS/Source/tasks.c ****                     }
 2679              		.loc 1 2860 25 is_stmt 1 view .LVU835
 2680              	.LBB100:
2860:Lib/FreeRTOS/Source/tasks.c ****                     }
 2681              		.loc 1 2860 25 view .LVU836
 2682              	.LVL206:
2860:Lib/FreeRTOS/Source/tasks.c ****                     }
 2683              		.loc 1 2860 25 view .LVU837
 2684 00ce D3E90716 		ldrd	r1, r6, [r3, #28]
 2685 00d2 8E60     		str	r6, [r1, #8]
2860:Lib/FreeRTOS/Source/tasks.c ****                     }
 2686              		.loc 1 2860 25 view .LVU838
 2687 00d4 7160     		str	r1, [r6, #4]
2860:Lib/FreeRTOS/Source/tasks.c ****                     }
 2688              		.loc 1 2860 25 view .LVU839
 2689 00d6 6968     		ldr	r1, [r5, #4]
 2690 00d8 03F1180A 		add	r10, r3, #24
 2691 00dc 5145     		cmp	r1, r10
2860:Lib/FreeRTOS/Source/tasks.c ****                     }
 2692              		.loc 1 2860 25 discriminator 1 view .LVU840
2860:Lib/FreeRTOS/Source/tasks.c ****                     }
 2693              		.loc 1 2860 25 is_stmt 0 discriminator 3 view .LVU841
 2694 00de 4FF00001 		mov	r1, #0
2860:Lib/FreeRTOS/Source/tasks.c ****                     }
 2695              		.loc 1 2860 25 discriminator 1 view .LVU842
 2696 00e2 08BF     		it	eq
 2697 00e4 6E60     		streq	r6, [r5, #4]
2860:Lib/FreeRTOS/Source/tasks.c ****                     }
 2698              		.loc 1 2860 25 is_stmt 1 discriminator 3 view .LVU843
 2699 00e6 9962     		str	r1, [r3, #40]
2860:Lib/FreeRTOS/Source/tasks.c ****                     }
 2700              		.loc 1 2860 25 discriminator 3 view .LVU844
 2701 00e8 2968     		ldr	r1, [r5]
 2702 00ea 0139     		subs	r1, r1, #1
 2703 00ec 2960     		str	r1, [r5]
 2704              	.LBE100:
2860:Lib/FreeRTOS/Source/tasks.c ****                     }
 2705              		.loc 1 2860 25 discriminator 3 view .LVU845
 2706              	.LVL207:
 2707              	.L190:
2864:Lib/FreeRTOS/Source/tasks.c ****                     }
 2708              		.loc 1 2864 49 view .LVU846
2869:Lib/FreeRTOS/Source/tasks.c **** 
 2709              		.loc 1 2869 21 view .LVU847
2869:Lib/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccEd3BVV.s 			page 159


 2710              		.loc 1 2869 21 view .LVU848
2869:Lib/FreeRTOS/Source/tasks.c **** 
 2711              		.loc 1 2869 21 view .LVU849
2869:Lib/FreeRTOS/Source/tasks.c **** 
 2712              		.loc 1 2869 21 view .LVU850
 2713 00ee D96A     		ldr	r1, [r3, #44]
 2714 00f0 D9F80050 		ldr	r5, [r9]
 2715 00f4 A942     		cmp	r1, r5
2869:Lib/FreeRTOS/Source/tasks.c **** 
 2716              		.loc 1 2869 21 discriminator 1 view .LVU851
 2717              	.LBB101:
2869:Lib/FreeRTOS/Source/tasks.c **** 
 2718              		.loc 1 2869 21 is_stmt 0 discriminator 3 view .LVU852
 2719 00f6 4FF01405 		mov	r5, #20
 2720 00fa 05FB01F5 		mul	r5, r5, r1
 2721 00fe 02EB050A 		add	r10, r2, r5
 2722 0102 DAF80460 		ldr	r6, [r10, #4]
 2723              	.LBE101:
2869:Lib/FreeRTOS/Source/tasks.c **** 
 2724              		.loc 1 2869 21 discriminator 1 view .LVU853
 2725 0106 88BF     		it	hi
 2726 0108 C9F80010 		strhi	r1, [r9]
2869:Lib/FreeRTOS/Source/tasks.c **** 
 2727              		.loc 1 2869 21 is_stmt 1 discriminator 3 view .LVU854
2869:Lib/FreeRTOS/Source/tasks.c **** 
 2728              		.loc 1 2869 21 discriminator 3 view .LVU855
 2729              	.LBB102:
2869:Lib/FreeRTOS/Source/tasks.c **** 
 2730              		.loc 1 2869 21 discriminator 3 view .LVU856
 2731              	.LVL208:
2869:Lib/FreeRTOS/Source/tasks.c **** 
 2732              		.loc 1 2869 21 discriminator 3 view .LVU857
2869:Lib/FreeRTOS/Source/tasks.c **** 
 2733              		.loc 1 2869 21 discriminator 3 view .LVU858
2869:Lib/FreeRTOS/Source/tasks.c **** 
 2734              		.loc 1 2869 21 discriminator 3 view .LVU859
 2735 010c D6F808B0 		ldr	fp, [r6, #8]
 2736 0110 9E60     		str	r6, [r3, #8]
2869:Lib/FreeRTOS/Source/tasks.c **** 
 2737              		.loc 1 2869 21 discriminator 3 view .LVU860
 2738 0112 C3F80CB0 		str	fp, [r3, #12]
2869:Lib/FreeRTOS/Source/tasks.c **** 
 2739              		.loc 1 2869 21 discriminator 3 view .LVU861
 2740 0116 CBF80470 		str	r7, [fp, #4]
2869:Lib/FreeRTOS/Source/tasks.c **** 
 2741              		.loc 1 2869 21 discriminator 3 view .LVU862
 2742 011a B760     		str	r7, [r6, #8]
2869:Lib/FreeRTOS/Source/tasks.c **** 
 2743              		.loc 1 2869 21 discriminator 3 view .LVU863
 2744 011c C3F814A0 		str	r10, [r3, #20]
2869:Lib/FreeRTOS/Source/tasks.c **** 
 2745              		.loc 1 2869 21 discriminator 3 view .LVU864
 2746 0120 5359     		ldr	r3, [r2, r5]
 2747              	.LVL209:
2869:Lib/FreeRTOS/Source/tasks.c **** 
 2748              		.loc 1 2869 21 is_stmt 0 discriminator 3 view .LVU865
 2749 0122 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccEd3BVV.s 			page 160


 2750 0124 5351     		str	r3, [r2, r5]
 2751              	.LBE102:
2869:Lib/FreeRTOS/Source/tasks.c **** 
 2752              		.loc 1 2869 21 is_stmt 1 discriminator 3 view .LVU866
2869:Lib/FreeRTOS/Source/tasks.c **** 
 2753              		.loc 1 2869 21 discriminator 3 view .LVU867
2869:Lib/FreeRTOS/Source/tasks.c **** 
 2754              		.loc 1 2869 21 discriminator 3 view .LVU868
2883:Lib/FreeRTOS/Source/tasks.c ****                         {
 2755              		.loc 1 2883 25 view .LVU869
2883:Lib/FreeRTOS/Source/tasks.c ****                         {
 2756              		.loc 1 2883 61 is_stmt 0 view .LVU870
 2757 0126 D8F80030 		ldr	r3, [r8]
2883:Lib/FreeRTOS/Source/tasks.c ****                         {
 2758              		.loc 1 2883 27 view .LVU871
 2759 012a DB6A     		ldr	r3, [r3, #44]
2885:Lib/FreeRTOS/Source/tasks.c ****                         }
 2760              		.loc 1 2885 45 view .LVU872
 2761 012c 9942     		cmp	r1, r3
 2762 012e 88BF     		it	hi
 2763 0130 0120     		movhi	r0, #1
 2764              	.LVL210:
2885:Lib/FreeRTOS/Source/tasks.c ****                         }
 2765              		.loc 1 2885 45 view .LVU873
 2766 0132 A7E7     		b	.L184
 2767              	.LVL211:
 2768              	.L181:
2885:Lib/FreeRTOS/Source/tasks.c ****                         }
 2769              		.loc 1 2885 45 view .LVU874
 2770              	.LBE104:
 2771              	.LBE105:
 2772              	.LBE106:
2943:Lib/FreeRTOS/Source/tasks.c **** 
 2773              		.loc 1 2943 9 is_stmt 1 view .LVU875
 2774 0134 0C4A     		ldr	r2, .L204+40
2785:Lib/FreeRTOS/Source/tasks.c **** 
 2775              		.loc 1 2785 16 is_stmt 0 view .LVU876
 2776 0136 0020     		movs	r0, #0
2943:Lib/FreeRTOS/Source/tasks.c **** 
 2777              		.loc 1 2943 9 view .LVU877
 2778 0138 1368     		ldr	r3, [r2]
 2779 013a 0133     		adds	r3, r3, #1
 2780 013c 1360     		str	r3, [r2]
 2781 013e 9BE7     		b	.L180
 2782              	.L205:
 2783              		.align	2
 2784              	.L204:
 2785 0140 00000000 		.word	uxSchedulerSuspended
 2786 0144 00000000 		.word	xTickCount
 2787 0148 00000000 		.word	pxDelayedTaskList
 2788 014c 00000000 		.word	.LC0
 2789 0150 00000000 		.word	__func__.17
 2790 0154 02000000 		.word	.LC1
 2791 0158 00000000 		.word	pxOverflowDelayedTaskList
 2792 015c 00000000 		.word	xNumOfOverflows
 2793 0160 00000000 		.word	pxReadyTasksLists
 2794 0164 00000000 		.word	xYieldPending
ARM GAS  /tmp/ccEd3BVV.s 			page 161


 2795 0168 00000000 		.word	xPendedTicks
 2796 016c 00000000 		.word	xNextTaskUnblockTime
 2797 0170 00000000 		.word	pxCurrentTCB
 2798 0174 00000000 		.word	uxTopReadyPriority
 2799              		.cfi_endproc
 2800              	.LFE26:
 2802              		.section	.text.xTaskResumeAll,"ax",%progbits
 2803              		.align	1
 2804              		.global	xTaskResumeAll
 2805              		.syntax unified
 2806              		.thumb
 2807              		.thumb_func
 2809              	xTaskResumeAll:
 2810              	.LFB17:
2189:Lib/FreeRTOS/Source/tasks.c ****     TCB_t * pxTCB = NULL;
 2811              		.loc 1 2189 1 is_stmt 1 view -0
 2812              		.cfi_startproc
 2813              		@ args = 0, pretend = 0, frame = 0
 2814              		@ frame_needed = 0, uses_anonymous_args = 0
2190:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
 2815              		.loc 1 2190 5 view .LVU879
 2816              	.LVL212:
2191:Lib/FreeRTOS/Source/tasks.c **** 
 2817              		.loc 1 2191 5 view .LVU880
2195:Lib/FreeRTOS/Source/tasks.c **** 
 2818              		.loc 1 2195 5 view .LVU881
2189:Lib/FreeRTOS/Source/tasks.c ****     TCB_t * pxTCB = NULL;
 2819              		.loc 1 2189 1 is_stmt 0 view .LVU882
 2820 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2821              		.cfi_def_cfa_offset 40
 2822              		.cfi_offset 3, -40
 2823              		.cfi_offset 4, -36
 2824              		.cfi_offset 5, -32
 2825              		.cfi_offset 6, -28
 2826              		.cfi_offset 7, -24
 2827              		.cfi_offset 8, -20
 2828              		.cfi_offset 9, -16
 2829              		.cfi_offset 10, -12
 2830              		.cfi_offset 11, -8
 2831              		.cfi_offset 14, -4
2195:Lib/FreeRTOS/Source/tasks.c **** 
 2832              		.loc 1 2195 5 view .LVU883
 2833 0004 404C     		ldr	r4, .L235
 2834 0006 2368     		ldr	r3, [r4]
 2835 0008 43B9     		cbnz	r3, .L207
2195:Lib/FreeRTOS/Source/tasks.c **** 
 2836              		.loc 1 2195 5 is_stmt 1 discriminator 1 view .LVU884
 2837 000a FFF7FEFF 		bl	ulSetInterruptMask
 2838              	.LVL213:
2195:Lib/FreeRTOS/Source/tasks.c **** 
 2839              		.loc 1 2195 5 discriminator 1 view .LVU885
 2840 000e 40F69301 		movw	r1, #2195
 2841 0012 3E4B     		ldr	r3, .L235+4
 2842 0014 3E4A     		ldr	r2, .L235+8
 2843 0016 3F48     		ldr	r0, .L235+12
 2844 0018 FFF7FEFF 		bl	__assert_func
 2845              	.LVL214:
ARM GAS  /tmp/ccEd3BVV.s 			page 162


 2846              	.L207:
2195:Lib/FreeRTOS/Source/tasks.c **** 
 2847              		.loc 1 2195 63 discriminator 2 view .LVU886
2202:Lib/FreeRTOS/Source/tasks.c ****     {
 2848              		.loc 1 2202 5 view .LVU887
 2849 001c FFF7FEFF 		bl	vPortEnterCritical
 2850              	.LVL215:
2204:Lib/FreeRTOS/Source/tasks.c **** 
 2851              		.loc 1 2204 9 view .LVU888
 2852 0020 2368     		ldr	r3, [r4]
 2853 0022 013B     		subs	r3, r3, #1
 2854 0024 2360     		str	r3, [r4]
2206:Lib/FreeRTOS/Source/tasks.c ****         {
 2855              		.loc 1 2206 9 view .LVU889
2206:Lib/FreeRTOS/Source/tasks.c ****         {
 2856              		.loc 1 2206 34 is_stmt 0 view .LVU890
 2857 0026 2368     		ldr	r3, [r4]
2206:Lib/FreeRTOS/Source/tasks.c ****         {
 2858              		.loc 1 2206 11 view .LVU891
 2859 0028 2BB1     		cbz	r3, .L208
 2860              	.LVL216:
 2861              	.L211:
2191:Lib/FreeRTOS/Source/tasks.c **** 
 2862              		.loc 1 2191 16 view .LVU892
 2863 002a 0024     		movs	r4, #0
 2864              	.LVL217:
 2865              	.L209:
2291:Lib/FreeRTOS/Source/tasks.c ****         }
 2866              		.loc 1 2291 37 is_stmt 1 view .LVU893
2294:Lib/FreeRTOS/Source/tasks.c **** 
 2867              		.loc 1 2294 5 view .LVU894
 2868 002c FFF7FEFF 		bl	vPortExitCritical
 2869              	.LVL218:
2296:Lib/FreeRTOS/Source/tasks.c **** }
 2870              		.loc 1 2296 5 view .LVU895
2297:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2871              		.loc 1 2297 1 is_stmt 0 view .LVU896
 2872 0030 2046     		mov	r0, r4
 2873 0032 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2874              	.LVL219:
 2875              	.L208:
2208:Lib/FreeRTOS/Source/tasks.c ****             {
 2876              		.loc 1 2208 13 is_stmt 1 view .LVU897
2208:Lib/FreeRTOS/Source/tasks.c ****             {
 2877              		.loc 1 2208 40 is_stmt 0 view .LVU898
 2878 0036 384A     		ldr	r2, .L235+16
 2879 0038 1268     		ldr	r2, [r2]
2208:Lib/FreeRTOS/Source/tasks.c ****             {
 2880              		.loc 1 2208 15 view .LVU899
 2881 003a 002A     		cmp	r2, #0
 2882 003c F5D0     		beq	.L211
 2883              	.LBB107:
2218:Lib/FreeRTOS/Source/tasks.c **** 
 2884              		.loc 1 2218 21 discriminator 3 view .LVU900
 2885 003e 4FF0140C 		mov	ip, #20
 2886              	.LBE107:
2224:Lib/FreeRTOS/Source/tasks.c ****                     }
ARM GAS  /tmp/ccEd3BVV.s 			page 163


 2887              		.loc 1 2224 39 view .LVU901
 2888 0042 4FF00109 		mov	r9, #1
2212:Lib/FreeRTOS/Source/tasks.c ****                 {
 2889              		.loc 1 2212 24 view .LVU902
 2890 0046 354E     		ldr	r6, .L235+20
2218:Lib/FreeRTOS/Source/tasks.c **** 
 2891              		.loc 1 2218 21 view .LVU903
 2892 0048 354F     		ldr	r7, .L235+24
 2893              	.LBB108:
2218:Lib/FreeRTOS/Source/tasks.c **** 
 2894              		.loc 1 2218 21 discriminator 3 view .LVU904
 2895 004a 3649     		ldr	r1, .L235+28
 2896              	.LBE108:
2222:Lib/FreeRTOS/Source/tasks.c ****                     {
 2897              		.loc 1 2222 57 view .LVU905
 2898 004c DFF8E0E0 		ldr	lr, .L235+40
2224:Lib/FreeRTOS/Source/tasks.c ****                     }
 2899              		.loc 1 2224 39 view .LVU906
 2900 0050 DFF8D880 		ldr	r8, .L235+36
 2901 0054 3EE0     		b	.L210
 2902              	.LVL220:
 2903              	.L216:
2214:Lib/FreeRTOS/Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 2904              		.loc 1 2214 21 is_stmt 1 view .LVU907
2214:Lib/FreeRTOS/Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 2905              		.loc 1 2214 27 is_stmt 0 view .LVU908
 2906 0056 F368     		ldr	r3, [r6, #12]
 2907 0058 DB68     		ldr	r3, [r3, #12]
 2908              	.LVL221:
2215:Lib/FreeRTOS/Source/tasks.c ****                     portMEMORY_BARRIER();
 2909              		.loc 1 2215 21 is_stmt 1 view .LVU909
 2910              	.LBB109:
2215:Lib/FreeRTOS/Source/tasks.c ****                     portMEMORY_BARRIER();
 2911              		.loc 1 2215 21 view .LVU910
 2912 005a 986A     		ldr	r0, [r3, #40]
 2913              	.LVL222:
2215:Lib/FreeRTOS/Source/tasks.c ****                     portMEMORY_BARRIER();
 2914              		.loc 1 2215 21 view .LVU911
 2915 005c D3E90724 		ldrd	r2, r4, [r3, #28]
 2916 0060 9460     		str	r4, [r2, #8]
2215:Lib/FreeRTOS/Source/tasks.c ****                     portMEMORY_BARRIER();
 2917              		.loc 1 2215 21 view .LVU912
 2918 0062 6260     		str	r2, [r4, #4]
2215:Lib/FreeRTOS/Source/tasks.c ****                     portMEMORY_BARRIER();
 2919              		.loc 1 2215 21 view .LVU913
 2920 0064 4268     		ldr	r2, [r0, #4]
 2921 0066 03F11805 		add	r5, r3, #24
 2922 006a AA42     		cmp	r2, r5
2215:Lib/FreeRTOS/Source/tasks.c ****                     portMEMORY_BARRIER();
 2923              		.loc 1 2215 21 discriminator 1 view .LVU914
2215:Lib/FreeRTOS/Source/tasks.c ****                     portMEMORY_BARRIER();
 2924              		.loc 1 2215 21 is_stmt 0 discriminator 3 view .LVU915
 2925 006c 4FF00002 		mov	r2, #0
2215:Lib/FreeRTOS/Source/tasks.c ****                     portMEMORY_BARRIER();
 2926              		.loc 1 2215 21 discriminator 1 view .LVU916
 2927 0070 08BF     		it	eq
 2928 0072 4460     		streq	r4, [r0, #4]
ARM GAS  /tmp/ccEd3BVV.s 			page 164


2215:Lib/FreeRTOS/Source/tasks.c ****                     portMEMORY_BARRIER();
 2929              		.loc 1 2215 21 is_stmt 1 discriminator 3 view .LVU917
 2930 0074 9A62     		str	r2, [r3, #40]
2215:Lib/FreeRTOS/Source/tasks.c ****                     portMEMORY_BARRIER();
 2931              		.loc 1 2215 21 discriminator 3 view .LVU918
 2932 0076 0268     		ldr	r2, [r0]
 2933 0078 013A     		subs	r2, r2, #1
 2934 007a 0260     		str	r2, [r0]
 2935              	.LBE109:
2215:Lib/FreeRTOS/Source/tasks.c ****                     portMEMORY_BARRIER();
 2936              		.loc 1 2215 21 discriminator 3 view .LVU919
2216:Lib/FreeRTOS/Source/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 2937              		.loc 1 2216 21 view .LVU920
2217:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2938              		.loc 1 2217 21 view .LVU921
 2939              	.LBB110:
2217:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2940              		.loc 1 2217 21 view .LVU922
 2941 007c 5869     		ldr	r0, [r3, #20]
 2942              	.LVL223:
2217:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2943              		.loc 1 2217 21 view .LVU923
 2944 007e D3E90224 		ldrd	r2, r4, [r3, #8]
 2945 0082 9460     		str	r4, [r2, #8]
2217:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2946              		.loc 1 2217 21 view .LVU924
 2947 0084 6260     		str	r2, [r4, #4]
2217:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2948              		.loc 1 2217 21 view .LVU925
 2949 0086 4268     		ldr	r2, [r0, #4]
 2950 0088 1D1D     		adds	r5, r3, #4
 2951 008a AA42     		cmp	r2, r5
2217:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2952              		.loc 1 2217 21 discriminator 1 view .LVU926
2217:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2953              		.loc 1 2217 21 is_stmt 0 discriminator 3 view .LVU927
 2954 008c 0268     		ldr	r2, [r0]
2217:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2955              		.loc 1 2217 21 discriminator 1 view .LVU928
 2956 008e 08BF     		it	eq
 2957 0090 4460     		streq	r4, [r0, #4]
2217:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2958              		.loc 1 2217 21 is_stmt 1 discriminator 3 view .LVU929
2217:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2959              		.loc 1 2217 21 discriminator 3 view .LVU930
 2960 0092 013A     		subs	r2, r2, #1
 2961 0094 0260     		str	r2, [r0]
 2962              	.LBE110:
2217:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2963              		.loc 1 2217 21 discriminator 3 view .LVU931
2218:Lib/FreeRTOS/Source/tasks.c **** 
 2964              		.loc 1 2218 21 view .LVU932
2218:Lib/FreeRTOS/Source/tasks.c **** 
 2965              		.loc 1 2218 21 view .LVU933
2218:Lib/FreeRTOS/Source/tasks.c **** 
 2966              		.loc 1 2218 21 view .LVU934
2218:Lib/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccEd3BVV.s 			page 165


 2967              		.loc 1 2218 21 view .LVU935
 2968 0096 3868     		ldr	r0, [r7]
 2969              	.LVL224:
2218:Lib/FreeRTOS/Source/tasks.c **** 
 2970              		.loc 1 2218 21 is_stmt 0 view .LVU936
 2971 0098 DA6A     		ldr	r2, [r3, #44]
 2972 009a 8242     		cmp	r2, r0
2218:Lib/FreeRTOS/Source/tasks.c **** 
 2973              		.loc 1 2218 21 is_stmt 1 discriminator 1 view .LVU937
 2974              	.LBB111:
2218:Lib/FreeRTOS/Source/tasks.c **** 
 2975              		.loc 1 2218 21 is_stmt 0 discriminator 3 view .LVU938
 2976 009c 0CFB02F0 		mul	r0, ip, r2
 2977 00a0 01EB000A 		add	r10, r1, r0
 2978 00a4 DAF80440 		ldr	r4, [r10, #4]
 2979              	.LBE111:
2218:Lib/FreeRTOS/Source/tasks.c **** 
 2980              		.loc 1 2218 21 discriminator 1 view .LVU939
 2981 00a8 88BF     		it	hi
 2982 00aa 3A60     		strhi	r2, [r7]
2218:Lib/FreeRTOS/Source/tasks.c **** 
 2983              		.loc 1 2218 21 is_stmt 1 discriminator 3 view .LVU940
2218:Lib/FreeRTOS/Source/tasks.c **** 
 2984              		.loc 1 2218 21 discriminator 3 view .LVU941
 2985              	.LBB112:
2218:Lib/FreeRTOS/Source/tasks.c **** 
 2986              		.loc 1 2218 21 discriminator 3 view .LVU942
 2987              	.LVL225:
2218:Lib/FreeRTOS/Source/tasks.c **** 
 2988              		.loc 1 2218 21 discriminator 3 view .LVU943
2218:Lib/FreeRTOS/Source/tasks.c **** 
 2989              		.loc 1 2218 21 discriminator 3 view .LVU944
2218:Lib/FreeRTOS/Source/tasks.c **** 
 2990              		.loc 1 2218 21 discriminator 3 view .LVU945
 2991 00ac D4F808B0 		ldr	fp, [r4, #8]
 2992 00b0 9C60     		str	r4, [r3, #8]
2218:Lib/FreeRTOS/Source/tasks.c **** 
 2993              		.loc 1 2218 21 discriminator 3 view .LVU946
 2994 00b2 C3F80CB0 		str	fp, [r3, #12]
2218:Lib/FreeRTOS/Source/tasks.c **** 
 2995              		.loc 1 2218 21 discriminator 3 view .LVU947
 2996 00b6 CBF80450 		str	r5, [fp, #4]
2218:Lib/FreeRTOS/Source/tasks.c **** 
 2997              		.loc 1 2218 21 discriminator 3 view .LVU948
 2998 00ba A560     		str	r5, [r4, #8]
2218:Lib/FreeRTOS/Source/tasks.c **** 
 2999              		.loc 1 2218 21 discriminator 3 view .LVU949
 3000 00bc 0C58     		ldr	r4, [r1, r0]
 3001              	.LVL226:
2218:Lib/FreeRTOS/Source/tasks.c **** 
 3002              		.loc 1 2218 21 is_stmt 0 discriminator 3 view .LVU950
 3003 00be C3F814A0 		str	r10, [r3, #20]
 3004              	.LVL227:
2218:Lib/FreeRTOS/Source/tasks.c **** 
 3005              		.loc 1 2218 21 is_stmt 1 discriminator 3 view .LVU951
 3006 00c2 0134     		adds	r4, r4, #1
 3007 00c4 0C50     		str	r4, [r1, r0]
ARM GAS  /tmp/ccEd3BVV.s 			page 166


 3008              	.LBE112:
2218:Lib/FreeRTOS/Source/tasks.c **** 
 3009              		.loc 1 2218 21 discriminator 3 view .LVU952
2218:Lib/FreeRTOS/Source/tasks.c **** 
 3010              		.loc 1 2218 21 discriminator 3 view .LVU953
2218:Lib/FreeRTOS/Source/tasks.c **** 
 3011              		.loc 1 2218 21 discriminator 3 view .LVU954
2222:Lib/FreeRTOS/Source/tasks.c ****                     {
 3012              		.loc 1 2222 21 view .LVU955
2222:Lib/FreeRTOS/Source/tasks.c ****                     {
 3013              		.loc 1 2222 57 is_stmt 0 view .LVU956
 3014 00c6 DEF80000 		ldr	r0, [lr]
2222:Lib/FreeRTOS/Source/tasks.c ****                     {
 3015              		.loc 1 2222 23 view .LVU957
 3016 00ca C06A     		ldr	r0, [r0, #44]
 3017 00cc 8242     		cmp	r2, r0
 3018 00ce 01D9     		bls	.L210
2224:Lib/FreeRTOS/Source/tasks.c ****                     }
 3019              		.loc 1 2224 25 is_stmt 1 view .LVU958
2224:Lib/FreeRTOS/Source/tasks.c ****                     }
 3020              		.loc 1 2224 39 is_stmt 0 view .LVU959
 3021 00d0 C8F80090 		str	r9, [r8]
 3022              	.LVL228:
 3023              	.L210:
2228:Lib/FreeRTOS/Source/tasks.c ****                     }
 3024              		.loc 1 2228 49 is_stmt 1 view .LVU960
2212:Lib/FreeRTOS/Source/tasks.c ****                 {
 3025              		.loc 1 2212 64 view .LVU961
2212:Lib/FreeRTOS/Source/tasks.c ****                 {
 3026              		.loc 1 2212 24 is_stmt 0 view .LVU962
 3027 00d4 3268     		ldr	r2, [r6]
2212:Lib/FreeRTOS/Source/tasks.c ****                 {
 3028              		.loc 1 2212 64 view .LVU963
 3029 00d6 002A     		cmp	r2, #0
 3030 00d8 BDD1     		bne	.L216
2232:Lib/FreeRTOS/Source/tasks.c ****                 {
 3031              		.loc 1 2232 17 is_stmt 1 view .LVU964
2232:Lib/FreeRTOS/Source/tasks.c ****                 {
 3032              		.loc 1 2232 19 is_stmt 0 view .LVU965
 3033 00da 0BB1     		cbz	r3, .L217
2240:Lib/FreeRTOS/Source/tasks.c ****                 }
 3034              		.loc 1 2240 21 is_stmt 1 view .LVU966
 3035 00dc FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3036              	.LVL229:
 3037              	.L217:
 3038              	.LBB113:
2248:Lib/FreeRTOS/Source/tasks.c **** 
 3039              		.loc 1 2248 21 view .LVU967
2248:Lib/FreeRTOS/Source/tasks.c **** 
 3040              		.loc 1 2248 32 is_stmt 0 view .LVU968
 3041 00e0 114D     		ldr	r5, .L235+32
 3042 00e2 2C68     		ldr	r4, [r5]
 3043              	.LVL230:
2250:Lib/FreeRTOS/Source/tasks.c ****                     {
 3044              		.loc 1 2250 21 is_stmt 1 view .LVU969
2250:Lib/FreeRTOS/Source/tasks.c ****                     {
 3045              		.loc 1 2250 23 is_stmt 0 view .LVU970
ARM GAS  /tmp/ccEd3BVV.s 			page 167


 3046 00e4 44B1     		cbz	r4, .L218
2256:Lib/FreeRTOS/Source/tasks.c ****                             }
 3047              		.loc 1 2256 47 view .LVU971
 3048 00e6 0127     		movs	r7, #1
 3049 00e8 104E     		ldr	r6, .L235+36
 3050              	.L220:
2252:Lib/FreeRTOS/Source/tasks.c ****                         {
 3051              		.loc 1 2252 25 is_stmt 1 view .LVU972
2254:Lib/FreeRTOS/Source/tasks.c ****                             {
 3052              		.loc 1 2254 29 view .LVU973
2254:Lib/FreeRTOS/Source/tasks.c ****                             {
 3053              		.loc 1 2254 33 is_stmt 0 view .LVU974
 3054 00ea FFF7FEFF 		bl	xTaskIncrementTick
 3055              	.LVL231:
2254:Lib/FreeRTOS/Source/tasks.c ****                             {
 3056              		.loc 1 2254 31 discriminator 1 view .LVU975
 3057 00ee 00B1     		cbz	r0, .L219
2256:Lib/FreeRTOS/Source/tasks.c ****                             }
 3058              		.loc 1 2256 33 is_stmt 1 view .LVU976
2256:Lib/FreeRTOS/Source/tasks.c ****                             }
 3059              		.loc 1 2256 47 is_stmt 0 view .LVU977
 3060 00f0 3760     		str	r7, [r6]
 3061              	.L219:
2260:Lib/FreeRTOS/Source/tasks.c ****                             }
 3062              		.loc 1 2260 57 is_stmt 1 view .LVU978
2263:Lib/FreeRTOS/Source/tasks.c ****                         } while( xPendedCounts > ( TickType_t ) 0U );
 3063              		.loc 1 2263 29 view .LVU979
 3064              	.LVL232:
2264:Lib/FreeRTOS/Source/tasks.c **** 
 3065              		.loc 1 2264 48 view .LVU980
 3066 00f2 013C     		subs	r4, r4, #1
 3067              	.LVL233:
2264:Lib/FreeRTOS/Source/tasks.c **** 
 3068              		.loc 1 2264 48 is_stmt 0 view .LVU981
 3069 00f4 F9D1     		bne	.L220
2266:Lib/FreeRTOS/Source/tasks.c ****                     }
 3070              		.loc 1 2266 25 is_stmt 1 view .LVU982
2266:Lib/FreeRTOS/Source/tasks.c ****                     }
 3071              		.loc 1 2266 38 is_stmt 0 view .LVU983
 3072 00f6 2C60     		str	r4, [r5]
 3073              	.L218:
2270:Lib/FreeRTOS/Source/tasks.c ****                     }
 3074              		.loc 1 2270 49 is_stmt 1 view .LVU984
 3075              	.LBE113:
2274:Lib/FreeRTOS/Source/tasks.c ****                 {
 3076              		.loc 1 2274 17 view .LVU985
2274:Lib/FreeRTOS/Source/tasks.c ****                 {
 3077              		.loc 1 2274 35 is_stmt 0 view .LVU986
 3078 00f8 0C4B     		ldr	r3, .L235+36
 3079 00fa 1B68     		ldr	r3, [r3]
2274:Lib/FreeRTOS/Source/tasks.c ****                 {
 3080              		.loc 1 2274 19 view .LVU987
 3081 00fc 002B     		cmp	r3, #0
 3082 00fe 94D0     		beq	.L211
2278:Lib/FreeRTOS/Source/tasks.c ****                     }
 3083              		.loc 1 2278 25 is_stmt 1 view .LVU988
 3084              	.LVL234:
ARM GAS  /tmp/ccEd3BVV.s 			page 168


2281:Lib/FreeRTOS/Source/tasks.c ****                 }
 3085              		.loc 1 2281 21 view .LVU989
 3086 0100 FFF7FEFF 		bl	vPortYield
 3087              	.LVL235:
2278:Lib/FreeRTOS/Source/tasks.c ****                     }
 3088              		.loc 1 2278 41 is_stmt 0 view .LVU990
 3089 0104 0124     		movs	r4, #1
 3090              	.LVL236:
2278:Lib/FreeRTOS/Source/tasks.c ****                     }
 3091              		.loc 1 2278 41 view .LVU991
 3092 0106 91E7     		b	.L209
 3093              	.L236:
 3094              		.align	2
 3095              	.L235:
 3096 0108 00000000 		.word	uxSchedulerSuspended
 3097 010c 00000000 		.word	.LC0
 3098 0110 00000000 		.word	__func__.22
 3099 0114 02000000 		.word	.LC1
 3100 0118 00000000 		.word	uxCurrentNumberOfTasks
 3101 011c 00000000 		.word	xPendingReadyList
 3102 0120 00000000 		.word	uxTopReadyPriority
 3103 0124 00000000 		.word	pxReadyTasksLists
 3104 0128 00000000 		.word	xPendedTicks
 3105 012c 00000000 		.word	xYieldPending
 3106 0130 00000000 		.word	pxCurrentTCB
 3107              		.cfi_endproc
 3108              	.LFE17:
 3110              		.section	.text.xTaskDelayUntil,"ax",%progbits
 3111              		.align	1
 3112              		.global	xTaskDelayUntil
 3113              		.syntax unified
 3114              		.thumb
 3115              		.thumb_func
 3117              	xTaskDelayUntil:
 3118              	.LVL237:
 3119              	.LFB4:
1220:Lib/FreeRTOS/Source/tasks.c ****         TickType_t xTimeToWake;
 3120              		.loc 1 1220 5 is_stmt 1 view -0
 3121              		.cfi_startproc
 3122              		@ args = 0, pretend = 0, frame = 0
 3123              		@ frame_needed = 0, uses_anonymous_args = 0
1221:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 3124              		.loc 1 1221 9 view .LVU993
1222:Lib/FreeRTOS/Source/tasks.c **** 
 3125              		.loc 1 1222 9 view .LVU994
1224:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 3126              		.loc 1 1224 9 view .LVU995
1220:Lib/FreeRTOS/Source/tasks.c ****         TickType_t xTimeToWake;
 3127              		.loc 1 1220 5 is_stmt 0 view .LVU996
 3128 0000 10B5     		push	{r4, lr}
 3129              		.cfi_def_cfa_offset 8
 3130              		.cfi_offset 4, -8
 3131              		.cfi_offset 14, -4
1224:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 3132              		.loc 1 1224 9 view .LVU997
 3133 0002 40B9     		cbnz	r0, .L238
1224:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
ARM GAS  /tmp/ccEd3BVV.s 			page 169


 3134              		.loc 1 1224 9 is_stmt 1 discriminator 1 view .LVU998
 3135 0004 FFF7FEFF 		bl	ulSetInterruptMask
 3136              	.LVL238:
1224:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 3137              		.loc 1 1224 9 discriminator 1 view .LVU999
 3138 0008 4FF49961 		mov	r1, #1224
 3139 000c 1A4B     		ldr	r3, .L252
 3140 000e 1B4A     		ldr	r2, .L252+4
 3141              	.L251:
1225:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 3142              		.loc 1 1225 9 is_stmt 0 discriminator 1 view .LVU1000
 3143 0010 1B48     		ldr	r0, .L252+8
 3144 0012 FFF7FEFF 		bl	__assert_func
 3145              	.LVL239:
 3146              	.L238:
1224:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 3147              		.loc 1 1224 43 is_stmt 1 discriminator 2 view .LVU1001
1225:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 3148              		.loc 1 1225 9 view .LVU1002
 3149 0016 31B9     		cbnz	r1, .L239
1225:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 3150              		.loc 1 1225 9 discriminator 1 view .LVU1003
 3151 0018 FFF7FEFF 		bl	ulSetInterruptMask
 3152              	.LVL240:
1225:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 3153              		.loc 1 1225 9 discriminator 1 view .LVU1004
 3154 001c 40F2C941 		movw	r1, #1225
 3155 0020 154B     		ldr	r3, .L252
 3156 0022 164A     		ldr	r2, .L252+4
 3157 0024 F4E7     		b	.L251
 3158              	.LVL241:
 3159              	.L239:
1225:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 3160              		.loc 1 1225 48 discriminator 2 view .LVU1005
1226:Lib/FreeRTOS/Source/tasks.c **** 
 3161              		.loc 1 1226 9 view .LVU1006
 3162 0026 174B     		ldr	r3, .L252+12
 3163 0028 1B68     		ldr	r3, [r3]
 3164 002a 33B1     		cbz	r3, .L240
1226:Lib/FreeRTOS/Source/tasks.c **** 
 3165              		.loc 1 1226 9 discriminator 1 view .LVU1007
 3166 002c FFF7FEFF 		bl	ulSetInterruptMask
 3167              	.LVL242:
1226:Lib/FreeRTOS/Source/tasks.c **** 
 3168              		.loc 1 1226 9 discriminator 1 view .LVU1008
 3169 0030 40F2CA41 		movw	r1, #1226
 3170 0034 104B     		ldr	r3, .L252
 3171 0036 114A     		ldr	r2, .L252+4
 3172 0038 EAE7     		b	.L251
 3173              	.LVL243:
 3174              	.L240:
1226:Lib/FreeRTOS/Source/tasks.c **** 
 3175              		.loc 1 1226 67 discriminator 2 view .LVU1009
1228:Lib/FreeRTOS/Source/tasks.c ****         {
 3176              		.loc 1 1228 9 view .LVU1010
 3177 003a FFF7FEFF 		bl	vTaskSuspendAll
 3178              	.LVL244:
ARM GAS  /tmp/ccEd3BVV.s 			page 170


 3179              	.LBB114:
1232:Lib/FreeRTOS/Source/tasks.c **** 
 3180              		.loc 1 1232 13 view .LVU1011
1232:Lib/FreeRTOS/Source/tasks.c **** 
 3181              		.loc 1 1232 30 is_stmt 0 view .LVU1012
 3182 003e 124B     		ldr	r3, .L252+16
1235:Lib/FreeRTOS/Source/tasks.c **** 
 3183              		.loc 1 1235 27 view .LVU1013
 3184 0040 0468     		ldr	r4, [r0]
1232:Lib/FreeRTOS/Source/tasks.c **** 
 3185              		.loc 1 1232 30 view .LVU1014
 3186 0042 1A68     		ldr	r2, [r3]
 3187              	.LVL245:
1235:Lib/FreeRTOS/Source/tasks.c **** 
 3188              		.loc 1 1235 13 is_stmt 1 view .LVU1015
 3189 0044 6318     		adds	r3, r4, r1
 3190 0046 2CBF     		ite	cs
 3191 0048 0121     		movcs	r1, #1
 3192              	.LVL246:
1235:Lib/FreeRTOS/Source/tasks.c **** 
 3193              		.loc 1 1235 13 is_stmt 0 view .LVU1016
 3194 004a 0021     		movcc	r1, #0
 3195              	.LVL247:
1237:Lib/FreeRTOS/Source/tasks.c ****             {
 3196              		.loc 1 1237 13 is_stmt 1 view .LVU1017
1237:Lib/FreeRTOS/Source/tasks.c ****             {
 3197              		.loc 1 1237 15 is_stmt 0 view .LVU1018
 3198 004c 9442     		cmp	r4, r2
 3199 004e 09D9     		bls	.L243
1244:Lib/FreeRTOS/Source/tasks.c ****                 {
 3200              		.loc 1 1244 17 is_stmt 1 view .LVU1019
1244:Lib/FreeRTOS/Source/tasks.c ****                 {
 3201              		.loc 1 1244 19 is_stmt 0 view .LVU1020
 3202 0050 49B9     		cbnz	r1, .L250
 3203              	.L249:
1269:Lib/FreeRTOS/Source/tasks.c **** 
 3204              		.loc 1 1269 13 is_stmt 1 view .LVU1021
 3205              	.LBE114:
1222:Lib/FreeRTOS/Source/tasks.c **** 
 3206              		.loc 1 1222 37 is_stmt 0 view .LVU1022
 3207 0052 0024     		movs	r4, #0
 3208              	.LBB115:
1269:Lib/FreeRTOS/Source/tasks.c **** 
 3209              		.loc 1 1269 33 view .LVU1023
 3210 0054 0360     		str	r3, [r0]
1271:Lib/FreeRTOS/Source/tasks.c ****             {
 3211              		.loc 1 1271 13 is_stmt 1 view .LVU1024
 3212              	.LVL248:
 3213              	.L247:
1281:Lib/FreeRTOS/Source/tasks.c ****             }
 3214              		.loc 1 1281 41 view .LVU1025
 3215              	.LBE115:
1284:Lib/FreeRTOS/Source/tasks.c **** 
 3216              		.loc 1 1284 9 view .LVU1026
1284:Lib/FreeRTOS/Source/tasks.c **** 
 3217              		.loc 1 1284 27 is_stmt 0 view .LVU1027
 3218 0056 FFF7FEFF 		bl	xTaskResumeAll
ARM GAS  /tmp/ccEd3BVV.s 			page 171


 3219              	.LVL249:
1288:Lib/FreeRTOS/Source/tasks.c ****         {
 3220              		.loc 1 1288 9 is_stmt 1 view .LVU1028
1288:Lib/FreeRTOS/Source/tasks.c ****         {
 3221              		.loc 1 1288 11 is_stmt 0 view .LVU1029
 3222 005a 08B9     		cbnz	r0, .L237
1290:Lib/FreeRTOS/Source/tasks.c ****         }
 3223              		.loc 1 1290 13 is_stmt 1 view .LVU1030
 3224 005c FFF7FEFF 		bl	vPortYield
 3225              	.LVL250:
1294:Lib/FreeRTOS/Source/tasks.c ****         }
 3226              		.loc 1 1294 37 view .LVU1031
1297:Lib/FreeRTOS/Source/tasks.c ****     }
 3227              		.loc 1 1297 9 view .LVU1032
 3228              	.L237:
1298:Lib/FreeRTOS/Source/tasks.c **** 
 3229              		.loc 1 1298 5 is_stmt 0 view .LVU1033
 3230 0060 2046     		mov	r0, r4
 3231 0062 10BD     		pop	{r4, pc}
 3232              	.LVL251:
 3233              	.L243:
 3234              	.LBB116:
1258:Lib/FreeRTOS/Source/tasks.c ****                 {
 3235              		.loc 1 1258 17 is_stmt 1 view .LVU1034
1258:Lib/FreeRTOS/Source/tasks.c ****                 {
 3236              		.loc 1 1258 19 is_stmt 0 view .LVU1035
 3237 0064 09B9     		cbnz	r1, .L246
 3238              	.L250:
1258:Lib/FreeRTOS/Source/tasks.c ****                 {
 3239              		.loc 1 1258 59 discriminator 1 view .LVU1036
 3240 0066 9A42     		cmp	r2, r3
 3241 0068 F3D2     		bcs	.L249
 3242              	.L246:
 3243              	.LVL252:
1269:Lib/FreeRTOS/Source/tasks.c **** 
 3244              		.loc 1 1269 33 view .LVU1037
 3245 006a 0360     		str	r3, [r0]
1273:Lib/FreeRTOS/Source/tasks.c **** 
 3246              		.loc 1 1273 53 is_stmt 1 view .LVU1038
1277:Lib/FreeRTOS/Source/tasks.c ****             }
 3247              		.loc 1 1277 17 view .LVU1039
 3248 006c 0021     		movs	r1, #0
 3249 006e 981A     		subs	r0, r3, r2
 3250              	.LVL253:
1277:Lib/FreeRTOS/Source/tasks.c ****             }
 3251              		.loc 1 1277 17 is_stmt 0 view .LVU1040
 3252 0070 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3253              	.LVL254:
1277:Lib/FreeRTOS/Source/tasks.c ****             }
 3254              		.loc 1 1277 17 view .LVU1041
 3255 0074 0124     		movs	r4, #1
 3256              	.LVL255:
1277:Lib/FreeRTOS/Source/tasks.c ****             }
 3257              		.loc 1 1277 17 view .LVU1042
 3258 0076 EEE7     		b	.L247
 3259              	.L253:
 3260              		.align	2
ARM GAS  /tmp/ccEd3BVV.s 			page 172


 3261              	.L252:
 3262 0078 00000000 		.word	.LC0
 3263 007c 00000000 		.word	__func__.31
 3264 0080 02000000 		.word	.LC1
 3265 0084 00000000 		.word	uxSchedulerSuspended
 3266 0088 00000000 		.word	xTickCount
 3267              	.LBE116:
 3268              		.cfi_endproc
 3269              	.LFE4:
 3271              		.section	.text.vTaskDelay,"ax",%progbits
 3272              		.align	1
 3273              		.global	vTaskDelay
 3274              		.syntax unified
 3275              		.thumb
 3276              		.thumb_func
 3278              	vTaskDelay:
 3279              	.LVL256:
 3280              	.LFB5:
1306:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 3281              		.loc 1 1306 5 is_stmt 1 view -0
 3282              		.cfi_startproc
 3283              		@ args = 0, pretend = 0, frame = 0
 3284              		@ frame_needed = 0, uses_anonymous_args = 0
1307:Lib/FreeRTOS/Source/tasks.c **** 
 3285              		.loc 1 1307 9 view .LVU1044
1310:Lib/FreeRTOS/Source/tasks.c ****         {
 3286              		.loc 1 1310 9 view .LVU1045
1306:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 3287              		.loc 1 1306 5 is_stmt 0 view .LVU1046
 3288 0000 08B5     		push	{r3, lr}
 3289              		.cfi_def_cfa_offset 8
 3290              		.cfi_offset 3, -8
 3291              		.cfi_offset 14, -4
1310:Lib/FreeRTOS/Source/tasks.c ****         {
 3292              		.loc 1 1310 11 view .LVU1047
 3293 0002 18B9     		cbnz	r0, .L255
 3294              	.LVL257:
 3295              	.L257:
1337:Lib/FreeRTOS/Source/tasks.c ****         }
 3296              		.loc 1 1337 13 is_stmt 1 view .LVU1048
1343:Lib/FreeRTOS/Source/tasks.c **** 
 3297              		.loc 1 1343 5 is_stmt 0 view .LVU1049
 3298 0004 BDE80840 		pop	{r3, lr}
 3299              		.cfi_remember_state
 3300              		.cfi_restore 14
 3301              		.cfi_restore 3
 3302              		.cfi_def_cfa_offset 0
1337:Lib/FreeRTOS/Source/tasks.c ****         }
 3303              		.loc 1 1337 13 view .LVU1050
 3304 0008 FFF7FEBF 		b	vPortYield
 3305              	.LVL258:
 3306              	.L255:
 3307              		.cfi_restore_state
1312:Lib/FreeRTOS/Source/tasks.c ****             vTaskSuspendAll();
 3308              		.loc 1 1312 13 is_stmt 1 view .LVU1051
 3309 000c 0A4B     		ldr	r3, .L261
 3310 000e 1968     		ldr	r1, [r3]
ARM GAS  /tmp/ccEd3BVV.s 			page 173


 3311 0010 41B1     		cbz	r1, .L256
1312:Lib/FreeRTOS/Source/tasks.c ****             vTaskSuspendAll();
 3312              		.loc 1 1312 13 discriminator 1 view .LVU1052
 3313 0012 FFF7FEFF 		bl	ulSetInterruptMask
 3314              	.LVL259:
1312:Lib/FreeRTOS/Source/tasks.c ****             vTaskSuspendAll();
 3315              		.loc 1 1312 13 discriminator 1 view .LVU1053
 3316 0016 4FF4A461 		mov	r1, #1312
 3317 001a 084B     		ldr	r3, .L261+4
 3318 001c 084A     		ldr	r2, .L261+8
 3319 001e 0948     		ldr	r0, .L261+12
 3320 0020 FFF7FEFF 		bl	__assert_func
 3321              	.LVL260:
 3322              	.L256:
1312:Lib/FreeRTOS/Source/tasks.c ****             vTaskSuspendAll();
 3323              		.loc 1 1312 71 discriminator 2 view .LVU1054
1313:Lib/FreeRTOS/Source/tasks.c ****             {
 3324              		.loc 1 1313 13 view .LVU1055
 3325 0024 FFF7FEFF 		bl	vTaskSuspendAll
 3326              	.LVL261:
1315:Lib/FreeRTOS/Source/tasks.c **** 
 3327              		.loc 1 1315 34 view .LVU1056
1324:Lib/FreeRTOS/Source/tasks.c ****             }
 3328              		.loc 1 1324 17 view .LVU1057
 3329 0028 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3330              	.LVL262:
1326:Lib/FreeRTOS/Source/tasks.c ****         }
 3331              		.loc 1 1326 13 view .LVU1058
1326:Lib/FreeRTOS/Source/tasks.c ****         }
 3332              		.loc 1 1326 31 is_stmt 0 view .LVU1059
 3333 002c FFF7FEFF 		bl	xTaskResumeAll
 3334              	.LVL263:
1330:Lib/FreeRTOS/Source/tasks.c ****         }
 3335              		.loc 1 1330 37 is_stmt 1 view .LVU1060
1335:Lib/FreeRTOS/Source/tasks.c ****         {
 3336              		.loc 1 1335 9 view .LVU1061
1335:Lib/FreeRTOS/Source/tasks.c ****         {
 3337              		.loc 1 1335 11 is_stmt 0 view .LVU1062
 3338 0030 0028     		cmp	r0, #0
 3339 0032 E7D0     		beq	.L257
1343:Lib/FreeRTOS/Source/tasks.c **** 
 3340              		.loc 1 1343 5 view .LVU1063
 3341 0034 08BD     		pop	{r3, pc}
 3342              	.L262:
 3343 0036 00BF     		.align	2
 3344              	.L261:
 3345 0038 00000000 		.word	uxSchedulerSuspended
 3346 003c 00000000 		.word	.LC0
 3347 0040 00000000 		.word	__func__.30
 3348 0044 02000000 		.word	.LC1
 3349              		.cfi_endproc
 3350              	.LFE5:
 3352              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 3353              		.align	1
 3354              		.global	xTaskCatchUpTicks
 3355              		.syntax unified
 3356              		.thumb
ARM GAS  /tmp/ccEd3BVV.s 			page 174


 3357              		.thumb_func
 3359              	xTaskCatchUpTicks:
 3360              	.LVL264:
 3361              	.LFB25:
2678:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xYieldOccurred;
 3362              		.loc 1 2678 1 is_stmt 1 view -0
 3363              		.cfi_startproc
 3364              		@ args = 0, pretend = 0, frame = 0
 3365              		@ frame_needed = 0, uses_anonymous_args = 0
2679:Lib/FreeRTOS/Source/tasks.c **** 
 3366              		.loc 1 2679 5 view .LVU1065
2683:Lib/FreeRTOS/Source/tasks.c **** 
 3367              		.loc 1 2683 5 view .LVU1066
 3368 0000 0D4B     		ldr	r3, .L265
2678:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xYieldOccurred;
 3369              		.loc 1 2678 1 is_stmt 0 view .LVU1067
 3370 0002 10B5     		push	{r4, lr}
 3371              		.cfi_def_cfa_offset 8
 3372              		.cfi_offset 4, -8
 3373              		.cfi_offset 14, -4
2683:Lib/FreeRTOS/Source/tasks.c **** 
 3374              		.loc 1 2683 5 view .LVU1068
 3375 0004 1B68     		ldr	r3, [r3]
2678:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xYieldOccurred;
 3376              		.loc 1 2678 1 view .LVU1069
 3377 0006 0446     		mov	r4, r0
2683:Lib/FreeRTOS/Source/tasks.c **** 
 3378              		.loc 1 2683 5 view .LVU1070
 3379 0008 43B1     		cbz	r3, .L264
2683:Lib/FreeRTOS/Source/tasks.c **** 
 3380              		.loc 1 2683 5 is_stmt 1 discriminator 1 view .LVU1071
 3381 000a FFF7FEFF 		bl	ulSetInterruptMask
 3382              	.LVL265:
2683:Lib/FreeRTOS/Source/tasks.c **** 
 3383              		.loc 1 2683 5 discriminator 1 view .LVU1072
 3384 000e 40F67B21 		movw	r1, #2683
 3385 0012 0A4B     		ldr	r3, .L265+4
 3386 0014 0A4A     		ldr	r2, .L265+8
 3387 0016 0B48     		ldr	r0, .L265+12
 3388 0018 FFF7FEFF 		bl	__assert_func
 3389              	.LVL266:
 3390              	.L264:
2683:Lib/FreeRTOS/Source/tasks.c **** 
 3391              		.loc 1 2683 63 discriminator 2 view .LVU1073
2687:Lib/FreeRTOS/Source/tasks.c **** 
 3392              		.loc 1 2687 5 view .LVU1074
 3393 001c FFF7FEFF 		bl	vTaskSuspendAll
 3394              	.LVL267:
2690:Lib/FreeRTOS/Source/tasks.c ****     {
 3395              		.loc 1 2690 5 view .LVU1075
 3396 0020 FFF7FEFF 		bl	vPortEnterCritical
 3397              	.LVL268:
2692:Lib/FreeRTOS/Source/tasks.c ****     }
 3398              		.loc 1 2692 9 view .LVU1076
2692:Lib/FreeRTOS/Source/tasks.c ****     }
 3399              		.loc 1 2692 22 is_stmt 0 view .LVU1077
 3400 0024 084A     		ldr	r2, .L265+16
ARM GAS  /tmp/ccEd3BVV.s 			page 175


 3401 0026 1368     		ldr	r3, [r2]
 3402 0028 2344     		add	r3, r3, r4
 3403 002a 1360     		str	r3, [r2]
2694:Lib/FreeRTOS/Source/tasks.c ****     xYieldOccurred = xTaskResumeAll();
 3404              		.loc 1 2694 5 is_stmt 1 view .LVU1078
 3405 002c FFF7FEFF 		bl	vPortExitCritical
 3406              	.LVL269:
2695:Lib/FreeRTOS/Source/tasks.c **** 
 3407              		.loc 1 2695 5 view .LVU1079
2698:Lib/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 3408              		.loc 1 2698 1 is_stmt 0 view .LVU1080
 3409 0030 BDE81040 		pop	{r4, lr}
 3410              		.cfi_restore 14
 3411              		.cfi_restore 4
 3412              		.cfi_def_cfa_offset 0
 3413              	.LVL270:
2695:Lib/FreeRTOS/Source/tasks.c **** 
 3414              		.loc 1 2695 22 view .LVU1081
 3415 0034 FFF7FEBF 		b	xTaskResumeAll
 3416              	.LVL271:
 3417              	.L266:
 3418              		.align	2
 3419              	.L265:
 3420 0038 00000000 		.word	uxSchedulerSuspended
 3421 003c 00000000 		.word	.LC0
 3422 0040 00000000 		.word	__func__.18
 3423 0044 02000000 		.word	.LC1
 3424 0048 00000000 		.word	xPendedTicks
 3425              		.cfi_endproc
 3426              	.LFE25:
 3428              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3429              		.align	1
 3430              		.global	vTaskSwitchContext
 3431              		.syntax unified
 3432              		.thumb
 3433              		.thumb_func
 3435              	vTaskSwitchContext:
 3436              	.LFB27:
3071:Lib/FreeRTOS/Source/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 3437              		.loc 1 3071 1 is_stmt 1 view -0
 3438              		.cfi_startproc
 3439              		@ args = 0, pretend = 0, frame = 0
 3440              		@ frame_needed = 0, uses_anonymous_args = 0
3072:Lib/FreeRTOS/Source/tasks.c ****     {
 3441              		.loc 1 3072 5 view .LVU1083
3071:Lib/FreeRTOS/Source/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 3442              		.loc 1 3071 1 is_stmt 0 view .LVU1084
 3443 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3444              		.cfi_def_cfa_offset 24
 3445              		.cfi_offset 3, -24
 3446              		.cfi_offset 4, -20
 3447              		.cfi_offset 5, -16
 3448              		.cfi_offset 6, -12
 3449              		.cfi_offset 7, -8
 3450              		.cfi_offset 14, -4
3072:Lib/FreeRTOS/Source/tasks.c ****     {
 3451              		.loc 1 3072 30 view .LVU1085
ARM GAS  /tmp/ccEd3BVV.s 			page 176


 3452 0002 224B     		ldr	r3, .L275
 3453 0004 1A68     		ldr	r2, [r3]
 3454 0006 224B     		ldr	r3, .L275+4
3072:Lib/FreeRTOS/Source/tasks.c ****     {
 3455              		.loc 1 3072 7 view .LVU1086
 3456 0008 12B1     		cbz	r2, .L268
3076:Lib/FreeRTOS/Source/tasks.c ****     }
 3457              		.loc 1 3076 9 is_stmt 1 view .LVU1087
3076:Lib/FreeRTOS/Source/tasks.c ****     }
 3458              		.loc 1 3076 23 is_stmt 0 view .LVU1088
 3459 000a 0122     		movs	r2, #1
 3460 000c 1A60     		str	r2, [r3]
 3461              	.L267:
3141:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3462              		.loc 1 3141 1 view .LVU1089
 3463 000e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3464              	.L268:
 3465              	.LBB121:
 3466              	.LBI121:
3070:Lib/FreeRTOS/Source/tasks.c **** {
 3467              		.loc 1 3070 6 is_stmt 1 view .LVU1090
 3468              	.LBB122:
3080:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_OUT();
 3469              		.loc 1 3080 9 view .LVU1091
3080:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_OUT();
 3470              		.loc 1 3080 23 is_stmt 0 view .LVU1092
 3471 0010 1A60     		str	r2, [r3]
3081:Lib/FreeRTOS/Source/tasks.c **** 
 3472              		.loc 1 3081 33 is_stmt 1 view .LVU1093
3088:Lib/FreeRTOS/Source/tasks.c ****             #endif
 3473              		.loc 1 3088 17 view .LVU1094
3088:Lib/FreeRTOS/Source/tasks.c ****             #endif
 3474              		.loc 1 3088 66 is_stmt 0 view .LVU1095
 3475 0012 FFF7FEFF 		bl	TIM4_Get_Value
 3476              	.LVL272:
3088:Lib/FreeRTOS/Source/tasks.c ****             #endif
 3477              		.loc 1 3088 32 discriminator 1 view .LVU1096
 3478 0016 1F4A     		ldr	r2, .L275+8
3098:Lib/FreeRTOS/Source/tasks.c ****             {
 3479              		.loc 1 3098 32 view .LVU1097
 3480 0018 1F49     		ldr	r1, .L275+12
3088:Lib/FreeRTOS/Source/tasks.c ****             #endif
 3481              		.loc 1 3088 32 discriminator 1 view .LVU1098
 3482 001a 1060     		str	r0, [r2]
3098:Lib/FreeRTOS/Source/tasks.c ****             {
 3483              		.loc 1 3098 13 is_stmt 1 view .LVU1099
3098:Lib/FreeRTOS/Source/tasks.c ****             {
 3484              		.loc 1 3098 32 is_stmt 0 view .LVU1100
 3485 001c 1368     		ldr	r3, [r2]
 3486 001e 0C68     		ldr	r4, [r1]
3098:Lib/FreeRTOS/Source/tasks.c ****             {
 3487              		.loc 1 3098 15 view .LVU1101
 3488 0020 A342     		cmp	r3, r4
 3489 0022 06D9     		bls	.L270
3100:Lib/FreeRTOS/Source/tasks.c ****             }
 3490              		.loc 1 3100 17 is_stmt 1 view .LVU1102
3100:Lib/FreeRTOS/Source/tasks.c ****             }
ARM GAS  /tmp/ccEd3BVV.s 			page 177


 3491              		.loc 1 3100 29 is_stmt 0 view .LVU1103
 3492 0024 1D4B     		ldr	r3, .L275+16
3100:Lib/FreeRTOS/Source/tasks.c ****             }
 3493              		.loc 1 3100 68 view .LVU1104
 3494 0026 1568     		ldr	r5, [r2]
3100:Lib/FreeRTOS/Source/tasks.c ****             }
 3495              		.loc 1 3100 29 view .LVU1105
 3496 0028 1868     		ldr	r0, [r3]
3100:Lib/FreeRTOS/Source/tasks.c ****             }
 3497              		.loc 1 3100 48 view .LVU1106
 3498 002a 436D     		ldr	r3, [r0, #84]
 3499 002c 1B1B     		subs	r3, r3, r4
 3500 002e 2B44     		add	r3, r3, r5
 3501 0030 4365     		str	r3, [r0, #84]
 3502              	.L270:
3104:Lib/FreeRTOS/Source/tasks.c ****             }
 3503              		.loc 1 3104 41 is_stmt 1 view .LVU1107
3107:Lib/FreeRTOS/Source/tasks.c ****         }
 3504              		.loc 1 3107 13 view .LVU1108
 3505              	.LBB123:
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3506              		.loc 1 3123 9 is_stmt 0 discriminator 4 view .LVU1109
 3507 0032 1427     		movs	r7, #20
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3508              		.loc 1 3123 9 view .LVU1110
 3509 0034 1A4D     		ldr	r5, .L275+20
 3510              	.LBE123:
3107:Lib/FreeRTOS/Source/tasks.c ****         }
 3511              		.loc 1 3107 34 view .LVU1111
 3512 0036 1368     		ldr	r3, [r2]
 3513              	.LBB125:
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3514              		.loc 1 3123 9 view .LVU1112
 3515 0038 2A68     		ldr	r2, [r5]
 3516              	.LBE125:
3107:Lib/FreeRTOS/Source/tasks.c ****         }
 3517              		.loc 1 3107 34 view .LVU1113
 3518 003a 0B60     		str	r3, [r1]
3112:Lib/FreeRTOS/Source/tasks.c **** 
 3519              		.loc 1 3112 39 is_stmt 1 view .LVU1114
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3520              		.loc 1 3123 9 view .LVU1115
 3521              	.LBB126:
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3522              		.loc 1 3123 9 view .LVU1116
 3523              	.LVL273:
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3524              		.loc 1 3123 9 view .LVU1117
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3525              		.loc 1 3123 9 is_stmt 0 discriminator 4 view .LVU1118
 3526 003c 1949     		ldr	r1, .L275+24
 3527 003e 541C     		adds	r4, r2, #1
 3528              	.L271:
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3529              		.loc 1 3123 9 is_stmt 1 discriminator 4 view .LVU1119
 3530 0040 07FB02F3 		mul	r3, r7, r2
 3531 0044 CE58     		ldr	r6, [r1, r3]
ARM GAS  /tmp/ccEd3BVV.s 			page 178


 3532 0046 C818     		adds	r0, r1, r3
 3533 0048 96B1     		cbz	r6, .L273
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3534              		.loc 1 3123 9 discriminator 6 view .LVU1120
 3535              	.LBB124:
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3536              		.loc 1 3123 9 discriminator 6 view .LVU1121
 3537              	.LVL274:
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3538              		.loc 1 3123 9 discriminator 6 view .LVU1122
 3539 004a 4468     		ldr	r4, [r0, #4]
 3540 004c 0833     		adds	r3, r3, #8
 3541 004e 6468     		ldr	r4, [r4, #4]
 3542 0050 0B44     		add	r3, r3, r1
 3543 0052 9C42     		cmp	r4, r3
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3544              		.loc 1 3123 9 is_stmt 0 discriminator 7 view .LVU1123
 3545 0054 08BF     		it	eq
 3546 0056 C368     		ldreq	r3, [r0, #12]
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3547              		.loc 1 3123 9 discriminator 6 view .LVU1124
 3548 0058 4460     		str	r4, [r0, #4]
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3549              		.loc 1 3123 9 is_stmt 1 discriminator 6 view .LVU1125
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3550              		.loc 1 3123 9 discriminator 7 view .LVU1126
 3551 005a 08BF     		it	eq
 3552 005c 4360     		streq	r3, [r0, #4]
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3553              		.loc 1 3123 9 discriminator 9 view .LVU1127
 3554 005e 1423     		movs	r3, #20
 3555 0060 03FB0211 		mla	r1, r3, r2, r1
 3556 0064 4B68     		ldr	r3, [r1, #4]
 3557 0066 D968     		ldr	r1, [r3, #12]
 3558 0068 0C4B     		ldr	r3, .L275+16
 3559 006a 1960     		str	r1, [r3]
 3560              	.LBE124:
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3561              		.loc 1 3123 9 discriminator 9 view .LVU1128
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3562              		.loc 1 3123 9 discriminator 9 view .LVU1129
 3563 006c 2A60     		str	r2, [r5]
 3564              	.LBE126:
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3565              		.loc 1 3123 9 discriminator 10 view .LVU1130
3124:Lib/FreeRTOS/Source/tasks.c **** 
 3566              		.loc 1 3124 32 view .LVU1131
 3567              	.LVL275:
3124:Lib/FreeRTOS/Source/tasks.c **** 
 3568              		.loc 1 3124 32 is_stmt 0 view .LVU1132
 3569              	.LBE122:
 3570              	.LBE121:
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3571              		.loc 1 3123 9 is_stmt 1 discriminator 10 view .LVU1133
3124:Lib/FreeRTOS/Source/tasks.c **** 
 3572              		.loc 1 3124 32 view .LVU1134
3141:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccEd3BVV.s 			page 179


 3573              		.loc 1 3141 1 is_stmt 0 view .LVU1135
 3574 006e CEE7     		b	.L267
 3575              	.LVL276:
 3576              	.L273:
 3577              	.LBB129:
 3578              	.LBB128:
 3579              	.LBB127:
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3580              		.loc 1 3123 9 is_stmt 1 discriminator 5 view .LVU1136
 3581 0070 013C     		subs	r4, r4, #1
 3582 0072 08D1     		bne	.L272
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3583              		.loc 1 3123 9 discriminator 2 view .LVU1137
 3584 0074 FFF7FEFF 		bl	ulSetInterruptMask
 3585              	.LVL277:
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3586              		.loc 1 3123 9 discriminator 1 view .LVU1138
 3587 0078 40F63341 		movw	r1, #3123
 3588 007c 0A4B     		ldr	r3, .L275+28
 3589 007e 0B4A     		ldr	r2, .L275+32
 3590 0080 0B48     		ldr	r0, .L275+36
 3591 0082 FFF7FEFF 		bl	__assert_func
 3592              	.LVL278:
 3593              	.L272:
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3594              		.loc 1 3123 9 discriminator 3 view .LVU1139
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3595              		.loc 1 3123 9 discriminator 3 view .LVU1140
 3596 0086 013A     		subs	r2, r2, #1
 3597              	.LVL279:
3123:Lib/FreeRTOS/Source/tasks.c ****         traceTASK_SWITCHED_IN();
 3598              		.loc 1 3123 9 is_stmt 0 discriminator 3 view .LVU1141
 3599 0088 DAE7     		b	.L271
 3600              	.L276:
 3601 008a 00BF     		.align	2
 3602              	.L275:
 3603 008c 00000000 		.word	uxSchedulerSuspended
 3604 0090 00000000 		.word	xYieldPending
 3605 0094 00000000 		.word	ulTotalRunTime
 3606 0098 00000000 		.word	ulTaskSwitchedInTime
 3607 009c 00000000 		.word	pxCurrentTCB
 3608 00a0 00000000 		.word	uxTopReadyPriority
 3609 00a4 00000000 		.word	pxReadyTasksLists
 3610 00a8 00000000 		.word	.LC0
 3611 00ac 00000000 		.word	__func__.16
 3612 00b0 02000000 		.word	.LC1
 3613              	.LBE127:
 3614              	.LBE128:
 3615              	.LBE129:
 3616              		.cfi_endproc
 3617              	.LFE27:
 3619              		.section	.text.vTaskSuspend,"ax",%progbits
 3620              		.align	1
 3621              		.global	vTaskSuspend
 3622              		.syntax unified
 3623              		.thumb
 3624              		.thumb_func
ARM GAS  /tmp/ccEd3BVV.s 			page 180


 3626              	vTaskSuspend:
 3627              	.LVL280:
 3628              	.LFB10:
1688:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 3629              		.loc 1 1688 5 is_stmt 1 view -0
 3630              		.cfi_startproc
 3631              		@ args = 0, pretend = 0, frame = 0
 3632              		@ frame_needed = 0, uses_anonymous_args = 0
1689:Lib/FreeRTOS/Source/tasks.c **** 
 3633              		.loc 1 1689 9 view .LVU1143
1691:Lib/FreeRTOS/Source/tasks.c ****         {
 3634              		.loc 1 1691 9 view .LVU1144
1688:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 3635              		.loc 1 1688 5 is_stmt 0 view .LVU1145
 3636 0000 70B5     		push	{r4, r5, r6, lr}
 3637              		.cfi_def_cfa_offset 16
 3638              		.cfi_offset 4, -16
 3639              		.cfi_offset 5, -12
 3640              		.cfi_offset 6, -8
 3641              		.cfi_offset 14, -4
1688:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 3642              		.loc 1 1688 5 view .LVU1146
 3643 0002 0446     		mov	r4, r0
 3644 0004 224D     		ldr	r5, .L292
1691:Lib/FreeRTOS/Source/tasks.c ****         {
 3645              		.loc 1 1691 9 view .LVU1147
 3646 0006 FFF7FEFF 		bl	vPortEnterCritical
 3647              	.LVL281:
1695:Lib/FreeRTOS/Source/tasks.c **** 
 3648              		.loc 1 1695 13 is_stmt 1 view .LVU1148
1695:Lib/FreeRTOS/Source/tasks.c **** 
 3649              		.loc 1 1695 21 is_stmt 0 view .LVU1149
 3650 000a 04B9     		cbnz	r4, .L278
1695:Lib/FreeRTOS/Source/tasks.c **** 
 3651              		.loc 1 1695 21 discriminator 1 view .LVU1150
 3652 000c 2C68     		ldr	r4, [r5]
 3653              	.LVL282:
 3654              	.L278:
1697:Lib/FreeRTOS/Source/tasks.c **** 
 3655              		.loc 1 1697 39 is_stmt 1 view .LVU1151
1701:Lib/FreeRTOS/Source/tasks.c ****             {
 3656              		.loc 1 1701 13 view .LVU1152
1701:Lib/FreeRTOS/Source/tasks.c ****             {
 3657              		.loc 1 1701 17 is_stmt 0 view .LVU1153
 3658 000e 261D     		adds	r6, r4, #4
 3659 0010 3046     		mov	r0, r6
 3660 0012 FFF7FEFF 		bl	uxListRemove
 3661              	.LVL283:
1703:Lib/FreeRTOS/Source/tasks.c ****             }
 3662              		.loc 1 1703 62 is_stmt 1 view .LVU1154
1707:Lib/FreeRTOS/Source/tasks.c ****             }
 3663              		.loc 1 1707 41 view .LVU1155
1711:Lib/FreeRTOS/Source/tasks.c ****             {
 3664              		.loc 1 1711 13 view .LVU1156
1711:Lib/FreeRTOS/Source/tasks.c ****             {
 3665              		.loc 1 1711 15 is_stmt 0 view .LVU1157
 3666 0016 A36A     		ldr	r3, [r4, #40]
ARM GAS  /tmp/ccEd3BVV.s 			page 181


 3667 0018 1BB1     		cbz	r3, .L279
1713:Lib/FreeRTOS/Source/tasks.c ****             }
 3668              		.loc 1 1713 17 is_stmt 1 view .LVU1158
1713:Lib/FreeRTOS/Source/tasks.c ****             }
 3669              		.loc 1 1713 26 is_stmt 0 view .LVU1159
 3670 001a 04F11800 		add	r0, r4, #24
 3671 001e FFF7FEFF 		bl	uxListRemove
 3672              	.LVL284:
 3673              	.L279:
1717:Lib/FreeRTOS/Source/tasks.c ****             }
 3674              		.loc 1 1717 41 is_stmt 1 view .LVU1160
1720:Lib/FreeRTOS/Source/tasks.c **** 
 3675              		.loc 1 1720 13 view .LVU1161
 3676 0022 3146     		mov	r1, r6
 3677 0024 1B48     		ldr	r0, .L292+4
 3678 0026 FFF7FEFF 		bl	vListInsertEnd
 3679              	.LVL285:
 3680              	.LBB130:
1724:Lib/FreeRTOS/Source/tasks.c **** 
 3681              		.loc 1 1724 17 view .LVU1162
1726:Lib/FreeRTOS/Source/tasks.c ****                 {
 3682              		.loc 1 1726 17 view .LVU1163
1726:Lib/FreeRTOS/Source/tasks.c ****                 {
 3683              		.loc 1 1726 31 discriminator 1 view .LVU1164
1728:Lib/FreeRTOS/Source/tasks.c ****                     {
 3684              		.loc 1 1728 21 view .LVU1165
1728:Lib/FreeRTOS/Source/tasks.c ****                     {
 3685              		.loc 1 1728 45 is_stmt 0 view .LVU1166
 3686 002a 94F85C30 		ldrb	r3, [r4, #92]	@ zero_extendqisi2
 3687              	.LBE130:
1740:Lib/FreeRTOS/Source/tasks.c ****         {
 3688              		.loc 1 1740 31 view .LVU1167
 3689 002e 1A4E     		ldr	r6, .L292+8
 3690              	.LBB131:
1728:Lib/FreeRTOS/Source/tasks.c ****                     {
 3691              		.loc 1 1728 23 view .LVU1168
 3692 0030 012B     		cmp	r3, #1
1732:Lib/FreeRTOS/Source/tasks.c ****                     }
 3693              		.loc 1 1732 25 is_stmt 1 view .LVU1169
1732:Lib/FreeRTOS/Source/tasks.c ****                     }
 3694              		.loc 1 1732 51 is_stmt 0 view .LVU1170
 3695 0032 04BF     		itt	eq
 3696 0034 0023     		moveq	r3, #0
 3697 0036 84F85C30 		strbeq	r3, [r4, #92]
 3698              	.LVL286:
1726:Lib/FreeRTOS/Source/tasks.c ****                 {
 3699              		.loc 1 1726 31 is_stmt 1 discriminator 1 view .LVU1171
1726:Lib/FreeRTOS/Source/tasks.c ****                 {
 3700              		.loc 1 1726 31 is_stmt 0 discriminator 1 view .LVU1172
 3701              	.LBE131:
1738:Lib/FreeRTOS/Source/tasks.c **** 
 3702              		.loc 1 1738 9 is_stmt 1 view .LVU1173
 3703 003a FFF7FEFF 		bl	vPortExitCritical
 3704              	.LVL287:
1740:Lib/FreeRTOS/Source/tasks.c ****         {
 3705              		.loc 1 1740 9 view .LVU1174
1740:Lib/FreeRTOS/Source/tasks.c ****         {
ARM GAS  /tmp/ccEd3BVV.s 			page 182


 3706              		.loc 1 1740 31 is_stmt 0 view .LVU1175
 3707 003e 3368     		ldr	r3, [r6]
1740:Lib/FreeRTOS/Source/tasks.c ****         {
 3708              		.loc 1 1740 11 view .LVU1176
 3709 0040 2BB1     		cbz	r3, .L281
1744:Lib/FreeRTOS/Source/tasks.c ****             {
 3710              		.loc 1 1744 13 is_stmt 1 view .LVU1177
 3711 0042 FFF7FEFF 		bl	vPortEnterCritical
 3712              	.LVL288:
1746:Lib/FreeRTOS/Source/tasks.c ****             }
 3713              		.loc 1 1746 17 view .LVU1178
 3714 0046 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3715              	.LVL289:
1748:Lib/FreeRTOS/Source/tasks.c ****         }
 3716              		.loc 1 1748 13 view .LVU1179
 3717 004a FFF7FEFF 		bl	vPortExitCritical
 3718              	.LVL290:
 3719              	.L281:
1752:Lib/FreeRTOS/Source/tasks.c ****         }
 3720              		.loc 1 1752 37 view .LVU1180
1755:Lib/FreeRTOS/Source/tasks.c ****         {
 3721              		.loc 1 1755 9 view .LVU1181
1755:Lib/FreeRTOS/Source/tasks.c ****         {
 3722              		.loc 1 1755 19 is_stmt 0 view .LVU1182
 3723 004e 2B68     		ldr	r3, [r5]
1755:Lib/FreeRTOS/Source/tasks.c ****         {
 3724              		.loc 1 1755 11 view .LVU1183
 3725 0050 A342     		cmp	r3, r4
 3726 0052 18D1     		bne	.L277
1757:Lib/FreeRTOS/Source/tasks.c ****             {
 3727              		.loc 1 1757 13 is_stmt 1 view .LVU1184
1757:Lib/FreeRTOS/Source/tasks.c ****             {
 3728              		.loc 1 1757 35 is_stmt 0 view .LVU1185
 3729 0054 3368     		ldr	r3, [r6]
1757:Lib/FreeRTOS/Source/tasks.c ****             {
 3730              		.loc 1 1757 15 view .LVU1186
 3731 0056 7BB1     		cbz	r3, .L283
1760:Lib/FreeRTOS/Source/tasks.c ****                 portYIELD_WITHIN_API();
 3732              		.loc 1 1760 17 is_stmt 1 view .LVU1187
 3733 0058 104B     		ldr	r3, .L292+12
 3734 005a 1B68     		ldr	r3, [r3]
 3735 005c 43B1     		cbz	r3, .L284
1760:Lib/FreeRTOS/Source/tasks.c ****                 portYIELD_WITHIN_API();
 3736              		.loc 1 1760 17 discriminator 1 view .LVU1188
 3737 005e FFF7FEFF 		bl	ulSetInterruptMask
 3738              	.LVL291:
1760:Lib/FreeRTOS/Source/tasks.c ****                 portYIELD_WITHIN_API();
 3739              		.loc 1 1760 17 discriminator 1 view .LVU1189
 3740 0062 4FF4DC61 		mov	r1, #1760
 3741 0066 0E4B     		ldr	r3, .L292+16
 3742 0068 0E4A     		ldr	r2, .L292+20
 3743 006a 0F48     		ldr	r0, .L292+24
 3744 006c FFF7FEFF 		bl	__assert_func
 3745              	.LVL292:
 3746              	.L284:
1760:Lib/FreeRTOS/Source/tasks.c ****                 portYIELD_WITHIN_API();
 3747              		.loc 1 1760 75 discriminator 2 view .LVU1190
ARM GAS  /tmp/ccEd3BVV.s 			page 183


1761:Lib/FreeRTOS/Source/tasks.c ****             }
 3748              		.loc 1 1761 17 view .LVU1191
1786:Lib/FreeRTOS/Source/tasks.c **** 
 3749              		.loc 1 1786 5 is_stmt 0 view .LVU1192
 3750 0070 BDE87040 		pop	{r4, r5, r6, lr}
 3751              		.cfi_remember_state
 3752              		.cfi_restore 14
 3753              		.cfi_restore 6
 3754              		.cfi_restore 5
 3755              		.cfi_restore 4
 3756              		.cfi_def_cfa_offset 0
 3757              	.LVL293:
1761:Lib/FreeRTOS/Source/tasks.c ****             }
 3758              		.loc 1 1761 17 view .LVU1193
 3759 0074 FFF7FEBF 		b	vPortYield
 3760              	.LVL294:
 3761              	.L283:
 3762              		.cfi_restore_state
1768:Lib/FreeRTOS/Source/tasks.c ****                 {
 3763              		.loc 1 1768 17 is_stmt 1 view .LVU1194
1768:Lib/FreeRTOS/Source/tasks.c ****                 {
 3764              		.loc 1 1768 21 is_stmt 0 view .LVU1195
 3765 0078 064A     		ldr	r2, .L292+4
 3766 007a 1168     		ldr	r1, [r2]
1768:Lib/FreeRTOS/Source/tasks.c ****                 {
 3767              		.loc 1 1768 68 view .LVU1196
 3768 007c 0B4A     		ldr	r2, .L292+28
 3769 007e 1268     		ldr	r2, [r2]
1768:Lib/FreeRTOS/Source/tasks.c ****                 {
 3770              		.loc 1 1768 19 view .LVU1197
 3771 0080 9142     		cmp	r1, r2
 3772 0082 01D1     		bne	.L285
1774:Lib/FreeRTOS/Source/tasks.c ****                 }
 3773              		.loc 1 1774 21 is_stmt 1 view .LVU1198
1774:Lib/FreeRTOS/Source/tasks.c ****                 }
 3774              		.loc 1 1774 34 is_stmt 0 view .LVU1199
 3775 0084 2B60     		str	r3, [r5]
 3776              	.L277:
1786:Lib/FreeRTOS/Source/tasks.c **** 
 3777              		.loc 1 1786 5 view .LVU1200
 3778 0086 70BD     		pop	{r4, r5, r6, pc}
 3779              	.LVL295:
 3780              	.L285:
1778:Lib/FreeRTOS/Source/tasks.c ****                 }
 3781              		.loc 1 1778 21 is_stmt 1 view .LVU1201
1786:Lib/FreeRTOS/Source/tasks.c **** 
 3782              		.loc 1 1786 5 is_stmt 0 view .LVU1202
 3783 0088 BDE87040 		pop	{r4, r5, r6, lr}
 3784              		.cfi_restore 14
 3785              		.cfi_restore 6
 3786              		.cfi_restore 5
 3787              		.cfi_restore 4
 3788              		.cfi_def_cfa_offset 0
 3789              	.LVL296:
1778:Lib/FreeRTOS/Source/tasks.c ****                 }
 3790              		.loc 1 1778 21 view .LVU1203
 3791 008c FFF7FEBF 		b	vTaskSwitchContext
ARM GAS  /tmp/ccEd3BVV.s 			page 184


 3792              	.LVL297:
 3793              	.L293:
 3794              		.align	2
 3795              	.L292:
 3796 0090 00000000 		.word	pxCurrentTCB
 3797 0094 00000000 		.word	xSuspendedTaskList
 3798 0098 00000000 		.word	xSchedulerRunning
 3799 009c 00000000 		.word	uxSchedulerSuspended
 3800 00a0 00000000 		.word	.LC0
 3801 00a4 00000000 		.word	__func__.27
 3802 00a8 02000000 		.word	.LC1
 3803 00ac 00000000 		.word	uxCurrentNumberOfTasks
 3804              		.cfi_endproc
 3805              	.LFE10:
 3807              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3808              		.align	1
 3809              		.global	vTaskPlaceOnEventList
 3810              		.syntax unified
 3811              		.thumb
 3812              		.thumb_func
 3814              	vTaskPlaceOnEventList:
 3815              	.LVL298:
 3816              	.LFB28:
3146:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxEventList );
 3817              		.loc 1 3146 1 is_stmt 1 view -0
 3818              		.cfi_startproc
 3819              		@ args = 0, pretend = 0, frame = 0
 3820              		@ frame_needed = 0, uses_anonymous_args = 0
3147:Lib/FreeRTOS/Source/tasks.c **** 
 3821              		.loc 1 3147 5 view .LVU1205
3146:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxEventList );
 3822              		.loc 1 3146 1 is_stmt 0 view .LVU1206
 3823 0000 10B5     		push	{r4, lr}
 3824              		.cfi_def_cfa_offset 8
 3825              		.cfi_offset 4, -8
 3826              		.cfi_offset 14, -4
3146:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxEventList );
 3827              		.loc 1 3146 1 view .LVU1207
 3828 0002 0C46     		mov	r4, r1
3147:Lib/FreeRTOS/Source/tasks.c **** 
 3829              		.loc 1 3147 5 view .LVU1208
 3830 0004 40B9     		cbnz	r0, .L295
3147:Lib/FreeRTOS/Source/tasks.c **** 
 3831              		.loc 1 3147 5 is_stmt 1 discriminator 1 view .LVU1209
 3832 0006 FFF7FEFF 		bl	ulSetInterruptMask
 3833              	.LVL299:
3147:Lib/FreeRTOS/Source/tasks.c **** 
 3834              		.loc 1 3147 5 discriminator 1 view .LVU1210
 3835 000a 40F64B41 		movw	r1, #3147
 3836 000e 084B     		ldr	r3, .L296
 3837 0010 084A     		ldr	r2, .L296+4
 3838 0012 0948     		ldr	r0, .L296+8
 3839 0014 FFF7FEFF 		bl	__assert_func
 3840              	.LVL300:
 3841              	.L295:
3147:Lib/FreeRTOS/Source/tasks.c **** 
 3842              		.loc 1 3147 32 discriminator 2 view .LVU1211
ARM GAS  /tmp/ccEd3BVV.s 			page 185


3163:Lib/FreeRTOS/Source/tasks.c **** 
 3843              		.loc 1 3163 5 view .LVU1212
3163:Lib/FreeRTOS/Source/tasks.c **** 
 3844              		.loc 1 3163 46 is_stmt 0 view .LVU1213
 3845 0018 084B     		ldr	r3, .L296+12
 3846 001a 1968     		ldr	r1, [r3]
 3847              	.LVL301:
3163:Lib/FreeRTOS/Source/tasks.c **** 
 3848              		.loc 1 3163 5 view .LVU1214
 3849 001c 1831     		adds	r1, r1, #24
 3850 001e FFF7FEFF 		bl	vListInsert
 3851              	.LVL302:
3165:Lib/FreeRTOS/Source/tasks.c **** }
 3852              		.loc 1 3165 5 is_stmt 1 view .LVU1215
 3853 0022 2046     		mov	r0, r4
3166:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3854              		.loc 1 3166 1 is_stmt 0 view .LVU1216
 3855 0024 BDE81040 		pop	{r4, lr}
 3856              		.cfi_restore 14
 3857              		.cfi_restore 4
 3858              		.cfi_def_cfa_offset 0
 3859              	.LVL303:
3165:Lib/FreeRTOS/Source/tasks.c **** }
 3860              		.loc 1 3165 5 view .LVU1217
 3861 0028 0121     		movs	r1, #1
 3862 002a FFF7FEBF 		b	prvAddCurrentTaskToDelayedList
 3863              	.LVL304:
 3864              	.L297:
3165:Lib/FreeRTOS/Source/tasks.c **** }
 3865              		.loc 1 3165 5 view .LVU1218
 3866 002e 00BF     		.align	2
 3867              	.L296:
 3868 0030 00000000 		.word	.LC0
 3869 0034 00000000 		.word	__func__.15
 3870 0038 02000000 		.word	.LC1
 3871 003c 00000000 		.word	pxCurrentTCB
 3872              		.cfi_endproc
 3873              	.LFE28:
 3875              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3876              		.align	1
 3877              		.global	vTaskPlaceOnUnorderedEventList
 3878              		.syntax unified
 3879              		.thumb
 3880              		.thumb_func
 3882              	vTaskPlaceOnUnorderedEventList:
 3883              	.LVL305:
 3884              	.LFB29:
3172:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxEventList );
 3885              		.loc 1 3172 1 is_stmt 1 view -0
 3886              		.cfi_startproc
 3887              		@ args = 0, pretend = 0, frame = 0
 3888              		@ frame_needed = 0, uses_anonymous_args = 0
3173:Lib/FreeRTOS/Source/tasks.c **** 
 3889              		.loc 1 3173 5 view .LVU1220
3172:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxEventList );
 3890              		.loc 1 3172 1 is_stmt 0 view .LVU1221
 3891 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  /tmp/ccEd3BVV.s 			page 186


 3892              		.cfi_def_cfa_offset 16
 3893              		.cfi_offset 3, -16
 3894              		.cfi_offset 4, -12
 3895              		.cfi_offset 5, -8
 3896              		.cfi_offset 14, -4
3173:Lib/FreeRTOS/Source/tasks.c **** 
 3897              		.loc 1 3173 5 view .LVU1222
 3898 0002 0346     		mov	r3, r0
 3899 0004 40B9     		cbnz	r0, .L299
3173:Lib/FreeRTOS/Source/tasks.c **** 
 3900              		.loc 1 3173 5 is_stmt 1 discriminator 1 view .LVU1223
 3901 0006 FFF7FEFF 		bl	ulSetInterruptMask
 3902              	.LVL306:
3173:Lib/FreeRTOS/Source/tasks.c **** 
 3903              		.loc 1 3173 5 discriminator 1 view .LVU1224
 3904 000a 40F66541 		movw	r1, #3173
 3905 000e 154B     		ldr	r3, .L302
 3906 0010 154A     		ldr	r2, .L302+4
 3907              	.L301:
3177:Lib/FreeRTOS/Source/tasks.c **** 
 3908              		.loc 1 3177 5 is_stmt 0 discriminator 1 view .LVU1225
 3909 0012 1648     		ldr	r0, .L302+8
 3910 0014 FFF7FEFF 		bl	__assert_func
 3911              	.LVL307:
 3912              	.L299:
3173:Lib/FreeRTOS/Source/tasks.c **** 
 3913              		.loc 1 3173 32 is_stmt 1 discriminator 2 view .LVU1226
3177:Lib/FreeRTOS/Source/tasks.c **** 
 3914              		.loc 1 3177 5 view .LVU1227
 3915 0018 1548     		ldr	r0, .L302+12
 3916              	.LVL308:
3177:Lib/FreeRTOS/Source/tasks.c **** 
 3917              		.loc 1 3177 5 is_stmt 0 view .LVU1228
 3918 001a 0068     		ldr	r0, [r0]
 3919 001c 30B9     		cbnz	r0, .L300
3177:Lib/FreeRTOS/Source/tasks.c **** 
 3920              		.loc 1 3177 5 is_stmt 1 discriminator 1 view .LVU1229
 3921 001e FFF7FEFF 		bl	ulSetInterruptMask
 3922              	.LVL309:
3177:Lib/FreeRTOS/Source/tasks.c **** 
 3923              		.loc 1 3177 5 discriminator 1 view .LVU1230
 3924 0022 40F66941 		movw	r1, #3177
 3925 0026 0F4B     		ldr	r3, .L302
 3926 0028 0F4A     		ldr	r2, .L302+4
 3927 002a F2E7     		b	.L301
 3928              	.LVL310:
 3929              	.L300:
3177:Lib/FreeRTOS/Source/tasks.c **** 
 3930              		.loc 1 3177 63 discriminator 2 view .LVU1231
3182:Lib/FreeRTOS/Source/tasks.c **** 
 3931              		.loc 1 3182 5 view .LVU1232
 3932 002c 114C     		ldr	r4, .L302+16
 3933 002e 41F00041 		orr	r1, r1, #-2147483648
 3934              	.LVL311:
3182:Lib/FreeRTOS/Source/tasks.c **** 
 3935              		.loc 1 3182 5 is_stmt 0 view .LVU1233
 3936 0032 2068     		ldr	r0, [r4]
ARM GAS  /tmp/ccEd3BVV.s 			page 187


 3937 0034 8161     		str	r1, [r0, #24]
3189:Lib/FreeRTOS/Source/tasks.c **** 
 3938              		.loc 1 3189 5 is_stmt 1 view .LVU1234
 3939              	.LBB132:
3189:Lib/FreeRTOS/Source/tasks.c **** 
 3940              		.loc 1 3189 5 view .LVU1235
 3941 0036 5968     		ldr	r1, [r3, #4]
 3942              	.LVL312:
3189:Lib/FreeRTOS/Source/tasks.c **** 
 3943              		.loc 1 3189 5 view .LVU1236
3189:Lib/FreeRTOS/Source/tasks.c **** 
 3944              		.loc 1 3189 5 view .LVU1237
3189:Lib/FreeRTOS/Source/tasks.c **** 
 3945              		.loc 1 3189 5 view .LVU1238
 3946 0038 2068     		ldr	r0, [r4]
 3947 003a 8D68     		ldr	r5, [r1, #8]
 3948 003c C161     		str	r1, [r0, #28]
3189:Lib/FreeRTOS/Source/tasks.c **** 
 3949              		.loc 1 3189 5 view .LVU1239
 3950 003e 2068     		ldr	r0, [r4]
 3951 0040 0562     		str	r5, [r0, #32]
3189:Lib/FreeRTOS/Source/tasks.c **** 
 3952              		.loc 1 3189 5 view .LVU1240
 3953 0042 2068     		ldr	r0, [r4]
 3954 0044 1830     		adds	r0, r0, #24
 3955 0046 6860     		str	r0, [r5, #4]
3189:Lib/FreeRTOS/Source/tasks.c **** 
 3956              		.loc 1 3189 5 view .LVU1241
 3957 0048 2068     		ldr	r0, [r4]
 3958 004a 1830     		adds	r0, r0, #24
 3959 004c 8860     		str	r0, [r1, #8]
3189:Lib/FreeRTOS/Source/tasks.c **** 
 3960              		.loc 1 3189 5 view .LVU1242
 3961 004e 2168     		ldr	r1, [r4]
 3962              	.LVL313:
3189:Lib/FreeRTOS/Source/tasks.c **** 
 3963              		.loc 1 3189 5 is_stmt 0 view .LVU1243
 3964              	.LBE132:
3191:Lib/FreeRTOS/Source/tasks.c **** }
 3965              		.loc 1 3191 5 view .LVU1244
 3966 0050 1046     		mov	r0, r2
 3967              	.LBB133:
3189:Lib/FreeRTOS/Source/tasks.c **** 
 3968              		.loc 1 3189 5 view .LVU1245
 3969 0052 8B62     		str	r3, [r1, #40]
3189:Lib/FreeRTOS/Source/tasks.c **** 
 3970              		.loc 1 3189 5 is_stmt 1 view .LVU1246
 3971 0054 1968     		ldr	r1, [r3]
 3972 0056 0131     		adds	r1, r1, #1
 3973 0058 1960     		str	r1, [r3]
 3974              	.LBE133:
3189:Lib/FreeRTOS/Source/tasks.c **** 
 3975              		.loc 1 3189 5 view .LVU1247
3191:Lib/FreeRTOS/Source/tasks.c **** }
 3976              		.loc 1 3191 5 view .LVU1248
 3977 005a 0121     		movs	r1, #1
3192:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccEd3BVV.s 			page 188


 3978              		.loc 1 3192 1 is_stmt 0 view .LVU1249
 3979 005c BDE83840 		pop	{r3, r4, r5, lr}
 3980              		.cfi_restore 14
 3981              		.cfi_restore 5
 3982              		.cfi_restore 4
 3983              		.cfi_restore 3
 3984              		.cfi_def_cfa_offset 0
 3985              	.LVL314:
3191:Lib/FreeRTOS/Source/tasks.c **** }
 3986              		.loc 1 3191 5 view .LVU1250
 3987 0060 FFF7FEBF 		b	prvAddCurrentTaskToDelayedList
 3988              	.LVL315:
 3989              	.L303:
3191:Lib/FreeRTOS/Source/tasks.c **** }
 3990              		.loc 1 3191 5 view .LVU1251
 3991              		.align	2
 3992              	.L302:
 3993 0064 00000000 		.word	.LC0
 3994 0068 00000000 		.word	__func__.14
 3995 006c 02000000 		.word	.LC1
 3996 0070 00000000 		.word	uxSchedulerSuspended
 3997 0074 00000000 		.word	pxCurrentTCB
 3998              		.cfi_endproc
 3999              	.LFE29:
 4001              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4002              		.align	1
 4003              		.global	vTaskPlaceOnEventListRestricted
 4004              		.syntax unified
 4005              		.thumb
 4006              		.thumb_func
 4008              	vTaskPlaceOnEventListRestricted:
 4009              	.LVL316:
 4010              	.LFB30:
3200:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( pxEventList );
 4011              		.loc 1 3200 5 is_stmt 1 view -0
 4012              		.cfi_startproc
 4013              		@ args = 0, pretend = 0, frame = 0
 4014              		@ frame_needed = 0, uses_anonymous_args = 0
3201:Lib/FreeRTOS/Source/tasks.c **** 
 4015              		.loc 1 3201 9 view .LVU1253
3200:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( pxEventList );
 4016              		.loc 1 3200 5 is_stmt 0 view .LVU1254
 4017 0000 70B5     		push	{r4, r5, r6, lr}
 4018              		.cfi_def_cfa_offset 16
 4019              		.cfi_offset 4, -16
 4020              		.cfi_offset 5, -12
 4021              		.cfi_offset 6, -8
 4022              		.cfi_offset 14, -4
3200:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( pxEventList );
 4023              		.loc 1 3200 5 view .LVU1255
 4024 0002 0C46     		mov	r4, r1
 4025 0004 1146     		mov	r1, r2
 4026              	.LVL317:
3201:Lib/FreeRTOS/Source/tasks.c **** 
 4027              		.loc 1 3201 9 view .LVU1256
 4028 0006 40B9     		cbnz	r0, .L305
3201:Lib/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccEd3BVV.s 			page 189


 4029              		.loc 1 3201 9 is_stmt 1 discriminator 1 view .LVU1257
 4030 0008 FFF7FEFF 		bl	ulSetInterruptMask
 4031              	.LVL318:
3201:Lib/FreeRTOS/Source/tasks.c **** 
 4032              		.loc 1 3201 9 discriminator 1 view .LVU1258
 4033 000c 40F68141 		movw	r1, #3201
 4034 0010 114B     		ldr	r3, .L308
 4035 0012 124A     		ldr	r2, .L308+4
 4036 0014 1248     		ldr	r0, .L308+8
 4037 0016 FFF7FEFF 		bl	__assert_func
 4038              	.LVL319:
 4039              	.L305:
3201:Lib/FreeRTOS/Source/tasks.c **** 
 4040              		.loc 1 3201 36 discriminator 2 view .LVU1259
3213:Lib/FreeRTOS/Source/tasks.c **** 
 4041              		.loc 1 3213 9 view .LVU1260
 4042              	.LBB134:
3213:Lib/FreeRTOS/Source/tasks.c **** 
 4043              		.loc 1 3213 9 view .LVU1261
 4044 001a 124B     		ldr	r3, .L308+12
 4045 001c 4268     		ldr	r2, [r0, #4]
 4046              	.LVL320:
3213:Lib/FreeRTOS/Source/tasks.c **** 
 4047              		.loc 1 3213 9 view .LVU1262
3213:Lib/FreeRTOS/Source/tasks.c **** 
 4048              		.loc 1 3213 9 view .LVU1263
3213:Lib/FreeRTOS/Source/tasks.c **** 
 4049              		.loc 1 3213 9 view .LVU1264
 4050 001e 1D68     		ldr	r5, [r3]
 4051 0020 9668     		ldr	r6, [r2, #8]
 4052 0022 EA61     		str	r2, [r5, #28]
3213:Lib/FreeRTOS/Source/tasks.c **** 
 4053              		.loc 1 3213 9 view .LVU1265
 4054 0024 1D68     		ldr	r5, [r3]
 4055              	.LBE134:
3220:Lib/FreeRTOS/Source/tasks.c ****         }
 4056              		.loc 1 3220 26 is_stmt 0 view .LVU1266
 4057 0026 0029     		cmp	r1, #0
 4058              	.LBB135:
3213:Lib/FreeRTOS/Source/tasks.c **** 
 4059              		.loc 1 3213 9 view .LVU1267
 4060 0028 2E62     		str	r6, [r5, #32]
3213:Lib/FreeRTOS/Source/tasks.c **** 
 4061              		.loc 1 3213 9 is_stmt 1 view .LVU1268
 4062 002a 1D68     		ldr	r5, [r3]
 4063 002c 05F11805 		add	r5, r5, #24
 4064 0030 7560     		str	r5, [r6, #4]
3213:Lib/FreeRTOS/Source/tasks.c **** 
 4065              		.loc 1 3213 9 view .LVU1269
 4066 0032 1D68     		ldr	r5, [r3]
 4067 0034 1B68     		ldr	r3, [r3]
 4068 0036 05F11805 		add	r5, r5, #24
 4069 003a 9560     		str	r5, [r2, #8]
3213:Lib/FreeRTOS/Source/tasks.c **** 
 4070              		.loc 1 3213 9 view .LVU1270
 4071 003c 9862     		str	r0, [r3, #40]
3213:Lib/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccEd3BVV.s 			page 190


 4072              		.loc 1 3213 9 view .LVU1271
 4073 003e 0368     		ldr	r3, [r0]
 4074 0040 03F10103 		add	r3, r3, #1
 4075 0044 0360     		str	r3, [r0]
 4076              	.LBE135:
3213:Lib/FreeRTOS/Source/tasks.c **** 
 4077              		.loc 1 3213 9 view .LVU1272
3218:Lib/FreeRTOS/Source/tasks.c ****         {
 4078              		.loc 1 3218 9 view .LVU1273
 4079              	.LVL321:
3223:Lib/FreeRTOS/Source/tasks.c ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4080              		.loc 1 3223 63 view .LVU1274
3224:Lib/FreeRTOS/Source/tasks.c ****     }
 4081              		.loc 1 3224 9 view .LVU1275
 4082 0046 08BF     		it	eq
 4083 0048 2046     		moveq	r0, r4
 4084              	.LVL322:
3225:Lib/FreeRTOS/Source/tasks.c **** 
 4085              		.loc 1 3225 5 is_stmt 0 view .LVU1276
 4086 004a BDE87040 		pop	{r4, r5, r6, lr}
 4087              		.cfi_restore 14
 4088              		.cfi_restore 6
 4089              		.cfi_restore 5
 4090              		.cfi_restore 4
 4091              		.cfi_def_cfa_offset 0
 4092              	.LVL323:
3224:Lib/FreeRTOS/Source/tasks.c ****     }
 4093              		.loc 1 3224 9 view .LVU1277
 4094 004e 18BF     		it	ne
 4095 0050 4FF0FF30 		movne	r0, #-1
 4096 0054 FFF7FEBF 		b	prvAddCurrentTaskToDelayedList
 4097              	.LVL324:
 4098              	.L309:
3224:Lib/FreeRTOS/Source/tasks.c ****     }
 4099              		.loc 1 3224 9 view .LVU1278
 4100              		.align	2
 4101              	.L308:
 4102 0058 00000000 		.word	.LC0
 4103 005c 00000000 		.word	__func__.13
 4104 0060 02000000 		.word	.LC1
 4105 0064 00000000 		.word	pxCurrentTCB
 4106              		.cfi_endproc
 4107              	.LFE30:
 4109              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 4110              		.align	1
 4111              		.global	xTaskRemoveFromEventList
 4112              		.syntax unified
 4113              		.thumb
 4114              		.thumb_func
 4116              	xTaskRemoveFromEventList:
 4117              	.LVL325:
 4118              	.LFB31:
3231:Lib/FreeRTOS/Source/tasks.c ****     TCB_t * pxUnblockedTCB;
 4119              		.loc 1 3231 1 is_stmt 1 view -0
 4120              		.cfi_startproc
 4121              		@ args = 0, pretend = 0, frame = 0
 4122              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccEd3BVV.s 			page 191


3232:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xReturn;
 4123              		.loc 1 3232 5 view .LVU1280
3233:Lib/FreeRTOS/Source/tasks.c **** 
 4124              		.loc 1 3233 5 view .LVU1281
3248:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxUnblockedTCB );
 4125              		.loc 1 3248 5 view .LVU1282
3231:Lib/FreeRTOS/Source/tasks.c ****     TCB_t * pxUnblockedTCB;
 4126              		.loc 1 3231 1 is_stmt 0 view .LVU1283
 4127 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4128              		.cfi_def_cfa_offset 24
 4129              		.cfi_offset 3, -24
 4130              		.cfi_offset 4, -20
 4131              		.cfi_offset 5, -16
 4132              		.cfi_offset 6, -12
 4133              		.cfi_offset 7, -8
 4134              		.cfi_offset 14, -4
3248:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxUnblockedTCB );
 4135              		.loc 1 3248 20 view .LVU1284
 4136 0002 C368     		ldr	r3, [r0, #12]
 4137 0004 DB68     		ldr	r3, [r3, #12]
 4138              	.LVL326:
3249:Lib/FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 4139              		.loc 1 3249 5 is_stmt 1 view .LVU1285
 4140 0006 43B9     		cbnz	r3, .L311
3249:Lib/FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 4141              		.loc 1 3249 5 discriminator 1 view .LVU1286
 4142 0008 FFF7FEFF 		bl	ulSetInterruptMask
 4143              	.LVL327:
3249:Lib/FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 4144              		.loc 1 3249 5 discriminator 1 view .LVU1287
 4145 000c 40F6B141 		movw	r1, #3249
 4146 0010 274B     		ldr	r3, .L319
 4147 0012 284A     		ldr	r2, .L319+4
 4148 0014 2848     		ldr	r0, .L319+8
 4149 0016 FFF7FEFF 		bl	__assert_func
 4150              	.LVL328:
 4151              	.L311:
3249:Lib/FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 4152              		.loc 1 3249 35 discriminator 2 view .LVU1288
3250:Lib/FreeRTOS/Source/tasks.c **** 
 4153              		.loc 1 3250 5 view .LVU1289
 4154              	.LBB136:
3250:Lib/FreeRTOS/Source/tasks.c **** 
 4155              		.loc 1 3250 5 view .LVU1290
 4156 001a 9A6A     		ldr	r2, [r3, #40]
 4157              	.LVL329:
3250:Lib/FreeRTOS/Source/tasks.c **** 
 4158              		.loc 1 3250 5 view .LVU1291
 4159 001c D3E90701 		ldrd	r0, r1, [r3, #28]
 4160              	.LVL330:
3250:Lib/FreeRTOS/Source/tasks.c **** 
 4161              		.loc 1 3250 5 is_stmt 0 view .LVU1292
 4162 0020 8160     		str	r1, [r0, #8]
3250:Lib/FreeRTOS/Source/tasks.c **** 
 4163              		.loc 1 3250 5 is_stmt 1 view .LVU1293
 4164 0022 4860     		str	r0, [r1, #4]
3250:Lib/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccEd3BVV.s 			page 192


 4165              		.loc 1 3250 5 view .LVU1294
 4166 0024 5068     		ldr	r0, [r2, #4]
 4167 0026 03F11804 		add	r4, r3, #24
 4168 002a A042     		cmp	r0, r4
3250:Lib/FreeRTOS/Source/tasks.c **** 
 4169              		.loc 1 3250 5 discriminator 1 view .LVU1295
 4170 002c 08BF     		it	eq
 4171 002e 5160     		streq	r1, [r2, #4]
3250:Lib/FreeRTOS/Source/tasks.c **** 
 4172              		.loc 1 3250 5 discriminator 3 view .LVU1296
 4173 0030 0021     		movs	r1, #0
 4174 0032 9962     		str	r1, [r3, #40]
3250:Lib/FreeRTOS/Source/tasks.c **** 
 4175              		.loc 1 3250 5 discriminator 3 view .LVU1297
 4176 0034 1168     		ldr	r1, [r2]
 4177 0036 0139     		subs	r1, r1, #1
 4178 0038 1160     		str	r1, [r2]
 4179              	.LBE136:
3250:Lib/FreeRTOS/Source/tasks.c **** 
 4180              		.loc 1 3250 5 discriminator 3 view .LVU1298
3252:Lib/FreeRTOS/Source/tasks.c ****     {
 4181              		.loc 1 3252 5 view .LVU1299
3252:Lib/FreeRTOS/Source/tasks.c ****     {
 4182              		.loc 1 3252 30 is_stmt 0 view .LVU1300
 4183 003a 204A     		ldr	r2, .L319+12
 4184              	.LVL331:
3252:Lib/FreeRTOS/Source/tasks.c ****     {
 4185              		.loc 1 3252 30 view .LVU1301
 4186 003c D96A     		ldr	r1, [r3, #44]
 4187 003e 1268     		ldr	r2, [r2]
3252:Lib/FreeRTOS/Source/tasks.c ****     {
 4188              		.loc 1 3252 7 view .LVU1302
 4189 0040 002A     		cmp	r2, #0
 4190 0042 29D1     		bne	.L313
3254:Lib/FreeRTOS/Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4191              		.loc 1 3254 9 is_stmt 1 view .LVU1303
 4192              	.LBB137:
3254:Lib/FreeRTOS/Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4193              		.loc 1 3254 9 view .LVU1304
 4194 0044 D3E90240 		ldrd	r4, r0, [r3, #8]
 4195 0048 5A69     		ldr	r2, [r3, #20]
 4196              	.LVL332:
3254:Lib/FreeRTOS/Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4197              		.loc 1 3254 9 view .LVU1305
 4198 004a A060     		str	r0, [r4, #8]
3254:Lib/FreeRTOS/Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4199              		.loc 1 3254 9 view .LVU1306
 4200 004c 4460     		str	r4, [r0, #4]
3254:Lib/FreeRTOS/Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4201              		.loc 1 3254 9 view .LVU1307
 4202 004e 5468     		ldr	r4, [r2, #4]
 4203 0050 1D1D     		adds	r5, r3, #4
 4204 0052 AC42     		cmp	r4, r5
3254:Lib/FreeRTOS/Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4205              		.loc 1 3254 9 discriminator 1 view .LVU1308
 4206 0054 08BF     		it	eq
 4207 0056 5060     		streq	r0, [r2, #4]
ARM GAS  /tmp/ccEd3BVV.s 			page 193


3254:Lib/FreeRTOS/Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4208              		.loc 1 3254 9 discriminator 3 view .LVU1309
3254:Lib/FreeRTOS/Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4209              		.loc 1 3254 9 discriminator 3 view .LVU1310
 4210 0058 1068     		ldr	r0, [r2]
 4211 005a 0138     		subs	r0, r0, #1
 4212 005c 1060     		str	r0, [r2]
 4213              	.LBE137:
3254:Lib/FreeRTOS/Source/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4214              		.loc 1 3254 9 discriminator 3 view .LVU1311
3255:Lib/FreeRTOS/Source/tasks.c **** 
 4215              		.loc 1 3255 9 view .LVU1312
3255:Lib/FreeRTOS/Source/tasks.c **** 
 4216              		.loc 1 3255 9 view .LVU1313
3255:Lib/FreeRTOS/Source/tasks.c **** 
 4217              		.loc 1 3255 9 view .LVU1314
3255:Lib/FreeRTOS/Source/tasks.c **** 
 4218              		.loc 1 3255 9 view .LVU1315
 4219 005e 184A     		ldr	r2, .L319+16
 4220              	.LVL333:
3255:Lib/FreeRTOS/Source/tasks.c **** 
 4221              		.loc 1 3255 9 is_stmt 0 view .LVU1316
 4222 0060 1068     		ldr	r0, [r2]
 4223 0062 8142     		cmp	r1, r0
3255:Lib/FreeRTOS/Source/tasks.c **** 
 4224              		.loc 1 3255 9 is_stmt 1 discriminator 1 view .LVU1317
 4225 0064 88BF     		it	hi
 4226 0066 1160     		strhi	r1, [r2]
3255:Lib/FreeRTOS/Source/tasks.c **** 
 4227              		.loc 1 3255 9 discriminator 3 view .LVU1318
3255:Lib/FreeRTOS/Source/tasks.c **** 
 4228              		.loc 1 3255 9 discriminator 3 view .LVU1319
 4229              	.LBB138:
3255:Lib/FreeRTOS/Source/tasks.c **** 
 4230              		.loc 1 3255 9 discriminator 3 view .LVU1320
 4231 0068 1422     		movs	r2, #20
 4232 006a 4A43     		muls	r2, r1, r2
 4233 006c 1548     		ldr	r0, .L319+20
 4234 006e 8618     		adds	r6, r0, r2
 4235 0070 7468     		ldr	r4, [r6, #4]
 4236              	.LVL334:
3255:Lib/FreeRTOS/Source/tasks.c **** 
 4237              		.loc 1 3255 9 discriminator 3 view .LVU1321
3255:Lib/FreeRTOS/Source/tasks.c **** 
 4238              		.loc 1 3255 9 discriminator 3 view .LVU1322
3255:Lib/FreeRTOS/Source/tasks.c **** 
 4239              		.loc 1 3255 9 discriminator 3 view .LVU1323
 4240 0072 A768     		ldr	r7, [r4, #8]
 4241 0074 9C60     		str	r4, [r3, #8]
3255:Lib/FreeRTOS/Source/tasks.c **** 
 4242              		.loc 1 3255 9 discriminator 3 view .LVU1324
 4243 0076 DF60     		str	r7, [r3, #12]
3255:Lib/FreeRTOS/Source/tasks.c **** 
 4244              		.loc 1 3255 9 discriminator 3 view .LVU1325
 4245 0078 7D60     		str	r5, [r7, #4]
3255:Lib/FreeRTOS/Source/tasks.c **** 
 4246              		.loc 1 3255 9 discriminator 3 view .LVU1326
ARM GAS  /tmp/ccEd3BVV.s 			page 194


 4247 007a A560     		str	r5, [r4, #8]
3255:Lib/FreeRTOS/Source/tasks.c **** 
 4248              		.loc 1 3255 9 discriminator 3 view .LVU1327
 4249 007c 5E61     		str	r6, [r3, #20]
 4250              	.LVL335:
3255:Lib/FreeRTOS/Source/tasks.c **** 
 4251              		.loc 1 3255 9 discriminator 3 view .LVU1328
 4252 007e 8358     		ldr	r3, [r0, r2]
 4253              	.LVL336:
3255:Lib/FreeRTOS/Source/tasks.c **** 
 4254              		.loc 1 3255 9 is_stmt 0 discriminator 3 view .LVU1329
 4255 0080 0133     		adds	r3, r3, #1
 4256 0082 8350     		str	r3, [r0, r2]
 4257              	.LBE138:
3255:Lib/FreeRTOS/Source/tasks.c **** 
 4258              		.loc 1 3255 9 is_stmt 1 discriminator 3 view .LVU1330
3255:Lib/FreeRTOS/Source/tasks.c **** 
 4259              		.loc 1 3255 9 discriminator 3 view .LVU1331
3255:Lib/FreeRTOS/Source/tasks.c **** 
 4260              		.loc 1 3255 9 discriminator 3 view .LVU1332
 4261              	.LVL337:
 4262              	.L316:
3275:Lib/FreeRTOS/Source/tasks.c ****     }
 4263              		.loc 1 3275 9 discriminator 1 view .LVU1333
3278:Lib/FreeRTOS/Source/tasks.c ****     {
 4264              		.loc 1 3278 5 view .LVU1334
3278:Lib/FreeRTOS/Source/tasks.c ****     {
 4265              		.loc 1 3278 50 is_stmt 0 view .LVU1335
 4266 0084 104B     		ldr	r3, .L319+24
 4267 0086 1B68     		ldr	r3, [r3]
3278:Lib/FreeRTOS/Source/tasks.c ****     {
 4268              		.loc 1 3278 7 view .LVU1336
 4269 0088 DB6A     		ldr	r3, [r3, #44]
 4270 008a 9942     		cmp	r1, r3
3283:Lib/FreeRTOS/Source/tasks.c **** 
 4271              		.loc 1 3283 9 is_stmt 1 view .LVU1337
 4272              	.LVL338:
3287:Lib/FreeRTOS/Source/tasks.c ****     }
 4273              		.loc 1 3287 9 view .LVU1338
3287:Lib/FreeRTOS/Source/tasks.c ****     }
 4274              		.loc 1 3287 23 is_stmt 0 view .LVU1339
 4275 008c 85BF     		ittet	hi
 4276 008e 0120     		movhi	r0, #1
 4277 0090 0E4B     		ldrhi	r3, .L319+28
3291:Lib/FreeRTOS/Source/tasks.c ****     }
 4278              		.loc 1 3291 17 view .LVU1340
 4279 0092 0020     		movls	r0, #0
 4280              	.LVL339:
3294:Lib/FreeRTOS/Source/tasks.c **** }
 4281              		.loc 1 3294 5 is_stmt 1 view .LVU1341
3287:Lib/FreeRTOS/Source/tasks.c ****     }
 4282              		.loc 1 3287 23 is_stmt 0 view .LVU1342
 4283 0094 1860     		strhi	r0, [r3]
3295:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4284              		.loc 1 3295 1 view .LVU1343
 4285 0096 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4286              	.LVL340:
ARM GAS  /tmp/ccEd3BVV.s 			page 195


 4287              	.L313:
3275:Lib/FreeRTOS/Source/tasks.c ****     }
 4288              		.loc 1 3275 9 is_stmt 1 view .LVU1344
 4289              	.LBB139:
3275:Lib/FreeRTOS/Source/tasks.c ****     }
 4290              		.loc 1 3275 9 view .LVU1345
 4291 0098 0D4A     		ldr	r2, .L319+32
 4292 009a 5068     		ldr	r0, [r2, #4]
 4293              	.LVL341:
3275:Lib/FreeRTOS/Source/tasks.c ****     }
 4294              		.loc 1 3275 9 view .LVU1346
3275:Lib/FreeRTOS/Source/tasks.c ****     }
 4295              		.loc 1 3275 9 view .LVU1347
3275:Lib/FreeRTOS/Source/tasks.c ****     }
 4296              		.loc 1 3275 9 view .LVU1348
 4297 009c 8568     		ldr	r5, [r0, #8]
 4298 009e D861     		str	r0, [r3, #28]
3275:Lib/FreeRTOS/Source/tasks.c ****     }
 4299              		.loc 1 3275 9 view .LVU1349
 4300 00a0 1D62     		str	r5, [r3, #32]
3275:Lib/FreeRTOS/Source/tasks.c ****     }
 4301              		.loc 1 3275 9 view .LVU1350
 4302 00a2 6C60     		str	r4, [r5, #4]
3275:Lib/FreeRTOS/Source/tasks.c ****     }
 4303              		.loc 1 3275 9 view .LVU1351
 4304 00a4 8460     		str	r4, [r0, #8]
3275:Lib/FreeRTOS/Source/tasks.c ****     }
 4305              		.loc 1 3275 9 view .LVU1352
 4306 00a6 9A62     		str	r2, [r3, #40]
3275:Lib/FreeRTOS/Source/tasks.c ****     }
 4307              		.loc 1 3275 9 view .LVU1353
 4308 00a8 1368     		ldr	r3, [r2]
 4309              	.LVL342:
3275:Lib/FreeRTOS/Source/tasks.c ****     }
 4310              		.loc 1 3275 9 is_stmt 0 view .LVU1354
 4311 00aa 0133     		adds	r3, r3, #1
 4312 00ac 1360     		str	r3, [r2]
 4313 00ae E9E7     		b	.L316
 4314              	.L320:
 4315              		.align	2
 4316              	.L319:
 4317 00b0 00000000 		.word	.LC0
 4318 00b4 00000000 		.word	__func__.12
 4319 00b8 02000000 		.word	.LC1
 4320 00bc 00000000 		.word	uxSchedulerSuspended
 4321 00c0 00000000 		.word	uxTopReadyPriority
 4322 00c4 00000000 		.word	pxReadyTasksLists
 4323 00c8 00000000 		.word	pxCurrentTCB
 4324 00cc 00000000 		.word	xYieldPending
 4325 00d0 00000000 		.word	xPendingReadyList
 4326              	.LBE139:
 4327              		.cfi_endproc
 4328              	.LFE31:
 4330              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4331              		.align	1
 4332              		.global	vTaskRemoveFromUnorderedEventList
 4333              		.syntax unified
ARM GAS  /tmp/ccEd3BVV.s 			page 196


 4334              		.thumb
 4335              		.thumb_func
 4337              	vTaskRemoveFromUnorderedEventList:
 4338              	.LVL343:
 4339              	.LFB32:
3300:Lib/FreeRTOS/Source/tasks.c ****     TCB_t * pxUnblockedTCB;
 4340              		.loc 1 3300 1 is_stmt 1 view -0
 4341              		.cfi_startproc
 4342              		@ args = 0, pretend = 0, frame = 0
 4343              		@ frame_needed = 0, uses_anonymous_args = 0
3301:Lib/FreeRTOS/Source/tasks.c **** 
 4344              		.loc 1 3301 5 view .LVU1356
3305:Lib/FreeRTOS/Source/tasks.c **** 
 4345              		.loc 1 3305 5 view .LVU1357
3300:Lib/FreeRTOS/Source/tasks.c ****     TCB_t * pxUnblockedTCB;
 4346              		.loc 1 3300 1 is_stmt 0 view .LVU1358
 4347 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4348              		.cfi_def_cfa_offset 24
 4349              		.cfi_offset 3, -24
 4350              		.cfi_offset 4, -20
 4351              		.cfi_offset 5, -16
 4352              		.cfi_offset 6, -12
 4353              		.cfi_offset 7, -8
 4354              		.cfi_offset 14, -4
3305:Lib/FreeRTOS/Source/tasks.c **** 
 4355              		.loc 1 3305 5 view .LVU1359
 4356 0002 284B     		ldr	r3, .L329
 4357 0004 1B68     		ldr	r3, [r3]
 4358 0006 43B9     		cbnz	r3, .L322
3305:Lib/FreeRTOS/Source/tasks.c **** 
 4359              		.loc 1 3305 5 is_stmt 1 discriminator 1 view .LVU1360
 4360 0008 FFF7FEFF 		bl	ulSetInterruptMask
 4361              	.LVL344:
3305:Lib/FreeRTOS/Source/tasks.c **** 
 4362              		.loc 1 3305 5 discriminator 1 view .LVU1361
 4363 000c 40F6E941 		movw	r1, #3305
 4364 0010 254B     		ldr	r3, .L329+4
 4365 0012 264A     		ldr	r2, .L329+8
 4366              	.L328:
3313:Lib/FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 4367              		.loc 1 3313 5 is_stmt 0 discriminator 1 view .LVU1362
 4368 0014 2648     		ldr	r0, .L329+12
 4369 0016 FFF7FEFF 		bl	__assert_func
 4370              	.LVL345:
 4371              	.L322:
3305:Lib/FreeRTOS/Source/tasks.c **** 
 4372              		.loc 1 3305 63 is_stmt 1 discriminator 2 view .LVU1363
3308:Lib/FreeRTOS/Source/tasks.c **** 
 4373              		.loc 1 3308 5 view .LVU1364
3312:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxUnblockedTCB );
 4374              		.loc 1 3312 20 is_stmt 0 view .LVU1365
 4375 001a C368     		ldr	r3, [r0, #12]
3308:Lib/FreeRTOS/Source/tasks.c **** 
 4376              		.loc 1 3308 5 view .LVU1366
 4377 001c 41F00041 		orr	r1, r1, #-2147483648
 4378              	.LVL346:
3308:Lib/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccEd3BVV.s 			page 197


 4379              		.loc 1 3308 5 view .LVU1367
 4380 0020 0160     		str	r1, [r0]
3312:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxUnblockedTCB );
 4381              		.loc 1 3312 5 is_stmt 1 view .LVU1368
 4382              	.LVL347:
3313:Lib/FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 4383              		.loc 1 3313 5 view .LVU1369
 4384 0022 33B9     		cbnz	r3, .L323
3313:Lib/FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 4385              		.loc 1 3313 5 discriminator 1 view .LVU1370
 4386 0024 FFF7FEFF 		bl	ulSetInterruptMask
 4387              	.LVL348:
3313:Lib/FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 4388              		.loc 1 3313 5 discriminator 1 view .LVU1371
 4389 0028 40F6F141 		movw	r1, #3313
 4390 002c 1E4B     		ldr	r3, .L329+4
 4391 002e 1F4A     		ldr	r2, .L329+8
 4392 0030 F0E7     		b	.L328
 4393              	.LVL349:
 4394              	.L323:
3313:Lib/FreeRTOS/Source/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 4395              		.loc 1 3313 35 discriminator 2 view .LVU1372
3314:Lib/FreeRTOS/Source/tasks.c **** 
 4396              		.loc 1 3314 5 view .LVU1373
 4397              	.LBB140:
3314:Lib/FreeRTOS/Source/tasks.c **** 
 4398              		.loc 1 3314 5 view .LVU1374
 4399 0032 0269     		ldr	r2, [r0, #16]
 4400              	.LVL350:
3314:Lib/FreeRTOS/Source/tasks.c **** 
 4401              		.loc 1 3314 5 view .LVU1375
 4402 0034 D0E90141 		ldrd	r4, r1, [r0, #4]
 4403 0038 A160     		str	r1, [r4, #8]
3314:Lib/FreeRTOS/Source/tasks.c **** 
 4404              		.loc 1 3314 5 view .LVU1376
 4405 003a 4C60     		str	r4, [r1, #4]
3314:Lib/FreeRTOS/Source/tasks.c **** 
 4406              		.loc 1 3314 5 view .LVU1377
 4407 003c 5468     		ldr	r4, [r2, #4]
 4408              	.LBE140:
 4409              	.LBB141:
3333:Lib/FreeRTOS/Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4410              		.loc 1 3333 5 is_stmt 0 view .LVU1378
 4411 003e 1D1D     		adds	r5, r3, #4
 4412              	.LBE141:
 4413              	.LBB142:
3314:Lib/FreeRTOS/Source/tasks.c **** 
 4414              		.loc 1 3314 5 view .LVU1379
 4415 0040 8442     		cmp	r4, r0
3314:Lib/FreeRTOS/Source/tasks.c **** 
 4416              		.loc 1 3314 5 is_stmt 1 discriminator 1 view .LVU1380
 4417 0042 08BF     		it	eq
 4418 0044 5160     		streq	r1, [r2, #4]
3314:Lib/FreeRTOS/Source/tasks.c **** 
 4419              		.loc 1 3314 5 discriminator 3 view .LVU1381
 4420 0046 0021     		movs	r1, #0
 4421 0048 0161     		str	r1, [r0, #16]
ARM GAS  /tmp/ccEd3BVV.s 			page 198


3314:Lib/FreeRTOS/Source/tasks.c **** 
 4422              		.loc 1 3314 5 discriminator 3 view .LVU1382
 4423 004a 1168     		ldr	r1, [r2]
 4424 004c 0139     		subs	r1, r1, #1
 4425 004e 1160     		str	r1, [r2]
 4426              	.LBE142:
3314:Lib/FreeRTOS/Source/tasks.c **** 
 4427              		.loc 1 3314 5 discriminator 3 view .LVU1383
3333:Lib/FreeRTOS/Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4428              		.loc 1 3333 5 view .LVU1384
 4429              	.LBB143:
3333:Lib/FreeRTOS/Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4430              		.loc 1 3333 5 view .LVU1385
 4431 0050 5A69     		ldr	r2, [r3, #20]
 4432              	.LVL351:
3333:Lib/FreeRTOS/Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4433              		.loc 1 3333 5 view .LVU1386
 4434 0052 D3E90201 		ldrd	r0, r1, [r3, #8]
 4435              	.LVL352:
3333:Lib/FreeRTOS/Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4436              		.loc 1 3333 5 is_stmt 0 view .LVU1387
 4437 0056 8160     		str	r1, [r0, #8]
3333:Lib/FreeRTOS/Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4438              		.loc 1 3333 5 is_stmt 1 view .LVU1388
 4439 0058 4860     		str	r0, [r1, #4]
3333:Lib/FreeRTOS/Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4440              		.loc 1 3333 5 view .LVU1389
 4441 005a 5068     		ldr	r0, [r2, #4]
 4442 005c A842     		cmp	r0, r5
3333:Lib/FreeRTOS/Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4443              		.loc 1 3333 5 discriminator 1 view .LVU1390
 4444 005e 08BF     		it	eq
 4445 0060 5160     		streq	r1, [r2, #4]
3333:Lib/FreeRTOS/Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4446              		.loc 1 3333 5 discriminator 3 view .LVU1391
3333:Lib/FreeRTOS/Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4447              		.loc 1 3333 5 discriminator 3 view .LVU1392
 4448 0062 1168     		ldr	r1, [r2]
 4449 0064 0139     		subs	r1, r1, #1
 4450 0066 1160     		str	r1, [r2]
 4451              	.LBE143:
3333:Lib/FreeRTOS/Source/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4452              		.loc 1 3333 5 discriminator 3 view .LVU1393
3334:Lib/FreeRTOS/Source/tasks.c **** 
 4453              		.loc 1 3334 5 view .LVU1394
3334:Lib/FreeRTOS/Source/tasks.c **** 
 4454              		.loc 1 3334 5 view .LVU1395
3334:Lib/FreeRTOS/Source/tasks.c **** 
 4455              		.loc 1 3334 5 view .LVU1396
3334:Lib/FreeRTOS/Source/tasks.c **** 
 4456              		.loc 1 3334 5 view .LVU1397
 4457 0068 124A     		ldr	r2, .L329+16
 4458              	.LVL353:
3334:Lib/FreeRTOS/Source/tasks.c **** 
 4459              		.loc 1 3334 5 is_stmt 0 view .LVU1398
 4460 006a D96A     		ldr	r1, [r3, #44]
 4461 006c 1068     		ldr	r0, [r2]
ARM GAS  /tmp/ccEd3BVV.s 			page 199


 4462 006e 8142     		cmp	r1, r0
3334:Lib/FreeRTOS/Source/tasks.c **** 
 4463              		.loc 1 3334 5 is_stmt 1 discriminator 1 view .LVU1399
 4464 0070 88BF     		it	hi
 4465 0072 1160     		strhi	r1, [r2]
3334:Lib/FreeRTOS/Source/tasks.c **** 
 4466              		.loc 1 3334 5 discriminator 3 view .LVU1400
3334:Lib/FreeRTOS/Source/tasks.c **** 
 4467              		.loc 1 3334 5 discriminator 3 view .LVU1401
 4468              	.LBB144:
3334:Lib/FreeRTOS/Source/tasks.c **** 
 4469              		.loc 1 3334 5 discriminator 3 view .LVU1402
 4470 0074 1422     		movs	r2, #20
 4471 0076 4A43     		muls	r2, r1, r2
 4472 0078 0F48     		ldr	r0, .L329+20
 4473 007a 8618     		adds	r6, r0, r2
 4474 007c 7468     		ldr	r4, [r6, #4]
 4475              	.LVL354:
3334:Lib/FreeRTOS/Source/tasks.c **** 
 4476              		.loc 1 3334 5 discriminator 3 view .LVU1403
3334:Lib/FreeRTOS/Source/tasks.c **** 
 4477              		.loc 1 3334 5 discriminator 3 view .LVU1404
3334:Lib/FreeRTOS/Source/tasks.c **** 
 4478              		.loc 1 3334 5 discriminator 3 view .LVU1405
 4479 007e A768     		ldr	r7, [r4, #8]
 4480 0080 9C60     		str	r4, [r3, #8]
3334:Lib/FreeRTOS/Source/tasks.c **** 
 4481              		.loc 1 3334 5 discriminator 3 view .LVU1406
 4482 0082 DF60     		str	r7, [r3, #12]
3334:Lib/FreeRTOS/Source/tasks.c **** 
 4483              		.loc 1 3334 5 discriminator 3 view .LVU1407
 4484 0084 7D60     		str	r5, [r7, #4]
3334:Lib/FreeRTOS/Source/tasks.c **** 
 4485              		.loc 1 3334 5 discriminator 3 view .LVU1408
 4486 0086 A560     		str	r5, [r4, #8]
3334:Lib/FreeRTOS/Source/tasks.c **** 
 4487              		.loc 1 3334 5 discriminator 3 view .LVU1409
 4488 0088 5E61     		str	r6, [r3, #20]
 4489              	.LVL355:
3334:Lib/FreeRTOS/Source/tasks.c **** 
 4490              		.loc 1 3334 5 discriminator 3 view .LVU1410
 4491 008a 8358     		ldr	r3, [r0, r2]
 4492              	.LVL356:
3334:Lib/FreeRTOS/Source/tasks.c **** 
 4493              		.loc 1 3334 5 is_stmt 0 discriminator 3 view .LVU1411
 4494 008c 0133     		adds	r3, r3, #1
 4495 008e 8350     		str	r3, [r0, r2]
 4496              	.LBE144:
3334:Lib/FreeRTOS/Source/tasks.c **** 
 4497              		.loc 1 3334 5 is_stmt 1 discriminator 3 view .LVU1412
3334:Lib/FreeRTOS/Source/tasks.c **** 
 4498              		.loc 1 3334 5 discriminator 3 view .LVU1413
3334:Lib/FreeRTOS/Source/tasks.c **** 
 4499              		.loc 1 3334 5 discriminator 3 view .LVU1414
3336:Lib/FreeRTOS/Source/tasks.c ****     {
 4500              		.loc 1 3336 5 view .LVU1415
3336:Lib/FreeRTOS/Source/tasks.c ****     {
ARM GAS  /tmp/ccEd3BVV.s 			page 200


 4501              		.loc 1 3336 50 is_stmt 0 view .LVU1416
 4502 0090 0A4B     		ldr	r3, .L329+24
 4503 0092 1B68     		ldr	r3, [r3]
3336:Lib/FreeRTOS/Source/tasks.c ****     {
 4504              		.loc 1 3336 7 view .LVU1417
 4505 0094 DB6A     		ldr	r3, [r3, #44]
 4506 0096 9942     		cmp	r1, r3
3342:Lib/FreeRTOS/Source/tasks.c ****     }
 4507              		.loc 1 3342 9 is_stmt 1 view .LVU1418
3342:Lib/FreeRTOS/Source/tasks.c ****     }
 4508              		.loc 1 3342 23 is_stmt 0 view .LVU1419
 4509 0098 82BF     		ittt	hi
 4510 009a 0122     		movhi	r2, #1
 4511 009c 084B     		ldrhi	r3, .L329+28
 4512 009e 1A60     		strhi	r2, [r3]
3344:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4513              		.loc 1 3344 1 view .LVU1420
 4514 00a0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4515              	.LVL357:
 4516              	.L330:
3344:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4517              		.loc 1 3344 1 view .LVU1421
 4518 00a2 00BF     		.align	2
 4519              	.L329:
 4520 00a4 00000000 		.word	uxSchedulerSuspended
 4521 00a8 00000000 		.word	.LC0
 4522 00ac 00000000 		.word	__func__.11
 4523 00b0 02000000 		.word	.LC1
 4524 00b4 00000000 		.word	uxTopReadyPriority
 4525 00b8 00000000 		.word	pxReadyTasksLists
 4526 00bc 00000000 		.word	pxCurrentTCB
 4527 00c0 00000000 		.word	xYieldPending
 4528              		.cfi_endproc
 4529              	.LFE32:
 4531              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4532              		.align	1
 4533              		.global	vTaskSetTimeOutState
 4534              		.syntax unified
 4535              		.thumb
 4536              		.thumb_func
 4538              	vTaskSetTimeOutState:
 4539              	.LVL358:
 4540              	.LFB33:
3348:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxTimeOut );
 4541              		.loc 1 3348 1 is_stmt 1 view -0
 4542              		.cfi_startproc
 4543              		@ args = 0, pretend = 0, frame = 0
 4544              		@ frame_needed = 0, uses_anonymous_args = 0
3349:Lib/FreeRTOS/Source/tasks.c ****     taskENTER_CRITICAL();
 4545              		.loc 1 3349 5 view .LVU1423
3348:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxTimeOut );
 4546              		.loc 1 3348 1 is_stmt 0 view .LVU1424
 4547 0000 10B5     		push	{r4, lr}
 4548              		.cfi_def_cfa_offset 8
 4549              		.cfi_offset 4, -8
 4550              		.cfi_offset 14, -4
3349:Lib/FreeRTOS/Source/tasks.c ****     taskENTER_CRITICAL();
ARM GAS  /tmp/ccEd3BVV.s 			page 201


 4551              		.loc 1 3349 5 view .LVU1425
 4552 0002 0446     		mov	r4, r0
 4553 0004 40B9     		cbnz	r0, .L332
3349:Lib/FreeRTOS/Source/tasks.c ****     taskENTER_CRITICAL();
 4554              		.loc 1 3349 5 is_stmt 1 discriminator 1 view .LVU1426
 4555 0006 FFF7FEFF 		bl	ulSetInterruptMask
 4556              	.LVL359:
3349:Lib/FreeRTOS/Source/tasks.c ****     taskENTER_CRITICAL();
 4557              		.loc 1 3349 5 discriminator 1 view .LVU1427
 4558 000a 40F61551 		movw	r1, #3349
 4559 000e 084B     		ldr	r3, .L333
 4560 0010 084A     		ldr	r2, .L333+4
 4561 0012 0948     		ldr	r0, .L333+8
 4562 0014 FFF7FEFF 		bl	__assert_func
 4563              	.LVL360:
 4564              	.L332:
3349:Lib/FreeRTOS/Source/tasks.c ****     taskENTER_CRITICAL();
 4565              		.loc 1 3349 30 discriminator 2 view .LVU1428
3350:Lib/FreeRTOS/Source/tasks.c ****     {
 4566              		.loc 1 3350 5 view .LVU1429
 4567 0018 FFF7FEFF 		bl	vPortEnterCritical
 4568              	.LVL361:
3352:Lib/FreeRTOS/Source/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 4569              		.loc 1 3352 9 view .LVU1430
3352:Lib/FreeRTOS/Source/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 4570              		.loc 1 3352 35 is_stmt 0 view .LVU1431
 4571 001c 074B     		ldr	r3, .L333+12
 4572 001e 1B68     		ldr	r3, [r3]
 4573 0020 2360     		str	r3, [r4]
3353:Lib/FreeRTOS/Source/tasks.c ****     }
 4574              		.loc 1 3353 9 is_stmt 1 view .LVU1432
3353:Lib/FreeRTOS/Source/tasks.c ****     }
 4575              		.loc 1 3353 36 is_stmt 0 view .LVU1433
 4576 0022 074B     		ldr	r3, .L333+16
 4577 0024 1B68     		ldr	r3, [r3]
 4578 0026 6360     		str	r3, [r4, #4]
3355:Lib/FreeRTOS/Source/tasks.c **** }
 4579              		.loc 1 3355 5 is_stmt 1 view .LVU1434
3356:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4580              		.loc 1 3356 1 is_stmt 0 view .LVU1435
 4581 0028 BDE81040 		pop	{r4, lr}
 4582              		.cfi_restore 14
 4583              		.cfi_restore 4
 4584              		.cfi_def_cfa_offset 0
 4585              	.LVL362:
3355:Lib/FreeRTOS/Source/tasks.c **** }
 4586              		.loc 1 3355 5 view .LVU1436
 4587 002c FFF7FEBF 		b	vPortExitCritical
 4588              	.LVL363:
 4589              	.L334:
 4590              		.align	2
 4591              	.L333:
 4592 0030 00000000 		.word	.LC0
 4593 0034 00000000 		.word	__func__.10
 4594 0038 02000000 		.word	.LC1
 4595 003c 00000000 		.word	xNumOfOverflows
 4596 0040 00000000 		.word	xTickCount
ARM GAS  /tmp/ccEd3BVV.s 			page 202


 4597              		.cfi_endproc
 4598              	.LFE33:
 4600              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4601              		.align	1
 4602              		.global	vTaskInternalSetTimeOutState
 4603              		.syntax unified
 4604              		.thumb
 4605              		.thumb_func
 4607              	vTaskInternalSetTimeOutState:
 4608              	.LVL364:
 4609              	.LFB34:
3360:Lib/FreeRTOS/Source/tasks.c ****     /* For internal use only as it does not use a critical section. */
 4610              		.loc 1 3360 1 is_stmt 1 view -0
 4611              		.cfi_startproc
 4612              		@ args = 0, pretend = 0, frame = 0
 4613              		@ frame_needed = 0, uses_anonymous_args = 0
 4614              		@ link register save eliminated.
3362:Lib/FreeRTOS/Source/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 4615              		.loc 1 3362 5 view .LVU1438
3362:Lib/FreeRTOS/Source/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 4616              		.loc 1 3362 31 is_stmt 0 view .LVU1439
 4617 0000 034B     		ldr	r3, .L336
 4618 0002 1B68     		ldr	r3, [r3]
 4619 0004 0360     		str	r3, [r0]
3363:Lib/FreeRTOS/Source/tasks.c **** }
 4620              		.loc 1 3363 5 is_stmt 1 view .LVU1440
3363:Lib/FreeRTOS/Source/tasks.c **** }
 4621              		.loc 1 3363 32 is_stmt 0 view .LVU1441
 4622 0006 034B     		ldr	r3, .L336+4
 4623 0008 1B68     		ldr	r3, [r3]
 4624 000a 4360     		str	r3, [r0, #4]
3364:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4625              		.loc 1 3364 1 view .LVU1442
 4626 000c 7047     		bx	lr
 4627              	.L337:
 4628 000e 00BF     		.align	2
 4629              	.L336:
 4630 0010 00000000 		.word	xNumOfOverflows
 4631 0014 00000000 		.word	xTickCount
 4632              		.cfi_endproc
 4633              	.LFE34:
 4635              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4636              		.align	1
 4637              		.global	xTaskCheckForTimeOut
 4638              		.syntax unified
 4639              		.thumb
 4640              		.thumb_func
 4642              	xTaskCheckForTimeOut:
 4643              	.LVL365:
 4644              	.LFB35:
3369:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xReturn;
 4645              		.loc 1 3369 1 is_stmt 1 view -0
 4646              		.cfi_startproc
 4647              		@ args = 0, pretend = 0, frame = 0
 4648              		@ frame_needed = 0, uses_anonymous_args = 0
3370:Lib/FreeRTOS/Source/tasks.c **** 
 4649              		.loc 1 3370 5 view .LVU1444
ARM GAS  /tmp/ccEd3BVV.s 			page 203


3372:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxTicksToWait );
 4650              		.loc 1 3372 5 view .LVU1445
3369:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xReturn;
 4651              		.loc 1 3369 1 is_stmt 0 view .LVU1446
 4652 0000 70B5     		push	{r4, r5, r6, lr}
 4653              		.cfi_def_cfa_offset 16
 4654              		.cfi_offset 4, -16
 4655              		.cfi_offset 5, -12
 4656              		.cfi_offset 6, -8
 4657              		.cfi_offset 14, -4
3369:Lib/FreeRTOS/Source/tasks.c ****     BaseType_t xReturn;
 4658              		.loc 1 3369 1 view .LVU1447
 4659 0002 0D46     		mov	r5, r1
3372:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxTicksToWait );
 4660              		.loc 1 3372 5 view .LVU1448
 4661 0004 0446     		mov	r4, r0
 4662 0006 40B9     		cbnz	r0, .L339
3372:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxTicksToWait );
 4663              		.loc 1 3372 5 is_stmt 1 discriminator 1 view .LVU1449
 4664 0008 FFF7FEFF 		bl	ulSetInterruptMask
 4665              	.LVL366:
3372:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxTicksToWait );
 4666              		.loc 1 3372 5 discriminator 1 view .LVU1450
 4667 000c 40F62C51 		movw	r1, #3372
 4668 0010 164B     		ldr	r3, .L349
 4669 0012 174A     		ldr	r2, .L349+4
 4670              	.L348:
3373:Lib/FreeRTOS/Source/tasks.c **** 
 4671              		.loc 1 3373 5 is_stmt 0 discriminator 1 view .LVU1451
 4672 0014 1748     		ldr	r0, .L349+8
 4673 0016 FFF7FEFF 		bl	__assert_func
 4674              	.LVL367:
 4675              	.L339:
3372:Lib/FreeRTOS/Source/tasks.c ****     configASSERT( pxTicksToWait );
 4676              		.loc 1 3372 30 is_stmt 1 discriminator 2 view .LVU1452
3373:Lib/FreeRTOS/Source/tasks.c **** 
 4677              		.loc 1 3373 5 view .LVU1453
 4678 001a 31B9     		cbnz	r1, .L340
3373:Lib/FreeRTOS/Source/tasks.c **** 
 4679              		.loc 1 3373 5 discriminator 1 view .LVU1454
 4680 001c FFF7FEFF 		bl	ulSetInterruptMask
 4681              	.LVL368:
3373:Lib/FreeRTOS/Source/tasks.c **** 
 4682              		.loc 1 3373 5 discriminator 1 view .LVU1455
 4683 0020 40F62D51 		movw	r1, #3373
 4684 0024 114B     		ldr	r3, .L349
 4685 0026 124A     		ldr	r2, .L349+4
 4686 0028 F4E7     		b	.L348
 4687              	.LVL369:
 4688              	.L340:
3373:Lib/FreeRTOS/Source/tasks.c **** 
 4689              		.loc 1 3373 34 discriminator 2 view .LVU1456
3375:Lib/FreeRTOS/Source/tasks.c ****     {
 4690              		.loc 1 3375 5 view .LVU1457
 4691 002a FFF7FEFF 		bl	vPortEnterCritical
 4692              	.LVL370:
 4693              	.LBB145:
ARM GAS  /tmp/ccEd3BVV.s 			page 204


3378:Lib/FreeRTOS/Source/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4694              		.loc 1 3378 9 view .LVU1458
3378:Lib/FreeRTOS/Source/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4695              		.loc 1 3378 26 is_stmt 0 view .LVU1459
 4696 002e 124B     		ldr	r3, .L349+12
 4697 0030 1968     		ldr	r1, [r3]
 4698              	.LVL371:
3379:Lib/FreeRTOS/Source/tasks.c **** 
 4699              		.loc 1 3379 9 is_stmt 1 view .LVU1460
3393:Lib/FreeRTOS/Source/tasks.c ****             {
 4700              		.loc 1 3393 13 view .LVU1461
3393:Lib/FreeRTOS/Source/tasks.c ****             {
 4701              		.loc 1 3393 17 is_stmt 0 view .LVU1462
 4702 0032 2B68     		ldr	r3, [r5]
3393:Lib/FreeRTOS/Source/tasks.c ****             {
 4703              		.loc 1 3393 15 view .LVU1463
 4704 0034 5A1C     		adds	r2, r3, #1
 4705 0036 17D0     		beq	.L341
3403:Lib/FreeRTOS/Source/tasks.c ****         {
 4706              		.loc 1 3403 31 view .LVU1464
 4707 0038 1048     		ldr	r0, .L349+16
3403:Lib/FreeRTOS/Source/tasks.c ****         {
 4708              		.loc 1 3403 11 view .LVU1465
 4709 003a 2668     		ldr	r6, [r4]
3403:Lib/FreeRTOS/Source/tasks.c ****         {
 4710              		.loc 1 3403 31 view .LVU1466
 4711 003c 0068     		ldr	r0, [r0]
3379:Lib/FreeRTOS/Source/tasks.c **** 
 4712              		.loc 1 3379 68 view .LVU1467
 4713 003e 6268     		ldr	r2, [r4, #4]
3403:Lib/FreeRTOS/Source/tasks.c ****         {
 4714              		.loc 1 3403 9 is_stmt 1 view .LVU1468
3403:Lib/FreeRTOS/Source/tasks.c ****         {
 4715              		.loc 1 3403 11 is_stmt 0 view .LVU1469
 4716 0040 8642     		cmp	r6, r0
 4717 0042 08D0     		beq	.L342
3403:Lib/FreeRTOS/Source/tasks.c ****         {
 4718              		.loc 1 3403 62 discriminator 1 view .LVU1470
 4719 0044 8A42     		cmp	r2, r1
 4720 0046 06D8     		bhi	.L342
 4721              	.L344:
3410:Lib/FreeRTOS/Source/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 4722              		.loc 1 3410 13 is_stmt 1 view .LVU1471
 4723              	.LVL372:
3411:Lib/FreeRTOS/Source/tasks.c ****         }
 4724              		.loc 1 3411 13 view .LVU1472
3411:Lib/FreeRTOS/Source/tasks.c ****         }
 4725              		.loc 1 3411 28 is_stmt 0 view .LVU1473
 4726 0048 0023     		movs	r3, #0
3410:Lib/FreeRTOS/Source/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 4727              		.loc 1 3410 21 view .LVU1474
 4728 004a 0124     		movs	r4, #1
 4729              	.LVL373:
3411:Lib/FreeRTOS/Source/tasks.c ****         }
 4730              		.loc 1 3411 28 view .LVU1475
 4731 004c 2B60     		str	r3, [r5]
 4732              	.LVL374:
ARM GAS  /tmp/ccEd3BVV.s 			page 205


 4733              	.L343:
3411:Lib/FreeRTOS/Source/tasks.c ****         }
 4734              		.loc 1 3411 28 view .LVU1476
 4735              	.LBE145:
3426:Lib/FreeRTOS/Source/tasks.c **** 
 4736              		.loc 1 3426 5 is_stmt 1 view .LVU1477
 4737 004e FFF7FEFF 		bl	vPortExitCritical
 4738              	.LVL375:
3428:Lib/FreeRTOS/Source/tasks.c **** }
 4739              		.loc 1 3428 5 view .LVU1478
3429:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4740              		.loc 1 3429 1 is_stmt 0 view .LVU1479
 4741 0052 2046     		mov	r0, r4
 4742 0054 70BD     		pop	{r4, r5, r6, pc}
 4743              	.LVL376:
 4744              	.L342:
 4745              	.LBB146:
3413:Lib/FreeRTOS/Source/tasks.c ****         {
 4746              		.loc 1 3413 14 is_stmt 1 view .LVU1480
3379:Lib/FreeRTOS/Source/tasks.c **** 
 4747              		.loc 1 3379 26 is_stmt 0 view .LVU1481
 4748 0056 881A     		subs	r0, r1, r2
3413:Lib/FreeRTOS/Source/tasks.c ****         {
 4749              		.loc 1 3413 16 view .LVU1482
 4750 0058 8342     		cmp	r3, r0
 4751 005a F5D9     		bls	.L344
3416:Lib/FreeRTOS/Source/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 4752              		.loc 1 3416 13 is_stmt 1 view .LVU1483
3416:Lib/FreeRTOS/Source/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 4753              		.loc 1 3416 28 is_stmt 0 view .LVU1484
 4754 005c 5B1A     		subs	r3, r3, r1
 4755 005e 1344     		add	r3, r3, r2
3417:Lib/FreeRTOS/Source/tasks.c ****             xReturn = pdFALSE;
 4756              		.loc 1 3417 13 view .LVU1485
 4757 0060 2046     		mov	r0, r4
3416:Lib/FreeRTOS/Source/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 4758              		.loc 1 3416 28 view .LVU1486
 4759 0062 2B60     		str	r3, [r5]
3417:Lib/FreeRTOS/Source/tasks.c ****             xReturn = pdFALSE;
 4760              		.loc 1 3417 13 is_stmt 1 view .LVU1487
 4761 0064 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 4762              	.LVL377:
3418:Lib/FreeRTOS/Source/tasks.c ****         }
 4763              		.loc 1 3418 13 view .LVU1488
 4764              	.L341:
3398:Lib/FreeRTOS/Source/tasks.c ****             }
 4765              		.loc 1 3398 25 is_stmt 0 view .LVU1489
 4766 0068 0024     		movs	r4, #0
 4767              	.LVL378:
3398:Lib/FreeRTOS/Source/tasks.c ****             }
 4768              		.loc 1 3398 25 view .LVU1490
 4769 006a F0E7     		b	.L343
 4770              	.L350:
 4771              		.align	2
 4772              	.L349:
 4773 006c 00000000 		.word	.LC0
 4774 0070 00000000 		.word	__func__.9
ARM GAS  /tmp/ccEd3BVV.s 			page 206


 4775 0074 02000000 		.word	.LC1
 4776 0078 00000000 		.word	xTickCount
 4777 007c 00000000 		.word	xNumOfOverflows
 4778              	.LBE146:
 4779              		.cfi_endproc
 4780              	.LFE35:
 4782              		.section	.text.vTaskMissedYield,"ax",%progbits
 4783              		.align	1
 4784              		.global	vTaskMissedYield
 4785              		.syntax unified
 4786              		.thumb
 4787              		.thumb_func
 4789              	vTaskMissedYield:
 4790              	.LFB36:
3433:Lib/FreeRTOS/Source/tasks.c ****     xYieldPending = pdTRUE;
 4791              		.loc 1 3433 1 is_stmt 1 view -0
 4792              		.cfi_startproc
 4793              		@ args = 0, pretend = 0, frame = 0
 4794              		@ frame_needed = 0, uses_anonymous_args = 0
 4795              		@ link register save eliminated.
3434:Lib/FreeRTOS/Source/tasks.c **** }
 4796              		.loc 1 3434 5 view .LVU1492
3434:Lib/FreeRTOS/Source/tasks.c **** }
 4797              		.loc 1 3434 19 is_stmt 0 view .LVU1493
 4798 0000 0122     		movs	r2, #1
 4799 0002 014B     		ldr	r3, .L352
 4800 0004 1A60     		str	r2, [r3]
3435:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4801              		.loc 1 3435 1 view .LVU1494
 4802 0006 7047     		bx	lr
 4803              	.L353:
 4804              		.align	2
 4805              	.L352:
 4806 0008 00000000 		.word	xYieldPending
 4807              		.cfi_endproc
 4808              	.LFE36:
 4810              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4811              		.align	1
 4812              		.global	uxTaskGetTaskNumber
 4813              		.syntax unified
 4814              		.thumb
 4815              		.thumb_func
 4817              	uxTaskGetTaskNumber:
 4818              	.LVL379:
 4819              	.LFB37:
3441:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxReturn;
 4820              		.loc 1 3441 5 is_stmt 1 view -0
 4821              		.cfi_startproc
 4822              		@ args = 0, pretend = 0, frame = 0
 4823              		@ frame_needed = 0, uses_anonymous_args = 0
 4824              		@ link register save eliminated.
3442:Lib/FreeRTOS/Source/tasks.c ****         TCB_t const * pxTCB;
 4825              		.loc 1 3442 9 view .LVU1496
3443:Lib/FreeRTOS/Source/tasks.c **** 
 4826              		.loc 1 3443 9 view .LVU1497
3445:Lib/FreeRTOS/Source/tasks.c ****         {
 4827              		.loc 1 3445 9 view .LVU1498
ARM GAS  /tmp/ccEd3BVV.s 			page 207


3445:Lib/FreeRTOS/Source/tasks.c ****         {
 4828              		.loc 1 3445 11 is_stmt 0 view .LVU1499
 4829 0000 00B1     		cbz	r0, .L354
3447:Lib/FreeRTOS/Source/tasks.c ****             uxReturn = pxTCB->uxTaskNumber;
 4830              		.loc 1 3447 13 is_stmt 1 view .LVU1500
 4831              	.LVL380:
3448:Lib/FreeRTOS/Source/tasks.c ****         }
 4832              		.loc 1 3448 13 view .LVU1501
3448:Lib/FreeRTOS/Source/tasks.c ****         }
 4833              		.loc 1 3448 22 is_stmt 0 view .LVU1502
 4834 0002 806C     		ldr	r0, [r0, #72]
 4835              	.LVL381:
 4836              	.L354:
3456:Lib/FreeRTOS/Source/tasks.c **** 
 4837              		.loc 1 3456 5 view .LVU1503
 4838 0004 7047     		bx	lr
 4839              		.cfi_endproc
 4840              	.LFE37:
 4842              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 4843              		.align	1
 4844              		.global	vTaskSetTaskNumber
 4845              		.syntax unified
 4846              		.thumb
 4847              		.thumb_func
 4849              	vTaskSetTaskNumber:
 4850              	.LVL382:
 4851              	.LFB38:
3465:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 4852              		.loc 1 3465 5 is_stmt 1 view -0
 4853              		.cfi_startproc
 4854              		@ args = 0, pretend = 0, frame = 0
 4855              		@ frame_needed = 0, uses_anonymous_args = 0
 4856              		@ link register save eliminated.
3466:Lib/FreeRTOS/Source/tasks.c **** 
 4857              		.loc 1 3466 9 view .LVU1505
3468:Lib/FreeRTOS/Source/tasks.c ****         {
 4858              		.loc 1 3468 9 view .LVU1506
3468:Lib/FreeRTOS/Source/tasks.c ****         {
 4859              		.loc 1 3468 11 is_stmt 0 view .LVU1507
 4860 0000 00B1     		cbz	r0, .L357
3470:Lib/FreeRTOS/Source/tasks.c ****             pxTCB->uxTaskNumber = uxHandle;
 4861              		.loc 1 3470 13 is_stmt 1 view .LVU1508
 4862              	.LVL383:
3471:Lib/FreeRTOS/Source/tasks.c ****         }
 4863              		.loc 1 3471 13 view .LVU1509
3471:Lib/FreeRTOS/Source/tasks.c ****         }
 4864              		.loc 1 3471 33 is_stmt 0 view .LVU1510
 4865 0002 8164     		str	r1, [r0, #72]
 4866              	.LVL384:
 4867              	.L357:
3473:Lib/FreeRTOS/Source/tasks.c **** 
 4868              		.loc 1 3473 5 view .LVU1511
 4869 0004 7047     		bx	lr
 4870              		.cfi_endproc
 4871              	.LFE38:
 4873              		.section	.text.vTaskGetInfo,"ax",%progbits
 4874              		.align	1
ARM GAS  /tmp/ccEd3BVV.s 			page 208


 4875              		.global	vTaskGetInfo
 4876              		.syntax unified
 4877              		.thumb
 4878              		.thumb_func
 4880              	vTaskGetInfo:
 4881              	.LVL385:
 4882              	.LFB42:
3779:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 4883              		.loc 1 3779 5 is_stmt 1 view -0
 4884              		.cfi_startproc
 4885              		@ args = 0, pretend = 0, frame = 0
 4886              		@ frame_needed = 0, uses_anonymous_args = 0
3780:Lib/FreeRTOS/Source/tasks.c **** 
 4887              		.loc 1 3780 9 view .LVU1513
3783:Lib/FreeRTOS/Source/tasks.c **** 
 4888              		.loc 1 3783 9 view .LVU1514
3779:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 4889              		.loc 1 3779 5 is_stmt 0 view .LVU1515
 4890 0000 70B5     		push	{r4, r5, r6, lr}
 4891              		.cfi_def_cfa_offset 16
 4892              		.cfi_offset 4, -16
 4893              		.cfi_offset 5, -12
 4894              		.cfi_offset 6, -8
 4895              		.cfi_offset 14, -4
3779:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 4896              		.loc 1 3779 5 view .LVU1516
 4897 0002 0D46     		mov	r5, r1
 4898 0004 1646     		mov	r6, r2
3783:Lib/FreeRTOS/Source/tasks.c **** 
 4899              		.loc 1 3783 17 view .LVU1517
 4900 0006 0446     		mov	r4, r0
 4901 0008 08B9     		cbnz	r0, .L363
3783:Lib/FreeRTOS/Source/tasks.c **** 
 4902              		.loc 1 3783 17 discriminator 1 view .LVU1518
 4903 000a 204A     		ldr	r2, .L377
 4904              	.LVL386:
3783:Lib/FreeRTOS/Source/tasks.c **** 
 4905              		.loc 1 3783 17 discriminator 1 view .LVU1519
 4906 000c 1468     		ldr	r4, [r2]
 4907              	.LVL387:
 4908              	.L363:
3785:Lib/FreeRTOS/Source/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 4909              		.loc 1 3785 9 is_stmt 1 view .LVU1520
3786:Lib/FreeRTOS/Source/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4910              		.loc 1 3786 53 is_stmt 0 view .LVU1521
 4911 000e 04F13402 		add	r2, r4, #52
3786:Lib/FreeRTOS/Source/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4912              		.loc 1 3786 34 view .LVU1522
 4913 0012 6A60     		str	r2, [r5, #4]
3787:Lib/FreeRTOS/Source/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4914              		.loc 1 3787 41 view .LVU1523
 4915 0014 E26A     		ldr	r2, [r4, #44]
3818:Lib/FreeRTOS/Source/tasks.c ****         {
 4916              		.loc 1 3818 11 view .LVU1524
 4917 0016 052B     		cmp	r3, #5
3787:Lib/FreeRTOS/Source/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4918              		.loc 1 3787 41 view .LVU1525
ARM GAS  /tmp/ccEd3BVV.s 			page 209


 4919 0018 2A61     		str	r2, [r5, #16]
3788:Lib/FreeRTOS/Source/tasks.c ****         #if ( ( portSTACK_GROWTH > 0 ) && ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 4920              		.loc 1 3788 35 view .LVU1526
 4921 001a 226B     		ldr	r2, [r4, #48]
3785:Lib/FreeRTOS/Source/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 4922              		.loc 1 3785 31 view .LVU1527
 4923 001c 2C60     		str	r4, [r5]
3786:Lib/FreeRTOS/Source/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4924              		.loc 1 3786 9 is_stmt 1 view .LVU1528
3787:Lib/FreeRTOS/Source/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4925              		.loc 1 3787 9 view .LVU1529
3788:Lib/FreeRTOS/Source/tasks.c ****         #if ( ( portSTACK_GROWTH > 0 ) && ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 4926              		.loc 1 3788 9 view .LVU1530
3788:Lib/FreeRTOS/Source/tasks.c ****         #if ( ( portSTACK_GROWTH > 0 ) && ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 4927              		.loc 1 3788 35 is_stmt 0 view .LVU1531
 4928 001e EA61     		str	r2, [r5, #28]
3793:Lib/FreeRTOS/Source/tasks.c **** 
 4929              		.loc 1 3793 9 is_stmt 1 view .LVU1532
3793:Lib/FreeRTOS/Source/tasks.c **** 
 4930              		.loc 1 3793 35 is_stmt 0 view .LVU1533
 4931 0020 626C     		ldr	r2, [r4, #68]
 4932 0022 AA60     		str	r2, [r5, #8]
3797:Lib/FreeRTOS/Source/tasks.c ****         }
 4933              		.loc 1 3797 13 is_stmt 1 view .LVU1534
3797:Lib/FreeRTOS/Source/tasks.c ****         }
 4934              		.loc 1 3797 42 is_stmt 0 view .LVU1535
 4935 0024 E26C     		ldr	r2, [r4, #76]
 4936 0026 6A61     		str	r2, [r5, #20]
3807:Lib/FreeRTOS/Source/tasks.c ****         }
 4937              		.loc 1 3807 13 is_stmt 1 view .LVU1536
3807:Lib/FreeRTOS/Source/tasks.c ****         }
 4938              		.loc 1 3807 44 is_stmt 0 view .LVU1537
 4939 0028 626D     		ldr	r2, [r4, #84]
 4940 002a AA61     		str	r2, [r5, #24]
3818:Lib/FreeRTOS/Source/tasks.c ****         {
 4941              		.loc 1 3818 9 is_stmt 1 view .LVU1538
3818:Lib/FreeRTOS/Source/tasks.c ****         {
 4942              		.loc 1 3818 11 is_stmt 0 view .LVU1539
 4943 002c 26D0     		beq	.L364
3820:Lib/FreeRTOS/Source/tasks.c ****             {
 4944              		.loc 1 3820 13 is_stmt 1 view .LVU1540
3820:Lib/FreeRTOS/Source/tasks.c ****             {
 4945              		.loc 1 3820 23 is_stmt 0 view .LVU1541
 4946 002e 174A     		ldr	r2, .L377
 4947 0030 1268     		ldr	r2, [r2]
3820:Lib/FreeRTOS/Source/tasks.c ****             {
 4948              		.loc 1 3820 15 view .LVU1542
 4949 0032 A242     		cmp	r2, r4
 4950 0034 0CD1     		bne	.L365
3822:Lib/FreeRTOS/Source/tasks.c ****             }
 4951              		.loc 1 3822 17 is_stmt 1 view .LVU1543
3822:Lib/FreeRTOS/Source/tasks.c ****             }
 4952              		.loc 1 3822 45 is_stmt 0 view .LVU1544
 4953 0036 0023     		movs	r3, #0
 4954              	.LVL388:
3822:Lib/FreeRTOS/Source/tasks.c ****             }
 4955              		.loc 1 3822 45 view .LVU1545
ARM GAS  /tmp/ccEd3BVV.s 			page 210


 4956 0038 2B73     		strb	r3, [r5, #12]
 4957              	.LVL389:
 4958              	.L366:
3867:Lib/FreeRTOS/Source/tasks.c ****         {
 4959              		.loc 1 3867 9 is_stmt 1 view .LVU1546
 4960 003a 3346     		mov	r3, r6
3867:Lib/FreeRTOS/Source/tasks.c ****         {
 4961              		.loc 1 3867 11 is_stmt 0 view .LVU1547
 4962 003c 36B1     		cbz	r6, .L370
 4963              	.LVL390:
3875:Lib/FreeRTOS/Source/tasks.c ****             }
 4964              		.loc 1 3875 17 is_stmt 1 view .LVU1548
 4965              	.LBB149:
 4966              	.LBB150:
3928:Lib/FreeRTOS/Source/tasks.c **** 
 4967              		.loc 1 3928 18 is_stmt 0 view .LVU1549
 4968 003e 0023     		movs	r3, #0
 4969              	.LVL391:
3928:Lib/FreeRTOS/Source/tasks.c **** 
 4970              		.loc 1 3928 18 view .LVU1550
 4971              	.LBE150:
 4972              	.LBE149:
3875:Lib/FreeRTOS/Source/tasks.c ****             }
 4973              		.loc 1 3875 101 view .LVU1551
 4974 0040 216B     		ldr	r1, [r4, #48]
 4975              	.LVL392:
 4976              	.LBB153:
 4977              	.LBI149:
3926:Lib/FreeRTOS/Source/tasks.c ****     {
 4978              		.loc 1 3926 35 is_stmt 1 view .LVU1552
 4979              	.LBB151:
3928:Lib/FreeRTOS/Source/tasks.c **** 
 4980              		.loc 1 3928 9 view .LVU1553
3930:Lib/FreeRTOS/Source/tasks.c ****         {
 4981              		.loc 1 3930 9 view .LVU1554
 4982              	.L371:
3930:Lib/FreeRTOS/Source/tasks.c ****         {
 4983              		.loc 1 3930 30 view .LVU1555
 4984 0042 CA5C     		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 4985 0044 A52A     		cmp	r2, #165
 4986 0046 1ED0     		beq	.L372
3936:Lib/FreeRTOS/Source/tasks.c **** 
 4987              		.loc 1 3936 9 view .LVU1556
 4988              	.LVL393:
3938:Lib/FreeRTOS/Source/tasks.c ****     }
 4989              		.loc 1 3938 9 view .LVU1557
3938:Lib/FreeRTOS/Source/tasks.c ****     }
 4990              		.loc 1 3938 16 is_stmt 0 view .LVU1558
 4991 0048 C3F38F03 		ubfx	r3, r3, #2, #16
 4992              	.LVL394:
 4993              	.L370:
3938:Lib/FreeRTOS/Source/tasks.c ****     }
 4994              		.loc 1 3938 16 view .LVU1559
 4995              	.LBE151:
 4996              	.LBE153:
3875:Lib/FreeRTOS/Source/tasks.c ****             }
 4997              		.loc 1 3875 52 discriminator 1 view .LVU1560
ARM GAS  /tmp/ccEd3BVV.s 			page 211


 4998 004c 2B84     		strh	r3, [r5, #32]	@ movhi
3883:Lib/FreeRTOS/Source/tasks.c **** 
 4999              		.loc 1 3883 5 view .LVU1561
 5000 004e 70BD     		pop	{r4, r5, r6, pc}
 5001              	.LVL395:
 5002              	.L365:
3826:Lib/FreeRTOS/Source/tasks.c **** 
 5003              		.loc 1 3826 17 is_stmt 1 view .LVU1562
3833:Lib/FreeRTOS/Source/tasks.c ****                     {
 5004              		.loc 1 3833 23 is_stmt 0 view .LVU1563
 5005 0050 032B     		cmp	r3, #3
3826:Lib/FreeRTOS/Source/tasks.c **** 
 5006              		.loc 1 3826 45 view .LVU1564
 5007 0052 2B73     		strb	r3, [r5, #12]
3833:Lib/FreeRTOS/Source/tasks.c ****                     {
 5008              		.loc 1 3833 21 is_stmt 1 view .LVU1565
3833:Lib/FreeRTOS/Source/tasks.c ****                     {
 5009              		.loc 1 3833 23 is_stmt 0 view .LVU1566
 5010 0054 07D1     		bne	.L367
3835:Lib/FreeRTOS/Source/tasks.c ****                         {
 5011              		.loc 1 3835 25 is_stmt 1 view .LVU1567
 5012 0056 FFF7FEFF 		bl	vTaskSuspendAll
 5013              	.LVL396:
3837:Lib/FreeRTOS/Source/tasks.c ****                             {
 5014              		.loc 1 3837 29 view .LVU1568
3837:Lib/FreeRTOS/Source/tasks.c ****                             {
 5015              		.loc 1 3837 31 is_stmt 0 view .LVU1569
 5016 005a A36A     		ldr	r3, [r4, #40]
 5017 005c 0BB1     		cbz	r3, .L368
3839:Lib/FreeRTOS/Source/tasks.c ****                             }
 5018              		.loc 1 3839 33 is_stmt 1 view .LVU1570
3839:Lib/FreeRTOS/Source/tasks.c ****                             }
 5019              		.loc 1 3839 61 is_stmt 0 view .LVU1571
 5020 005e 0223     		movs	r3, #2
 5021 0060 2B73     		strb	r3, [r5, #12]
 5022              	.L368:
3842:Lib/FreeRTOS/Source/tasks.c ****                     }
 5023              		.loc 1 3842 25 is_stmt 1 view .LVU1572
3842:Lib/FreeRTOS/Source/tasks.c ****                     }
 5024              		.loc 1 3842 34 is_stmt 0 view .LVU1573
 5025 0062 FFF7FEFF 		bl	xTaskResumeAll
 5026              	.LVL397:
 5027              	.L367:
3850:Lib/FreeRTOS/Source/tasks.c ****                 {
 5028              		.loc 1 3850 17 is_stmt 1 view .LVU1574
 5029 0066 FFF7FEFF 		bl	vPortEnterCritical
 5030              	.LVL398:
3852:Lib/FreeRTOS/Source/tasks.c ****                     {
 5031              		.loc 1 3852 21 view .LVU1575
3852:Lib/FreeRTOS/Source/tasks.c ****                     {
 5032              		.loc 1 3852 23 is_stmt 0 view .LVU1576
 5033 006a 094B     		ldr	r3, .L377+4
 5034 006c A26A     		ldr	r2, [r4, #40]
 5035 006e 9A42     		cmp	r2, r3
3854:Lib/FreeRTOS/Source/tasks.c ****                     }
 5036              		.loc 1 3854 25 is_stmt 1 view .LVU1577
3854:Lib/FreeRTOS/Source/tasks.c ****                     }
ARM GAS  /tmp/ccEd3BVV.s 			page 212


 5037              		.loc 1 3854 53 is_stmt 0 view .LVU1578
 5038 0070 04BF     		itt	eq
 5039 0072 0123     		moveq	r3, #1
 5040 0074 2B73     		strbeq	r3, [r5, #12]
3857:Lib/FreeRTOS/Source/tasks.c ****             }
 5041              		.loc 1 3857 17 is_stmt 1 view .LVU1579
 5042 0076 FFF7FEFF 		bl	vPortExitCritical
 5043              	.LVL399:
 5044 007a DEE7     		b	.L366
 5045              	.LVL400:
 5046              	.L364:
3862:Lib/FreeRTOS/Source/tasks.c ****         }
 5047              		.loc 1 3862 13 view .LVU1580
3862:Lib/FreeRTOS/Source/tasks.c ****         }
 5048              		.loc 1 3862 43 is_stmt 0 view .LVU1581
 5049 007c 2046     		mov	r0, r4
 5050 007e FFF7FEFF 		bl	eTaskGetState
 5051              	.LVL401:
3862:Lib/FreeRTOS/Source/tasks.c ****         }
 5052              		.loc 1 3862 41 discriminator 1 view .LVU1582
 5053 0082 2873     		strb	r0, [r5, #12]
 5054 0084 D9E7     		b	.L366
 5055              	.LVL402:
 5056              	.L372:
 5057              	.LBB154:
 5058              	.LBB152:
3932:Lib/FreeRTOS/Source/tasks.c ****             ulCount++;
 5059              		.loc 1 3932 13 is_stmt 1 view .LVU1583
3933:Lib/FreeRTOS/Source/tasks.c ****         }
 5060              		.loc 1 3933 13 view .LVU1584
3933:Lib/FreeRTOS/Source/tasks.c ****         }
 5061              		.loc 1 3933 20 is_stmt 0 view .LVU1585
 5062 0086 0133     		adds	r3, r3, #1
 5063              	.LVL403:
3933:Lib/FreeRTOS/Source/tasks.c ****         }
 5064              		.loc 1 3933 20 view .LVU1586
 5065 0088 DBE7     		b	.L371
 5066              	.L378:
 5067 008a 00BF     		.align	2
 5068              	.L377:
 5069 008c 00000000 		.word	pxCurrentTCB
 5070 0090 00000000 		.word	xPendingReadyList
 5071              	.LBE152:
 5072              	.LBE154:
 5073              		.cfi_endproc
 5074              	.LFE42:
 5076              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 5077              		.align	1
 5078              		.syntax unified
 5079              		.thumb
 5080              		.thumb_func
 5082              	prvListTasksWithinSingleList:
 5083              	.LVL404:
 5084              	.LFB43:
3893:Lib/FreeRTOS/Source/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB;
 5085              		.loc 1 3893 5 is_stmt 1 view -0
 5086              		.cfi_startproc
ARM GAS  /tmp/ccEd3BVV.s 			page 213


 5087              		@ args = 0, pretend = 0, frame = 0
 5088              		@ frame_needed = 0, uses_anonymous_args = 0
3894:Lib/FreeRTOS/Source/tasks.c ****         configLIST_VOLATILE TCB_t * pxFirstTCB;
 5089              		.loc 1 3894 29 view .LVU1588
3895:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxTask = 0;
 5090              		.loc 1 3895 29 view .LVU1589
3896:Lib/FreeRTOS/Source/tasks.c **** 
 5091              		.loc 1 3896 9 view .LVU1590
3898:Lib/FreeRTOS/Source/tasks.c ****         {
 5092              		.loc 1 3898 9 view .LVU1591
3893:Lib/FreeRTOS/Source/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB;
 5093              		.loc 1 3893 5 is_stmt 0 view .LVU1592
 5094 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 5095              		.cfi_def_cfa_offset 40
 5096              		.cfi_offset 3, -40
 5097              		.cfi_offset 4, -36
 5098              		.cfi_offset 5, -32
 5099              		.cfi_offset 6, -28
 5100              		.cfi_offset 7, -24
 5101              		.cfi_offset 8, -20
 5102              		.cfi_offset 9, -16
 5103              		.cfi_offset 10, -12
 5104              		.cfi_offset 11, -8
 5105              		.cfi_offset 14, -4
3898:Lib/FreeRTOS/Source/tasks.c ****         {
 5106              		.loc 1 3898 13 view .LVU1593
 5107 0004 0D68     		ldr	r5, [r1]
3893:Lib/FreeRTOS/Source/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB;
 5108              		.loc 1 3893 5 view .LVU1594
 5109 0006 0646     		mov	r6, r0
 5110 0008 0C46     		mov	r4, r1
 5111 000a 1746     		mov	r7, r2
3898:Lib/FreeRTOS/Source/tasks.c ****         {
 5112              		.loc 1 3898 11 view .LVU1595
 5113 000c 25B3     		cbz	r5, .L379
 5114              	.LVL405:
 5115              	.LBB159:
 5116              	.LBI159:
3890:Lib/FreeRTOS/Source/tasks.c ****                                                      List_t * pxList,
 5117              		.loc 1 3890 24 is_stmt 1 view .LVU1596
 5118              	.LBB160:
3900:Lib/FreeRTOS/Source/tasks.c **** 
 5119              		.loc 1 3900 13 view .LVU1597
 5120              	.LBB161:
3900:Lib/FreeRTOS/Source/tasks.c **** 
 5121              		.loc 1 3900 13 view .LVU1598
3900:Lib/FreeRTOS/Source/tasks.c **** 
 5122              		.loc 1 3900 13 view .LVU1599
 5123              	.LBE161:
3896:Lib/FreeRTOS/Source/tasks.c **** 
 5124              		.loc 1 3896 21 is_stmt 0 view .LVU1600
 5125 000e 0025     		movs	r5, #0
3909:Lib/FreeRTOS/Source/tasks.c ****                 uxTask++;
 5126              		.loc 1 3909 17 view .LVU1601
 5127 0010 4FF0240B 		mov	fp, #36
 5128              	.LBB162:
3900:Lib/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccEd3BVV.s 			page 214


 5129              		.loc 1 3900 13 view .LVU1602
 5130 0014 4B68     		ldr	r3, [r1, #4]
 5131 0016 01F10809 		add	r9, r1, #8
 5132 001a 5B68     		ldr	r3, [r3, #4]
 5133 001c 4B45     		cmp	r3, r9
 5134 001e 4B60     		str	r3, [r1, #4]
3900:Lib/FreeRTOS/Source/tasks.c **** 
 5135              		.loc 1 3900 13 is_stmt 1 view .LVU1603
3900:Lib/FreeRTOS/Source/tasks.c **** 
 5136              		.loc 1 3900 13 discriminator 1 view .LVU1604
 5137 0020 04BF     		itt	eq
 5138 0022 CB68     		ldreq	r3, [r1, #12]
 5139 0024 4B60     		streq	r3, [r1, #4]
3900:Lib/FreeRTOS/Source/tasks.c **** 
 5140              		.loc 1 3900 13 discriminator 3 view .LVU1605
 5141 0026 4B68     		ldr	r3, [r1, #4]
 5142 0028 D3F80CA0 		ldr	r10, [r3, #12]
 5143              	.LVL406:
 5144              	.L383:
3900:Lib/FreeRTOS/Source/tasks.c **** 
 5145              		.loc 1 3900 13 is_stmt 0 discriminator 3 view .LVU1606
 5146              	.LBE162:
3900:Lib/FreeRTOS/Source/tasks.c **** 
 5147              		.loc 1 3900 13 is_stmt 1 discriminator 4 view .LVU1607
3906:Lib/FreeRTOS/Source/tasks.c ****             {
 5148              		.loc 1 3906 13 view .LVU1608
3908:Lib/FreeRTOS/Source/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5149              		.loc 1 3908 17 view .LVU1609
 5150              	.LBB163:
3908:Lib/FreeRTOS/Source/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5151              		.loc 1 3908 17 view .LVU1610
3908:Lib/FreeRTOS/Source/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5152              		.loc 1 3908 17 view .LVU1611
 5153 002c 6368     		ldr	r3, [r4, #4]
 5154              	.LBE163:
3909:Lib/FreeRTOS/Source/tasks.c ****                 uxTask++;
 5155              		.loc 1 3909 17 is_stmt 0 view .LVU1612
 5156 002e 0BFB0561 		mla	r1, fp, r5, r6
 5157              	.LBB164:
3908:Lib/FreeRTOS/Source/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5158              		.loc 1 3908 17 view .LVU1613
 5159 0032 5B68     		ldr	r3, [r3, #4]
 5160              	.LBE164:
3909:Lib/FreeRTOS/Source/tasks.c ****                 uxTask++;
 5161              		.loc 1 3909 17 view .LVU1614
 5162 0034 0122     		movs	r2, #1
 5163              	.LBB165:
3908:Lib/FreeRTOS/Source/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5164              		.loc 1 3908 17 view .LVU1615
 5165 0036 9945     		cmp	r9, r3
 5166 0038 6360     		str	r3, [r4, #4]
3908:Lib/FreeRTOS/Source/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5167              		.loc 1 3908 17 is_stmt 1 view .LVU1616
3908:Lib/FreeRTOS/Source/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5168              		.loc 1 3908 17 discriminator 1 view .LVU1617
 5169 003a 08BF     		it	eq
 5170 003c E368     		ldreq	r3, [r4, #12]
ARM GAS  /tmp/ccEd3BVV.s 			page 215


 5171              	.LBE165:
3910:Lib/FreeRTOS/Source/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
 5172              		.loc 1 3910 23 is_stmt 0 view .LVU1618
 5173 003e 05F10105 		add	r5, r5, #1
 5174              	.LVL407:
 5175              	.LBB166:
3908:Lib/FreeRTOS/Source/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5176              		.loc 1 3908 17 discriminator 1 view .LVU1619
 5177 0042 08BF     		it	eq
 5178 0044 6360     		streq	r3, [r4, #4]
3908:Lib/FreeRTOS/Source/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5179              		.loc 1 3908 17 is_stmt 1 discriminator 3 view .LVU1620
 5180 0046 6368     		ldr	r3, [r4, #4]
 5181 0048 D3F80C80 		ldr	r8, [r3, #12]
 5182              	.LVL408:
3908:Lib/FreeRTOS/Source/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5183              		.loc 1 3908 17 is_stmt 0 discriminator 3 view .LVU1621
 5184              	.LBE166:
3908:Lib/FreeRTOS/Source/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5185              		.loc 1 3908 17 is_stmt 1 discriminator 3 view .LVU1622
3909:Lib/FreeRTOS/Source/tasks.c ****                 uxTask++;
 5186              		.loc 1 3909 17 view .LVU1623
 5187 004c 3B46     		mov	r3, r7
 5188 004e 4046     		mov	r0, r8
 5189 0050 FFF7FEFF 		bl	vTaskGetInfo
 5190              	.LVL409:
3910:Lib/FreeRTOS/Source/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
 5191              		.loc 1 3910 17 view .LVU1624
3911:Lib/FreeRTOS/Source/tasks.c ****         }
 5192              		.loc 1 3911 32 view .LVU1625
 5193 0054 C245     		cmp	r10, r8
 5194 0056 E9D1     		bne	.L383
 5195              	.LVL410:
 5196              	.L379:
3911:Lib/FreeRTOS/Source/tasks.c ****         }
 5197              		.loc 1 3911 32 is_stmt 0 view .LVU1626
 5198              	.LBE160:
 5199              	.LBE159:
3919:Lib/FreeRTOS/Source/tasks.c **** 
 5200              		.loc 1 3919 5 view .LVU1627
 5201 0058 2846     		mov	r0, r5
 5202 005a BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
3919:Lib/FreeRTOS/Source/tasks.c **** 
 5203              		.loc 1 3919 5 view .LVU1628
 5204              		.cfi_endproc
 5205              	.LFE43:
 5207              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 5208              		.align	1
 5209              		.global	uxTaskGetSystemState
 5210              		.syntax unified
 5211              		.thumb
 5212              		.thumb_func
 5214              	uxTaskGetSystemState:
 5215              	.LVL411:
 5216              	.LFB23:
2553:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 5217              		.loc 1 2553 5 is_stmt 1 view -0
ARM GAS  /tmp/ccEd3BVV.s 			page 216


 5218              		.cfi_startproc
 5219              		@ args = 0, pretend = 0, frame = 0
 5220              		@ frame_needed = 0, uses_anonymous_args = 0
2554:Lib/FreeRTOS/Source/tasks.c **** 
 5221              		.loc 1 2554 9 view .LVU1630
2556:Lib/FreeRTOS/Source/tasks.c ****         {
 5222              		.loc 1 2556 9 view .LVU1631
2553:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 5223              		.loc 1 2553 5 is_stmt 0 view .LVU1632
 5224 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 5225              		.cfi_def_cfa_offset 32
 5226              		.cfi_offset 4, -32
 5227              		.cfi_offset 5, -28
 5228              		.cfi_offset 6, -24
 5229              		.cfi_offset 7, -20
 5230              		.cfi_offset 8, -16
 5231              		.cfi_offset 9, -12
 5232              		.cfi_offset 10, -8
 5233              		.cfi_offset 14, -4
2553:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 5234              		.loc 1 2553 5 view .LVU1633
 5235 0004 1746     		mov	r7, r2
2556:Lib/FreeRTOS/Source/tasks.c ****         {
 5236              		.loc 1 2556 9 view .LVU1634
 5237 0006 FFF7FEFF 		bl	vTaskSuspendAll
 5238              	.LVL412:
2559:Lib/FreeRTOS/Source/tasks.c ****             {
 5239              		.loc 1 2559 13 is_stmt 1 view .LVU1635
2559:Lib/FreeRTOS/Source/tasks.c ****             {
 5240              		.loc 1 2559 29 is_stmt 0 view .LVU1636
 5241 000a 224B     		ldr	r3, .L395
2553:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 5242              		.loc 1 2553 5 view .LVU1637
 5243 000c 0546     		mov	r5, r0
2559:Lib/FreeRTOS/Source/tasks.c ****             {
 5244              		.loc 1 2559 29 view .LVU1638
 5245 000e 1B68     		ldr	r3, [r3]
2559:Lib/FreeRTOS/Source/tasks.c ****             {
 5246              		.loc 1 2559 15 view .LVU1639
 5247 0010 8B42     		cmp	r3, r1
 5248 0012 3DD8     		bhi	.L393
2554:Lib/FreeRTOS/Source/tasks.c **** 
 5249              		.loc 1 2554 33 view .LVU1640
 5250 0014 4FF03808 		mov	r8, #56
2554:Lib/FreeRTOS/Source/tasks.c **** 
 5251              		.loc 1 2554 21 view .LVU1641
 5252 0018 0024     		movs	r4, #0
2566:Lib/FreeRTOS/Source/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 5253              		.loc 1 2566 31 view .LVU1642
 5254 001a 4FF0140A 		mov	r10, #20
2566:Lib/FreeRTOS/Source/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 5255              		.loc 1 2566 81 view .LVU1643
 5256 001e 2426     		movs	r6, #36
2566:Lib/FreeRTOS/Source/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 5257              		.loc 1 2566 31 view .LVU1644
 5258 0020 DFF88490 		ldr	r9, .L395+20
 5259              	.LVL413:
ARM GAS  /tmp/ccEd3BVV.s 			page 217


 5260              	.L390:
2563:Lib/FreeRTOS/Source/tasks.c ****                 {
 5261              		.loc 1 2563 17 is_stmt 1 view .LVU1645
2565:Lib/FreeRTOS/Source/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
 5262              		.loc 1 2565 21 view .LVU1646
2565:Lib/FreeRTOS/Source/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
 5263              		.loc 1 2565 28 is_stmt 0 view .LVU1647
 5264 0024 08F1FF38 		add	r8, r8, #-1
 5265              	.LVL414:
2566:Lib/FreeRTOS/Source/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 5266              		.loc 1 2566 21 is_stmt 1 view .LVU1648
2566:Lib/FreeRTOS/Source/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 5267              		.loc 1 2566 31 is_stmt 0 view .LVU1649
 5268 0028 06FB0450 		mla	r0, r6, r4, r5
 5269 002c 0122     		movs	r2, #1
 5270 002e 0AFB0891 		mla	r1, r10, r8, r9
 5271 0032 FFF7FEFF 		bl	prvListTasksWithinSingleList
 5272              	.LVL415:
2566:Lib/FreeRTOS/Source/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 5273              		.loc 1 2566 28 discriminator 1 view .LVU1650
 5274 0036 0444     		add	r4, r4, r0
 5275              	.LVL416:
2567:Lib/FreeRTOS/Source/tasks.c **** 
 5276              		.loc 1 2567 34 is_stmt 1 discriminator 1 view .LVU1651
 5277 0038 B8F1000F 		cmp	r8, #0
 5278 003c F2D1     		bne	.L390
2571:Lib/FreeRTOS/Source/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 5279              		.loc 1 2571 17 view .LVU1652
2571:Lib/FreeRTOS/Source/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 5280              		.loc 1 2571 27 is_stmt 0 view .LVU1653
 5281 003e 164B     		ldr	r3, .L395+4
 5282 0040 06FB0450 		mla	r0, r6, r4, r5
 5283 0044 1968     		ldr	r1, [r3]
 5284 0046 0222     		movs	r2, #2
 5285 0048 FFF7FEFF 		bl	prvListTasksWithinSingleList
 5286              	.LVL417:
2572:Lib/FreeRTOS/Source/tasks.c **** 
 5287              		.loc 1 2572 27 view .LVU1654
 5288 004c 134B     		ldr	r3, .L395+8
2571:Lib/FreeRTOS/Source/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 5289              		.loc 1 2571 24 discriminator 1 view .LVU1655
 5290 004e 0444     		add	r4, r4, r0
 5291              	.LVL418:
2572:Lib/FreeRTOS/Source/tasks.c **** 
 5292              		.loc 1 2572 17 is_stmt 1 view .LVU1656
2572:Lib/FreeRTOS/Source/tasks.c **** 
 5293              		.loc 1 2572 27 is_stmt 0 view .LVU1657
 5294 0050 1968     		ldr	r1, [r3]
 5295 0052 06FB0450 		mla	r0, r6, r4, r5
 5296 0056 0222     		movs	r2, #2
 5297 0058 FFF7FEFF 		bl	prvListTasksWithinSingleList
 5298              	.LVL419:
2572:Lib/FreeRTOS/Source/tasks.c **** 
 5299              		.loc 1 2572 24 discriminator 1 view .LVU1658
 5300 005c 0444     		add	r4, r4, r0
 5301              	.LVL420:
2578:Lib/FreeRTOS/Source/tasks.c ****                 }
ARM GAS  /tmp/ccEd3BVV.s 			page 218


 5302              		.loc 1 2578 21 is_stmt 1 view .LVU1659
2578:Lib/FreeRTOS/Source/tasks.c ****                 }
 5303              		.loc 1 2578 31 is_stmt 0 view .LVU1660
 5304 005e 06FB0450 		mla	r0, r6, r4, r5
 5305 0062 0422     		movs	r2, #4
 5306 0064 0E49     		ldr	r1, .L395+12
 5307 0066 FFF7FEFF 		bl	prvListTasksWithinSingleList
 5308              	.LVL421:
2578:Lib/FreeRTOS/Source/tasks.c ****                 }
 5309              		.loc 1 2578 28 discriminator 1 view .LVU1661
 5310 006a 0444     		add	r4, r4, r0
 5311              	.LVL422:
2586:Lib/FreeRTOS/Source/tasks.c ****                 }
 5312              		.loc 1 2586 21 is_stmt 1 view .LVU1662
2586:Lib/FreeRTOS/Source/tasks.c ****                 }
 5313              		.loc 1 2586 31 is_stmt 0 view .LVU1663
 5314 006c 06FB0450 		mla	r0, r6, r4, r5
 5315 0070 0322     		movs	r2, #3
 5316 0072 0C49     		ldr	r1, .L395+16
 5317 0074 FFF7FEFF 		bl	prvListTasksWithinSingleList
 5318              	.LVL423:
 5319 0078 0546     		mov	r5, r0
 5320              	.LVL424:
2592:Lib/FreeRTOS/Source/tasks.c ****                     {
 5321              		.loc 1 2592 21 is_stmt 1 view .LVU1664
2592:Lib/FreeRTOS/Source/tasks.c ****                     {
 5322              		.loc 1 2592 23 is_stmt 0 view .LVU1665
 5323 007a 2FB9     		cbnz	r7, .L391
 5324              	.LVL425:
 5325              	.L392:
2586:Lib/FreeRTOS/Source/tasks.c ****                 }
 5326              		.loc 1 2586 28 discriminator 1 view .LVU1666
 5327 007c 2C44     		add	r4, r4, r5
 5328              	.LVL426:
 5329              	.L389:
2612:Lib/FreeRTOS/Source/tasks.c ****             }
 5330              		.loc 1 2612 41 is_stmt 1 view .LVU1667
2615:Lib/FreeRTOS/Source/tasks.c **** 
 5331              		.loc 1 2615 9 view .LVU1668
2615:Lib/FreeRTOS/Source/tasks.c **** 
 5332              		.loc 1 2615 18 is_stmt 0 view .LVU1669
 5333 007e FFF7FEFF 		bl	xTaskResumeAll
 5334              	.LVL427:
2617:Lib/FreeRTOS/Source/tasks.c ****     }
 5335              		.loc 1 2617 9 is_stmt 1 view .LVU1670
2618:Lib/FreeRTOS/Source/tasks.c **** 
 5336              		.loc 1 2618 5 is_stmt 0 view .LVU1671
 5337 0082 2046     		mov	r0, r4
 5338 0084 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 5339              	.LVL428:
 5340              	.L391:
2597:Lib/FreeRTOS/Source/tasks.c ****                         #endif
 5341              		.loc 1 2597 29 is_stmt 1 view .LVU1672
2597:Lib/FreeRTOS/Source/tasks.c ****                         #endif
 5342              		.loc 1 2597 80 is_stmt 0 view .LVU1673
 5343 0088 FFF7FEFF 		bl	TIM4_Get_Value
 5344              	.LVL429:
ARM GAS  /tmp/ccEd3BVV.s 			page 219


2597:Lib/FreeRTOS/Source/tasks.c ****                         #endif
 5345              		.loc 1 2597 46 discriminator 1 view .LVU1674
 5346 008c 3860     		str	r0, [r7]
 5347 008e F5E7     		b	.L392
 5348              	.LVL430:
 5349              	.L393:
2554:Lib/FreeRTOS/Source/tasks.c **** 
 5350              		.loc 1 2554 21 view .LVU1675
 5351 0090 0024     		movs	r4, #0
 5352 0092 F4E7     		b	.L389
 5353              	.L396:
 5354              		.align	2
 5355              	.L395:
 5356 0094 00000000 		.word	uxCurrentNumberOfTasks
 5357 0098 00000000 		.word	pxDelayedTaskList
 5358 009c 00000000 		.word	pxOverflowDelayedTaskList
 5359 00a0 00000000 		.word	xTasksWaitingTermination
 5360 00a4 00000000 		.word	xSuspendedTaskList
 5361 00a8 00000000 		.word	pxReadyTasksLists
 5362              		.cfi_endproc
 5363              	.LFE23:
 5365              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 5366              		.align	1
 5367              		.global	uxTaskGetStackHighWaterMark
 5368              		.syntax unified
 5369              		.thumb
 5370              		.thumb_func
 5372              	uxTaskGetStackHighWaterMark:
 5373              	.LVL431:
 5374              	.LFB45:
3987:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 5375              		.loc 1 3987 5 is_stmt 1 view -0
 5376              		.cfi_startproc
 5377              		@ args = 0, pretend = 0, frame = 0
 5378              		@ frame_needed = 0, uses_anonymous_args = 0
 5379              		@ link register save eliminated.
3988:Lib/FreeRTOS/Source/tasks.c ****         uint8_t * pucEndOfStack;
 5380              		.loc 1 3988 9 view .LVU1677
3989:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxReturn;
 5381              		.loc 1 3989 9 view .LVU1678
3990:Lib/FreeRTOS/Source/tasks.c **** 
 5382              		.loc 1 3990 9 view .LVU1679
3992:Lib/FreeRTOS/Source/tasks.c **** 
 5383              		.loc 1 3992 9 view .LVU1680
3992:Lib/FreeRTOS/Source/tasks.c **** 
 5384              		.loc 1 3992 17 is_stmt 0 view .LVU1681
 5385 0000 08B9     		cbnz	r0, .L398
3992:Lib/FreeRTOS/Source/tasks.c **** 
 5386              		.loc 1 3992 17 discriminator 1 view .LVU1682
 5387 0002 064B     		ldr	r3, .L401
 5388 0004 1868     		ldr	r0, [r3]
 5389              	.LVL432:
 5390              	.L398:
3996:Lib/FreeRTOS/Source/tasks.c ****         }
 5391              		.loc 1 3996 13 is_stmt 1 view .LVU1683
3996:Lib/FreeRTOS/Source/tasks.c ****         }
 5392              		.loc 1 3996 27 is_stmt 0 view .LVU1684
ARM GAS  /tmp/ccEd3BVV.s 			page 220


 5393 0006 026B     		ldr	r2, [r0, #48]
 5394              	.LVL433:
4004:Lib/FreeRTOS/Source/tasks.c **** 
 5395              		.loc 1 4004 9 is_stmt 1 view .LVU1685
 5396              	.LBB169:
 5397              	.LBI169:
3926:Lib/FreeRTOS/Source/tasks.c ****     {
 5398              		.loc 1 3926 35 view .LVU1686
 5399              	.LBB170:
3928:Lib/FreeRTOS/Source/tasks.c **** 
 5400              		.loc 1 3928 9 view .LVU1687
3930:Lib/FreeRTOS/Source/tasks.c ****         {
 5401              		.loc 1 3930 9 view .LVU1688
3928:Lib/FreeRTOS/Source/tasks.c **** 
 5402              		.loc 1 3928 18 is_stmt 0 view .LVU1689
 5403 0008 0020     		movs	r0, #0
 5404              	.LVL434:
 5405              	.L399:
3930:Lib/FreeRTOS/Source/tasks.c ****         {
 5406              		.loc 1 3930 30 is_stmt 1 view .LVU1690
 5407 000a 135C     		ldrb	r3, [r2, r0]	@ zero_extendqisi2
 5408 000c A52B     		cmp	r3, #165
 5409 000e 02D0     		beq	.L400
3936:Lib/FreeRTOS/Source/tasks.c **** 
 5410              		.loc 1 3936 9 view .LVU1691
 5411              	.LVL435:
3938:Lib/FreeRTOS/Source/tasks.c ****     }
 5412              		.loc 1 3938 9 view .LVU1692
3938:Lib/FreeRTOS/Source/tasks.c ****     }
 5413              		.loc 1 3938 9 is_stmt 0 view .LVU1693
 5414              	.LBE170:
 5415              	.LBE169:
4006:Lib/FreeRTOS/Source/tasks.c ****     }
 5416              		.loc 1 4006 9 is_stmt 1 view .LVU1694
4007:Lib/FreeRTOS/Source/tasks.c **** 
 5417              		.loc 1 4007 5 is_stmt 0 view .LVU1695
 5418 0010 C0F38F00 		ubfx	r0, r0, #2, #16
 5419              	.LVL436:
4007:Lib/FreeRTOS/Source/tasks.c **** 
 5420              		.loc 1 4007 5 view .LVU1696
 5421 0014 7047     		bx	lr
 5422              	.LVL437:
 5423              	.L400:
 5424              	.LBB172:
 5425              	.LBB171:
3932:Lib/FreeRTOS/Source/tasks.c ****             ulCount++;
 5426              		.loc 1 3932 13 is_stmt 1 view .LVU1697
3933:Lib/FreeRTOS/Source/tasks.c ****         }
 5427              		.loc 1 3933 13 view .LVU1698
3933:Lib/FreeRTOS/Source/tasks.c ****         }
 5428              		.loc 1 3933 20 is_stmt 0 view .LVU1699
 5429 0016 0130     		adds	r0, r0, #1
 5430              	.LVL438:
3933:Lib/FreeRTOS/Source/tasks.c ****         }
 5431              		.loc 1 3933 20 view .LVU1700
 5432 0018 F7E7     		b	.L399
 5433              	.L402:
ARM GAS  /tmp/ccEd3BVV.s 			page 221


 5434 001a 00BF     		.align	2
 5435              	.L401:
 5436 001c 00000000 		.word	pxCurrentTCB
 5437              	.LBE171:
 5438              	.LBE172:
 5439              		.cfi_endproc
 5440              	.LFE45:
 5442              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 5443              		.align	1
 5444              		.global	xTaskGetCurrentTaskHandle
 5445              		.syntax unified
 5446              		.thumb
 5447              		.thumb_func
 5449              	xTaskGetCurrentTaskHandle:
 5450              	.LFB48:
4091:Lib/FreeRTOS/Source/tasks.c ****         TaskHandle_t xReturn;
 5451              		.loc 1 4091 5 is_stmt 1 view -0
 5452              		.cfi_startproc
 5453              		@ args = 0, pretend = 0, frame = 0
 5454              		@ frame_needed = 0, uses_anonymous_args = 0
 5455              		@ link register save eliminated.
4092:Lib/FreeRTOS/Source/tasks.c **** 
 5456              		.loc 1 4092 9 view .LVU1702
4097:Lib/FreeRTOS/Source/tasks.c **** 
 5457              		.loc 1 4097 9 view .LVU1703
4097:Lib/FreeRTOS/Source/tasks.c **** 
 5458              		.loc 1 4097 17 is_stmt 0 view .LVU1704
 5459 0000 014B     		ldr	r3, .L404
 5460 0002 1868     		ldr	r0, [r3]
 5461              	.LVL439:
4099:Lib/FreeRTOS/Source/tasks.c ****     }
 5462              		.loc 1 4099 9 is_stmt 1 view .LVU1705
4100:Lib/FreeRTOS/Source/tasks.c **** 
 5463              		.loc 1 4100 5 is_stmt 0 view .LVU1706
 5464 0004 7047     		bx	lr
 5465              	.L405:
 5466 0006 00BF     		.align	2
 5467              	.L404:
 5468 0008 00000000 		.word	pxCurrentTCB
 5469              		.cfi_endproc
 5470              	.LFE48:
 5472              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 5473              		.align	1
 5474              		.global	xTaskGetSchedulerState
 5475              		.syntax unified
 5476              		.thumb
 5477              		.thumb_func
 5479              	xTaskGetSchedulerState:
 5480              	.LFB49:
4108:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
 5481              		.loc 1 4108 5 is_stmt 1 view -0
 5482              		.cfi_startproc
 5483              		@ args = 0, pretend = 0, frame = 0
 5484              		@ frame_needed = 0, uses_anonymous_args = 0
 5485              		@ link register save eliminated.
4109:Lib/FreeRTOS/Source/tasks.c **** 
 5486              		.loc 1 4109 9 view .LVU1708
ARM GAS  /tmp/ccEd3BVV.s 			page 222


4111:Lib/FreeRTOS/Source/tasks.c ****         {
 5487              		.loc 1 4111 9 view .LVU1709
4111:Lib/FreeRTOS/Source/tasks.c ****         {
 5488              		.loc 1 4111 31 is_stmt 0 view .LVU1710
 5489 0000 054B     		ldr	r3, .L409
 5490 0002 1B68     		ldr	r3, [r3]
4111:Lib/FreeRTOS/Source/tasks.c ****         {
 5491              		.loc 1 4111 11 view .LVU1711
 5492 0004 33B1     		cbz	r3, .L408
4117:Lib/FreeRTOS/Source/tasks.c ****             {
 5493              		.loc 1 4117 13 is_stmt 1 view .LVU1712
4117:Lib/FreeRTOS/Source/tasks.c ****             {
 5494              		.loc 1 4117 38 is_stmt 0 view .LVU1713
 5495 0006 054B     		ldr	r3, .L409+4
 5496 0008 1868     		ldr	r0, [r3]
4117:Lib/FreeRTOS/Source/tasks.c ****             {
 5497              		.loc 1 4117 15 view .LVU1714
 5498 000a B0FA80F0 		clz	r0, r0
 5499 000e 4009     		lsrs	r0, r0, #5
 5500 0010 4000     		lsls	r0, r0, #1
 5501 0012 7047     		bx	lr
 5502              	.L408:
4113:Lib/FreeRTOS/Source/tasks.c ****         }
 5503              		.loc 1 4113 21 view .LVU1715
 5504 0014 0120     		movs	r0, #1
 5505              	.LVL440:
4127:Lib/FreeRTOS/Source/tasks.c ****     }
 5506              		.loc 1 4127 9 is_stmt 1 view .LVU1716
4128:Lib/FreeRTOS/Source/tasks.c **** 
 5507              		.loc 1 4128 5 is_stmt 0 view .LVU1717
 5508 0016 7047     		bx	lr
 5509              	.L410:
 5510              		.align	2
 5511              	.L409:
 5512 0018 00000000 		.word	xSchedulerRunning
 5513 001c 00000000 		.word	uxSchedulerSuspended
 5514              		.cfi_endproc
 5515              	.LFE49:
 5517              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 5518              		.align	1
 5519              		.global	xTaskPriorityInherit
 5520              		.syntax unified
 5521              		.thumb
 5522              		.thumb_func
 5524              	xTaskPriorityInherit:
 5525              	.LVL441:
 5526              	.LFB50:
4136:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 5527              		.loc 1 4136 5 is_stmt 1 view -0
 5528              		.cfi_startproc
 5529              		@ args = 0, pretend = 0, frame = 0
 5530              		@ frame_needed = 0, uses_anonymous_args = 0
4137:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn = pdFALSE;
 5531              		.loc 1 4137 9 view .LVU1719
4138:Lib/FreeRTOS/Source/tasks.c **** 
 5532              		.loc 1 4138 9 view .LVU1720
4143:Lib/FreeRTOS/Source/tasks.c ****         {
ARM GAS  /tmp/ccEd3BVV.s 			page 223


 5533              		.loc 1 4143 9 view .LVU1721
4136:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 5534              		.loc 1 4136 5 is_stmt 0 view .LVU1722
 5535 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5536              		.cfi_def_cfa_offset 24
 5537              		.cfi_offset 3, -24
 5538              		.cfi_offset 4, -20
 5539              		.cfi_offset 5, -16
 5540              		.cfi_offset 6, -12
 5541              		.cfi_offset 7, -8
 5542              		.cfi_offset 14, -4
4143:Lib/FreeRTOS/Source/tasks.c ****         {
 5543              		.loc 1 4143 11 view .LVU1723
 5544 0002 0446     		mov	r4, r0
 5545 0004 0028     		cmp	r0, #0
 5546 0006 2ED0     		beq	.L411
4148:Lib/FreeRTOS/Source/tasks.c ****             {
 5547              		.loc 1 4148 13 is_stmt 1 view .LVU1724
4148:Lib/FreeRTOS/Source/tasks.c ****             {
 5548              		.loc 1 4148 60 is_stmt 0 view .LVU1725
 5549 0008 1D4D     		ldr	r5, .L419
4148:Lib/FreeRTOS/Source/tasks.c ****             {
 5550              		.loc 1 4148 33 view .LVU1726
 5551 000a C36A     		ldr	r3, [r0, #44]
4148:Lib/FreeRTOS/Source/tasks.c ****             {
 5552              		.loc 1 4148 60 view .LVU1727
 5553 000c 2A68     		ldr	r2, [r5]
4148:Lib/FreeRTOS/Source/tasks.c ****             {
 5554              		.loc 1 4148 15 view .LVU1728
 5555 000e D26A     		ldr	r2, [r2, #44]
 5556 0010 9342     		cmp	r3, r2
 5557 0012 2DD2     		bcs	.L413
4153:Lib/FreeRTOS/Source/tasks.c ****                 {
 5558              		.loc 1 4153 17 is_stmt 1 view .LVU1729
4153:Lib/FreeRTOS/Source/tasks.c ****                 {
 5559              		.loc 1 4153 19 is_stmt 0 view .LVU1730
 5560 0014 8269     		ldr	r2, [r0, #24]
4164:Lib/FreeRTOS/Source/tasks.c ****                 {
 5561              		.loc 1 4164 21 view .LVU1731
 5562 0016 1B4E     		ldr	r6, .L419+4
4153:Lib/FreeRTOS/Source/tasks.c ****                 {
 5563              		.loc 1 4153 19 view .LVU1732
 5564 0018 002A     		cmp	r2, #0
4155:Lib/FreeRTOS/Source/tasks.c ****                 }
 5565              		.loc 1 4155 21 is_stmt 1 view .LVU1733
 5566 001a A1BF     		itttt	ge
 5567 001c 2A68     		ldrge	r2, [r5]
 5568 001e D26A     		ldrge	r2, [r2, #44]
 5569 0020 C2F13802 		rsbge	r2, r2, #56
 5570 0024 8261     		strge	r2, [r0, #24]
4159:Lib/FreeRTOS/Source/tasks.c ****                 }
 5571              		.loc 1 4159 45 view .LVU1734
4164:Lib/FreeRTOS/Source/tasks.c ****                 {
 5572              		.loc 1 4164 17 view .LVU1735
4164:Lib/FreeRTOS/Source/tasks.c ****                 {
 5573              		.loc 1 4164 21 is_stmt 0 view .LVU1736
 5574 0026 1422     		movs	r2, #20
ARM GAS  /tmp/ccEd3BVV.s 			page 224


 5575 0028 02FB0363 		mla	r3, r2, r3, r6
4164:Lib/FreeRTOS/Source/tasks.c ****                 {
 5576              		.loc 1 4164 19 view .LVU1737
 5577 002c 4269     		ldr	r2, [r0, #20]
 5578 002e 9A42     		cmp	r2, r3
 5579 0030 1AD1     		bne	.L415
4166:Lib/FreeRTOS/Source/tasks.c ****                     {
 5580              		.loc 1 4166 21 is_stmt 1 view .LVU1738
4166:Lib/FreeRTOS/Source/tasks.c ****                     {
 5581              		.loc 1 4166 25 is_stmt 0 view .LVU1739
 5582 0032 071D     		adds	r7, r0, #4
 5583 0034 3846     		mov	r0, r7
 5584              	.LVL442:
4166:Lib/FreeRTOS/Source/tasks.c ****                     {
 5585              		.loc 1 4166 25 view .LVU1740
 5586 0036 FFF7FEFF 		bl	uxListRemove
 5587              	.LVL443:
4171:Lib/FreeRTOS/Source/tasks.c ****                     }
 5588              		.loc 1 4171 101 is_stmt 1 view .LVU1741
4175:Lib/FreeRTOS/Source/tasks.c ****                     }
 5589              		.loc 1 4175 49 view .LVU1742
4179:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 5590              		.loc 1 4179 21 view .LVU1743
4179:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 5591              		.loc 1 4179 64 is_stmt 0 view .LVU1744
 5592 003a 2B68     		ldr	r3, [r5]
4180:Lib/FreeRTOS/Source/tasks.c ****                 }
 5593              		.loc 1 4180 21 view .LVU1745
 5594 003c 124A     		ldr	r2, .L419+8
4179:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 5595              		.loc 1 4179 64 view .LVU1746
 5596 003e DB6A     		ldr	r3, [r3, #44]
4180:Lib/FreeRTOS/Source/tasks.c ****                 }
 5597              		.loc 1 4180 21 view .LVU1747
 5598 0040 1168     		ldr	r1, [r2]
4179:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 5599              		.loc 1 4179 50 view .LVU1748
 5600 0042 E362     		str	r3, [r4, #44]
4180:Lib/FreeRTOS/Source/tasks.c ****                 }
 5601              		.loc 1 4180 21 is_stmt 1 view .LVU1749
4180:Lib/FreeRTOS/Source/tasks.c ****                 }
 5602              		.loc 1 4180 21 view .LVU1750
4180:Lib/FreeRTOS/Source/tasks.c ****                 }
 5603              		.loc 1 4180 21 view .LVU1751
4180:Lib/FreeRTOS/Source/tasks.c ****                 }
 5604              		.loc 1 4180 21 view .LVU1752
 5605 0044 8B42     		cmp	r3, r1
4180:Lib/FreeRTOS/Source/tasks.c ****                 }
 5606              		.loc 1 4180 21 discriminator 1 view .LVU1753
 5607 0046 88BF     		it	hi
 5608 0048 1360     		strhi	r3, [r2]
4180:Lib/FreeRTOS/Source/tasks.c ****                 }
 5609              		.loc 1 4180 21 discriminator 3 view .LVU1754
4180:Lib/FreeRTOS/Source/tasks.c ****                 }
 5610              		.loc 1 4180 21 discriminator 3 view .LVU1755
 5611              	.LBB173:
4180:Lib/FreeRTOS/Source/tasks.c ****                 }
ARM GAS  /tmp/ccEd3BVV.s 			page 225


 5612              		.loc 1 4180 21 discriminator 3 view .LVU1756
 5613 004a 1422     		movs	r2, #20
 5614 004c 5343     		muls	r3, r2, r3
 5615 004e F118     		adds	r1, r6, r3
 5616 0050 4A68     		ldr	r2, [r1, #4]
 5617              	.LVL444:
4180:Lib/FreeRTOS/Source/tasks.c ****                 }
 5618              		.loc 1 4180 21 discriminator 3 view .LVU1757
4180:Lib/FreeRTOS/Source/tasks.c ****                 }
 5619              		.loc 1 4180 21 discriminator 3 view .LVU1758
4180:Lib/FreeRTOS/Source/tasks.c ****                 }
 5620              		.loc 1 4180 21 discriminator 3 view .LVU1759
 5621 0052 9068     		ldr	r0, [r2, #8]
 5622 0054 A260     		str	r2, [r4, #8]
4180:Lib/FreeRTOS/Source/tasks.c ****                 }
 5623              		.loc 1 4180 21 discriminator 3 view .LVU1760
 5624 0056 E060     		str	r0, [r4, #12]
4180:Lib/FreeRTOS/Source/tasks.c ****                 }
 5625              		.loc 1 4180 21 discriminator 3 view .LVU1761
 5626 0058 4760     		str	r7, [r0, #4]
4180:Lib/FreeRTOS/Source/tasks.c ****                 }
 5627              		.loc 1 4180 21 discriminator 3 view .LVU1762
 5628 005a 9760     		str	r7, [r2, #8]
4180:Lib/FreeRTOS/Source/tasks.c ****                 }
 5629              		.loc 1 4180 21 discriminator 3 view .LVU1763
 5630 005c F258     		ldr	r2, [r6, r3]
 5631              	.LVL445:
4180:Lib/FreeRTOS/Source/tasks.c ****                 }
 5632              		.loc 1 4180 21 is_stmt 0 discriminator 3 view .LVU1764
 5633 005e 6161     		str	r1, [r4, #20]
4180:Lib/FreeRTOS/Source/tasks.c ****                 }
 5634              		.loc 1 4180 21 is_stmt 1 discriminator 3 view .LVU1765
 5635 0060 0132     		adds	r2, r2, #1
 5636 0062 F250     		str	r2, [r6, r3]
 5637              	.LBE173:
4180:Lib/FreeRTOS/Source/tasks.c ****                 }
 5638              		.loc 1 4180 21 discriminator 3 view .LVU1766
4180:Lib/FreeRTOS/Source/tasks.c ****                 }
 5639              		.loc 1 4180 21 discriminator 3 view .LVU1767
4180:Lib/FreeRTOS/Source/tasks.c ****                 }
 5640              		.loc 1 4180 21 discriminator 3 view .LVU1768
 5641              	.LVL446:
 5642              	.L417:
4191:Lib/FreeRTOS/Source/tasks.c ****             }
 5643              		.loc 1 4191 25 is_stmt 0 view .LVU1769
 5644 0064 0120     		movs	r0, #1
 5645              	.L411:
4218:Lib/FreeRTOS/Source/tasks.c **** 
 5646              		.loc 1 4218 5 view .LVU1770
 5647 0066 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5648              	.LVL447:
 5649              	.L415:
4185:Lib/FreeRTOS/Source/tasks.c ****                 }
 5650              		.loc 1 4185 21 is_stmt 1 view .LVU1771
4185:Lib/FreeRTOS/Source/tasks.c ****                 }
 5651              		.loc 1 4185 64 is_stmt 0 view .LVU1772
 5652 0068 2B68     		ldr	r3, [r5]
ARM GAS  /tmp/ccEd3BVV.s 			page 226


 5653 006a DB6A     		ldr	r3, [r3, #44]
4185:Lib/FreeRTOS/Source/tasks.c ****                 }
 5654              		.loc 1 4185 50 view .LVU1773
 5655 006c C362     		str	r3, [r0, #44]
 5656 006e F9E7     		b	.L417
 5657              	.L413:
4195:Lib/FreeRTOS/Source/tasks.c ****                 {
 5658              		.loc 1 4195 17 is_stmt 1 view .LVU1774
4195:Lib/FreeRTOS/Source/tasks.c ****                 {
 5659              		.loc 1 4195 68 is_stmt 0 view .LVU1775
 5660 0070 2B68     		ldr	r3, [r5]
4195:Lib/FreeRTOS/Source/tasks.c ****                 {
 5661              		.loc 1 4195 19 view .LVU1776
 5662 0072 C06C     		ldr	r0, [r0, #76]
 5663              	.LVL448:
4195:Lib/FreeRTOS/Source/tasks.c ****                 {
 5664              		.loc 1 4195 19 view .LVU1777
 5665 0074 DB6A     		ldr	r3, [r3, #44]
 5666 0076 9842     		cmp	r0, r3
 5667 0078 2CBF     		ite	cs
 5668 007a 0020     		movcs	r0, #0
 5669 007c 0120     		movcc	r0, #1
 5670 007e F2E7     		b	.L411
 5671              	.L420:
 5672              		.align	2
 5673              	.L419:
 5674 0080 00000000 		.word	pxCurrentTCB
 5675 0084 00000000 		.word	pxReadyTasksLists
 5676 0088 00000000 		.word	uxTopReadyPriority
 5677              		.cfi_endproc
 5678              	.LFE50:
 5680              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 5681              		.align	1
 5682              		.global	xTaskPriorityDisinherit
 5683              		.syntax unified
 5684              		.thumb
 5685              		.thumb_func
 5687              	xTaskPriorityDisinherit:
 5688              	.LVL449:
 5689              	.LFB51:
4226:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 5690              		.loc 1 4226 5 is_stmt 1 view -0
 5691              		.cfi_startproc
 5692              		@ args = 0, pretend = 0, frame = 0
 5693              		@ frame_needed = 0, uses_anonymous_args = 0
4227:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn = pdFALSE;
 5694              		.loc 1 4227 9 view .LVU1779
4228:Lib/FreeRTOS/Source/tasks.c **** 
 5695              		.loc 1 4228 9 view .LVU1780
4230:Lib/FreeRTOS/Source/tasks.c ****         {
 5696              		.loc 1 4230 9 view .LVU1781
4226:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 5697              		.loc 1 4226 5 is_stmt 0 view .LVU1782
 5698 0000 70B5     		push	{r4, r5, r6, lr}
 5699              		.cfi_def_cfa_offset 16
 5700              		.cfi_offset 4, -16
 5701              		.cfi_offset 5, -12
ARM GAS  /tmp/ccEd3BVV.s 			page 227


 5702              		.cfi_offset 6, -8
 5703              		.cfi_offset 14, -4
4230:Lib/FreeRTOS/Source/tasks.c ****         {
 5704              		.loc 1 4230 11 view .LVU1783
 5705 0002 0446     		mov	r4, r0
 5706 0004 08B9     		cbnz	r0, .L422
 5707              	.L426:
4228:Lib/FreeRTOS/Source/tasks.c **** 
 5708              		.loc 1 4228 20 view .LVU1784
 5709 0006 0020     		movs	r0, #0
 5710              	.LVL450:
 5711              	.L421:
4298:Lib/FreeRTOS/Source/tasks.c **** 
 5712              		.loc 1 4298 5 view .LVU1785
 5713 0008 70BD     		pop	{r4, r5, r6, pc}
 5714              	.LVL451:
 5715              	.L422:
4236:Lib/FreeRTOS/Source/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 5716              		.loc 1 4236 13 is_stmt 1 view .LVU1786
 5717 000a 1E4B     		ldr	r3, .L429
 5718 000c 1B68     		ldr	r3, [r3]
 5719 000e 8342     		cmp	r3, r0
 5720 0010 08D0     		beq	.L424
4236:Lib/FreeRTOS/Source/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 5721              		.loc 1 4236 13 discriminator 1 view .LVU1787
 5722 0012 FFF7FEFF 		bl	ulSetInterruptMask
 5723              	.LVL452:
4236:Lib/FreeRTOS/Source/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 5724              		.loc 1 4236 13 discriminator 1 view .LVU1788
 5725 0016 41F28C01 		movw	r1, #4236
 5726 001a 1B4B     		ldr	r3, .L429+4
 5727 001c 1B4A     		ldr	r2, .L429+8
 5728              	.L428:
4237:Lib/FreeRTOS/Source/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 5729              		.loc 1 4237 13 is_stmt 0 discriminator 1 view .LVU1789
 5730 001e 1C48     		ldr	r0, .L429+12
 5731 0020 FFF7FEFF 		bl	__assert_func
 5732              	.LVL453:
 5733              	.L424:
4236:Lib/FreeRTOS/Source/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 5734              		.loc 1 4236 50 is_stmt 1 discriminator 2 view .LVU1790
4237:Lib/FreeRTOS/Source/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 5735              		.loc 1 4237 13 view .LVU1791
 5736 0024 1B6D     		ldr	r3, [r3, #80]
 5737 0026 33B9     		cbnz	r3, .L425
4237:Lib/FreeRTOS/Source/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 5738              		.loc 1 4237 13 discriminator 1 view .LVU1792
 5739 0028 FFF7FEFF 		bl	ulSetInterruptMask
 5740              	.LVL454:
4237:Lib/FreeRTOS/Source/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 5741              		.loc 1 4237 13 discriminator 1 view .LVU1793
 5742 002c 41F28D01 		movw	r1, #4237
 5743 0030 154B     		ldr	r3, .L429+4
 5744 0032 164A     		ldr	r2, .L429+8
 5745 0034 F3E7     		b	.L428
 5746              	.LVL455:
 5747              	.L425:
ARM GAS  /tmp/ccEd3BVV.s 			page 228


4237:Lib/FreeRTOS/Source/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 5748              		.loc 1 4237 49 discriminator 2 view .LVU1794
4238:Lib/FreeRTOS/Source/tasks.c **** 
 5749              		.loc 1 4238 13 view .LVU1795
4242:Lib/FreeRTOS/Source/tasks.c ****             {
 5750              		.loc 1 4242 15 is_stmt 0 view .LVU1796
 5751 0036 C16A     		ldr	r1, [r0, #44]
 5752 0038 C26C     		ldr	r2, [r0, #76]
4238:Lib/FreeRTOS/Source/tasks.c **** 
 5753              		.loc 1 4238 37 view .LVU1797
 5754 003a 013B     		subs	r3, r3, #1
4242:Lib/FreeRTOS/Source/tasks.c ****             {
 5755              		.loc 1 4242 15 view .LVU1798
 5756 003c 9142     		cmp	r1, r2
4238:Lib/FreeRTOS/Source/tasks.c **** 
 5757              		.loc 1 4238 37 view .LVU1799
 5758 003e 0365     		str	r3, [r0, #80]
4242:Lib/FreeRTOS/Source/tasks.c ****             {
 5759              		.loc 1 4242 13 is_stmt 1 view .LVU1800
4242:Lib/FreeRTOS/Source/tasks.c ****             {
 5760              		.loc 1 4242 15 is_stmt 0 view .LVU1801
 5761 0040 E1D0     		beq	.L426
4245:Lib/FreeRTOS/Source/tasks.c ****                 {
 5762              		.loc 1 4245 17 is_stmt 1 view .LVU1802
4245:Lib/FreeRTOS/Source/tasks.c ****                 {
 5763              		.loc 1 4245 19 is_stmt 0 view .LVU1803
 5764 0042 002B     		cmp	r3, #0
 5765 0044 DFD1     		bne	.L426
4252:Lib/FreeRTOS/Source/tasks.c ****                     {
 5766              		.loc 1 4252 21 is_stmt 1 view .LVU1804
4252:Lib/FreeRTOS/Source/tasks.c ****                     {
 5767              		.loc 1 4252 25 is_stmt 0 view .LVU1805
 5768 0046 051D     		adds	r5, r0, #4
 5769 0048 2846     		mov	r0, r5
 5770              	.LVL456:
4252:Lib/FreeRTOS/Source/tasks.c ****                     {
 5771              		.loc 1 4252 25 view .LVU1806
 5772 004a FFF7FEFF 		bl	uxListRemove
 5773              	.LVL457:
4254:Lib/FreeRTOS/Source/tasks.c ****                     }
 5774              		.loc 1 4254 90 is_stmt 1 view .LVU1807
4258:Lib/FreeRTOS/Source/tasks.c ****                     }
 5775              		.loc 1 4258 49 view .LVU1808
4263:Lib/FreeRTOS/Source/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
 5776              		.loc 1 4263 82 view .LVU1809
4264:Lib/FreeRTOS/Source/tasks.c **** 
 5777              		.loc 1 4264 21 view .LVU1810
4264:Lib/FreeRTOS/Source/tasks.c **** 
 5778              		.loc 1 4264 46 is_stmt 0 view .LVU1811
 5779 004e E36C     		ldr	r3, [r4, #76]
4269:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 5780              		.loc 1 4269 21 view .LVU1812
 5781 0050 C3F13802 		rsb	r2, r3, #56
 5782 0054 A261     		str	r2, [r4, #24]
4270:Lib/FreeRTOS/Source/tasks.c **** 
 5783              		.loc 1 4270 21 view .LVU1813
 5784 0056 0F4A     		ldr	r2, .L429+16
ARM GAS  /tmp/ccEd3BVV.s 			page 229


4264:Lib/FreeRTOS/Source/tasks.c **** 
 5785              		.loc 1 4264 39 view .LVU1814
 5786 0058 E362     		str	r3, [r4, #44]
4269:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 5787              		.loc 1 4269 21 is_stmt 1 view .LVU1815
4270:Lib/FreeRTOS/Source/tasks.c **** 
 5788              		.loc 1 4270 21 view .LVU1816
4270:Lib/FreeRTOS/Source/tasks.c **** 
 5789              		.loc 1 4270 21 view .LVU1817
4270:Lib/FreeRTOS/Source/tasks.c **** 
 5790              		.loc 1 4270 21 view .LVU1818
4270:Lib/FreeRTOS/Source/tasks.c **** 
 5791              		.loc 1 4270 21 view .LVU1819
 5792 005a 1168     		ldr	r1, [r2]
 5793 005c 8B42     		cmp	r3, r1
4270:Lib/FreeRTOS/Source/tasks.c **** 
 5794              		.loc 1 4270 21 discriminator 1 view .LVU1820
 5795              	.LBB174:
4270:Lib/FreeRTOS/Source/tasks.c **** 
 5796              		.loc 1 4270 21 is_stmt 0 discriminator 3 view .LVU1821
 5797 005e 4FF01401 		mov	r1, #20
 5798              	.LBE174:
4270:Lib/FreeRTOS/Source/tasks.c **** 
 5799              		.loc 1 4270 21 discriminator 1 view .LVU1822
 5800 0062 88BF     		it	hi
 5801 0064 1360     		strhi	r3, [r2]
4270:Lib/FreeRTOS/Source/tasks.c **** 
 5802              		.loc 1 4270 21 is_stmt 1 discriminator 3 view .LVU1823
4270:Lib/FreeRTOS/Source/tasks.c **** 
 5803              		.loc 1 4270 21 discriminator 3 view .LVU1824
 5804              	.LBB175:
4270:Lib/FreeRTOS/Source/tasks.c **** 
 5805              		.loc 1 4270 21 discriminator 3 view .LVU1825
 5806 0066 4B43     		muls	r3, r1, r3
 5807 0068 0B4A     		ldr	r2, .L429+20
 5808 006a D018     		adds	r0, r2, r3
 5809 006c 4168     		ldr	r1, [r0, #4]
 5810              	.LVL458:
4270:Lib/FreeRTOS/Source/tasks.c **** 
 5811              		.loc 1 4270 21 discriminator 3 view .LVU1826
4270:Lib/FreeRTOS/Source/tasks.c **** 
 5812              		.loc 1 4270 21 discriminator 3 view .LVU1827
4270:Lib/FreeRTOS/Source/tasks.c **** 
 5813              		.loc 1 4270 21 discriminator 3 view .LVU1828
 5814 006e 8E68     		ldr	r6, [r1, #8]
 5815 0070 A160     		str	r1, [r4, #8]
4270:Lib/FreeRTOS/Source/tasks.c **** 
 5816              		.loc 1 4270 21 discriminator 3 view .LVU1829
 5817 0072 E660     		str	r6, [r4, #12]
4270:Lib/FreeRTOS/Source/tasks.c **** 
 5818              		.loc 1 4270 21 discriminator 3 view .LVU1830
 5819 0074 7560     		str	r5, [r6, #4]
4270:Lib/FreeRTOS/Source/tasks.c **** 
 5820              		.loc 1 4270 21 discriminator 3 view .LVU1831
 5821 0076 8D60     		str	r5, [r1, #8]
4270:Lib/FreeRTOS/Source/tasks.c **** 
 5822              		.loc 1 4270 21 discriminator 3 view .LVU1832
ARM GAS  /tmp/ccEd3BVV.s 			page 230


 5823 0078 D158     		ldr	r1, [r2, r3]
 5824              	.LVL459:
4270:Lib/FreeRTOS/Source/tasks.c **** 
 5825              		.loc 1 4270 21 is_stmt 0 discriminator 3 view .LVU1833
 5826 007a 6061     		str	r0, [r4, #20]
4270:Lib/FreeRTOS/Source/tasks.c **** 
 5827              		.loc 1 4270 21 is_stmt 1 discriminator 3 view .LVU1834
 5828 007c 0131     		adds	r1, r1, #1
 5829              	.LBE175:
4280:Lib/FreeRTOS/Source/tasks.c ****                 }
 5830              		.loc 1 4280 29 is_stmt 0 view .LVU1835
 5831 007e 0120     		movs	r0, #1
 5832              	.LVL460:
 5833              	.LBB176:
4270:Lib/FreeRTOS/Source/tasks.c **** 
 5834              		.loc 1 4270 21 discriminator 3 view .LVU1836
 5835 0080 D150     		str	r1, [r2, r3]
 5836              	.LBE176:
4270:Lib/FreeRTOS/Source/tasks.c **** 
 5837              		.loc 1 4270 21 is_stmt 1 discriminator 3 view .LVU1837
4270:Lib/FreeRTOS/Source/tasks.c **** 
 5838              		.loc 1 4270 21 discriminator 3 view .LVU1838
4270:Lib/FreeRTOS/Source/tasks.c **** 
 5839              		.loc 1 4270 21 discriminator 3 view .LVU1839
4280:Lib/FreeRTOS/Source/tasks.c ****                 }
 5840              		.loc 1 4280 21 view .LVU1840
 5841              	.LVL461:
4294:Lib/FreeRTOS/Source/tasks.c ****         }
 5842              		.loc 1 4294 37 view .LVU1841
4297:Lib/FreeRTOS/Source/tasks.c ****     }
 5843              		.loc 1 4297 9 view .LVU1842
4297:Lib/FreeRTOS/Source/tasks.c ****     }
 5844              		.loc 1 4297 16 is_stmt 0 view .LVU1843
 5845 0082 C1E7     		b	.L421
 5846              	.L430:
 5847              		.align	2
 5848              	.L429:
 5849 0084 00000000 		.word	pxCurrentTCB
 5850 0088 00000000 		.word	.LC0
 5851 008c 00000000 		.word	__func__.8
 5852 0090 02000000 		.word	.LC1
 5853 0094 00000000 		.word	uxTopReadyPriority
 5854 0098 00000000 		.word	pxReadyTasksLists
 5855              		.cfi_endproc
 5856              	.LFE51:
 5858              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 5859              		.align	1
 5860              		.global	vTaskPriorityDisinheritAfterTimeout
 5861              		.syntax unified
 5862              		.thumb
 5863              		.thumb_func
 5865              	vTaskPriorityDisinheritAfterTimeout:
 5866              	.LVL462:
 5867              	.LFB52:
4307:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 5868              		.loc 1 4307 5 is_stmt 1 view -0
 5869              		.cfi_startproc
ARM GAS  /tmp/ccEd3BVV.s 			page 231


 5870              		@ args = 0, pretend = 0, frame = 0
 5871              		@ frame_needed = 0, uses_anonymous_args = 0
4308:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
 5872              		.loc 1 4308 9 view .LVU1845
4309:Lib/FreeRTOS/Source/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 5873              		.loc 1 4309 9 view .LVU1846
4310:Lib/FreeRTOS/Source/tasks.c **** 
 5874              		.loc 1 4310 9 view .LVU1847
4312:Lib/FreeRTOS/Source/tasks.c ****         {
 5875              		.loc 1 4312 9 view .LVU1848
4307:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 5876              		.loc 1 4307 5 is_stmt 0 view .LVU1849
 5877 0000 70B5     		push	{r4, r5, r6, lr}
 5878              		.cfi_def_cfa_offset 16
 5879              		.cfi_offset 4, -16
 5880              		.cfi_offset 5, -12
 5881              		.cfi_offset 6, -8
 5882              		.cfi_offset 14, -4
4312:Lib/FreeRTOS/Source/tasks.c ****         {
 5883              		.loc 1 4312 11 view .LVU1850
 5884 0002 0446     		mov	r4, r0
 5885 0004 0028     		cmp	r0, #0
 5886 0006 44D0     		beq	.L431
4316:Lib/FreeRTOS/Source/tasks.c **** 
 5887              		.loc 1 4316 13 is_stmt 1 view .LVU1851
 5888 0008 026D     		ldr	r2, [r0, #80]
 5889 000a 42B9     		cbnz	r2, .L434
4316:Lib/FreeRTOS/Source/tasks.c **** 
 5890              		.loc 1 4316 13 discriminator 1 view .LVU1852
 5891 000c FFF7FEFF 		bl	ulSetInterruptMask
 5892              	.LVL463:
4316:Lib/FreeRTOS/Source/tasks.c **** 
 5893              		.loc 1 4316 13 discriminator 1 view .LVU1853
 5894 0010 41F2DC01 		movw	r1, #4316
 5895 0014 1F4B     		ldr	r3, .L440
 5896 0016 204A     		ldr	r2, .L440+4
 5897              	.L439:
4343:Lib/FreeRTOS/Source/tasks.c **** 
 5898              		.loc 1 4343 21 is_stmt 0 discriminator 1 view .LVU1854
 5899 0018 2048     		ldr	r0, .L440+8
 5900 001a FFF7FEFF 		bl	__assert_func
 5901              	.LVL464:
 5902              	.L434:
4316:Lib/FreeRTOS/Source/tasks.c **** 
 5903              		.loc 1 4316 49 is_stmt 1 discriminator 2 view .LVU1855
4322:Lib/FreeRTOS/Source/tasks.c ****             {
 5904              		.loc 1 4322 13 view .LVU1856
4322:Lib/FreeRTOS/Source/tasks.c ****             {
 5905              		.loc 1 4322 15 is_stmt 0 view .LVU1857
 5906 001e C36C     		ldr	r3, [r0, #76]
 5907 0020 9942     		cmp	r1, r3
 5908 0022 38BF     		it	cc
 5909 0024 1946     		movcc	r1, r3
 5910              	.LVL465:
4332:Lib/FreeRTOS/Source/tasks.c ****             {
 5911              		.loc 1 4332 13 is_stmt 1 view .LVU1858
4332:Lib/FreeRTOS/Source/tasks.c ****             {
ARM GAS  /tmp/ccEd3BVV.s 			page 232


 5912              		.loc 1 4332 22 is_stmt 0 view .LVU1859
 5913 0026 C36A     		ldr	r3, [r0, #44]
4332:Lib/FreeRTOS/Source/tasks.c ****             {
 5914              		.loc 1 4332 15 view .LVU1860
 5915 0028 8B42     		cmp	r3, r1
 5916 002a 32D0     		beq	.L431
4338:Lib/FreeRTOS/Source/tasks.c ****                 {
 5917              		.loc 1 4338 17 is_stmt 1 view .LVU1861
4338:Lib/FreeRTOS/Source/tasks.c ****                 {
 5918              		.loc 1 4338 19 is_stmt 0 view .LVU1862
 5919 002c 012A     		cmp	r2, #1
 5920 002e 30D1     		bne	.L431
4343:Lib/FreeRTOS/Source/tasks.c **** 
 5921              		.loc 1 4343 21 is_stmt 1 view .LVU1863
 5922 0030 1B4A     		ldr	r2, .L440+12
 5923 0032 1268     		ldr	r2, [r2]
 5924 0034 8242     		cmp	r2, r0
 5925 0036 06D1     		bne	.L436
4343:Lib/FreeRTOS/Source/tasks.c **** 
 5926              		.loc 1 4343 21 discriminator 1 view .LVU1864
 5927 0038 FFF7FEFF 		bl	ulSetInterruptMask
 5928              	.LVL466:
4343:Lib/FreeRTOS/Source/tasks.c **** 
 5929              		.loc 1 4343 21 discriminator 1 view .LVU1865
 5930 003c 41F2F701 		movw	r1, #4343
 5931 0040 144B     		ldr	r3, .L440
 5932 0042 154A     		ldr	r2, .L440+4
 5933 0044 E8E7     		b	.L439
 5934              	.LVL467:
 5935              	.L436:
4343:Lib/FreeRTOS/Source/tasks.c **** 
 5936              		.loc 1 4343 58 discriminator 2 view .LVU1866
4348:Lib/FreeRTOS/Source/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
 5937              		.loc 1 4348 76 view .LVU1867
4349:Lib/FreeRTOS/Source/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
 5938              		.loc 1 4349 21 view .LVU1868
4350:Lib/FreeRTOS/Source/tasks.c **** 
 5939              		.loc 1 4350 21 view .LVU1869
4354:Lib/FreeRTOS/Source/tasks.c ****                     {
 5940              		.loc 1 4354 23 is_stmt 0 view .LVU1870
 5941 0046 8269     		ldr	r2, [r0, #24]
4369:Lib/FreeRTOS/Source/tasks.c ****                     {
 5942              		.loc 1 4369 25 view .LVU1871
 5943 0048 164D     		ldr	r5, .L440+16
4354:Lib/FreeRTOS/Source/tasks.c ****                     {
 5944              		.loc 1 4354 23 view .LVU1872
 5945 004a 002A     		cmp	r2, #0
4369:Lib/FreeRTOS/Source/tasks.c ****                     {
 5946              		.loc 1 4369 25 view .LVU1873
 5947 004c 4FF01402 		mov	r2, #20
 5948 0050 02FB0353 		mla	r3, r2, r3, r5
 5949              	.LVL468:
4369:Lib/FreeRTOS/Source/tasks.c ****                     {
 5950              		.loc 1 4369 23 view .LVU1874
 5951 0054 4269     		ldr	r2, [r0, #20]
4350:Lib/FreeRTOS/Source/tasks.c **** 
 5952              		.loc 1 4350 39 view .LVU1875
ARM GAS  /tmp/ccEd3BVV.s 			page 233


 5953 0056 C162     		str	r1, [r0, #44]
 5954              	.LVL469:
4354:Lib/FreeRTOS/Source/tasks.c ****                     {
 5955              		.loc 1 4354 21 is_stmt 1 view .LVU1876
4356:Lib/FreeRTOS/Source/tasks.c ****                     }
 5956              		.loc 1 4356 25 view .LVU1877
 5957 0058 A4BF     		itt	ge
 5958 005a C1F13801 		rsbge	r1, r1, #56
 5959              	.LVL470:
4356:Lib/FreeRTOS/Source/tasks.c ****                     }
 5960              		.loc 1 4356 25 is_stmt 0 view .LVU1878
 5961 005e 8161     		strge	r1, [r0, #24]
4360:Lib/FreeRTOS/Source/tasks.c ****                     }
 5962              		.loc 1 4360 49 is_stmt 1 view .LVU1879
4369:Lib/FreeRTOS/Source/tasks.c ****                     {
 5963              		.loc 1 4369 21 view .LVU1880
4369:Lib/FreeRTOS/Source/tasks.c ****                     {
 5964              		.loc 1 4369 23 is_stmt 0 view .LVU1881
 5965 0060 9A42     		cmp	r2, r3
 5966 0062 16D1     		bne	.L431
4371:Lib/FreeRTOS/Source/tasks.c ****                         {
 5967              		.loc 1 4371 25 is_stmt 1 view .LVU1882
4371:Lib/FreeRTOS/Source/tasks.c ****                         {
 5968              		.loc 1 4371 29 is_stmt 0 view .LVU1883
 5969 0064 061D     		adds	r6, r0, #4
 5970 0066 3046     		mov	r0, r6
 5971              	.LVL471:
4371:Lib/FreeRTOS/Source/tasks.c ****                         {
 5972              		.loc 1 4371 29 view .LVU1884
 5973 0068 FFF7FEFF 		bl	uxListRemove
 5974              	.LVL472:
4376:Lib/FreeRTOS/Source/tasks.c ****                         }
 5975              		.loc 1 4376 94 is_stmt 1 view .LVU1885
4380:Lib/FreeRTOS/Source/tasks.c ****                         }
 5976              		.loc 1 4380 53 view .LVU1886
4383:Lib/FreeRTOS/Source/tasks.c ****                     }
 5977              		.loc 1 4383 25 view .LVU1887
4383:Lib/FreeRTOS/Source/tasks.c ****                     }
 5978              		.loc 1 4383 25 view .LVU1888
4383:Lib/FreeRTOS/Source/tasks.c ****                     }
 5979              		.loc 1 4383 25 view .LVU1889
4383:Lib/FreeRTOS/Source/tasks.c ****                     }
 5980              		.loc 1 4383 25 view .LVU1890
 5981 006c 0E4A     		ldr	r2, .L440+20
 5982 006e E36A     		ldr	r3, [r4, #44]
 5983 0070 1168     		ldr	r1, [r2]
 5984 0072 8B42     		cmp	r3, r1
4383:Lib/FreeRTOS/Source/tasks.c ****                     }
 5985              		.loc 1 4383 25 discriminator 1 view .LVU1891
 5986 0074 88BF     		it	hi
 5987 0076 1360     		strhi	r3, [r2]
4383:Lib/FreeRTOS/Source/tasks.c ****                     }
 5988              		.loc 1 4383 25 discriminator 3 view .LVU1892
4383:Lib/FreeRTOS/Source/tasks.c ****                     }
 5989              		.loc 1 4383 25 discriminator 3 view .LVU1893
 5990              	.LBB177:
4383:Lib/FreeRTOS/Source/tasks.c ****                     }
ARM GAS  /tmp/ccEd3BVV.s 			page 234


 5991              		.loc 1 4383 25 discriminator 3 view .LVU1894
 5992 0078 1422     		movs	r2, #20
 5993 007a 5343     		muls	r3, r2, r3
 5994 007c E918     		adds	r1, r5, r3
 5995 007e 4A68     		ldr	r2, [r1, #4]
 5996              	.LVL473:
4383:Lib/FreeRTOS/Source/tasks.c ****                     }
 5997              		.loc 1 4383 25 discriminator 3 view .LVU1895
4383:Lib/FreeRTOS/Source/tasks.c ****                     }
 5998              		.loc 1 4383 25 discriminator 3 view .LVU1896
4383:Lib/FreeRTOS/Source/tasks.c ****                     }
 5999              		.loc 1 4383 25 discriminator 3 view .LVU1897
 6000 0080 9068     		ldr	r0, [r2, #8]
 6001 0082 A260     		str	r2, [r4, #8]
4383:Lib/FreeRTOS/Source/tasks.c ****                     }
 6002              		.loc 1 4383 25 discriminator 3 view .LVU1898
 6003 0084 E060     		str	r0, [r4, #12]
4383:Lib/FreeRTOS/Source/tasks.c ****                     }
 6004              		.loc 1 4383 25 discriminator 3 view .LVU1899
 6005 0086 4660     		str	r6, [r0, #4]
4383:Lib/FreeRTOS/Source/tasks.c ****                     }
 6006              		.loc 1 4383 25 discriminator 3 view .LVU1900
 6007 0088 9660     		str	r6, [r2, #8]
4383:Lib/FreeRTOS/Source/tasks.c ****                     }
 6008              		.loc 1 4383 25 discriminator 3 view .LVU1901
 6009 008a EA58     		ldr	r2, [r5, r3]
 6010              	.LVL474:
4383:Lib/FreeRTOS/Source/tasks.c ****                     }
 6011              		.loc 1 4383 25 is_stmt 0 discriminator 3 view .LVU1902
 6012 008c 6161     		str	r1, [r4, #20]
4383:Lib/FreeRTOS/Source/tasks.c ****                     }
 6013              		.loc 1 4383 25 is_stmt 1 discriminator 3 view .LVU1903
 6014 008e 0132     		adds	r2, r2, #1
 6015 0090 EA50     		str	r2, [r5, r3]
 6016              	.LBE177:
4383:Lib/FreeRTOS/Source/tasks.c ****                     }
 6017              		.loc 1 4383 25 discriminator 3 view .LVU1904
4383:Lib/FreeRTOS/Source/tasks.c ****                     }
 6018              		.loc 1 4383 25 discriminator 3 view .LVU1905
4383:Lib/FreeRTOS/Source/tasks.c ****                     }
 6019              		.loc 1 4383 25 discriminator 3 view .LVU1906
4402:Lib/FreeRTOS/Source/tasks.c ****         }
 6020              		.loc 1 4402 37 view .LVU1907
 6021              	.LVL475:
 6022              	.L431:
4404:Lib/FreeRTOS/Source/tasks.c **** 
 6023              		.loc 1 4404 5 is_stmt 0 view .LVU1908
 6024 0092 70BD     		pop	{r4, r5, r6, pc}
 6025              	.LVL476:
 6026              	.L441:
4404:Lib/FreeRTOS/Source/tasks.c **** 
 6027              		.loc 1 4404 5 view .LVU1909
 6028              		.align	2
 6029              	.L440:
 6030 0094 00000000 		.word	.LC0
 6031 0098 00000000 		.word	__func__.7
 6032 009c 02000000 		.word	.LC1
ARM GAS  /tmp/ccEd3BVV.s 			page 235


 6033 00a0 00000000 		.word	pxCurrentTCB
 6034 00a4 00000000 		.word	pxReadyTasksLists
 6035 00a8 00000000 		.word	uxTopReadyPriority
 6036              		.cfi_endproc
 6037              	.LFE52:
 6039              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 6040              		.align	1
 6041              		.global	uxTaskResetEventItemValue
 6042              		.syntax unified
 6043              		.thumb
 6044              		.thumb_func
 6046              	uxTaskResetEventItemValue:
 6047              	.LFB53:
4727:Lib/FreeRTOS/Source/tasks.c ****     TickType_t uxReturn;
 6048              		.loc 1 4727 1 is_stmt 1 view -0
 6049              		.cfi_startproc
 6050              		@ args = 0, pretend = 0, frame = 0
 6051              		@ frame_needed = 0, uses_anonymous_args = 0
 6052              		@ link register save eliminated.
4728:Lib/FreeRTOS/Source/tasks.c **** 
 6053              		.loc 1 4728 5 view .LVU1911
4730:Lib/FreeRTOS/Source/tasks.c **** 
 6054              		.loc 1 4730 5 view .LVU1912
4730:Lib/FreeRTOS/Source/tasks.c **** 
 6055              		.loc 1 4730 16 is_stmt 0 view .LVU1913
 6056 0000 044B     		ldr	r3, .L443
 6057 0002 1A68     		ldr	r2, [r3]
4734:Lib/FreeRTOS/Source/tasks.c **** 
 6058              		.loc 1 4734 5 view .LVU1914
 6059 0004 1968     		ldr	r1, [r3]
4730:Lib/FreeRTOS/Source/tasks.c **** 
 6060              		.loc 1 4730 14 view .LVU1915
 6061 0006 9069     		ldr	r0, [r2, #24]
 6062              	.LVL477:
4734:Lib/FreeRTOS/Source/tasks.c **** 
 6063              		.loc 1 4734 5 is_stmt 1 view .LVU1916
 6064 0008 1A68     		ldr	r2, [r3]
 6065 000a CB6A     		ldr	r3, [r1, #44]
 6066 000c C3F13803 		rsb	r3, r3, #56
 6067 0010 9361     		str	r3, [r2, #24]
4736:Lib/FreeRTOS/Source/tasks.c **** }
 6068              		.loc 1 4736 5 view .LVU1917
4737:Lib/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 6069              		.loc 1 4737 1 is_stmt 0 view .LVU1918
 6070 0012 7047     		bx	lr
 6071              	.L444:
 6072              		.align	2
 6073              	.L443:
 6074 0014 00000000 		.word	pxCurrentTCB
 6075              		.cfi_endproc
 6076              	.LFE53:
 6078              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 6079              		.align	1
 6080              		.global	pvTaskIncrementMutexHeldCount
 6081              		.syntax unified
 6082              		.thumb
 6083              		.thumb_func
ARM GAS  /tmp/ccEd3BVV.s 			page 236


 6085              	pvTaskIncrementMutexHeldCount:
 6086              	.LFB54:
4743:Lib/FreeRTOS/Source/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
 6087              		.loc 1 4743 5 is_stmt 1 view -0
 6088              		.cfi_startproc
 6089              		@ args = 0, pretend = 0, frame = 0
 6090              		@ frame_needed = 0, uses_anonymous_args = 0
 6091              		@ link register save eliminated.
4746:Lib/FreeRTOS/Source/tasks.c ****         {
 6092              		.loc 1 4746 9 view .LVU1920
4746:Lib/FreeRTOS/Source/tasks.c ****         {
 6093              		.loc 1 4746 26 is_stmt 0 view .LVU1921
 6094 0000 044B     		ldr	r3, .L450
 6095 0002 1A68     		ldr	r2, [r3]
4746:Lib/FreeRTOS/Source/tasks.c ****         {
 6096              		.loc 1 4746 11 view .LVU1922
 6097 0004 1AB1     		cbz	r2, .L446
4748:Lib/FreeRTOS/Source/tasks.c ****         }
 6098              		.loc 1 4748 13 is_stmt 1 view .LVU1923
4748:Lib/FreeRTOS/Source/tasks.c ****         }
 6099              		.loc 1 4748 27 is_stmt 0 view .LVU1924
 6100 0006 1968     		ldr	r1, [r3]
4748:Lib/FreeRTOS/Source/tasks.c ****         }
 6101              		.loc 1 4748 44 view .LVU1925
 6102 0008 0A6D     		ldr	r2, [r1, #80]
 6103 000a 0132     		adds	r2, r2, #1
 6104 000c 0A65     		str	r2, [r1, #80]
 6105              	.L446:
4751:Lib/FreeRTOS/Source/tasks.c ****     }
 6106              		.loc 1 4751 9 is_stmt 1 view .LVU1926
4751:Lib/FreeRTOS/Source/tasks.c ****     }
 6107              		.loc 1 4751 16 is_stmt 0 view .LVU1927
 6108 000e 1868     		ldr	r0, [r3]
4752:Lib/FreeRTOS/Source/tasks.c **** 
 6109              		.loc 1 4752 5 view .LVU1928
 6110 0010 7047     		bx	lr
 6111              	.L451:
 6112 0012 00BF     		.align	2
 6113              	.L450:
 6114 0014 00000000 		.word	pxCurrentTCB
 6115              		.cfi_endproc
 6116              	.LFE54:
 6118              		.section	.text.ulTaskGenericNotifyTake,"ax",%progbits
 6119              		.align	1
 6120              		.global	ulTaskGenericNotifyTake
 6121              		.syntax unified
 6122              		.thumb
 6123              		.thumb_func
 6125              	ulTaskGenericNotifyTake:
 6126              	.LVL478:
 6127              	.LFB55:
4762:Lib/FreeRTOS/Source/tasks.c ****         uint32_t ulReturn;
 6128              		.loc 1 4762 5 is_stmt 1 view -0
 6129              		.cfi_startproc
 6130              		@ args = 0, pretend = 0, frame = 0
 6131              		@ frame_needed = 0, uses_anonymous_args = 0
4763:Lib/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccEd3BVV.s 			page 237


 6132              		.loc 1 4763 9 view .LVU1930
4765:Lib/FreeRTOS/Source/tasks.c **** 
 6133              		.loc 1 4765 9 view .LVU1931
4762:Lib/FreeRTOS/Source/tasks.c ****         uint32_t ulReturn;
 6134              		.loc 1 4762 5 is_stmt 0 view .LVU1932
 6135 0000 70B5     		push	{r4, r5, r6, lr}
 6136              		.cfi_def_cfa_offset 16
 6137              		.cfi_offset 4, -16
 6138              		.cfi_offset 5, -12
 6139              		.cfi_offset 6, -8
 6140              		.cfi_offset 14, -4
4762:Lib/FreeRTOS/Source/tasks.c ****         uint32_t ulReturn;
 6141              		.loc 1 4762 5 view .LVU1933
 6142 0002 0E46     		mov	r6, r1
 6143 0004 1546     		mov	r5, r2
4765:Lib/FreeRTOS/Source/tasks.c **** 
 6144              		.loc 1 4765 9 view .LVU1934
 6145 0006 40B1     		cbz	r0, .L453
4765:Lib/FreeRTOS/Source/tasks.c **** 
 6146              		.loc 1 4765 9 is_stmt 1 discriminator 1 view .LVU1935
 6147 0008 FFF7FEFF 		bl	ulSetInterruptMask
 6148              	.LVL479:
4765:Lib/FreeRTOS/Source/tasks.c **** 
 6149              		.loc 1 4765 9 discriminator 1 view .LVU1936
 6150 000c 41F29D21 		movw	r1, #4765
 6151 0010 144B     		ldr	r3, .L466
 6152 0012 154A     		ldr	r2, .L466+4
 6153 0014 1548     		ldr	r0, .L466+8
 6154 0016 FFF7FEFF 		bl	__assert_func
 6155              	.LVL480:
 6156              	.L453:
4765:Lib/FreeRTOS/Source/tasks.c **** 
 6157              		.loc 1 4765 78 discriminator 2 view .LVU1937
4767:Lib/FreeRTOS/Source/tasks.c ****         {
 6158              		.loc 1 4767 9 view .LVU1938
4770:Lib/FreeRTOS/Source/tasks.c ****             {
 6159              		.loc 1 4770 29 is_stmt 0 view .LVU1939
 6160 001a 154C     		ldr	r4, .L466+12
4767:Lib/FreeRTOS/Source/tasks.c ****         {
 6161              		.loc 1 4767 9 view .LVU1940
 6162 001c FFF7FEFF 		bl	vPortEnterCritical
 6163              	.LVL481:
4770:Lib/FreeRTOS/Source/tasks.c ****             {
 6164              		.loc 1 4770 13 is_stmt 1 view .LVU1941
4770:Lib/FreeRTOS/Source/tasks.c ****             {
 6165              		.loc 1 4770 29 is_stmt 0 view .LVU1942
 6166 0020 2368     		ldr	r3, [r4]
4770:Lib/FreeRTOS/Source/tasks.c ****             {
 6167              		.loc 1 4770 46 view .LVU1943
 6168 0022 9B6D     		ldr	r3, [r3, #88]
4770:Lib/FreeRTOS/Source/tasks.c ****             {
 6169              		.loc 1 4770 15 view .LVU1944
 6170 0024 4BB9     		cbnz	r3, .L455
4773:Lib/FreeRTOS/Source/tasks.c **** 
 6171              		.loc 1 4773 17 is_stmt 1 view .LVU1945
4773:Lib/FreeRTOS/Source/tasks.c **** 
 6172              		.loc 1 4773 62 is_stmt 0 view .LVU1946
ARM GAS  /tmp/ccEd3BVV.s 			page 238


 6173 0026 0121     		movs	r1, #1
4773:Lib/FreeRTOS/Source/tasks.c **** 
 6174              		.loc 1 4773 29 view .LVU1947
 6175 0028 2368     		ldr	r3, [r4]
4773:Lib/FreeRTOS/Source/tasks.c **** 
 6176              		.loc 1 4773 62 view .LVU1948
 6177 002a 83F85C10 		strb	r1, [r3, #92]
4775:Lib/FreeRTOS/Source/tasks.c ****                 {
 6178              		.loc 1 4775 17 is_stmt 1 view .LVU1949
4775:Lib/FreeRTOS/Source/tasks.c ****                 {
 6179              		.loc 1 4775 19 is_stmt 0 view .LVU1950
 6180 002e 25B1     		cbz	r5, .L455
4777:Lib/FreeRTOS/Source/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
 6181              		.loc 1 4777 21 is_stmt 1 view .LVU1951
 6182 0030 2846     		mov	r0, r5
 6183 0032 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 6184              	.LVL482:
4778:Lib/FreeRTOS/Source/tasks.c **** 
 6185              		.loc 1 4778 65 view .LVU1952
4784:Lib/FreeRTOS/Source/tasks.c ****                 }
 6186              		.loc 1 4784 21 view .LVU1953
 6187 0036 FFF7FEFF 		bl	vPortYield
 6188              	.LVL483:
 6189              	.L455:
4793:Lib/FreeRTOS/Source/tasks.c ****             }
 6190              		.loc 1 4793 41 view .LVU1954
4796:Lib/FreeRTOS/Source/tasks.c **** 
 6191              		.loc 1 4796 9 view .LVU1955
 6192 003a FFF7FEFF 		bl	vPortExitCritical
 6193              	.LVL484:
4798:Lib/FreeRTOS/Source/tasks.c ****         {
 6194              		.loc 1 4798 9 view .LVU1956
 6195 003e FFF7FEFF 		bl	vPortEnterCritical
 6196              	.LVL485:
4800:Lib/FreeRTOS/Source/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 6197              		.loc 1 4800 51 view .LVU1957
4801:Lib/FreeRTOS/Source/tasks.c **** 
 6198              		.loc 1 4801 13 view .LVU1958
4801:Lib/FreeRTOS/Source/tasks.c **** 
 6199              		.loc 1 4801 36 is_stmt 0 view .LVU1959
 6200 0042 2368     		ldr	r3, [r4]
4801:Lib/FreeRTOS/Source/tasks.c **** 
 6201              		.loc 1 4801 22 view .LVU1960
 6202 0044 9D6D     		ldr	r5, [r3, #88]
 6203              	.LVL486:
4803:Lib/FreeRTOS/Source/tasks.c ****             {
 6204              		.loc 1 4803 13 is_stmt 1 view .LVU1961
4803:Lib/FreeRTOS/Source/tasks.c ****             {
 6205              		.loc 1 4803 15 is_stmt 0 view .LVU1962
 6206 0046 1DB1     		cbz	r5, .L457
4805:Lib/FreeRTOS/Source/tasks.c ****                 {
 6207              		.loc 1 4805 17 is_stmt 1 view .LVU1963
4807:Lib/FreeRTOS/Source/tasks.c ****                 }
 6208              		.loc 1 4807 33 is_stmt 0 view .LVU1964
 6209 0048 2368     		ldr	r3, [r4]
4805:Lib/FreeRTOS/Source/tasks.c ****                 {
 6210              		.loc 1 4805 19 view .LVU1965
ARM GAS  /tmp/ccEd3BVV.s 			page 239


 6211 004a 4EB1     		cbz	r6, .L458
4807:Lib/FreeRTOS/Source/tasks.c ****                 }
 6212              		.loc 1 4807 21 is_stmt 1 view .LVU1966
4807:Lib/FreeRTOS/Source/tasks.c ****                 }
 6213              		.loc 1 4807 68 is_stmt 0 view .LVU1967
 6214 004c 0022     		movs	r2, #0
 6215              	.L465:
4811:Lib/FreeRTOS/Source/tasks.c ****                 }
 6216              		.loc 1 4811 68 view .LVU1968
 6217 004e 9A65     		str	r2, [r3, #88]
 6218              	.L457:
4816:Lib/FreeRTOS/Source/tasks.c ****             }
 6219              		.loc 1 4816 41 is_stmt 1 view .LVU1969
4819:Lib/FreeRTOS/Source/tasks.c ****         }
 6220              		.loc 1 4819 13 view .LVU1970
4819:Lib/FreeRTOS/Source/tasks.c ****         }
 6221              		.loc 1 4819 58 is_stmt 0 view .LVU1971
 6222 0050 0022     		movs	r2, #0
4819:Lib/FreeRTOS/Source/tasks.c ****         }
 6223              		.loc 1 4819 25 view .LVU1972
 6224 0052 2368     		ldr	r3, [r4]
4819:Lib/FreeRTOS/Source/tasks.c ****         }
 6225              		.loc 1 4819 58 view .LVU1973
 6226 0054 83F85C20 		strb	r2, [r3, #92]
4821:Lib/FreeRTOS/Source/tasks.c **** 
 6227              		.loc 1 4821 9 is_stmt 1 view .LVU1974
 6228 0058 FFF7FEFF 		bl	vPortExitCritical
 6229              	.LVL487:
4823:Lib/FreeRTOS/Source/tasks.c ****     }
 6230              		.loc 1 4823 9 view .LVU1975
4824:Lib/FreeRTOS/Source/tasks.c **** 
 6231              		.loc 1 4824 5 is_stmt 0 view .LVU1976
 6232 005c 2846     		mov	r0, r5
 6233 005e 70BD     		pop	{r4, r5, r6, pc}
 6234              	.LVL488:
 6235              	.L458:
4811:Lib/FreeRTOS/Source/tasks.c ****                 }
 6236              		.loc 1 4811 21 is_stmt 1 view .LVU1977
4811:Lib/FreeRTOS/Source/tasks.c ****                 }
 6237              		.loc 1 4811 79 is_stmt 0 view .LVU1978
 6238 0060 6A1E     		subs	r2, r5, #1
 6239 0062 F4E7     		b	.L465
 6240              	.L467:
 6241              		.align	2
 6242              	.L466:
 6243 0064 00000000 		.word	.LC0
 6244 0068 00000000 		.word	__func__.6
 6245 006c 02000000 		.word	.LC1
 6246 0070 00000000 		.word	pxCurrentTCB
 6247              		.cfi_endproc
 6248              	.LFE55:
 6250              		.section	.text.xTaskGenericNotifyWait,"ax",%progbits
 6251              		.align	1
 6252              		.global	xTaskGenericNotifyWait
 6253              		.syntax unified
 6254              		.thumb
 6255              		.thumb_func
ARM GAS  /tmp/ccEd3BVV.s 			page 240


 6257              	xTaskGenericNotifyWait:
 6258              	.LVL489:
 6259              	.LFB56:
4836:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
 6260              		.loc 1 4836 5 is_stmt 1 view -0
 6261              		.cfi_startproc
 6262              		@ args = 4, pretend = 0, frame = 0
 6263              		@ frame_needed = 0, uses_anonymous_args = 0
4837:Lib/FreeRTOS/Source/tasks.c **** 
 6264              		.loc 1 4837 9 view .LVU1980
4839:Lib/FreeRTOS/Source/tasks.c **** 
 6265              		.loc 1 4839 9 view .LVU1981
4836:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
 6266              		.loc 1 4836 5 is_stmt 0 view .LVU1982
 6267 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 6268              		.cfi_def_cfa_offset 24
 6269              		.cfi_offset 4, -24
 6270              		.cfi_offset 5, -20
 6271              		.cfi_offset 6, -16
 6272              		.cfi_offset 7, -12
 6273              		.cfi_offset 8, -8
 6274              		.cfi_offset 14, -4
4836:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
 6275              		.loc 1 4836 5 view .LVU1983
 6276 0004 DDF81880 		ldr	r8, [sp, #24]
 6277 0008 0F46     		mov	r7, r1
 6278 000a 1646     		mov	r6, r2
 6279 000c 1D46     		mov	r5, r3
4839:Lib/FreeRTOS/Source/tasks.c **** 
 6280              		.loc 1 4839 9 view .LVU1984
 6281 000e 40B1     		cbz	r0, .L469
4839:Lib/FreeRTOS/Source/tasks.c **** 
 6282              		.loc 1 4839 9 is_stmt 1 discriminator 1 view .LVU1985
 6283 0010 FFF7FEFF 		bl	ulSetInterruptMask
 6284              	.LVL490:
4839:Lib/FreeRTOS/Source/tasks.c **** 
 6285              		.loc 1 4839 9 discriminator 1 view .LVU1986
 6286 0014 41F2E721 		movw	r1, #4839
 6287 0018 1D4B     		ldr	r3, .L482
 6288 001a 1E4A     		ldr	r2, .L482+4
 6289 001c 1E48     		ldr	r0, .L482+8
 6290 001e FFF7FEFF 		bl	__assert_func
 6291              	.LVL491:
 6292              	.L469:
4839:Lib/FreeRTOS/Source/tasks.c **** 
 6293              		.loc 1 4839 78 discriminator 2 view .LVU1987
4841:Lib/FreeRTOS/Source/tasks.c ****         {
 6294              		.loc 1 4841 9 view .LVU1988
4844:Lib/FreeRTOS/Source/tasks.c ****             {
 6295              		.loc 1 4844 29 is_stmt 0 view .LVU1989
 6296 0022 1E4C     		ldr	r4, .L482+12
4841:Lib/FreeRTOS/Source/tasks.c ****         {
 6297              		.loc 1 4841 9 view .LVU1990
 6298 0024 FFF7FEFF 		bl	vPortEnterCritical
 6299              	.LVL492:
4844:Lib/FreeRTOS/Source/tasks.c ****             {
 6300              		.loc 1 4844 13 is_stmt 1 view .LVU1991
ARM GAS  /tmp/ccEd3BVV.s 			page 241


4844:Lib/FreeRTOS/Source/tasks.c ****             {
 6301              		.loc 1 4844 29 is_stmt 0 view .LVU1992
 6302 0028 2368     		ldr	r3, [r4]
4844:Lib/FreeRTOS/Source/tasks.c ****             {
 6303              		.loc 1 4844 44 view .LVU1993
 6304 002a 93F85C30 		ldrb	r3, [r3, #92]	@ zero_extendqisi2
4844:Lib/FreeRTOS/Source/tasks.c ****             {
 6305              		.loc 1 4844 15 view .LVU1994
 6306 002e 022B     		cmp	r3, #2
 6307 0030 10D0     		beq	.L471
4849:Lib/FreeRTOS/Source/tasks.c **** 
 6308              		.loc 1 4849 17 is_stmt 1 view .LVU1995
4852:Lib/FreeRTOS/Source/tasks.c **** 
 6309              		.loc 1 4852 62 is_stmt 0 view .LVU1996
 6310 0032 0121     		movs	r1, #1
4849:Lib/FreeRTOS/Source/tasks.c **** 
 6311              		.loc 1 4849 29 view .LVU1997
 6312 0034 2268     		ldr	r2, [r4]
4849:Lib/FreeRTOS/Source/tasks.c **** 
 6313              		.loc 1 4849 46 view .LVU1998
 6314 0036 936D     		ldr	r3, [r2, #88]
4849:Lib/FreeRTOS/Source/tasks.c **** 
 6315              		.loc 1 4849 64 view .LVU1999
 6316 0038 23EA0703 		bic	r3, r3, r7
 6317 003c 9365     		str	r3, [r2, #88]
4852:Lib/FreeRTOS/Source/tasks.c **** 
 6318              		.loc 1 4852 17 is_stmt 1 view .LVU2000
4852:Lib/FreeRTOS/Source/tasks.c **** 
 6319              		.loc 1 4852 29 is_stmt 0 view .LVU2001
 6320 003e 2368     		ldr	r3, [r4]
4852:Lib/FreeRTOS/Source/tasks.c **** 
 6321              		.loc 1 4852 62 view .LVU2002
 6322 0040 83F85C10 		strb	r1, [r3, #92]
4854:Lib/FreeRTOS/Source/tasks.c ****                 {
 6323              		.loc 1 4854 17 is_stmt 1 view .LVU2003
4854:Lib/FreeRTOS/Source/tasks.c ****                 {
 6324              		.loc 1 4854 19 is_stmt 0 view .LVU2004
 6325 0044 B8F1000F 		cmp	r8, #0
 6326 0048 04D0     		beq	.L471
4856:Lib/FreeRTOS/Source/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
 6327              		.loc 1 4856 21 is_stmt 1 view .LVU2005
 6328 004a 4046     		mov	r0, r8
 6329 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 6330              	.LVL493:
4857:Lib/FreeRTOS/Source/tasks.c **** 
 6331              		.loc 1 4857 65 view .LVU2006
4863:Lib/FreeRTOS/Source/tasks.c ****                 }
 6332              		.loc 1 4863 21 view .LVU2007
 6333 0050 FFF7FEFF 		bl	vPortYield
 6334              	.LVL494:
 6335              	.L471:
4872:Lib/FreeRTOS/Source/tasks.c ****             }
 6336              		.loc 1 4872 41 view .LVU2008
4875:Lib/FreeRTOS/Source/tasks.c **** 
 6337              		.loc 1 4875 9 view .LVU2009
 6338 0054 FFF7FEFF 		bl	vPortExitCritical
 6339              	.LVL495:
ARM GAS  /tmp/ccEd3BVV.s 			page 242


4877:Lib/FreeRTOS/Source/tasks.c ****         {
 6340              		.loc 1 4877 9 view .LVU2010
 6341 0058 FFF7FEFF 		bl	vPortEnterCritical
 6342              	.LVL496:
4879:Lib/FreeRTOS/Source/tasks.c **** 
 6343              		.loc 1 4879 51 view .LVU2011
4881:Lib/FreeRTOS/Source/tasks.c ****             {
 6344              		.loc 1 4881 13 view .LVU2012
4881:Lib/FreeRTOS/Source/tasks.c ****             {
 6345              		.loc 1 4881 15 is_stmt 0 view .LVU2013
 6346 005c 15B1     		cbz	r5, .L473
4885:Lib/FreeRTOS/Source/tasks.c ****             }
 6347              		.loc 1 4885 17 is_stmt 1 view .LVU2014
4885:Lib/FreeRTOS/Source/tasks.c ****             }
 6348              		.loc 1 4885 53 is_stmt 0 view .LVU2015
 6349 005e 2368     		ldr	r3, [r4]
4885:Lib/FreeRTOS/Source/tasks.c ****             }
 6350              		.loc 1 4885 70 view .LVU2016
 6351 0060 9B6D     		ldr	r3, [r3, #88]
4885:Lib/FreeRTOS/Source/tasks.c ****             }
 6352              		.loc 1 4885 39 view .LVU2017
 6353 0062 2B60     		str	r3, [r5]
 6354              	.L473:
4892:Lib/FreeRTOS/Source/tasks.c ****             {
 6355              		.loc 1 4892 13 is_stmt 1 view .LVU2018
4892:Lib/FreeRTOS/Source/tasks.c ****             {
 6356              		.loc 1 4892 29 is_stmt 0 view .LVU2019
 6357 0064 2368     		ldr	r3, [r4]
4905:Lib/FreeRTOS/Source/tasks.c ****         }
 6358              		.loc 1 4905 58 view .LVU2020
 6359 0066 0022     		movs	r2, #0
4892:Lib/FreeRTOS/Source/tasks.c ****             {
 6360              		.loc 1 4892 44 view .LVU2021
 6361 0068 93F85C30 		ldrb	r3, [r3, #92]	@ zero_extendqisi2
4892:Lib/FreeRTOS/Source/tasks.c ****             {
 6362              		.loc 1 4892 15 view .LVU2022
 6363 006c 022B     		cmp	r3, #2
4901:Lib/FreeRTOS/Source/tasks.c ****                 xReturn = pdTRUE;
 6364              		.loc 1 4901 17 is_stmt 1 view .LVU2023
4902:Lib/FreeRTOS/Source/tasks.c ****             }
 6365              		.loc 1 4902 25 is_stmt 0 view .LVU2024
 6366 006e 09BF     		itett	eq
 6367 0070 0125     		moveq	r5, #1
 6368              	.LVL497:
4895:Lib/FreeRTOS/Source/tasks.c ****             }
 6369              		.loc 1 4895 25 view .LVU2025
 6370 0072 0025     		movne	r5, #0
4901:Lib/FreeRTOS/Source/tasks.c ****                 xReturn = pdTRUE;
 6371              		.loc 1 4901 29 view .LVU2026
 6372 0074 2168     		ldreq	r1, [r4]
4901:Lib/FreeRTOS/Source/tasks.c ****                 xReturn = pdTRUE;
 6373              		.loc 1 4901 46 view .LVU2027
 6374 0076 8B6D     		ldreq	r3, [r1, #88]
4901:Lib/FreeRTOS/Source/tasks.c ****                 xReturn = pdTRUE;
 6375              		.loc 1 4901 64 view .LVU2028
 6376 0078 04BF     		itt	eq
 6377 007a B343     		biceq	r3, r3, r6
ARM GAS  /tmp/ccEd3BVV.s 			page 243


 6378 007c 8B65     		streq	r3, [r1, #88]
4902:Lib/FreeRTOS/Source/tasks.c ****             }
 6379              		.loc 1 4902 17 is_stmt 1 view .LVU2029
 6380              	.LVL498:
4905:Lib/FreeRTOS/Source/tasks.c ****         }
 6381              		.loc 1 4905 13 view .LVU2030
4905:Lib/FreeRTOS/Source/tasks.c ****         }
 6382              		.loc 1 4905 25 is_stmt 0 view .LVU2031
 6383 007e 2368     		ldr	r3, [r4]
4905:Lib/FreeRTOS/Source/tasks.c ****         }
 6384              		.loc 1 4905 58 view .LVU2032
 6385 0080 83F85C20 		strb	r2, [r3, #92]
4907:Lib/FreeRTOS/Source/tasks.c **** 
 6386              		.loc 1 4907 9 is_stmt 1 view .LVU2033
 6387 0084 FFF7FEFF 		bl	vPortExitCritical
 6388              	.LVL499:
4909:Lib/FreeRTOS/Source/tasks.c ****     }
 6389              		.loc 1 4909 9 view .LVU2034
4910:Lib/FreeRTOS/Source/tasks.c **** 
 6390              		.loc 1 4910 5 is_stmt 0 view .LVU2035
 6391 0088 2846     		mov	r0, r5
 6392 008a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6393              	.LVL500:
 6394              	.L483:
4910:Lib/FreeRTOS/Source/tasks.c **** 
 6395              		.loc 1 4910 5 view .LVU2036
 6396 008e 00BF     		.align	2
 6397              	.L482:
 6398 0090 00000000 		.word	.LC0
 6399 0094 00000000 		.word	__func__.5
 6400 0098 02000000 		.word	.LC1
 6401 009c 00000000 		.word	pxCurrentTCB
 6402              		.cfi_endproc
 6403              	.LFE56:
 6405              		.section	.text.xTaskGenericNotify,"ax",%progbits
 6406              		.align	1
 6407              		.global	xTaskGenericNotify
 6408              		.syntax unified
 6409              		.thumb
 6410              		.thumb_func
 6412              	xTaskGenericNotify:
 6413              	.LVL501:
 6414              	.LFB57:
4922:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 6415              		.loc 1 4922 5 is_stmt 1 view -0
 6416              		.cfi_startproc
 6417              		@ args = 4, pretend = 0, frame = 0
 6418              		@ frame_needed = 0, uses_anonymous_args = 0
4923:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn = pdPASS;
 6419              		.loc 1 4923 9 view .LVU2038
4924:Lib/FreeRTOS/Source/tasks.c ****         uint8_t ucOriginalNotifyState;
 6420              		.loc 1 4924 9 view .LVU2039
4925:Lib/FreeRTOS/Source/tasks.c **** 
 6421              		.loc 1 4925 9 view .LVU2040
4927:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( xTaskToNotify );
 6422              		.loc 1 4927 9 view .LVU2041
4922:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
ARM GAS  /tmp/ccEd3BVV.s 			page 244


 6423              		.loc 1 4922 5 is_stmt 0 view .LVU2042
 6424 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 6425              		.cfi_def_cfa_offset 24
 6426              		.cfi_offset 3, -24
 6427              		.cfi_offset 4, -20
 6428              		.cfi_offset 5, -16
 6429              		.cfi_offset 6, -12
 6430              		.cfi_offset 7, -8
 6431              		.cfi_offset 14, -4
4922:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 6432              		.loc 1 4922 5 view .LVU2043
 6433 0002 069F     		ldr	r7, [sp, #24]
 6434 0004 0446     		mov	r4, r0
 6435 0006 1546     		mov	r5, r2
 6436 0008 1E46     		mov	r6, r3
4927:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( xTaskToNotify );
 6437              		.loc 1 4927 9 view .LVU2044
 6438 000a 41B1     		cbz	r1, .L485
4927:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( xTaskToNotify );
 6439              		.loc 1 4927 9 is_stmt 1 discriminator 1 view .LVU2045
 6440 000c FFF7FEFF 		bl	ulSetInterruptMask
 6441              	.LVL502:
4927:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( xTaskToNotify );
 6442              		.loc 1 4927 9 discriminator 1 view .LVU2046
 6443 0010 41F23F31 		movw	r1, #4927
 6444 0014 364B     		ldr	r3, .L513
 6445 0016 374A     		ldr	r2, .L513+4
 6446              	.LVL503:
 6447              	.L512:
4928:Lib/FreeRTOS/Source/tasks.c ****         pxTCB = xTaskToNotify;
 6448              		.loc 1 4928 9 is_stmt 0 discriminator 1 view .LVU2047
 6449 0018 3748     		ldr	r0, .L513+8
 6450 001a FFF7FEFF 		bl	__assert_func
 6451              	.LVL504:
 6452              	.L485:
4927:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( xTaskToNotify );
 6453              		.loc 1 4927 80 is_stmt 1 discriminator 2 view .LVU2048
4928:Lib/FreeRTOS/Source/tasks.c ****         pxTCB = xTaskToNotify;
 6454              		.loc 1 4928 9 view .LVU2049
 6455 001e 30B9     		cbnz	r0, .L486
4928:Lib/FreeRTOS/Source/tasks.c ****         pxTCB = xTaskToNotify;
 6456              		.loc 1 4928 9 discriminator 1 view .LVU2050
 6457 0020 FFF7FEFF 		bl	ulSetInterruptMask
 6458              	.LVL505:
4928:Lib/FreeRTOS/Source/tasks.c ****         pxTCB = xTaskToNotify;
 6459              		.loc 1 4928 9 discriminator 1 view .LVU2051
 6460 0024 4FF49A51 		mov	r1, #4928
 6461 0028 314B     		ldr	r3, .L513
 6462 002a 324A     		ldr	r2, .L513+4
 6463 002c F4E7     		b	.L512
 6464              	.LVL506:
 6465              	.L486:
4928:Lib/FreeRTOS/Source/tasks.c ****         pxTCB = xTaskToNotify;
 6466              		.loc 1 4928 38 discriminator 2 view .LVU2052
4929:Lib/FreeRTOS/Source/tasks.c **** 
 6467              		.loc 1 4929 9 view .LVU2053
4931:Lib/FreeRTOS/Source/tasks.c ****         {
ARM GAS  /tmp/ccEd3BVV.s 			page 245


 6468              		.loc 1 4931 9 view .LVU2054
 6469 002e FFF7FEFF 		bl	vPortEnterCritical
 6470              	.LVL507:
4933:Lib/FreeRTOS/Source/tasks.c ****             {
 6471              		.loc 1 4933 13 view .LVU2055
4933:Lib/FreeRTOS/Source/tasks.c ****             {
 6472              		.loc 1 4933 15 is_stmt 0 view .LVU2056
 6473 0032 0FB1     		cbz	r7, .L487
4935:Lib/FreeRTOS/Source/tasks.c ****             }
 6474              		.loc 1 4935 17 is_stmt 1 view .LVU2057
4935:Lib/FreeRTOS/Source/tasks.c ****             }
 6475              		.loc 1 4935 71 is_stmt 0 view .LVU2058
 6476 0034 A36D     		ldr	r3, [r4, #88]
4935:Lib/FreeRTOS/Source/tasks.c ****             }
 6477              		.loc 1 4935 47 view .LVU2059
 6478 0036 3B60     		str	r3, [r7]
 6479              	.L487:
4938:Lib/FreeRTOS/Source/tasks.c **** 
 6480              		.loc 1 4938 13 is_stmt 1 view .LVU2060
4940:Lib/FreeRTOS/Source/tasks.c **** 
 6481              		.loc 1 4940 53 is_stmt 0 view .LVU2061
 6482 0038 0223     		movs	r3, #2
4938:Lib/FreeRTOS/Source/tasks.c **** 
 6483              		.loc 1 4938 35 view .LVU2062
 6484 003a 94F85C20 		ldrb	r2, [r4, #92]	@ zero_extendqisi2
4940:Lib/FreeRTOS/Source/tasks.c **** 
 6485              		.loc 1 4940 53 view .LVU2063
 6486 003e 84F85C30 		strb	r3, [r4, #92]
4938:Lib/FreeRTOS/Source/tasks.c **** 
 6487              		.loc 1 4938 35 view .LVU2064
 6488 0042 D2B2     		uxtb	r2, r2
 6489              	.LVL508:
4940:Lib/FreeRTOS/Source/tasks.c **** 
 6490              		.loc 1 4940 13 is_stmt 1 view .LVU2065
4942:Lib/FreeRTOS/Source/tasks.c ****             {
 6491              		.loc 1 4942 13 view .LVU2066
 6492 0044 042E     		cmp	r6, #4
 6493 0046 3AD8     		bhi	.L488
 6494 0048 DFE806F0 		tbb	[pc, r6]
 6495              	.L490:
 6496 004c 06       		.byte	(.L494-.L490)/2
 6497 004d 03       		.byte	(.L493-.L490)/2
 6498 004e 32       		.byte	(.L492-.L490)/2
 6499 004f 37       		.byte	(.L511-.L490)/2
 6500 0050 35       		.byte	(.L489-.L490)/2
 6501 0051 00       		.p2align 1
 6502              	.L493:
4945:Lib/FreeRTOS/Source/tasks.c ****                     break;
 6503              		.loc 1 4945 21 view .LVU2067
4945:Lib/FreeRTOS/Source/tasks.c ****                     break;
 6504              		.loc 1 4945 43 is_stmt 0 view .LVU2068
 6505 0052 A36D     		ldr	r3, [r4, #88]
4945:Lib/FreeRTOS/Source/tasks.c ****                     break;
 6506              		.loc 1 4945 63 view .LVU2069
 6507 0054 2B43     		orrs	r3, r3, r5
 6508              	.L510:
4949:Lib/FreeRTOS/Source/tasks.c ****                     break;
ARM GAS  /tmp/ccEd3BVV.s 			page 246


 6509              		.loc 1 4949 66 view .LVU2070
 6510 0056 A365     		str	r3, [r4, #88]
4950:Lib/FreeRTOS/Source/tasks.c **** 
 6511              		.loc 1 4950 21 is_stmt 1 view .LVU2071
 6512              	.L494:
4986:Lib/FreeRTOS/Source/tasks.c **** 
 6513              		.loc 1 4986 48 view .LVU2072
4990:Lib/FreeRTOS/Source/tasks.c ****             {
 6514              		.loc 1 4990 13 view .LVU2073
4990:Lib/FreeRTOS/Source/tasks.c ****             {
 6515              		.loc 1 4990 15 is_stmt 0 view .LVU2074
 6516 0058 012A     		cmp	r2, #1
 6517 005a 42D1     		bne	.L497
4992:Lib/FreeRTOS/Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6518              		.loc 1 4992 17 is_stmt 1 view .LVU2075
 6519              	.LBB178:
4992:Lib/FreeRTOS/Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6520              		.loc 1 4992 17 view .LVU2076
 6521 005c D4E90212 		ldrd	r1, r2, [r4, #8]
 6522              	.LVL509:
4992:Lib/FreeRTOS/Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6523              		.loc 1 4992 17 is_stmt 0 view .LVU2077
 6524 0060 6369     		ldr	r3, [r4, #20]
 6525              	.LVL510:
4992:Lib/FreeRTOS/Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6526              		.loc 1 4992 17 is_stmt 1 view .LVU2078
 6527 0062 8A60     		str	r2, [r1, #8]
4992:Lib/FreeRTOS/Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6528              		.loc 1 4992 17 view .LVU2079
 6529 0064 5160     		str	r1, [r2, #4]
4992:Lib/FreeRTOS/Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6530              		.loc 1 4992 17 view .LVU2080
 6531 0066 5968     		ldr	r1, [r3, #4]
 6532 0068 251D     		adds	r5, r4, #4
 6533              	.LVL511:
4992:Lib/FreeRTOS/Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6534              		.loc 1 4992 17 is_stmt 0 view .LVU2081
 6535 006a A942     		cmp	r1, r5
4992:Lib/FreeRTOS/Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6536              		.loc 1 4992 17 is_stmt 1 discriminator 1 view .LVU2082
 6537 006c 08BF     		it	eq
 6538 006e 5A60     		streq	r2, [r3, #4]
4992:Lib/FreeRTOS/Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6539              		.loc 1 4992 17 discriminator 3 view .LVU2083
4992:Lib/FreeRTOS/Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6540              		.loc 1 4992 17 discriminator 3 view .LVU2084
 6541 0070 1A68     		ldr	r2, [r3]
 6542 0072 013A     		subs	r2, r2, #1
 6543 0074 1A60     		str	r2, [r3]
 6544              	.LBE178:
4992:Lib/FreeRTOS/Source/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6545              		.loc 1 4992 17 discriminator 3 view .LVU2085
4993:Lib/FreeRTOS/Source/tasks.c **** 
 6546              		.loc 1 4993 17 view .LVU2086
4993:Lib/FreeRTOS/Source/tasks.c **** 
 6547              		.loc 1 4993 17 view .LVU2087
4993:Lib/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccEd3BVV.s 			page 247


 6548              		.loc 1 4993 17 view .LVU2088
4993:Lib/FreeRTOS/Source/tasks.c **** 
 6549              		.loc 1 4993 17 view .LVU2089
 6550 0076 214B     		ldr	r3, .L513+12
 6551              	.LVL512:
4993:Lib/FreeRTOS/Source/tasks.c **** 
 6552              		.loc 1 4993 17 is_stmt 0 view .LVU2090
 6553 0078 E26A     		ldr	r2, [r4, #44]
 6554 007a 1968     		ldr	r1, [r3]
 6555 007c 8A42     		cmp	r2, r1
4993:Lib/FreeRTOS/Source/tasks.c **** 
 6556              		.loc 1 4993 17 is_stmt 1 discriminator 1 view .LVU2091
 6557 007e 88BF     		it	hi
 6558 0080 1A60     		strhi	r2, [r3]
4993:Lib/FreeRTOS/Source/tasks.c **** 
 6559              		.loc 1 4993 17 discriminator 3 view .LVU2092
4993:Lib/FreeRTOS/Source/tasks.c **** 
 6560              		.loc 1 4993 17 discriminator 3 view .LVU2093
 6561              	.LBB179:
4993:Lib/FreeRTOS/Source/tasks.c **** 
 6562              		.loc 1 4993 17 discriminator 3 view .LVU2094
 6563 0082 1423     		movs	r3, #20
 6564 0084 5343     		muls	r3, r2, r3
 6565 0086 1E49     		ldr	r1, .L513+16
 6566 0088 CE18     		adds	r6, r1, r3
 6567              	.LVL513:
4993:Lib/FreeRTOS/Source/tasks.c **** 
 6568              		.loc 1 4993 17 is_stmt 0 discriminator 3 view .LVU2095
 6569 008a 7068     		ldr	r0, [r6, #4]
 6570              	.LVL514:
4993:Lib/FreeRTOS/Source/tasks.c **** 
 6571              		.loc 1 4993 17 is_stmt 1 discriminator 3 view .LVU2096
4993:Lib/FreeRTOS/Source/tasks.c **** 
 6572              		.loc 1 4993 17 discriminator 3 view .LVU2097
4993:Lib/FreeRTOS/Source/tasks.c **** 
 6573              		.loc 1 4993 17 discriminator 3 view .LVU2098
 6574 008c 8768     		ldr	r7, [r0, #8]
 6575 008e A060     		str	r0, [r4, #8]
4993:Lib/FreeRTOS/Source/tasks.c **** 
 6576              		.loc 1 4993 17 discriminator 3 view .LVU2099
 6577 0090 E760     		str	r7, [r4, #12]
4993:Lib/FreeRTOS/Source/tasks.c **** 
 6578              		.loc 1 4993 17 discriminator 3 view .LVU2100
 6579 0092 7D60     		str	r5, [r7, #4]
4993:Lib/FreeRTOS/Source/tasks.c **** 
 6580              		.loc 1 4993 17 discriminator 3 view .LVU2101
 6581 0094 8560     		str	r5, [r0, #8]
4993:Lib/FreeRTOS/Source/tasks.c **** 
 6582              		.loc 1 4993 17 discriminator 3 view .LVU2102
 6583 0096 C858     		ldr	r0, [r1, r3]
 6584              	.LVL515:
4993:Lib/FreeRTOS/Source/tasks.c **** 
 6585              		.loc 1 4993 17 is_stmt 0 discriminator 3 view .LVU2103
 6586 0098 6661     		str	r6, [r4, #20]
 6587              	.LVL516:
4993:Lib/FreeRTOS/Source/tasks.c **** 
 6588              		.loc 1 4993 17 is_stmt 1 discriminator 3 view .LVU2104
ARM GAS  /tmp/ccEd3BVV.s 			page 248


 6589 009a 0130     		adds	r0, r0, #1
 6590 009c C850     		str	r0, [r1, r3]
 6591              	.LBE179:
4993:Lib/FreeRTOS/Source/tasks.c **** 
 6592              		.loc 1 4993 17 discriminator 3 view .LVU2105
4993:Lib/FreeRTOS/Source/tasks.c **** 
 6593              		.loc 1 4993 17 discriminator 3 view .LVU2106
4993:Lib/FreeRTOS/Source/tasks.c **** 
 6594              		.loc 1 4993 17 discriminator 3 view .LVU2107
4996:Lib/FreeRTOS/Source/tasks.c **** 
 6595              		.loc 1 4996 17 view .LVU2108
 6596 009e A36A     		ldr	r3, [r4, #40]
 6597 00a0 C3B1     		cbz	r3, .L500
4996:Lib/FreeRTOS/Source/tasks.c **** 
 6598              		.loc 1 4996 17 discriminator 1 view .LVU2109
 6599 00a2 FFF7FEFF 		bl	ulSetInterruptMask
 6600              	.LVL517:
4996:Lib/FreeRTOS/Source/tasks.c **** 
 6601              		.loc 1 4996 17 discriminator 1 view .LVU2110
 6602 00a6 41F28431 		movw	r1, #4996
 6603 00aa 114B     		ldr	r3, .L513
 6604 00ac 114A     		ldr	r2, .L513+4
 6605 00ae B3E7     		b	.L512
 6606              	.LVL518:
 6607              	.L492:
4949:Lib/FreeRTOS/Source/tasks.c ****                     break;
 6608              		.loc 1 4949 21 view .LVU2111
4949:Lib/FreeRTOS/Source/tasks.c ****                     break;
 6609              		.loc 1 4949 45 is_stmt 0 view .LVU2112
 6610 00b0 A36D     		ldr	r3, [r4, #88]
4949:Lib/FreeRTOS/Source/tasks.c ****                     break;
 6611              		.loc 1 4949 66 view .LVU2113
 6612 00b2 0133     		adds	r3, r3, #1
 6613 00b4 CFE7     		b	.L510
 6614              	.L489:
4958:Lib/FreeRTOS/Source/tasks.c ****                     {
 6615              		.loc 1 4958 21 is_stmt 1 view .LVU2114
4958:Lib/FreeRTOS/Source/tasks.c ****                     {
 6616              		.loc 1 4958 23 is_stmt 0 view .LVU2115
 6617 00b6 022A     		cmp	r2, #2
 6618 00b8 18D0     		beq	.L502
 6619              	.L511:
4960:Lib/FreeRTOS/Source/tasks.c ****                     }
 6620              		.loc 1 4960 25 is_stmt 1 view .LVU2116
4960:Lib/FreeRTOS/Source/tasks.c ****                     }
 6621              		.loc 1 4960 67 is_stmt 0 view .LVU2117
 6622 00ba A565     		str	r5, [r4, #88]
 6623 00bc CCE7     		b	.L494
 6624              	.L488:
4981:Lib/FreeRTOS/Source/tasks.c **** 
 6625              		.loc 1 4981 21 is_stmt 1 view .LVU2118
 6626 00be 114B     		ldr	r3, .L513+20
 6627 00c0 1B68     		ldr	r3, [r3]
 6628 00c2 002B     		cmp	r3, #0
 6629 00c4 C8D0     		beq	.L494
4981:Lib/FreeRTOS/Source/tasks.c **** 
 6630              		.loc 1 4981 21 discriminator 1 view .LVU2119
ARM GAS  /tmp/ccEd3BVV.s 			page 249


 6631 00c6 FFF7FEFF 		bl	ulSetInterruptMask
 6632              	.LVL519:
4981:Lib/FreeRTOS/Source/tasks.c **** 
 6633              		.loc 1 4981 21 discriminator 1 view .LVU2120
 6634 00ca 41F27531 		movw	r1, #4981
 6635 00ce 084B     		ldr	r3, .L513
 6636 00d0 084A     		ldr	r2, .L513+4
 6637 00d2 A1E7     		b	.L512
 6638              	.LVL520:
 6639              	.L500:
4996:Lib/FreeRTOS/Source/tasks.c **** 
 6640              		.loc 1 4996 94 discriminator 2 view .LVU2121
5014:Lib/FreeRTOS/Source/tasks.c ****                 {
 6641              		.loc 1 5014 17 view .LVU2122
5014:Lib/FreeRTOS/Source/tasks.c ****                 {
 6642              		.loc 1 5014 53 is_stmt 0 view .LVU2123
 6643 00d4 0C4B     		ldr	r3, .L513+24
 6644 00d6 1B68     		ldr	r3, [r3]
5014:Lib/FreeRTOS/Source/tasks.c ****                 {
 6645              		.loc 1 5014 19 view .LVU2124
 6646 00d8 DB6A     		ldr	r3, [r3, #44]
 6647 00da 9A42     		cmp	r2, r3
 6648 00dc 01D9     		bls	.L497
5018:Lib/FreeRTOS/Source/tasks.c ****                 }
 6649              		.loc 1 5018 21 is_stmt 1 view .LVU2125
 6650 00de FFF7FEFF 		bl	vPortYield
 6651              	.LVL521:
 6652              	.L497:
4922:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 6653              		.loc 1 4922 5 is_stmt 0 view .LVU2126
 6654 00e2 0124     		movs	r4, #1
 6655              	.LVL522:
 6656              	.L495:
5027:Lib/FreeRTOS/Source/tasks.c ****             }
 6657              		.loc 1 5027 41 is_stmt 1 view .LVU2127
5030:Lib/FreeRTOS/Source/tasks.c **** 
 6658              		.loc 1 5030 9 view .LVU2128
 6659 00e4 FFF7FEFF 		bl	vPortExitCritical
 6660              	.LVL523:
5032:Lib/FreeRTOS/Source/tasks.c ****     }
 6661              		.loc 1 5032 9 view .LVU2129
5033:Lib/FreeRTOS/Source/tasks.c **** 
 6662              		.loc 1 5033 5 is_stmt 0 view .LVU2130
 6663 00e8 2046     		mov	r0, r4
 6664 00ea F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6665              	.LVL524:
 6666              	.L502:
4965:Lib/FreeRTOS/Source/tasks.c ****                     }
 6667              		.loc 1 4965 33 view .LVU2131
 6668 00ec 0024     		movs	r4, #0
 6669              	.LVL525:
4965:Lib/FreeRTOS/Source/tasks.c ****                     }
 6670              		.loc 1 4965 33 view .LVU2132
 6671 00ee F9E7     		b	.L495
 6672              	.L514:
 6673              		.align	2
 6674              	.L513:
ARM GAS  /tmp/ccEd3BVV.s 			page 250


 6675 00f0 00000000 		.word	.LC0
 6676 00f4 00000000 		.word	__func__.4
 6677 00f8 02000000 		.word	.LC1
 6678 00fc 00000000 		.word	uxTopReadyPriority
 6679 0100 00000000 		.word	pxReadyTasksLists
 6680 0104 00000000 		.word	xTickCount
 6681 0108 00000000 		.word	pxCurrentTCB
 6682              		.cfi_endproc
 6683              	.LFE57:
 6685              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 6686              		.align	1
 6687              		.global	xTaskGenericNotifyFromISR
 6688              		.syntax unified
 6689              		.thumb
 6690              		.thumb_func
 6692              	xTaskGenericNotifyFromISR:
 6693              	.LVL526:
 6694              	.LFB58:
5046:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 6695              		.loc 1 5046 5 is_stmt 1 view -0
 6696              		.cfi_startproc
 6697              		@ args = 8, pretend = 0, frame = 0
 6698              		@ frame_needed = 0, uses_anonymous_args = 0
5047:Lib/FreeRTOS/Source/tasks.c ****         uint8_t ucOriginalNotifyState;
 6699              		.loc 1 5047 9 view .LVU2134
5048:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn = pdPASS;
 6700              		.loc 1 5048 9 view .LVU2135
5049:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 6701              		.loc 1 5049 9 view .LVU2136
5050:Lib/FreeRTOS/Source/tasks.c **** 
 6702              		.loc 1 5050 9 view .LVU2137
5052:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6703              		.loc 1 5052 9 view .LVU2138
5046:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 6704              		.loc 1 5046 5 is_stmt 0 view .LVU2139
 6705 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 6706              		.cfi_def_cfa_offset 24
 6707              		.cfi_offset 4, -24
 6708              		.cfi_offset 5, -20
 6709              		.cfi_offset 6, -16
 6710              		.cfi_offset 7, -12
 6711              		.cfi_offset 8, -8
 6712              		.cfi_offset 14, -4
5046:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 6713              		.loc 1 5046 5 view .LVU2140
 6714 0004 1546     		mov	r5, r2
 6715 0006 DDE90686 		ldrd	r8, r6, [sp, #24]
 6716 000a 1F46     		mov	r7, r3
5052:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6717              		.loc 1 5052 9 view .LVU2141
 6718 000c 0446     		mov	r4, r0
 6719 000e 40B9     		cbnz	r0, .L516
5052:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6720              		.loc 1 5052 9 is_stmt 1 discriminator 1 view .LVU2142
 6721 0010 FFF7FEFF 		bl	ulSetInterruptMask
 6722              	.LVL527:
5052:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
ARM GAS  /tmp/ccEd3BVV.s 			page 251


 6723              		.loc 1 5052 9 discriminator 1 view .LVU2143
 6724 0014 41F2BC31 		movw	r1, #5052
 6725 0018 474B     		ldr	r3, .L550
 6726 001a 484A     		ldr	r2, .L550+4
 6727              	.L549:
5053:Lib/FreeRTOS/Source/tasks.c **** 
 6728              		.loc 1 5053 9 is_stmt 0 discriminator 1 view .LVU2144
 6729 001c 4848     		ldr	r0, .L550+8
 6730 001e FFF7FEFF 		bl	__assert_func
 6731              	.LVL528:
 6732              	.L516:
5052:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6733              		.loc 1 5052 38 is_stmt 1 discriminator 2 view .LVU2145
5053:Lib/FreeRTOS/Source/tasks.c **** 
 6734              		.loc 1 5053 9 view .LVU2146
 6735 0022 31B1     		cbz	r1, .L517
5053:Lib/FreeRTOS/Source/tasks.c **** 
 6736              		.loc 1 5053 9 discriminator 1 view .LVU2147
 6737 0024 FFF7FEFF 		bl	ulSetInterruptMask
 6738              	.LVL529:
5053:Lib/FreeRTOS/Source/tasks.c **** 
 6739              		.loc 1 5053 9 discriminator 1 view .LVU2148
 6740 0028 41F2BD31 		movw	r1, #5053
 6741 002c 424B     		ldr	r3, .L550
 6742 002e 434A     		ldr	r2, .L550+4
 6743 0030 F4E7     		b	.L549
 6744              	.LVL530:
 6745              	.L517:
5053:Lib/FreeRTOS/Source/tasks.c **** 
 6746              		.loc 1 5053 80 discriminator 2 view .LVU2149
5071:Lib/FreeRTOS/Source/tasks.c **** 
 6747              		.loc 1 5071 9 view .LVU2150
 6748 0032 FFF7FEFF 		bl	vPortValidateInterruptPriority
 6749              	.LVL531:
5073:Lib/FreeRTOS/Source/tasks.c **** 
 6750              		.loc 1 5073 9 view .LVU2151
5075:Lib/FreeRTOS/Source/tasks.c ****         {
 6751              		.loc 1 5075 9 view .LVU2152
5075:Lib/FreeRTOS/Source/tasks.c ****         {
 6752              		.loc 1 5075 34 is_stmt 0 view .LVU2153
 6753 0036 FFF7FEFF 		bl	ulSetInterruptMask
 6754              	.LVL532:
5077:Lib/FreeRTOS/Source/tasks.c ****             {
 6755              		.loc 1 5077 13 is_stmt 1 view .LVU2154
5077:Lib/FreeRTOS/Source/tasks.c ****             {
 6756              		.loc 1 5077 15 is_stmt 0 view .LVU2155
 6757 003a B8F1000F 		cmp	r8, #0
 6758 003e 02D0     		beq	.L518
5079:Lib/FreeRTOS/Source/tasks.c ****             }
 6759              		.loc 1 5079 17 is_stmt 1 view .LVU2156
5079:Lib/FreeRTOS/Source/tasks.c ****             }
 6760              		.loc 1 5079 71 is_stmt 0 view .LVU2157
 6761 0040 A36D     		ldr	r3, [r4, #88]
5079:Lib/FreeRTOS/Source/tasks.c ****             }
 6762              		.loc 1 5079 47 view .LVU2158
 6763 0042 C8F80030 		str	r3, [r8]
 6764              	.L518:
ARM GAS  /tmp/ccEd3BVV.s 			page 252


5082:Lib/FreeRTOS/Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 6765              		.loc 1 5082 13 is_stmt 1 view .LVU2159
5083:Lib/FreeRTOS/Source/tasks.c **** 
 6766              		.loc 1 5083 53 is_stmt 0 view .LVU2160
 6767 0046 0223     		movs	r3, #2
5082:Lib/FreeRTOS/Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 6768              		.loc 1 5082 35 view .LVU2161
 6769 0048 94F85C20 		ldrb	r2, [r4, #92]	@ zero_extendqisi2
5083:Lib/FreeRTOS/Source/tasks.c **** 
 6770              		.loc 1 5083 53 view .LVU2162
 6771 004c 84F85C30 		strb	r3, [r4, #92]
5082:Lib/FreeRTOS/Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 6772              		.loc 1 5082 35 view .LVU2163
 6773 0050 D2B2     		uxtb	r2, r2
 6774              	.LVL533:
5083:Lib/FreeRTOS/Source/tasks.c **** 
 6775              		.loc 1 5083 13 is_stmt 1 view .LVU2164
5085:Lib/FreeRTOS/Source/tasks.c ****             {
 6776              		.loc 1 5085 13 view .LVU2165
 6777 0052 042F     		cmp	r7, #4
 6778 0054 19D8     		bhi	.L519
 6779 0056 DFE807F0 		tbb	[pc, r7]
 6780              	.L521:
 6781 005a 06       		.byte	(.L525-.L521)/2
 6782 005b 03       		.byte	(.L524-.L521)/2
 6783 005c 11       		.byte	(.L523-.L521)/2
 6784 005d 16       		.byte	(.L548-.L521)/2
 6785 005e 14       		.byte	(.L520-.L521)/2
 6786 005f 00       		.p2align 1
 6787              	.L524:
5088:Lib/FreeRTOS/Source/tasks.c ****                     break;
 6788              		.loc 1 5088 21 view .LVU2166
5088:Lib/FreeRTOS/Source/tasks.c ****                     break;
 6789              		.loc 1 5088 43 is_stmt 0 view .LVU2167
 6790 0060 A36D     		ldr	r3, [r4, #88]
5088:Lib/FreeRTOS/Source/tasks.c ****                     break;
 6791              		.loc 1 5088 63 view .LVU2168
 6792 0062 2B43     		orrs	r3, r3, r5
 6793              	.L547:
5092:Lib/FreeRTOS/Source/tasks.c ****                     break;
 6794              		.loc 1 5092 66 view .LVU2169
 6795 0064 A365     		str	r3, [r4, #88]
5093:Lib/FreeRTOS/Source/tasks.c **** 
 6796              		.loc 1 5093 21 is_stmt 1 view .LVU2170
 6797              	.L525:
5128:Lib/FreeRTOS/Source/tasks.c **** 
 6798              		.loc 1 5128 57 view .LVU2171
5132:Lib/FreeRTOS/Source/tasks.c ****             {
 6799              		.loc 1 5132 13 view .LVU2172
5132:Lib/FreeRTOS/Source/tasks.c ****             {
 6800              		.loc 1 5132 15 is_stmt 0 view .LVU2173
 6801 0066 012A     		cmp	r2, #1
 6802 0068 4FD1     		bne	.L528
5135:Lib/FreeRTOS/Source/tasks.c **** 
 6803              		.loc 1 5135 17 is_stmt 1 view .LVU2174
 6804 006a A36A     		ldr	r3, [r4, #40]
 6805 006c C3B1     		cbz	r3, .L529
ARM GAS  /tmp/ccEd3BVV.s 			page 253


5135:Lib/FreeRTOS/Source/tasks.c **** 
 6806              		.loc 1 5135 17 discriminator 1 view .LVU2175
 6807 006e FFF7FEFF 		bl	ulSetInterruptMask
 6808              	.LVL534:
5135:Lib/FreeRTOS/Source/tasks.c **** 
 6809              		.loc 1 5135 17 discriminator 1 view .LVU2176
 6810 0072 41F20F41 		movw	r1, #5135
 6811 0076 304B     		ldr	r3, .L550
 6812 0078 304A     		ldr	r2, .L550+4
 6813 007a CFE7     		b	.L549
 6814              	.LVL535:
 6815              	.L523:
5092:Lib/FreeRTOS/Source/tasks.c ****                     break;
 6816              		.loc 1 5092 21 view .LVU2177
5092:Lib/FreeRTOS/Source/tasks.c ****                     break;
 6817              		.loc 1 5092 45 is_stmt 0 view .LVU2178
 6818 007c A36D     		ldr	r3, [r4, #88]
5092:Lib/FreeRTOS/Source/tasks.c ****                     break;
 6819              		.loc 1 5092 66 view .LVU2179
 6820 007e 0133     		adds	r3, r3, #1
 6821 0080 F0E7     		b	.L547
 6822              	.L520:
5101:Lib/FreeRTOS/Source/tasks.c ****                     {
 6823              		.loc 1 5101 21 is_stmt 1 view .LVU2180
5101:Lib/FreeRTOS/Source/tasks.c ****                     {
 6824              		.loc 1 5101 23 is_stmt 0 view .LVU2181
 6825 0082 022A     		cmp	r2, #2
 6826 0084 55D0     		beq	.L536
 6827              	.L548:
5103:Lib/FreeRTOS/Source/tasks.c ****                     }
 6828              		.loc 1 5103 25 is_stmt 1 view .LVU2182
5103:Lib/FreeRTOS/Source/tasks.c ****                     }
 6829              		.loc 1 5103 67 is_stmt 0 view .LVU2183
 6830 0086 A565     		str	r5, [r4, #88]
 6831 0088 EDE7     		b	.L525
 6832              	.L519:
5124:Lib/FreeRTOS/Source/tasks.c ****                     break;
 6833              		.loc 1 5124 21 is_stmt 1 view .LVU2184
 6834 008a 2E4B     		ldr	r3, .L550+12
 6835 008c 1B68     		ldr	r3, [r3]
 6836 008e 002B     		cmp	r3, #0
 6837 0090 E9D0     		beq	.L525
5124:Lib/FreeRTOS/Source/tasks.c ****                     break;
 6838              		.loc 1 5124 21 discriminator 1 view .LVU2185
 6839 0092 FFF7FEFF 		bl	ulSetInterruptMask
 6840              	.LVL536:
5124:Lib/FreeRTOS/Source/tasks.c ****                     break;
 6841              		.loc 1 5124 21 discriminator 1 view .LVU2186
 6842 0096 41F20441 		movw	r1, #5124
 6843 009a 274B     		ldr	r3, .L550
 6844 009c 274A     		ldr	r2, .L550+4
 6845 009e BDE7     		b	.L549
 6846              	.LVL537:
 6847              	.L529:
5135:Lib/FreeRTOS/Source/tasks.c **** 
 6848              		.loc 1 5135 94 discriminator 2 view .LVU2187
5137:Lib/FreeRTOS/Source/tasks.c ****                 {
ARM GAS  /tmp/ccEd3BVV.s 			page 254


 6849              		.loc 1 5137 17 view .LVU2188
5137:Lib/FreeRTOS/Source/tasks.c ****                 {
 6850              		.loc 1 5137 42 is_stmt 0 view .LVU2189
 6851 00a0 294B     		ldr	r3, .L550+16
 6852 00a2 E26A     		ldr	r2, [r4, #44]
 6853              	.LVL538:
5137:Lib/FreeRTOS/Source/tasks.c ****                 {
 6854              		.loc 1 5137 42 view .LVU2190
 6855 00a4 1B68     		ldr	r3, [r3]
5137:Lib/FreeRTOS/Source/tasks.c ****                 {
 6856              		.loc 1 5137 19 view .LVU2191
 6857 00a6 002B     		cmp	r3, #0
 6858 00a8 35D1     		bne	.L530
5139:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6859              		.loc 1 5139 21 is_stmt 1 view .LVU2192
 6860              	.LBB180:
5139:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6861              		.loc 1 5139 21 view .LVU2193
 6862 00aa D4E90251 		ldrd	r5, r1, [r4, #8]
 6863              	.LVL539:
5139:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6864              		.loc 1 5139 21 is_stmt 0 view .LVU2194
 6865 00ae 6369     		ldr	r3, [r4, #20]
 6866              	.LVL540:
5139:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6867              		.loc 1 5139 21 is_stmt 1 view .LVU2195
 6868 00b0 A960     		str	r1, [r5, #8]
5139:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6869              		.loc 1 5139 21 view .LVU2196
 6870 00b2 4D60     		str	r5, [r1, #4]
5139:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6871              		.loc 1 5139 21 view .LVU2197
 6872 00b4 5D68     		ldr	r5, [r3, #4]
 6873 00b6 271D     		adds	r7, r4, #4
 6874              	.LVL541:
5139:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6875              		.loc 1 5139 21 is_stmt 0 view .LVU2198
 6876 00b8 BD42     		cmp	r5, r7
5139:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6877              		.loc 1 5139 21 is_stmt 1 discriminator 1 view .LVU2199
 6878 00ba 08BF     		it	eq
 6879 00bc 5960     		streq	r1, [r3, #4]
5139:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6880              		.loc 1 5139 21 discriminator 3 view .LVU2200
5139:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6881              		.loc 1 5139 21 discriminator 3 view .LVU2201
 6882 00be 1968     		ldr	r1, [r3]
 6883 00c0 0139     		subs	r1, r1, #1
 6884 00c2 1960     		str	r1, [r3]
 6885              	.LBE180:
5139:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6886              		.loc 1 5139 21 discriminator 3 view .LVU2202
5140:Lib/FreeRTOS/Source/tasks.c ****                 }
 6887              		.loc 1 5140 21 view .LVU2203
5140:Lib/FreeRTOS/Source/tasks.c ****                 }
 6888              		.loc 1 5140 21 view .LVU2204
5140:Lib/FreeRTOS/Source/tasks.c ****                 }
ARM GAS  /tmp/ccEd3BVV.s 			page 255


 6889              		.loc 1 5140 21 view .LVU2205
5140:Lib/FreeRTOS/Source/tasks.c ****                 }
 6890              		.loc 1 5140 21 view .LVU2206
 6891 00c4 214B     		ldr	r3, .L550+20
 6892              	.LVL542:
5140:Lib/FreeRTOS/Source/tasks.c ****                 }
 6893              		.loc 1 5140 21 is_stmt 0 view .LVU2207
 6894 00c6 1968     		ldr	r1, [r3]
 6895 00c8 8A42     		cmp	r2, r1
5140:Lib/FreeRTOS/Source/tasks.c ****                 }
 6896              		.loc 1 5140 21 is_stmt 1 discriminator 1 view .LVU2208
 6897 00ca 88BF     		it	hi
 6898 00cc 1A60     		strhi	r2, [r3]
5140:Lib/FreeRTOS/Source/tasks.c ****                 }
 6899              		.loc 1 5140 21 discriminator 3 view .LVU2209
5140:Lib/FreeRTOS/Source/tasks.c ****                 }
 6900              		.loc 1 5140 21 discriminator 3 view .LVU2210
 6901              	.LBB181:
5140:Lib/FreeRTOS/Source/tasks.c ****                 }
 6902              		.loc 1 5140 21 discriminator 3 view .LVU2211
 6903 00ce 1423     		movs	r3, #20
 6904 00d0 5343     		muls	r3, r2, r3
 6905 00d2 1F49     		ldr	r1, .L550+24
 6906 00d4 01EB030C 		add	ip, r1, r3
 6907 00d8 DCF80450 		ldr	r5, [ip, #4]
 6908              	.LVL543:
5140:Lib/FreeRTOS/Source/tasks.c ****                 }
 6909              		.loc 1 5140 21 discriminator 3 view .LVU2212
5140:Lib/FreeRTOS/Source/tasks.c ****                 }
 6910              		.loc 1 5140 21 discriminator 3 view .LVU2213
5140:Lib/FreeRTOS/Source/tasks.c ****                 }
 6911              		.loc 1 5140 21 discriminator 3 view .LVU2214
 6912 00dc D5F808E0 		ldr	lr, [r5, #8]
 6913 00e0 A560     		str	r5, [r4, #8]
5140:Lib/FreeRTOS/Source/tasks.c ****                 }
 6914              		.loc 1 5140 21 discriminator 3 view .LVU2215
 6915 00e2 C4F80CE0 		str	lr, [r4, #12]
5140:Lib/FreeRTOS/Source/tasks.c ****                 }
 6916              		.loc 1 5140 21 discriminator 3 view .LVU2216
 6917 00e6 CEF80470 		str	r7, [lr, #4]
5140:Lib/FreeRTOS/Source/tasks.c ****                 }
 6918              		.loc 1 5140 21 discriminator 3 view .LVU2217
 6919 00ea AF60     		str	r7, [r5, #8]
5140:Lib/FreeRTOS/Source/tasks.c ****                 }
 6920              		.loc 1 5140 21 discriminator 3 view .LVU2218
 6921 00ec C4F814C0 		str	ip, [r4, #20]
 6922              	.LVL544:
5140:Lib/FreeRTOS/Source/tasks.c ****                 }
 6923              		.loc 1 5140 21 discriminator 3 view .LVU2219
 6924 00f0 CC58     		ldr	r4, [r1, r3]
 6925              	.LVL545:
5140:Lib/FreeRTOS/Source/tasks.c ****                 }
 6926              		.loc 1 5140 21 is_stmt 0 discriminator 3 view .LVU2220
 6927 00f2 0134     		adds	r4, r4, #1
 6928 00f4 CC50     		str	r4, [r1, r3]
 6929              	.LBE181:
5140:Lib/FreeRTOS/Source/tasks.c ****                 }
ARM GAS  /tmp/ccEd3BVV.s 			page 256


 6930              		.loc 1 5140 21 is_stmt 1 discriminator 3 view .LVU2221
5140:Lib/FreeRTOS/Source/tasks.c ****                 }
 6931              		.loc 1 5140 21 discriminator 3 view .LVU2222
5140:Lib/FreeRTOS/Source/tasks.c ****                 }
 6932              		.loc 1 5140 21 discriminator 3 view .LVU2223
 6933              	.LVL546:
 6934              	.L533:
5146:Lib/FreeRTOS/Source/tasks.c ****                 }
 6935              		.loc 1 5146 21 discriminator 1 view .LVU2224
5149:Lib/FreeRTOS/Source/tasks.c ****                 {
 6936              		.loc 1 5149 17 view .LVU2225
5149:Lib/FreeRTOS/Source/tasks.c ****                 {
 6937              		.loc 1 5149 53 is_stmt 0 view .LVU2226
 6938 00f6 174B     		ldr	r3, .L550+28
 6939 00f8 1B68     		ldr	r3, [r3]
5149:Lib/FreeRTOS/Source/tasks.c ****                 {
 6940              		.loc 1 5149 19 view .LVU2227
 6941 00fa DB6A     		ldr	r3, [r3, #44]
 6942 00fc 9A42     		cmp	r2, r3
 6943 00fe 04D9     		bls	.L528
5153:Lib/FreeRTOS/Source/tasks.c ****                     {
 6944              		.loc 1 5153 21 is_stmt 1 view .LVU2228
 6945 0100 0123     		movs	r3, #1
5153:Lib/FreeRTOS/Source/tasks.c ****                     {
 6946              		.loc 1 5153 23 is_stmt 0 view .LVU2229
 6947 0102 06B1     		cbz	r6, .L535
5155:Lib/FreeRTOS/Source/tasks.c ****                     }
 6948              		.loc 1 5155 25 is_stmt 1 view .LVU2230
5155:Lib/FreeRTOS/Source/tasks.c ****                     }
 6949              		.loc 1 5155 52 is_stmt 0 view .LVU2231
 6950 0104 3360     		str	r3, [r6]
 6951              	.L535:
5161:Lib/FreeRTOS/Source/tasks.c ****                 }
 6952              		.loc 1 5161 21 is_stmt 1 view .LVU2232
5161:Lib/FreeRTOS/Source/tasks.c ****                 }
 6953              		.loc 1 5161 35 is_stmt 0 view .LVU2233
 6954 0106 144A     		ldr	r2, .L550+32
 6955 0108 1360     		str	r3, [r2]
 6956              	.L528:
5046:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 6957              		.loc 1 5046 5 view .LVU2234
 6958 010a 0124     		movs	r4, #1
 6959              	.L526:
 6960              	.LVL547:
5165:Lib/FreeRTOS/Source/tasks.c ****                 }
 6961              		.loc 1 5165 45 is_stmt 1 view .LVU2235
5169:Lib/FreeRTOS/Source/tasks.c **** 
 6962              		.loc 1 5169 9 view .LVU2236
 6963 010c FFF7FEFF 		bl	vClearInterruptMask
 6964              	.LVL548:
5171:Lib/FreeRTOS/Source/tasks.c ****     }
 6965              		.loc 1 5171 9 view .LVU2237
5172:Lib/FreeRTOS/Source/tasks.c **** 
 6966              		.loc 1 5172 5 is_stmt 0 view .LVU2238
 6967 0110 2046     		mov	r0, r4
 6968 0112 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6969              	.LVL549:
ARM GAS  /tmp/ccEd3BVV.s 			page 257


 6970              	.L530:
5146:Lib/FreeRTOS/Source/tasks.c ****                 }
 6971              		.loc 1 5146 21 is_stmt 1 view .LVU2239
 6972              	.LBB182:
5146:Lib/FreeRTOS/Source/tasks.c ****                 }
 6973              		.loc 1 5146 21 view .LVU2240
 6974 0116 114B     		ldr	r3, .L550+36
 6975 0118 04F11805 		add	r5, r4, #24
 6976              	.LVL550:
5146:Lib/FreeRTOS/Source/tasks.c ****                 }
 6977              		.loc 1 5146 21 is_stmt 0 view .LVU2241
 6978 011c 5968     		ldr	r1, [r3, #4]
 6979              	.LVL551:
5146:Lib/FreeRTOS/Source/tasks.c ****                 }
 6980              		.loc 1 5146 21 is_stmt 1 view .LVU2242
5146:Lib/FreeRTOS/Source/tasks.c ****                 }
 6981              		.loc 1 5146 21 view .LVU2243
5146:Lib/FreeRTOS/Source/tasks.c ****                 }
 6982              		.loc 1 5146 21 view .LVU2244
 6983 011e 8F68     		ldr	r7, [r1, #8]
 6984 0120 E161     		str	r1, [r4, #28]
5146:Lib/FreeRTOS/Source/tasks.c ****                 }
 6985              		.loc 1 5146 21 view .LVU2245
 6986 0122 2762     		str	r7, [r4, #32]
5146:Lib/FreeRTOS/Source/tasks.c ****                 }
 6987              		.loc 1 5146 21 view .LVU2246
 6988 0124 7D60     		str	r5, [r7, #4]
5146:Lib/FreeRTOS/Source/tasks.c ****                 }
 6989              		.loc 1 5146 21 view .LVU2247
 6990 0126 8D60     		str	r5, [r1, #8]
5146:Lib/FreeRTOS/Source/tasks.c ****                 }
 6991              		.loc 1 5146 21 view .LVU2248
 6992 0128 1968     		ldr	r1, [r3]
 6993              	.LVL552:
5146:Lib/FreeRTOS/Source/tasks.c ****                 }
 6994              		.loc 1 5146 21 is_stmt 0 view .LVU2249
 6995 012a A362     		str	r3, [r4, #40]
5146:Lib/FreeRTOS/Source/tasks.c ****                 }
 6996              		.loc 1 5146 21 is_stmt 1 view .LVU2250
 6997 012c 0131     		adds	r1, r1, #1
 6998 012e 1960     		str	r1, [r3]
 6999 0130 E1E7     		b	.L533
 7000              	.LVL553:
 7001              	.L536:
5146:Lib/FreeRTOS/Source/tasks.c ****                 }
 7002              		.loc 1 5146 21 is_stmt 0 view .LVU2251
 7003              	.LBE182:
5108:Lib/FreeRTOS/Source/tasks.c ****                     }
 7004              		.loc 1 5108 33 view .LVU2252
 7005 0132 0024     		movs	r4, #0
 7006              	.LVL554:
5108:Lib/FreeRTOS/Source/tasks.c ****                     }
 7007              		.loc 1 5108 33 view .LVU2253
 7008 0134 EAE7     		b	.L526
 7009              	.L551:
 7010 0136 00BF     		.align	2
 7011              	.L550:
ARM GAS  /tmp/ccEd3BVV.s 			page 258


 7012 0138 00000000 		.word	.LC0
 7013 013c 00000000 		.word	__func__.3
 7014 0140 02000000 		.word	.LC1
 7015 0144 00000000 		.word	xTickCount
 7016 0148 00000000 		.word	uxSchedulerSuspended
 7017 014c 00000000 		.word	uxTopReadyPriority
 7018 0150 00000000 		.word	pxReadyTasksLists
 7019 0154 00000000 		.word	pxCurrentTCB
 7020 0158 00000000 		.word	xYieldPending
 7021 015c 00000000 		.word	xPendingReadyList
 7022              		.cfi_endproc
 7023              	.LFE58:
 7025              		.section	.text.vTaskGenericNotifyGiveFromISR,"ax",%progbits
 7026              		.align	1
 7027              		.global	vTaskGenericNotifyGiveFromISR
 7028              		.syntax unified
 7029              		.thumb
 7030              		.thumb_func
 7032              	vTaskGenericNotifyGiveFromISR:
 7033              	.LVL555:
 7034              	.LFB59:
5182:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 7035              		.loc 1 5182 5 is_stmt 1 view -0
 7036              		.cfi_startproc
 7037              		@ args = 0, pretend = 0, frame = 0
 7038              		@ frame_needed = 0, uses_anonymous_args = 0
5183:Lib/FreeRTOS/Source/tasks.c ****         uint8_t ucOriginalNotifyState;
 7039              		.loc 1 5183 9 view .LVU2255
5184:Lib/FreeRTOS/Source/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 7040              		.loc 1 5184 9 view .LVU2256
5185:Lib/FreeRTOS/Source/tasks.c **** 
 7041              		.loc 1 5185 9 view .LVU2257
5187:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7042              		.loc 1 5187 9 view .LVU2258
5182:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 7043              		.loc 1 5182 5 is_stmt 0 view .LVU2259
 7044 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 7045              		.cfi_def_cfa_offset 24
 7046              		.cfi_offset 3, -24
 7047              		.cfi_offset 4, -20
 7048              		.cfi_offset 5, -16
 7049              		.cfi_offset 6, -12
 7050              		.cfi_offset 7, -8
 7051              		.cfi_offset 14, -4
5182:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 7052              		.loc 1 5182 5 view .LVU2260
 7053 0002 1546     		mov	r5, r2
5187:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7054              		.loc 1 5187 9 view .LVU2261
 7055 0004 0446     		mov	r4, r0
 7056 0006 40B9     		cbnz	r0, .L553
5187:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7057              		.loc 1 5187 9 is_stmt 1 discriminator 1 view .LVU2262
 7058 0008 FFF7FEFF 		bl	ulSetInterruptMask
 7059              	.LVL556:
5187:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7060              		.loc 1 5187 9 discriminator 1 view .LVU2263
ARM GAS  /tmp/ccEd3BVV.s 			page 259


 7061 000c 41F24341 		movw	r1, #5187
 7062 0010 354B     		ldr	r3, .L568
 7063 0012 364A     		ldr	r2, .L568+4
 7064              	.L567:
5188:Lib/FreeRTOS/Source/tasks.c **** 
 7065              		.loc 1 5188 9 is_stmt 0 discriminator 1 view .LVU2264
 7066 0014 3648     		ldr	r0, .L568+8
 7067 0016 FFF7FEFF 		bl	__assert_func
 7068              	.LVL557:
 7069              	.L553:
5187:Lib/FreeRTOS/Source/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7070              		.loc 1 5187 38 is_stmt 1 discriminator 2 view .LVU2265
5188:Lib/FreeRTOS/Source/tasks.c **** 
 7071              		.loc 1 5188 9 view .LVU2266
 7072 001a 31B1     		cbz	r1, .L554
5188:Lib/FreeRTOS/Source/tasks.c **** 
 7073              		.loc 1 5188 9 discriminator 1 view .LVU2267
 7074 001c FFF7FEFF 		bl	ulSetInterruptMask
 7075              	.LVL558:
5188:Lib/FreeRTOS/Source/tasks.c **** 
 7076              		.loc 1 5188 9 discriminator 1 view .LVU2268
 7077 0020 41F24441 		movw	r1, #5188
 7078 0024 304B     		ldr	r3, .L568
 7079 0026 314A     		ldr	r2, .L568+4
 7080 0028 F4E7     		b	.L567
 7081              	.LVL559:
 7082              	.L554:
5188:Lib/FreeRTOS/Source/tasks.c **** 
 7083              		.loc 1 5188 80 discriminator 2 view .LVU2269
5206:Lib/FreeRTOS/Source/tasks.c **** 
 7084              		.loc 1 5206 9 view .LVU2270
 7085 002a FFF7FEFF 		bl	vPortValidateInterruptPriority
 7086              	.LVL560:
5208:Lib/FreeRTOS/Source/tasks.c **** 
 7087              		.loc 1 5208 9 view .LVU2271
5210:Lib/FreeRTOS/Source/tasks.c ****         {
 7088              		.loc 1 5210 9 view .LVU2272
5210:Lib/FreeRTOS/Source/tasks.c ****         {
 7089              		.loc 1 5210 34 is_stmt 0 view .LVU2273
 7090 002e FFF7FEFF 		bl	ulSetInterruptMask
 7091              	.LVL561:
5212:Lib/FreeRTOS/Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 7092              		.loc 1 5212 13 is_stmt 1 view .LVU2274
5213:Lib/FreeRTOS/Source/tasks.c **** 
 7093              		.loc 1 5213 53 is_stmt 0 view .LVU2275
 7094 0032 0223     		movs	r3, #2
5212:Lib/FreeRTOS/Source/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 7095              		.loc 1 5212 35 view .LVU2276
 7096 0034 94F85C20 		ldrb	r2, [r4, #92]	@ zero_extendqisi2
 7097              	.LVL562:
5213:Lib/FreeRTOS/Source/tasks.c **** 
 7098              		.loc 1 5213 13 is_stmt 1 view .LVU2277
5213:Lib/FreeRTOS/Source/tasks.c **** 
 7099              		.loc 1 5213 53 is_stmt 0 view .LVU2278
 7100 0038 84F85C30 		strb	r3, [r4, #92]
5217:Lib/FreeRTOS/Source/tasks.c **** 
 7101              		.loc 1 5217 13 is_stmt 1 view .LVU2279
ARM GAS  /tmp/ccEd3BVV.s 			page 260


5217:Lib/FreeRTOS/Source/tasks.c **** 
 7102              		.loc 1 5217 37 is_stmt 0 view .LVU2280
 7103 003c A36D     		ldr	r3, [r4, #88]
5223:Lib/FreeRTOS/Source/tasks.c ****             {
 7104              		.loc 1 5223 15 view .LVU2281
 7105 003e 012A     		cmp	r2, #1
5217:Lib/FreeRTOS/Source/tasks.c **** 
 7106              		.loc 1 5217 58 view .LVU2282
 7107 0040 03F10103 		add	r3, r3, #1
 7108 0044 A365     		str	r3, [r4, #88]
5219:Lib/FreeRTOS/Source/tasks.c **** 
 7109              		.loc 1 5219 62 is_stmt 1 view .LVU2283
5223:Lib/FreeRTOS/Source/tasks.c ****             {
 7110              		.loc 1 5223 13 view .LVU2284
5223:Lib/FreeRTOS/Source/tasks.c ****             {
 7111              		.loc 1 5223 15 is_stmt 0 view .LVU2285
 7112 0046 3DD1     		bne	.L556
5226:Lib/FreeRTOS/Source/tasks.c **** 
 7113              		.loc 1 5226 17 is_stmt 1 view .LVU2286
 7114 0048 A36A     		ldr	r3, [r4, #40]
 7115 004a 33B1     		cbz	r3, .L557
5226:Lib/FreeRTOS/Source/tasks.c **** 
 7116              		.loc 1 5226 17 discriminator 1 view .LVU2287
 7117 004c FFF7FEFF 		bl	ulSetInterruptMask
 7118              	.LVL563:
5226:Lib/FreeRTOS/Source/tasks.c **** 
 7119              		.loc 1 5226 17 discriminator 1 view .LVU2288
 7120 0050 41F26A41 		movw	r1, #5226
 7121 0054 244B     		ldr	r3, .L568
 7122 0056 254A     		ldr	r2, .L568+4
 7123 0058 DCE7     		b	.L567
 7124              	.LVL564:
 7125              	.L557:
5226:Lib/FreeRTOS/Source/tasks.c **** 
 7126              		.loc 1 5226 94 discriminator 2 view .LVU2289
5228:Lib/FreeRTOS/Source/tasks.c ****                 {
 7127              		.loc 1 5228 17 view .LVU2290
5228:Lib/FreeRTOS/Source/tasks.c ****                 {
 7128              		.loc 1 5228 42 is_stmt 0 view .LVU2291
 7129 005a 264B     		ldr	r3, .L568+12
 7130 005c E26A     		ldr	r2, [r4, #44]
 7131              	.LVL565:
5228:Lib/FreeRTOS/Source/tasks.c ****                 {
 7132              		.loc 1 5228 42 view .LVU2292
 7133 005e 1B68     		ldr	r3, [r3]
5228:Lib/FreeRTOS/Source/tasks.c ****                 {
 7134              		.loc 1 5228 19 view .LVU2293
 7135 0060 002B     		cmp	r3, #0
 7136 0062 33D1     		bne	.L558
5230:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7137              		.loc 1 5230 21 is_stmt 1 view .LVU2294
 7138              	.LBB183:
5230:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7139              		.loc 1 5230 21 view .LVU2295
 7140 0064 D4E90261 		ldrd	r6, r1, [r4, #8]
 7141 0068 6369     		ldr	r3, [r4, #20]
 7142              	.LVL566:
ARM GAS  /tmp/ccEd3BVV.s 			page 261


5230:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7143              		.loc 1 5230 21 view .LVU2296
 7144 006a B160     		str	r1, [r6, #8]
5230:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7145              		.loc 1 5230 21 view .LVU2297
 7146 006c 4E60     		str	r6, [r1, #4]
5230:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7147              		.loc 1 5230 21 view .LVU2298
 7148 006e 5E68     		ldr	r6, [r3, #4]
 7149 0070 271D     		adds	r7, r4, #4
 7150 0072 BE42     		cmp	r6, r7
5230:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7151              		.loc 1 5230 21 discriminator 1 view .LVU2299
 7152 0074 08BF     		it	eq
 7153 0076 5960     		streq	r1, [r3, #4]
5230:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7154              		.loc 1 5230 21 discriminator 3 view .LVU2300
5230:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7155              		.loc 1 5230 21 discriminator 3 view .LVU2301
 7156 0078 1968     		ldr	r1, [r3]
 7157 007a 0139     		subs	r1, r1, #1
 7158 007c 1960     		str	r1, [r3]
 7159              	.LBE183:
5230:Lib/FreeRTOS/Source/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7160              		.loc 1 5230 21 discriminator 3 view .LVU2302
5231:Lib/FreeRTOS/Source/tasks.c ****                 }
 7161              		.loc 1 5231 21 view .LVU2303
5231:Lib/FreeRTOS/Source/tasks.c ****                 }
 7162              		.loc 1 5231 21 view .LVU2304
5231:Lib/FreeRTOS/Source/tasks.c ****                 }
 7163              		.loc 1 5231 21 view .LVU2305
5231:Lib/FreeRTOS/Source/tasks.c ****                 }
 7164              		.loc 1 5231 21 view .LVU2306
 7165 007e 1E4B     		ldr	r3, .L568+16
 7166              	.LVL567:
5231:Lib/FreeRTOS/Source/tasks.c ****                 }
 7167              		.loc 1 5231 21 is_stmt 0 view .LVU2307
 7168 0080 1968     		ldr	r1, [r3]
 7169 0082 8A42     		cmp	r2, r1
5231:Lib/FreeRTOS/Source/tasks.c ****                 }
 7170              		.loc 1 5231 21 is_stmt 1 discriminator 1 view .LVU2308
 7171 0084 88BF     		it	hi
 7172 0086 1A60     		strhi	r2, [r3]
5231:Lib/FreeRTOS/Source/tasks.c ****                 }
 7173              		.loc 1 5231 21 discriminator 3 view .LVU2309
5231:Lib/FreeRTOS/Source/tasks.c ****                 }
 7174              		.loc 1 5231 21 discriminator 3 view .LVU2310
 7175              	.LBB184:
5231:Lib/FreeRTOS/Source/tasks.c ****                 }
 7176              		.loc 1 5231 21 discriminator 3 view .LVU2311
 7177 0088 1423     		movs	r3, #20
 7178 008a 5343     		muls	r3, r2, r3
 7179 008c 1B49     		ldr	r1, .L568+20
 7180 008e 01EB030C 		add	ip, r1, r3
 7181 0092 DCF80460 		ldr	r6, [ip, #4]
 7182              	.LVL568:
5231:Lib/FreeRTOS/Source/tasks.c ****                 }
ARM GAS  /tmp/ccEd3BVV.s 			page 262


 7183              		.loc 1 5231 21 discriminator 3 view .LVU2312
5231:Lib/FreeRTOS/Source/tasks.c ****                 }
 7184              		.loc 1 5231 21 discriminator 3 view .LVU2313
5231:Lib/FreeRTOS/Source/tasks.c ****                 }
 7185              		.loc 1 5231 21 discriminator 3 view .LVU2314
 7186 0096 D6F808E0 		ldr	lr, [r6, #8]
 7187 009a A660     		str	r6, [r4, #8]
5231:Lib/FreeRTOS/Source/tasks.c ****                 }
 7188              		.loc 1 5231 21 discriminator 3 view .LVU2315
 7189 009c C4F80CE0 		str	lr, [r4, #12]
5231:Lib/FreeRTOS/Source/tasks.c ****                 }
 7190              		.loc 1 5231 21 discriminator 3 view .LVU2316
 7191 00a0 CEF80470 		str	r7, [lr, #4]
5231:Lib/FreeRTOS/Source/tasks.c ****                 }
 7192              		.loc 1 5231 21 discriminator 3 view .LVU2317
 7193 00a4 B760     		str	r7, [r6, #8]
5231:Lib/FreeRTOS/Source/tasks.c ****                 }
 7194              		.loc 1 5231 21 discriminator 3 view .LVU2318
 7195 00a6 C4F814C0 		str	ip, [r4, #20]
 7196              	.LVL569:
5231:Lib/FreeRTOS/Source/tasks.c ****                 }
 7197              		.loc 1 5231 21 discriminator 3 view .LVU2319
 7198 00aa CC58     		ldr	r4, [r1, r3]
 7199              	.LVL570:
5231:Lib/FreeRTOS/Source/tasks.c ****                 }
 7200              		.loc 1 5231 21 is_stmt 0 discriminator 3 view .LVU2320
 7201 00ac 0134     		adds	r4, r4, #1
 7202 00ae CC50     		str	r4, [r1, r3]
 7203              	.LBE184:
5231:Lib/FreeRTOS/Source/tasks.c ****                 }
 7204              		.loc 1 5231 21 is_stmt 1 discriminator 3 view .LVU2321
5231:Lib/FreeRTOS/Source/tasks.c ****                 }
 7205              		.loc 1 5231 21 discriminator 3 view .LVU2322
5231:Lib/FreeRTOS/Source/tasks.c ****                 }
 7206              		.loc 1 5231 21 discriminator 3 view .LVU2323
 7207              	.LVL571:
 7208              	.L561:
5237:Lib/FreeRTOS/Source/tasks.c ****                 }
 7209              		.loc 1 5237 21 discriminator 1 view .LVU2324
5240:Lib/FreeRTOS/Source/tasks.c ****                 {
 7210              		.loc 1 5240 17 view .LVU2325
5240:Lib/FreeRTOS/Source/tasks.c ****                 {
 7211              		.loc 1 5240 53 is_stmt 0 view .LVU2326
 7212 00b0 134B     		ldr	r3, .L568+24
 7213 00b2 1B68     		ldr	r3, [r3]
5240:Lib/FreeRTOS/Source/tasks.c ****                 {
 7214              		.loc 1 5240 19 view .LVU2327
 7215 00b4 DB6A     		ldr	r3, [r3, #44]
 7216 00b6 9A42     		cmp	r2, r3
 7217 00b8 04D9     		bls	.L556
5244:Lib/FreeRTOS/Source/tasks.c ****                     {
 7218              		.loc 1 5244 21 is_stmt 1 view .LVU2328
 7219 00ba 0123     		movs	r3, #1
5244:Lib/FreeRTOS/Source/tasks.c ****                     {
 7220              		.loc 1 5244 23 is_stmt 0 view .LVU2329
 7221 00bc 05B1     		cbz	r5, .L563
5246:Lib/FreeRTOS/Source/tasks.c ****                     }
ARM GAS  /tmp/ccEd3BVV.s 			page 263


 7222              		.loc 1 5246 25 is_stmt 1 view .LVU2330
5246:Lib/FreeRTOS/Source/tasks.c ****                     }
 7223              		.loc 1 5246 52 is_stmt 0 view .LVU2331
 7224 00be 2B60     		str	r3, [r5]
 7225              	.L563:
5252:Lib/FreeRTOS/Source/tasks.c ****                 }
 7226              		.loc 1 5252 21 is_stmt 1 view .LVU2332
5252:Lib/FreeRTOS/Source/tasks.c ****                 }
 7227              		.loc 1 5252 35 is_stmt 0 view .LVU2333
 7228 00c0 104A     		ldr	r2, .L568+28
 7229 00c2 1360     		str	r3, [r2]
 7230              	.L556:
5256:Lib/FreeRTOS/Source/tasks.c ****                 }
 7231              		.loc 1 5256 45 is_stmt 1 view .LVU2334
5260:Lib/FreeRTOS/Source/tasks.c ****     }
 7232              		.loc 1 5260 9 view .LVU2335
5261:Lib/FreeRTOS/Source/tasks.c **** 
 7233              		.loc 1 5261 5 is_stmt 0 view .LVU2336
 7234 00c4 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 7235              		.cfi_remember_state
 7236              		.cfi_restore 14
 7237              		.cfi_restore 7
 7238              		.cfi_restore 6
 7239              		.cfi_restore 5
 7240              		.cfi_restore 4
 7241              		.cfi_restore 3
 7242              		.cfi_def_cfa_offset 0
 7243              	.LVL572:
5260:Lib/FreeRTOS/Source/tasks.c ****     }
 7244              		.loc 1 5260 9 view .LVU2337
 7245 00c8 FFF7FEBF 		b	vClearInterruptMask
 7246              	.LVL573:
 7247              	.L558:
 7248              		.cfi_restore_state
5237:Lib/FreeRTOS/Source/tasks.c ****                 }
 7249              		.loc 1 5237 21 is_stmt 1 view .LVU2338
 7250              	.LBB185:
5237:Lib/FreeRTOS/Source/tasks.c ****                 }
 7251              		.loc 1 5237 21 view .LVU2339
 7252 00cc 0E4B     		ldr	r3, .L568+32
 7253 00ce 04F11806 		add	r6, r4, #24
 7254 00d2 5968     		ldr	r1, [r3, #4]
 7255              	.LVL574:
5237:Lib/FreeRTOS/Source/tasks.c ****                 }
 7256              		.loc 1 5237 21 view .LVU2340
5237:Lib/FreeRTOS/Source/tasks.c ****                 }
 7257              		.loc 1 5237 21 view .LVU2341
5237:Lib/FreeRTOS/Source/tasks.c ****                 }
 7258              		.loc 1 5237 21 view .LVU2342
 7259 00d4 8F68     		ldr	r7, [r1, #8]
 7260 00d6 E161     		str	r1, [r4, #28]
5237:Lib/FreeRTOS/Source/tasks.c ****                 }
 7261              		.loc 1 5237 21 view .LVU2343
 7262 00d8 2762     		str	r7, [r4, #32]
5237:Lib/FreeRTOS/Source/tasks.c ****                 }
 7263              		.loc 1 5237 21 view .LVU2344
 7264 00da 7E60     		str	r6, [r7, #4]
ARM GAS  /tmp/ccEd3BVV.s 			page 264


5237:Lib/FreeRTOS/Source/tasks.c ****                 }
 7265              		.loc 1 5237 21 view .LVU2345
 7266 00dc 8E60     		str	r6, [r1, #8]
5237:Lib/FreeRTOS/Source/tasks.c ****                 }
 7267              		.loc 1 5237 21 view .LVU2346
 7268 00de 1968     		ldr	r1, [r3]
 7269              	.LVL575:
5237:Lib/FreeRTOS/Source/tasks.c ****                 }
 7270              		.loc 1 5237 21 is_stmt 0 view .LVU2347
 7271 00e0 A362     		str	r3, [r4, #40]
5237:Lib/FreeRTOS/Source/tasks.c ****                 }
 7272              		.loc 1 5237 21 is_stmt 1 view .LVU2348
 7273 00e2 0131     		adds	r1, r1, #1
 7274 00e4 1960     		str	r1, [r3]
 7275 00e6 E3E7     		b	.L561
 7276              	.L569:
 7277              		.align	2
 7278              	.L568:
 7279 00e8 00000000 		.word	.LC0
 7280 00ec 00000000 		.word	__func__.2
 7281 00f0 02000000 		.word	.LC1
 7282 00f4 00000000 		.word	uxSchedulerSuspended
 7283 00f8 00000000 		.word	uxTopReadyPriority
 7284 00fc 00000000 		.word	pxReadyTasksLists
 7285 0100 00000000 		.word	pxCurrentTCB
 7286 0104 00000000 		.word	xYieldPending
 7287 0108 00000000 		.word	xPendingReadyList
 7288              	.LBE185:
 7289              		.cfi_endproc
 7290              	.LFE59:
 7292              		.section	.text.xTaskGenericNotifyStateClear,"ax",%progbits
 7293              		.align	1
 7294              		.global	xTaskGenericNotifyStateClear
 7295              		.syntax unified
 7296              		.thumb
 7297              		.thumb_func
 7299              	xTaskGenericNotifyStateClear:
 7300              	.LVL576:
 7301              	.LFB60:
5270:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 7302              		.loc 1 5270 5 view -0
 7303              		.cfi_startproc
 7304              		@ args = 0, pretend = 0, frame = 0
 7305              		@ frame_needed = 0, uses_anonymous_args = 0
5271:Lib/FreeRTOS/Source/tasks.c ****         BaseType_t xReturn;
 7306              		.loc 1 5271 9 view .LVU2350
5272:Lib/FreeRTOS/Source/tasks.c **** 
 7307              		.loc 1 5272 9 view .LVU2351
5274:Lib/FreeRTOS/Source/tasks.c **** 
 7308              		.loc 1 5274 9 view .LVU2352
5270:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 7309              		.loc 1 5270 5 is_stmt 0 view .LVU2353
 7310 0000 10B5     		push	{r4, lr}
 7311              		.cfi_def_cfa_offset 8
 7312              		.cfi_offset 4, -8
 7313              		.cfi_offset 14, -4
5270:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
ARM GAS  /tmp/ccEd3BVV.s 			page 265


 7314              		.loc 1 5270 5 view .LVU2354
 7315 0002 0446     		mov	r4, r0
5274:Lib/FreeRTOS/Source/tasks.c **** 
 7316              		.loc 1 5274 9 view .LVU2355
 7317 0004 41B1     		cbz	r1, .L571
5274:Lib/FreeRTOS/Source/tasks.c **** 
 7318              		.loc 1 5274 9 is_stmt 1 discriminator 1 view .LVU2356
 7319 0006 FFF7FEFF 		bl	ulSetInterruptMask
 7320              	.LVL577:
5274:Lib/FreeRTOS/Source/tasks.c **** 
 7321              		.loc 1 5274 9 discriminator 1 view .LVU2357
 7322 000a 41F29A41 		movw	r1, #5274
 7323 000e 0B4B     		ldr	r3, .L575
 7324 0010 0B4A     		ldr	r2, .L575+4
 7325 0012 0C48     		ldr	r0, .L575+8
 7326 0014 FFF7FEFF 		bl	__assert_func
 7327              	.LVL578:
 7328              	.L571:
5274:Lib/FreeRTOS/Source/tasks.c **** 
 7329              		.loc 1 5274 79 discriminator 2 view .LVU2358
5278:Lib/FreeRTOS/Source/tasks.c **** 
 7330              		.loc 1 5278 9 view .LVU2359
5278:Lib/FreeRTOS/Source/tasks.c **** 
 7331              		.loc 1 5278 17 is_stmt 0 view .LVU2360
 7332 0018 08B9     		cbnz	r0, .L572
5278:Lib/FreeRTOS/Source/tasks.c **** 
 7333              		.loc 1 5278 17 discriminator 1 view .LVU2361
 7334 001a 0B4B     		ldr	r3, .L575+12
 7335 001c 1C68     		ldr	r4, [r3]
 7336              	.LVL579:
 7337              	.L572:
5280:Lib/FreeRTOS/Source/tasks.c ****         {
 7338              		.loc 1 5280 9 is_stmt 1 view .LVU2362
 7339 001e FFF7FEFF 		bl	vPortEnterCritical
 7340              	.LVL580:
5282:Lib/FreeRTOS/Source/tasks.c ****             {
 7341              		.loc 1 5282 13 view .LVU2363
 7342 0022 0020     		movs	r0, #0
5284:Lib/FreeRTOS/Source/tasks.c ****                 xReturn = pdPASS;
 7343              		.loc 1 5284 17 view .LVU2364
5282:Lib/FreeRTOS/Source/tasks.c ****             {
 7344              		.loc 1 5282 37 is_stmt 0 view .LVU2365
 7345 0024 94F85C30 		ldrb	r3, [r4, #92]	@ zero_extendqisi2
5282:Lib/FreeRTOS/Source/tasks.c ****             {
 7346              		.loc 1 5282 15 view .LVU2366
 7347 0028 022B     		cmp	r3, #2
5284:Lib/FreeRTOS/Source/tasks.c ****                 xReturn = pdPASS;
 7348              		.loc 1 5284 56 view .LVU2367
 7349 002a 0ABF     		itet	eq
 7350 002c 84F85C00 		strbeq	r0, [r4, #92]
5285:Lib/FreeRTOS/Source/tasks.c ****             }
 7351              		.loc 1 5285 17 is_stmt 1 view .LVU2368
 7352              	.LVL581:
5289:Lib/FreeRTOS/Source/tasks.c ****             }
 7353              		.loc 1 5289 25 is_stmt 0 view .LVU2369
 7354 0030 0446     		movne	r4, r0
 7355              	.LVL582:
ARM GAS  /tmp/ccEd3BVV.s 			page 266


5285:Lib/FreeRTOS/Source/tasks.c ****             }
 7356              		.loc 1 5285 25 view .LVU2370
 7357 0032 0124     		moveq	r4, #1
 7358              	.LVL583:
5292:Lib/FreeRTOS/Source/tasks.c **** 
 7359              		.loc 1 5292 9 is_stmt 1 view .LVU2371
 7360 0034 FFF7FEFF 		bl	vPortExitCritical
 7361              	.LVL584:
5294:Lib/FreeRTOS/Source/tasks.c ****     }
 7362              		.loc 1 5294 9 view .LVU2372
5295:Lib/FreeRTOS/Source/tasks.c **** 
 7363              		.loc 1 5295 5 is_stmt 0 view .LVU2373
 7364 0038 2046     		mov	r0, r4
 7365 003a 10BD     		pop	{r4, pc}
 7366              	.LVL585:
 7367              	.L576:
5295:Lib/FreeRTOS/Source/tasks.c **** 
 7368              		.loc 1 5295 5 view .LVU2374
 7369              		.align	2
 7370              	.L575:
 7371 003c 00000000 		.word	.LC0
 7372 0040 00000000 		.word	__func__.1
 7373 0044 02000000 		.word	.LC1
 7374 0048 00000000 		.word	pxCurrentTCB
 7375              		.cfi_endproc
 7376              	.LFE60:
 7378              		.section	.text.ulTaskGenericNotifyValueClear,"ax",%progbits
 7379              		.align	1
 7380              		.global	ulTaskGenericNotifyValueClear
 7381              		.syntax unified
 7382              		.thumb
 7383              		.thumb_func
 7385              	ulTaskGenericNotifyValueClear:
 7386              	.LVL586:
 7387              	.LFB61:
5305:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 7388              		.loc 1 5305 5 is_stmt 1 view -0
 7389              		.cfi_startproc
 7390              		@ args = 0, pretend = 0, frame = 0
 7391              		@ frame_needed = 0, uses_anonymous_args = 0
5306:Lib/FreeRTOS/Source/tasks.c ****         uint32_t ulReturn;
 7392              		.loc 1 5306 9 view .LVU2376
5307:Lib/FreeRTOS/Source/tasks.c **** 
 7393              		.loc 1 5307 9 view .LVU2377
5309:Lib/FreeRTOS/Source/tasks.c **** 
 7394              		.loc 1 5309 9 view .LVU2378
5305:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 7395              		.loc 1 5305 5 is_stmt 0 view .LVU2379
 7396 0000 70B5     		push	{r4, r5, r6, lr}
 7397              		.cfi_def_cfa_offset 16
 7398              		.cfi_offset 4, -16
 7399              		.cfi_offset 5, -12
 7400              		.cfi_offset 6, -8
 7401              		.cfi_offset 14, -4
5305:Lib/FreeRTOS/Source/tasks.c ****         TCB_t * pxTCB;
 7402              		.loc 1 5305 5 view .LVU2380
 7403 0002 0446     		mov	r4, r0
ARM GAS  /tmp/ccEd3BVV.s 			page 267


 7404 0004 1546     		mov	r5, r2
5309:Lib/FreeRTOS/Source/tasks.c **** 
 7405              		.loc 1 5309 9 view .LVU2381
 7406 0006 41B1     		cbz	r1, .L578
5309:Lib/FreeRTOS/Source/tasks.c **** 
 7407              		.loc 1 5309 9 is_stmt 1 discriminator 1 view .LVU2382
 7408 0008 FFF7FEFF 		bl	ulSetInterruptMask
 7409              	.LVL587:
5309:Lib/FreeRTOS/Source/tasks.c **** 
 7410              		.loc 1 5309 9 discriminator 1 view .LVU2383
 7411 000c 41F2BD41 		movw	r1, #5309
 7412 0010 094B     		ldr	r3, .L580
 7413 0012 0A4A     		ldr	r2, .L580+4
 7414 0014 0A48     		ldr	r0, .L580+8
 7415 0016 FFF7FEFF 		bl	__assert_func
 7416              	.LVL588:
 7417              	.L578:
5309:Lib/FreeRTOS/Source/tasks.c **** 
 7418              		.loc 1 5309 79 discriminator 2 view .LVU2384
5313:Lib/FreeRTOS/Source/tasks.c **** 
 7419              		.loc 1 5313 9 view .LVU2385
5313:Lib/FreeRTOS/Source/tasks.c **** 
 7420              		.loc 1 5313 17 is_stmt 0 view .LVU2386
 7421 001a 08B9     		cbnz	r0, .L579
5313:Lib/FreeRTOS/Source/tasks.c **** 
 7422              		.loc 1 5313 17 discriminator 1 view .LVU2387
 7423 001c 094B     		ldr	r3, .L580+12
 7424 001e 1C68     		ldr	r4, [r3]
 7425              	.LVL589:
 7426              	.L579:
5315:Lib/FreeRTOS/Source/tasks.c ****         {
 7427              		.loc 1 5315 9 is_stmt 1 view .LVU2388
 7428 0020 FFF7FEFF 		bl	vPortEnterCritical
 7429              	.LVL590:
5319:Lib/FreeRTOS/Source/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 7430              		.loc 1 5319 13 view .LVU2389
5319:Lib/FreeRTOS/Source/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 7431              		.loc 1 5319 22 is_stmt 0 view .LVU2390
 7432 0024 A66D     		ldr	r6, [r4, #88]
 7433              	.LVL591:
5320:Lib/FreeRTOS/Source/tasks.c ****         }
 7434              		.loc 1 5320 13 is_stmt 1 view .LVU2391
5320:Lib/FreeRTOS/Source/tasks.c ****         }
 7435              		.loc 1 5320 35 is_stmt 0 view .LVU2392
 7436 0026 A36D     		ldr	r3, [r4, #88]
5320:Lib/FreeRTOS/Source/tasks.c ****         }
 7437              		.loc 1 5320 54 view .LVU2393
 7438 0028 23EA0503 		bic	r3, r3, r5
 7439 002c A365     		str	r3, [r4, #88]
5322:Lib/FreeRTOS/Source/tasks.c **** 
 7440              		.loc 1 5322 9 is_stmt 1 view .LVU2394
 7441 002e FFF7FEFF 		bl	vPortExitCritical
 7442              	.LVL592:
5324:Lib/FreeRTOS/Source/tasks.c ****     }
 7443              		.loc 1 5324 9 view .LVU2395
5325:Lib/FreeRTOS/Source/tasks.c **** 
 7444              		.loc 1 5325 5 is_stmt 0 view .LVU2396
ARM GAS  /tmp/ccEd3BVV.s 			page 268


 7445 0032 3046     		mov	r0, r6
 7446 0034 70BD     		pop	{r4, r5, r6, pc}
 7447              	.LVL593:
 7448              	.L581:
5325:Lib/FreeRTOS/Source/tasks.c **** 
 7449              		.loc 1 5325 5 view .LVU2397
 7450 0036 00BF     		.align	2
 7451              	.L580:
 7452 0038 00000000 		.word	.LC0
 7453 003c 00000000 		.word	__func__.0
 7454 0040 02000000 		.word	.LC1
 7455 0044 00000000 		.word	pxCurrentTCB
 7456              		.cfi_endproc
 7457              	.LFE61:
 7459              		.section	.text.ulTaskGetRunTimeCounter,"ax",%progbits
 7460              		.align	1
 7461              		.global	ulTaskGetRunTimeCounter
 7462              		.syntax unified
 7463              		.thumb
 7464              		.thumb_func
 7466              	ulTaskGetRunTimeCounter:
 7467              	.LVL594:
 7468              	.LFB62:
5333:Lib/FreeRTOS/Source/tasks.c ****         return xTask->ulRunTimeCounter;
 7469              		.loc 1 5333 5 is_stmt 1 view -0
 7470              		.cfi_startproc
 7471              		@ args = 0, pretend = 0, frame = 0
 7472              		@ frame_needed = 0, uses_anonymous_args = 0
 7473              		@ link register save eliminated.
5334:Lib/FreeRTOS/Source/tasks.c ****     }
 7474              		.loc 1 5334 9 view .LVU2399
5335:Lib/FreeRTOS/Source/tasks.c **** 
 7475              		.loc 1 5335 5 is_stmt 0 view .LVU2400
 7476 0000 406D     		ldr	r0, [r0, #84]
 7477              	.LVL595:
5335:Lib/FreeRTOS/Source/tasks.c **** 
 7478              		.loc 1 5335 5 view .LVU2401
 7479 0002 7047     		bx	lr
 7480              		.cfi_endproc
 7481              	.LFE62:
 7483              		.section	.text.ulTaskGetRunTimePercent,"ax",%progbits
 7484              		.align	1
 7485              		.global	ulTaskGetRunTimePercent
 7486              		.syntax unified
 7487              		.thumb
 7488              		.thumb_func
 7490              	ulTaskGetRunTimePercent:
 7491              	.LVL596:
 7492              	.LFB63:
5343:Lib/FreeRTOS/Source/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulReturn;
 7493              		.loc 1 5343 5 is_stmt 1 view -0
 7494              		.cfi_startproc
 7495              		@ args = 0, pretend = 0, frame = 0
 7496              		@ frame_needed = 0, uses_anonymous_args = 0
5344:Lib/FreeRTOS/Source/tasks.c **** 
 7497              		.loc 1 5344 9 view .LVU2403
5346:Lib/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccEd3BVV.s 			page 269


 7498              		.loc 1 5346 9 view .LVU2404
5343:Lib/FreeRTOS/Source/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulReturn;
 7499              		.loc 1 5343 5 is_stmt 0 view .LVU2405
 7500 0000 10B5     		push	{r4, lr}
 7501              		.cfi_def_cfa_offset 8
 7502              		.cfi_offset 4, -8
 7503              		.cfi_offset 14, -4
5343:Lib/FreeRTOS/Source/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulReturn;
 7504              		.loc 1 5343 5 view .LVU2406
 7505 0002 0446     		mov	r4, r0
5346:Lib/FreeRTOS/Source/tasks.c **** 
 7506              		.loc 1 5346 55 view .LVU2407
 7507 0004 FFF7FEFF 		bl	TIM4_Get_Value
 7508              	.LVL597:
5349:Lib/FreeRTOS/Source/tasks.c **** 
 7509              		.loc 1 5349 9 is_stmt 1 view .LVU2408
5352:Lib/FreeRTOS/Source/tasks.c ****         {
 7510              		.loc 1 5352 9 view .LVU2409
5352:Lib/FreeRTOS/Source/tasks.c ****         {
 7511              		.loc 1 5352 11 is_stmt 0 view .LVU2410
 7512 0008 6328     		cmp	r0, #99
5354:Lib/FreeRTOS/Source/tasks.c ****         }
 7513              		.loc 1 5354 13 is_stmt 1 view .LVU2411
5349:Lib/FreeRTOS/Source/tasks.c **** 
 7514              		.loc 1 5349 21 is_stmt 0 view .LVU2412
 7515 000a 83BF     		ittte	hi
 7516 000c 6423     		movhi	r3, #100
 7517 000e B0FBF3F3 		udivhi	r3, r0, r3
5354:Lib/FreeRTOS/Source/tasks.c ****         }
 7518              		.loc 1 5354 22 view .LVU2413
 7519 0012 606D     		ldrhi	r0, [r4, #84]
 7520              	.LVL598:
5358:Lib/FreeRTOS/Source/tasks.c ****         }
 7521              		.loc 1 5358 22 view .LVU2414
 7522 0014 0020     		movls	r0, #0
5354:Lib/FreeRTOS/Source/tasks.c ****         }
 7523              		.loc 1 5354 22 view .LVU2415
 7524 0016 88BF     		it	hi
 7525 0018 B0FBF3F0 		udivhi	r0, r0, r3
 7526              	.LVL599:
5361:Lib/FreeRTOS/Source/tasks.c ****     }
 7527              		.loc 1 5361 9 is_stmt 1 view .LVU2416
5362:Lib/FreeRTOS/Source/tasks.c **** 
 7528              		.loc 1 5362 5 is_stmt 0 view .LVU2417
 7529 001c 10BD     		pop	{r4, pc}
5362:Lib/FreeRTOS/Source/tasks.c **** 
 7530              		.loc 1 5362 5 view .LVU2418
 7531              		.cfi_endproc
 7532              	.LFE63:
 7534              		.section	.text.ulTaskGetIdleRunTimeCounter,"ax",%progbits
 7535              		.align	1
 7536              		.global	ulTaskGetIdleRunTimeCounter
 7537              		.syntax unified
 7538              		.thumb
 7539              		.thumb_func
 7541              	ulTaskGetIdleRunTimeCounter:
 7542              	.LFB64:
ARM GAS  /tmp/ccEd3BVV.s 			page 270


5370:Lib/FreeRTOS/Source/tasks.c ****         return ulTaskGetRunTimeCounter( xIdleTaskHandle );
 7543              		.loc 1 5370 5 is_stmt 1 view -0
 7544              		.cfi_startproc
 7545              		@ args = 0, pretend = 0, frame = 0
 7546              		@ frame_needed = 0, uses_anonymous_args = 0
 7547              		@ link register save eliminated.
5371:Lib/FreeRTOS/Source/tasks.c ****     }
 7548              		.loc 1 5371 9 view .LVU2420
 7549              	.LVL600:
 7550              	.LBB186:
 7551              	.LBI186:
5332:Lib/FreeRTOS/Source/tasks.c ****     {
 7552              		.loc 1 5332 33 view .LVU2421
 7553              	.LBB187:
5334:Lib/FreeRTOS/Source/tasks.c ****     }
 7554              		.loc 1 5334 9 view .LVU2422
5334:Lib/FreeRTOS/Source/tasks.c ****     }
 7555              		.loc 1 5334 21 is_stmt 0 view .LVU2423
 7556 0000 014B     		ldr	r3, .L587
 7557 0002 1B68     		ldr	r3, [r3]
 7558              	.LBE187:
 7559              	.LBE186:
5372:Lib/FreeRTOS/Source/tasks.c **** 
 7560              		.loc 1 5372 5 view .LVU2424
 7561 0004 586D     		ldr	r0, [r3, #84]
 7562 0006 7047     		bx	lr
 7563              	.L588:
 7564              		.align	2
 7565              	.L587:
 7566 0008 00000000 		.word	xIdleTaskHandle
 7567              		.cfi_endproc
 7568              	.LFE64:
 7570              		.section	.text.ulTaskGetIdleRunTimePercent,"ax",%progbits
 7571              		.align	1
 7572              		.global	ulTaskGetIdleRunTimePercent
 7573              		.syntax unified
 7574              		.thumb
 7575              		.thumb_func
 7577              	ulTaskGetIdleRunTimePercent:
 7578              	.LFB65:
5380:Lib/FreeRTOS/Source/tasks.c ****         return ulTaskGetRunTimePercent( xIdleTaskHandle );
 7579              		.loc 1 5380 5 is_stmt 1 view -0
 7580              		.cfi_startproc
 7581              		@ args = 0, pretend = 0, frame = 0
 7582              		@ frame_needed = 0, uses_anonymous_args = 0
 7583              		@ link register save eliminated.
5381:Lib/FreeRTOS/Source/tasks.c ****     }
 7584              		.loc 1 5381 9 view .LVU2426
5381:Lib/FreeRTOS/Source/tasks.c ****     }
 7585              		.loc 1 5381 16 is_stmt 0 view .LVU2427
 7586 0000 014B     		ldr	r3, .L590
 7587 0002 1868     		ldr	r0, [r3]
 7588 0004 FFF7FEBF 		b	ulTaskGetRunTimePercent
 7589              	.LVL601:
 7590              	.L591:
 7591              		.align	2
 7592              	.L590:
ARM GAS  /tmp/ccEd3BVV.s 			page 271


 7593 0008 00000000 		.word	xIdleTaskHandle
 7594              		.cfi_endproc
 7595              	.LFE65:
 7597              		.section	.rodata.__func__.0,"a"
 7600              	__func__.0:
 7601 0000 756C5461 		.ascii	"ulTaskGenericNotifyValueClear\000"
 7601      736B4765 
 7601      6E657269 
 7601      634E6F74 
 7601      69667956 
 7602              		.section	.rodata.__func__.1,"a"
 7605              	__func__.1:
 7606 0000 78546173 		.ascii	"xTaskGenericNotifyStateClear\000"
 7606      6B47656E 
 7606      65726963 
 7606      4E6F7469 
 7606      66795374 
 7607              		.section	.rodata.__func__.2,"a"
 7610              	__func__.2:
 7611 0000 76546173 		.ascii	"vTaskGenericNotifyGiveFromISR\000"
 7611      6B47656E 
 7611      65726963 
 7611      4E6F7469 
 7611      66794769 
 7612              		.section	.rodata.__func__.3,"a"
 7615              	__func__.3:
 7616 0000 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 7616      6B47656E 
 7616      65726963 
 7616      4E6F7469 
 7616      66794672 
 7617              		.section	.rodata.__func__.4,"a"
 7620              	__func__.4:
 7621 0000 78546173 		.ascii	"xTaskGenericNotify\000"
 7621      6B47656E 
 7621      65726963 
 7621      4E6F7469 
 7621      667900
 7622              		.section	.rodata.__func__.5,"a"
 7625              	__func__.5:
 7626 0000 78546173 		.ascii	"xTaskGenericNotifyWait\000"
 7626      6B47656E 
 7626      65726963 
 7626      4E6F7469 
 7626      66795761 
 7627              		.section	.rodata.__func__.6,"a"
 7630              	__func__.6:
 7631 0000 756C5461 		.ascii	"ulTaskGenericNotifyTake\000"
 7631      736B4765 
 7631      6E657269 
 7631      634E6F74 
 7631      69667954 
 7632              		.section	.rodata.__func__.7,"a"
 7635              	__func__.7:
 7636 0000 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 7636      6B507269 
 7636      6F726974 
ARM GAS  /tmp/ccEd3BVV.s 			page 272


 7636      79446973 
 7636      696E6865 
 7637              		.section	.rodata.__func__.8,"a"
 7640              	__func__.8:
 7641 0000 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 7641      6B507269 
 7641      6F726974 
 7641      79446973 
 7641      696E6865 
 7642              		.section	.rodata.__func__.9,"a"
 7645              	__func__.9:
 7646 0000 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 7646      6B436865 
 7646      636B466F 
 7646      7254696D 
 7646      654F7574 
 7647              		.section	.rodata.__func__.10,"a"
 7650              	__func__.10:
 7651 0000 76546173 		.ascii	"vTaskSetTimeOutState\000"
 7651      6B536574 
 7651      54696D65 
 7651      4F757453 
 7651      74617465 
 7652              		.section	.rodata.__func__.11,"a"
 7655              	__func__.11:
 7656 0000 76546173 		.ascii	"vTaskRemoveFromUnorderedEventList\000"
 7656      6B52656D 
 7656      6F766546 
 7656      726F6D55 
 7656      6E6F7264 
 7657              		.section	.rodata.__func__.12,"a"
 7660              	__func__.12:
 7661 0000 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 7661      6B52656D 
 7661      6F766546 
 7661      726F6D45 
 7661      76656E74 
 7662              		.section	.rodata.__func__.13,"a"
 7665              	__func__.13:
 7666 0000 76546173 		.ascii	"vTaskPlaceOnEventListRestricted\000"
 7666      6B506C61 
 7666      63654F6E 
 7666      4576656E 
 7666      744C6973 
 7667              		.section	.rodata.__func__.14,"a"
 7670              	__func__.14:
 7671 0000 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 7671      6B506C61 
 7671      63654F6E 
 7671      556E6F72 
 7671      64657265 
 7672              		.section	.rodata.__func__.15,"a"
 7675              	__func__.15:
 7676 0000 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 7676      6B506C61 
 7676      63654F6E 
 7676      4576656E 
ARM GAS  /tmp/ccEd3BVV.s 			page 273


 7676      744C6973 
 7677              		.section	.rodata.__func__.16,"a"
 7680              	__func__.16:
 7681 0000 76546173 		.ascii	"vTaskSwitchContext\000"
 7681      6B537769 
 7681      74636843 
 7681      6F6E7465 
 7681      787400
 7682              		.section	.rodata.__func__.17,"a"
 7685              	__func__.17:
 7686 0000 78546173 		.ascii	"xTaskIncrementTick\000"
 7686      6B496E63 
 7686      72656D65 
 7686      6E745469 
 7686      636B00
 7687              		.section	.rodata.__func__.18,"a"
 7690              	__func__.18:
 7691 0000 78546173 		.ascii	"xTaskCatchUpTicks\000"
 7691      6B436174 
 7691      63685570 
 7691      5469636B 
 7691      7300
 7692              		.section	.rodata.__func__.19,"a"
 7695              	__func__.19:
 7696 0000 78546173 		.ascii	"xTaskGetIdleTaskHandle\000"
 7696      6B476574 
 7696      49646C65 
 7696      5461736B 
 7696      48616E64 
 7697              		.section	.rodata.__func__.20,"a"
 7700              	__func__.20:
 7701 0000 78546173 		.ascii	"xTaskGetStaticBuffers\000"
 7701      6B476574 
 7701      53746174 
 7701      69634275 
 7701      66666572 
 7702              		.section	.rodata.__func__.21,"a"
 7705              	__func__.21:
 7706 0000 70635461 		.ascii	"pcTaskGetName\000"
 7706      736B4765 
 7706      744E616D 
 7706      6500
 7707              		.section	.rodata.__func__.22,"a"
 7710              	__func__.22:
 7711 0000 78546173 		.ascii	"xTaskResumeAll\000"
 7711      6B526573 
 7711      756D6541 
 7711      6C6C00
 7712              		.section	.rodata.__func__.23,"a"
 7715              	__func__.23:
 7716 0000 76546173 		.ascii	"vTaskStartScheduler\000"
 7716      6B537461 
 7716      72745363 
 7716      68656475 
 7716      6C657200 
 7717              		.section	.rodata.__func__.24,"a"
 7720              	__func__.24:
ARM GAS  /tmp/ccEd3BVV.s 			page 274


 7721 0000 78546173 		.ascii	"xTaskResumeFromISR\000"
 7721      6B526573 
 7721      756D6546 
 7721      726F6D49 
 7721      535200
 7722              		.section	.rodata.__func__.25,"a"
 7725              	__func__.25:
 7726 0000 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 7726      61736B49 
 7726      73546173 
 7726      6B537573 
 7726      70656E64 
 7727              		.section	.rodata.__func__.26,"a"
 7730              	__func__.26:
 7731 0000 76546173 		.ascii	"vTaskResume\000"
 7731      6B526573 
 7731      756D6500 
 7732              		.section	.rodata.__func__.27,"a"
 7735              	__func__.27:
 7736 0000 76546173 		.ascii	"vTaskSuspend\000"
 7736      6B537573 
 7736      70656E64 
 7736      00
 7737              		.section	.rodata.__func__.28,"a"
 7740              	__func__.28:
 7741 0000 76546173 		.ascii	"vTaskPrioritySet\000"
 7741      6B507269 
 7741      6F726974 
 7741      79536574 
 7741      00
 7742              		.section	.rodata.__func__.29,"a"
 7745              	__func__.29:
 7746 0000 65546173 		.ascii	"eTaskGetState\000"
 7746      6B476574 
 7746      53746174 
 7746      6500
 7747              		.section	.rodata.__func__.30,"a"
 7750              	__func__.30:
 7751 0000 76546173 		.ascii	"vTaskDelay\000"
 7751      6B44656C 
 7751      617900
 7752              		.section	.rodata.__func__.31,"a"
 7755              	__func__.31:
 7756 0000 78546173 		.ascii	"xTaskDelayUntil\000"
 7756      6B44656C 
 7756      6179556E 
 7756      74696C00 
 7757              		.section	.rodata.__func__.32,"a"
 7760              	__func__.32:
 7761 0000 76546173 		.ascii	"vTaskDelete\000"
 7761      6B44656C 
 7761      65746500 
 7762              		.section	.rodata.__func__.33,"a"
 7765              	__func__.33:
 7766 0000 70727649 		.ascii	"prvInitialiseNewTask\000"
 7766      6E697469 
 7766      616C6973 
ARM GAS  /tmp/ccEd3BVV.s 			page 275


 7766      654E6577 
 7766      5461736B 
 7767              		.section	.rodata.__func__.34,"a"
 7770              	__func__.34:
 7771 0000 78546173 		.ascii	"xTaskCreateStatic\000"
 7771      6B437265 
 7771      61746553 
 7771      74617469 
 7771      6300
 7772              		.section	.bss.ulTotalRunTime,"aw",%nobits
 7773              		.align	2
 7776              	ulTotalRunTime:
 7777 0000 00000000 		.space	4
 7778              		.section	.bss.ulTaskSwitchedInTime,"aw",%nobits
 7779              		.align	2
 7782              	ulTaskSwitchedInTime:
 7783 0000 00000000 		.space	4
 7784              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 7785              		.align	2
 7788              	uxSchedulerSuspended:
 7789 0000 00000000 		.space	4
 7790              		.global	uxTopUsedPriority
 7791              		.section	.rodata.uxTopUsedPriority,"a"
 7792              		.align	2
 7795              	uxTopUsedPriority:
 7796 0000 37000000 		.word	55
 7797              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 7798              		.align	2
 7801              	xIdleTaskHandle:
 7802 0000 00000000 		.space	4
 7803              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 7804              		.align	2
 7807              	xNextTaskUnblockTime:
 7808 0000 00000000 		.space	4
 7809              		.section	.bss.uxTaskNumber,"aw",%nobits
 7810              		.align	2
 7813              	uxTaskNumber:
 7814 0000 00000000 		.space	4
 7815              		.section	.bss.xNumOfOverflows,"aw",%nobits
 7816              		.align	2
 7819              	xNumOfOverflows:
 7820 0000 00000000 		.space	4
 7821              		.section	.bss.xYieldPending,"aw",%nobits
 7822              		.align	2
 7825              	xYieldPending:
 7826 0000 00000000 		.space	4
 7827              		.section	.bss.xPendedTicks,"aw",%nobits
 7828              		.align	2
 7831              	xPendedTicks:
 7832 0000 00000000 		.space	4
 7833              		.section	.bss.xSchedulerRunning,"aw",%nobits
 7834              		.align	2
 7837              	xSchedulerRunning:
 7838 0000 00000000 		.space	4
 7839              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 7840              		.align	2
 7843              	uxTopReadyPriority:
ARM GAS  /tmp/ccEd3BVV.s 			page 276


 7844 0000 00000000 		.space	4
 7845              		.section	.bss.xTickCount,"aw",%nobits
 7846              		.align	2
 7849              	xTickCount:
 7850 0000 00000000 		.space	4
 7851              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 7852              		.align	2
 7855              	uxCurrentNumberOfTasks:
 7856 0000 00000000 		.space	4
 7857              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 7858              		.align	2
 7861              	xSuspendedTaskList:
 7862 0000 00000000 		.space	20
 7862      00000000 
 7862      00000000 
 7862      00000000 
 7862      00000000 
 7863              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 7864              		.align	2
 7867              	uxDeletedTasksWaitingCleanUp:
 7868 0000 00000000 		.space	4
 7869              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 7870              		.align	2
 7873              	xTasksWaitingTermination:
 7874 0000 00000000 		.space	20
 7874      00000000 
 7874      00000000 
 7874      00000000 
 7874      00000000 
 7875              		.section	.bss.xPendingReadyList,"aw",%nobits
 7876              		.align	2
 7879              	xPendingReadyList:
 7880 0000 00000000 		.space	20
 7880      00000000 
 7880      00000000 
 7880      00000000 
 7880      00000000 
 7881              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 7882              		.align	2
 7885              	pxOverflowDelayedTaskList:
 7886 0000 00000000 		.space	4
 7887              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 7888              		.align	2
 7891              	pxDelayedTaskList:
 7892 0000 00000000 		.space	4
 7893              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 7894              		.align	2
 7897              	xDelayedTaskList2:
 7898 0000 00000000 		.space	20
 7898      00000000 
 7898      00000000 
 7898      00000000 
 7898      00000000 
 7899              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 7900              		.align	2
 7903              	xDelayedTaskList1:
 7904 0000 00000000 		.space	20
ARM GAS  /tmp/ccEd3BVV.s 			page 277


 7904      00000000 
 7904      00000000 
 7904      00000000 
 7904      00000000 
 7905              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 7906              		.align	2
 7909              	pxReadyTasksLists:
 7910 0000 00000000 		.space	1120
 7910      00000000 
 7910      00000000 
 7910      00000000 
 7910      00000000 
 7911              		.global	pxCurrentTCB
 7912              		.section	.bss.pxCurrentTCB,"aw",%nobits
 7913              		.align	2
 7916              	pxCurrentTCB:
 7917 0000 00000000 		.space	4
 7918              		.text
 7919              	.Letext0:
 7920              		.file 2 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 7921              		.file 3 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 7922              		.file 4 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-t
 7923              		.file 5 "Lib/FreeRTOS/Source/include/projdefs.h"
 7924              		.file 6 "Lib/FreeRTOS/Source/portable/GCC/ARM_CM55_NTZ/non_secure/portmacrocommon.h"
 7925              		.file 7 "Lib/FreeRTOS/Source/include/FreeRTOS.h"
 7926              		.file 8 "Lib/FreeRTOS/Source/include/list.h"
 7927              		.file 9 "Lib/FreeRTOS/Source/include/task.h"
 7928              		.file 10 "Lib/FreeRTOS/Source/include/portable.h"
 7929              		.file 11 "Inc/freertos_tasks_c_additions.h"
 7930              		.file 12 "Inc/FreeRTOSConfig.h"
 7931              		.file 13 "Lib/FreeRTOS/Source/include/timers.h"
 7932              		.file 14 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-
 7933              		.file 15 "/home/tanjiajun2002/renesas/rzv/e2studio_v2025-01_fsp_v3.1.0/toolchains/gcc_arm/arm-gnu-
 7934              		.file 16 "<built-in>"
ARM GAS  /tmp/ccEd3BVV.s 			page 278


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
     /tmp/ccEd3BVV.s:26     .text.prvIdleTask:00000000 $t
     /tmp/ccEd3BVV.s:31     .text.prvIdleTask:00000000 prvIdleTask
     /tmp/ccEd3BVV.s:121    .text.prvIdleTask:0000003c $d
     /tmp/ccEd3BVV.s:7867   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccEd3BVV.s:7873   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
     /tmp/ccEd3BVV.s:7855   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
     /tmp/ccEd3BVV.s:7909   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
     /tmp/ccEd3BVV.s:133    .text.prvAddCurrentTaskToDelayedList:00000000 $t
     /tmp/ccEd3BVV.s:138    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
     /tmp/ccEd3BVV.s:280    .text.prvAddCurrentTaskToDelayedList:00000070 $d
     /tmp/ccEd3BVV.s:7849   .bss.xTickCount:00000000 xTickCount
     /tmp/ccEd3BVV.s:7916   .bss.pxCurrentTCB:00000000 pxCurrentTCB
     /tmp/ccEd3BVV.s:7861   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
     /tmp/ccEd3BVV.s:7885   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
     /tmp/ccEd3BVV.s:7891   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
     /tmp/ccEd3BVV.s:7807   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
     /tmp/ccEd3BVV.s:290    .text.prvResetNextTaskUnblockTime:00000000 $t
     /tmp/ccEd3BVV.s:295    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
     /tmp/ccEd3BVV.s:336    .text.prvResetNextTaskUnblockTime:0000001c $d
     /tmp/ccEd3BVV.s:349    .text.prvTaskIsTaskSuspended:00000000 $t
     /tmp/ccEd3BVV.s:354    .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
     /tmp/ccEd3BVV.s:424    .text.prvTaskIsTaskSuspended:00000038 $d
     /tmp/ccEd3BVV.s:7725   .rodata.__func__.25:00000000 __func__.25
     /tmp/ccEd3BVV.s:7879   .bss.xPendingReadyList:00000000 xPendingReadyList
     /tmp/ccEd3BVV.s:433    .text.xTaskCreateStatic:00000000 $t
     /tmp/ccEd3BVV.s:439    .text.xTaskCreateStatic:00000000 xTaskCreateStatic
     /tmp/ccEd3BVV.s:892    .text.xTaskCreateStatic:000001a4 $d
     /tmp/ccEd3BVV.s:7770   .rodata.__func__.34:00000000 __func__.34
     /tmp/ccEd3BVV.s:7765   .rodata.__func__.33:00000000 __func__.33
     /tmp/ccEd3BVV.s:7897   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
     /tmp/ccEd3BVV.s:7813   .bss.uxTaskNumber:00000000 uxTaskNumber
     /tmp/ccEd3BVV.s:7843   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
     /tmp/ccEd3BVV.s:7837   .bss.xSchedulerRunning:00000000 xSchedulerRunning
     /tmp/ccEd3BVV.s:7903   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
     /tmp/ccEd3BVV.s:915    .text.vTaskDelete:00000000 $t
     /tmp/ccEd3BVV.s:921    .text.vTaskDelete:00000000 vTaskDelete
     /tmp/ccEd3BVV.s:1062   .text.vTaskDelete:00000084 $d
     /tmp/ccEd3BVV.s:7788   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
     /tmp/ccEd3BVV.s:7760   .rodata.__func__.32:00000000 __func__.32
     /tmp/ccEd3BVV.s:1076   .text.eTaskGetState:00000000 $t
     /tmp/ccEd3BVV.s:1082   .text.eTaskGetState:00000000 eTaskGetState
     /tmp/ccEd3BVV.s:1240   .text.eTaskGetState:00000080 $d
     /tmp/ccEd3BVV.s:7745   .rodata.__func__.29:00000000 __func__.29
     /tmp/ccEd3BVV.s:1255   .text.uxTaskPriorityGet:00000000 $t
     /tmp/ccEd3BVV.s:1261   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
     /tmp/ccEd3BVV.s:1305   .text.uxTaskPriorityGet:00000018 $d
     /tmp/ccEd3BVV.s:1310   .text.uxTaskPriorityGetFromISR:00000000 $t
     /tmp/ccEd3BVV.s:1316   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
     /tmp/ccEd3BVV.s:1365   .text.uxTaskPriorityGetFromISR:0000001c $d
     /tmp/ccEd3BVV.s:1370   .text.vTaskPrioritySet:00000000 $t
     /tmp/ccEd3BVV.s:1376   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
     /tmp/ccEd3BVV.s:1593   .text.vTaskPrioritySet:000000b4 $d
     /tmp/ccEd3BVV.s:7740   .rodata.__func__.28:00000000 __func__.28
     /tmp/ccEd3BVV.s:1603   .text.vTaskResume:00000000 $t
     /tmp/ccEd3BVV.s:1609   .text.vTaskResume:00000000 vTaskResume
ARM GAS  /tmp/ccEd3BVV.s 			page 279


     /tmp/ccEd3BVV.s:1744   .text.vTaskResume:00000078 $d
     /tmp/ccEd3BVV.s:7730   .rodata.__func__.26:00000000 __func__.26
     /tmp/ccEd3BVV.s:1754   .text.xTaskResumeFromISR:00000000 $t
     /tmp/ccEd3BVV.s:1760   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
     /tmp/ccEd3BVV.s:1923   .text.xTaskResumeFromISR:00000094 $d
     /tmp/ccEd3BVV.s:7720   .rodata.__func__.24:00000000 __func__.24
     /tmp/ccEd3BVV.s:7825   .bss.xYieldPending:00000000 xYieldPending
     /tmp/ccEd3BVV.s:1939   .text.vTaskStartScheduler:00000000 $t
     /tmp/ccEd3BVV.s:1945   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
     /tmp/ccEd3BVV.s:2079   .text.vTaskStartScheduler:00000078 $d
     /tmp/ccEd3BVV.s:7801   .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
     /tmp/ccEd3BVV.s:7795   .rodata.uxTopUsedPriority:00000000 uxTopUsedPriority
     /tmp/ccEd3BVV.s:7715   .rodata.__func__.23:00000000 __func__.23
     /tmp/ccEd3BVV.s:2093   .text.vTaskEndScheduler:00000000 $t
     /tmp/ccEd3BVV.s:2099   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
     /tmp/ccEd3BVV.s:2131   .text.vTaskEndScheduler:00000014 $d
     /tmp/ccEd3BVV.s:2136   .text.vTaskSuspendAll:00000000 $t
     /tmp/ccEd3BVV.s:2142   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
     /tmp/ccEd3BVV.s:2161   .text.vTaskSuspendAll:0000000c $d
     /tmp/ccEd3BVV.s:2166   .text.xTaskGetTickCount:00000000 $t
     /tmp/ccEd3BVV.s:2172   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
     /tmp/ccEd3BVV.s:2193   .text.xTaskGetTickCount:00000008 $d
     /tmp/ccEd3BVV.s:2198   .text.xTaskGetTickCountFromISR:00000000 $t
     /tmp/ccEd3BVV.s:2204   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
     /tmp/ccEd3BVV.s:2234   .text.xTaskGetTickCountFromISR:0000000c $d
     /tmp/ccEd3BVV.s:2239   .text.uxTaskGetNumberOfTasks:00000000 $t
     /tmp/ccEd3BVV.s:2245   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
     /tmp/ccEd3BVV.s:2261   .text.uxTaskGetNumberOfTasks:00000008 $d
     /tmp/ccEd3BVV.s:2266   .text.pcTaskGetName:00000000 $t
     /tmp/ccEd3BVV.s:2272   .text.pcTaskGetName:00000000 pcTaskGetName
     /tmp/ccEd3BVV.s:2313   .text.pcTaskGetName:00000020 $d
     /tmp/ccEd3BVV.s:7705   .rodata.__func__.21:00000000 __func__.21
     /tmp/ccEd3BVV.s:2321   .text.xTaskGetStaticBuffers:00000000 $t
     /tmp/ccEd3BVV.s:2327   .text.xTaskGetStaticBuffers:00000000 xTaskGetStaticBuffers
     /tmp/ccEd3BVV.s:2398   .text.xTaskGetStaticBuffers:00000038 $d
     /tmp/ccEd3BVV.s:7700   .rodata.__func__.20:00000000 __func__.20
     /tmp/ccEd3BVV.s:2406   .text.xTaskGetIdleTaskHandle:00000000 $t
     /tmp/ccEd3BVV.s:2412   .text.xTaskGetIdleTaskHandle:00000000 xTaskGetIdleTaskHandle
     /tmp/ccEd3BVV.s:2444   .text.xTaskGetIdleTaskHandle:0000001c $d
     /tmp/ccEd3BVV.s:7695   .rodata.__func__.19:00000000 __func__.19
     /tmp/ccEd3BVV.s:2452   .text.xTaskIncrementTick:00000000 $t
     /tmp/ccEd3BVV.s:2458   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
     /tmp/ccEd3BVV.s:2785   .text.xTaskIncrementTick:00000140 $d
     /tmp/ccEd3BVV.s:7685   .rodata.__func__.17:00000000 __func__.17
     /tmp/ccEd3BVV.s:7819   .bss.xNumOfOverflows:00000000 xNumOfOverflows
     /tmp/ccEd3BVV.s:7831   .bss.xPendedTicks:00000000 xPendedTicks
     /tmp/ccEd3BVV.s:2803   .text.xTaskResumeAll:00000000 $t
     /tmp/ccEd3BVV.s:2809   .text.xTaskResumeAll:00000000 xTaskResumeAll
     /tmp/ccEd3BVV.s:3096   .text.xTaskResumeAll:00000108 $d
     /tmp/ccEd3BVV.s:7710   .rodata.__func__.22:00000000 __func__.22
     /tmp/ccEd3BVV.s:3111   .text.xTaskDelayUntil:00000000 $t
     /tmp/ccEd3BVV.s:3117   .text.xTaskDelayUntil:00000000 xTaskDelayUntil
     /tmp/ccEd3BVV.s:3262   .text.xTaskDelayUntil:00000078 $d
     /tmp/ccEd3BVV.s:7755   .rodata.__func__.31:00000000 __func__.31
     /tmp/ccEd3BVV.s:3272   .text.vTaskDelay:00000000 $t
     /tmp/ccEd3BVV.s:3278   .text.vTaskDelay:00000000 vTaskDelay
     /tmp/ccEd3BVV.s:3345   .text.vTaskDelay:00000038 $d
ARM GAS  /tmp/ccEd3BVV.s 			page 280


     /tmp/ccEd3BVV.s:7750   .rodata.__func__.30:00000000 __func__.30
     /tmp/ccEd3BVV.s:3353   .text.xTaskCatchUpTicks:00000000 $t
     /tmp/ccEd3BVV.s:3359   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
     /tmp/ccEd3BVV.s:3420   .text.xTaskCatchUpTicks:00000038 $d
     /tmp/ccEd3BVV.s:7690   .rodata.__func__.18:00000000 __func__.18
     /tmp/ccEd3BVV.s:3429   .text.vTaskSwitchContext:00000000 $t
     /tmp/ccEd3BVV.s:3435   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
     /tmp/ccEd3BVV.s:3603   .text.vTaskSwitchContext:0000008c $d
     /tmp/ccEd3BVV.s:7776   .bss.ulTotalRunTime:00000000 ulTotalRunTime
     /tmp/ccEd3BVV.s:7782   .bss.ulTaskSwitchedInTime:00000000 ulTaskSwitchedInTime
     /tmp/ccEd3BVV.s:7680   .rodata.__func__.16:00000000 __func__.16
     /tmp/ccEd3BVV.s:3620   .text.vTaskSuspend:00000000 $t
     /tmp/ccEd3BVV.s:3626   .text.vTaskSuspend:00000000 vTaskSuspend
     /tmp/ccEd3BVV.s:3796   .text.vTaskSuspend:00000090 $d
     /tmp/ccEd3BVV.s:7735   .rodata.__func__.27:00000000 __func__.27
     /tmp/ccEd3BVV.s:3808   .text.vTaskPlaceOnEventList:00000000 $t
     /tmp/ccEd3BVV.s:3814   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
     /tmp/ccEd3BVV.s:3868   .text.vTaskPlaceOnEventList:00000030 $d
     /tmp/ccEd3BVV.s:7675   .rodata.__func__.15:00000000 __func__.15
     /tmp/ccEd3BVV.s:3876   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
     /tmp/ccEd3BVV.s:3882   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccEd3BVV.s:3993   .text.vTaskPlaceOnUnorderedEventList:00000064 $d
     /tmp/ccEd3BVV.s:7670   .rodata.__func__.14:00000000 __func__.14
     /tmp/ccEd3BVV.s:4002   .text.vTaskPlaceOnEventListRestricted:00000000 $t
     /tmp/ccEd3BVV.s:4008   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
     /tmp/ccEd3BVV.s:4102   .text.vTaskPlaceOnEventListRestricted:00000058 $d
     /tmp/ccEd3BVV.s:7665   .rodata.__func__.13:00000000 __func__.13
     /tmp/ccEd3BVV.s:4110   .text.xTaskRemoveFromEventList:00000000 $t
     /tmp/ccEd3BVV.s:4116   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
     /tmp/ccEd3BVV.s:4317   .text.xTaskRemoveFromEventList:000000b0 $d
     /tmp/ccEd3BVV.s:7660   .rodata.__func__.12:00000000 __func__.12
     /tmp/ccEd3BVV.s:4331   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
     /tmp/ccEd3BVV.s:4337   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
     /tmp/ccEd3BVV.s:4520   .text.vTaskRemoveFromUnorderedEventList:000000a4 $d
     /tmp/ccEd3BVV.s:7655   .rodata.__func__.11:00000000 __func__.11
     /tmp/ccEd3BVV.s:4532   .text.vTaskSetTimeOutState:00000000 $t
     /tmp/ccEd3BVV.s:4538   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
     /tmp/ccEd3BVV.s:4592   .text.vTaskSetTimeOutState:00000030 $d
     /tmp/ccEd3BVV.s:7650   .rodata.__func__.10:00000000 __func__.10
     /tmp/ccEd3BVV.s:4601   .text.vTaskInternalSetTimeOutState:00000000 $t
     /tmp/ccEd3BVV.s:4607   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
     /tmp/ccEd3BVV.s:4630   .text.vTaskInternalSetTimeOutState:00000010 $d
     /tmp/ccEd3BVV.s:4636   .text.xTaskCheckForTimeOut:00000000 $t
     /tmp/ccEd3BVV.s:4642   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
     /tmp/ccEd3BVV.s:4773   .text.xTaskCheckForTimeOut:0000006c $d
     /tmp/ccEd3BVV.s:7645   .rodata.__func__.9:00000000 __func__.9
     /tmp/ccEd3BVV.s:4783   .text.vTaskMissedYield:00000000 $t
     /tmp/ccEd3BVV.s:4789   .text.vTaskMissedYield:00000000 vTaskMissedYield
     /tmp/ccEd3BVV.s:4806   .text.vTaskMissedYield:00000008 $d
     /tmp/ccEd3BVV.s:4811   .text.uxTaskGetTaskNumber:00000000 $t
     /tmp/ccEd3BVV.s:4817   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
     /tmp/ccEd3BVV.s:4843   .text.vTaskSetTaskNumber:00000000 $t
     /tmp/ccEd3BVV.s:4849   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
     /tmp/ccEd3BVV.s:4874   .text.vTaskGetInfo:00000000 $t
     /tmp/ccEd3BVV.s:4880   .text.vTaskGetInfo:00000000 vTaskGetInfo
     /tmp/ccEd3BVV.s:5069   .text.vTaskGetInfo:0000008c $d
     /tmp/ccEd3BVV.s:5077   .text.prvListTasksWithinSingleList:00000000 $t
ARM GAS  /tmp/ccEd3BVV.s 			page 281


     /tmp/ccEd3BVV.s:5082   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
     /tmp/ccEd3BVV.s:5208   .text.uxTaskGetSystemState:00000000 $t
     /tmp/ccEd3BVV.s:5214   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
     /tmp/ccEd3BVV.s:5356   .text.uxTaskGetSystemState:00000094 $d
     /tmp/ccEd3BVV.s:5366   .text.uxTaskGetStackHighWaterMark:00000000 $t
     /tmp/ccEd3BVV.s:5372   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
     /tmp/ccEd3BVV.s:5436   .text.uxTaskGetStackHighWaterMark:0000001c $d
     /tmp/ccEd3BVV.s:5443   .text.xTaskGetCurrentTaskHandle:00000000 $t
     /tmp/ccEd3BVV.s:5449   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
     /tmp/ccEd3BVV.s:5468   .text.xTaskGetCurrentTaskHandle:00000008 $d
     /tmp/ccEd3BVV.s:5473   .text.xTaskGetSchedulerState:00000000 $t
     /tmp/ccEd3BVV.s:5479   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
     /tmp/ccEd3BVV.s:5512   .text.xTaskGetSchedulerState:00000018 $d
     /tmp/ccEd3BVV.s:5518   .text.xTaskPriorityInherit:00000000 $t
     /tmp/ccEd3BVV.s:5524   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
     /tmp/ccEd3BVV.s:5674   .text.xTaskPriorityInherit:00000080 $d
     /tmp/ccEd3BVV.s:5681   .text.xTaskPriorityDisinherit:00000000 $t
     /tmp/ccEd3BVV.s:5687   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
     /tmp/ccEd3BVV.s:5849   .text.xTaskPriorityDisinherit:00000084 $d
     /tmp/ccEd3BVV.s:7640   .rodata.__func__.8:00000000 __func__.8
     /tmp/ccEd3BVV.s:5859   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
     /tmp/ccEd3BVV.s:5865   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/ccEd3BVV.s:6030   .text.vTaskPriorityDisinheritAfterTimeout:00000094 $d
     /tmp/ccEd3BVV.s:7635   .rodata.__func__.7:00000000 __func__.7
     /tmp/ccEd3BVV.s:6040   .text.uxTaskResetEventItemValue:00000000 $t
     /tmp/ccEd3BVV.s:6046   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
     /tmp/ccEd3BVV.s:6074   .text.uxTaskResetEventItemValue:00000014 $d
     /tmp/ccEd3BVV.s:6079   .text.pvTaskIncrementMutexHeldCount:00000000 $t
     /tmp/ccEd3BVV.s:6085   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
     /tmp/ccEd3BVV.s:6114   .text.pvTaskIncrementMutexHeldCount:00000014 $d
     /tmp/ccEd3BVV.s:6119   .text.ulTaskGenericNotifyTake:00000000 $t
     /tmp/ccEd3BVV.s:6125   .text.ulTaskGenericNotifyTake:00000000 ulTaskGenericNotifyTake
     /tmp/ccEd3BVV.s:6243   .text.ulTaskGenericNotifyTake:00000064 $d
     /tmp/ccEd3BVV.s:7630   .rodata.__func__.6:00000000 __func__.6
     /tmp/ccEd3BVV.s:6251   .text.xTaskGenericNotifyWait:00000000 $t
     /tmp/ccEd3BVV.s:6257   .text.xTaskGenericNotifyWait:00000000 xTaskGenericNotifyWait
     /tmp/ccEd3BVV.s:6398   .text.xTaskGenericNotifyWait:00000090 $d
     /tmp/ccEd3BVV.s:7625   .rodata.__func__.5:00000000 __func__.5
     /tmp/ccEd3BVV.s:6406   .text.xTaskGenericNotify:00000000 $t
     /tmp/ccEd3BVV.s:6412   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
     /tmp/ccEd3BVV.s:6496   .text.xTaskGenericNotify:0000004c $d
     /tmp/ccEd3BVV.s:6675   .text.xTaskGenericNotify:000000f0 $d
     /tmp/ccEd3BVV.s:7620   .rodata.__func__.4:00000000 __func__.4
     /tmp/ccEd3BVV.s:6686   .text.xTaskGenericNotifyFromISR:00000000 $t
     /tmp/ccEd3BVV.s:6692   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
     /tmp/ccEd3BVV.s:6781   .text.xTaskGenericNotifyFromISR:0000005a $d
     /tmp/ccEd3BVV.s:7012   .text.xTaskGenericNotifyFromISR:00000138 $d
     /tmp/ccEd3BVV.s:7615   .rodata.__func__.3:00000000 __func__.3
     /tmp/ccEd3BVV.s:7026   .text.vTaskGenericNotifyGiveFromISR:00000000 $t
     /tmp/ccEd3BVV.s:7032   .text.vTaskGenericNotifyGiveFromISR:00000000 vTaskGenericNotifyGiveFromISR
     /tmp/ccEd3BVV.s:7279   .text.vTaskGenericNotifyGiveFromISR:000000e8 $d
     /tmp/ccEd3BVV.s:7610   .rodata.__func__.2:00000000 __func__.2
     /tmp/ccEd3BVV.s:7293   .text.xTaskGenericNotifyStateClear:00000000 $t
     /tmp/ccEd3BVV.s:7299   .text.xTaskGenericNotifyStateClear:00000000 xTaskGenericNotifyStateClear
     /tmp/ccEd3BVV.s:7371   .text.xTaskGenericNotifyStateClear:0000003c $d
     /tmp/ccEd3BVV.s:7605   .rodata.__func__.1:00000000 __func__.1
     /tmp/ccEd3BVV.s:7379   .text.ulTaskGenericNotifyValueClear:00000000 $t
ARM GAS  /tmp/ccEd3BVV.s 			page 282


     /tmp/ccEd3BVV.s:7385   .text.ulTaskGenericNotifyValueClear:00000000 ulTaskGenericNotifyValueClear
     /tmp/ccEd3BVV.s:7452   .text.ulTaskGenericNotifyValueClear:00000038 $d
     /tmp/ccEd3BVV.s:7600   .rodata.__func__.0:00000000 __func__.0
     /tmp/ccEd3BVV.s:7460   .text.ulTaskGetRunTimeCounter:00000000 $t
     /tmp/ccEd3BVV.s:7466   .text.ulTaskGetRunTimeCounter:00000000 ulTaskGetRunTimeCounter
     /tmp/ccEd3BVV.s:7484   .text.ulTaskGetRunTimePercent:00000000 $t
     /tmp/ccEd3BVV.s:7490   .text.ulTaskGetRunTimePercent:00000000 ulTaskGetRunTimePercent
     /tmp/ccEd3BVV.s:7535   .text.ulTaskGetIdleRunTimeCounter:00000000 $t
     /tmp/ccEd3BVV.s:7541   .text.ulTaskGetIdleRunTimeCounter:00000000 ulTaskGetIdleRunTimeCounter
     /tmp/ccEd3BVV.s:7566   .text.ulTaskGetIdleRunTimeCounter:00000008 $d
     /tmp/ccEd3BVV.s:7571   .text.ulTaskGetIdleRunTimePercent:00000000 $t
     /tmp/ccEd3BVV.s:7577   .text.ulTaskGetIdleRunTimePercent:00000000 ulTaskGetIdleRunTimePercent
     /tmp/ccEd3BVV.s:7593   .text.ulTaskGetIdleRunTimePercent:00000008 $d
     /tmp/ccEd3BVV.s:7773   .bss.ulTotalRunTime:00000000 $d
     /tmp/ccEd3BVV.s:7779   .bss.ulTaskSwitchedInTime:00000000 $d
     /tmp/ccEd3BVV.s:7785   .bss.uxSchedulerSuspended:00000000 $d
     /tmp/ccEd3BVV.s:7792   .rodata.uxTopUsedPriority:00000000 $d
     /tmp/ccEd3BVV.s:7798   .bss.xIdleTaskHandle:00000000 $d
     /tmp/ccEd3BVV.s:7804   .bss.xNextTaskUnblockTime:00000000 $d
     /tmp/ccEd3BVV.s:7810   .bss.uxTaskNumber:00000000 $d
     /tmp/ccEd3BVV.s:7816   .bss.xNumOfOverflows:00000000 $d
     /tmp/ccEd3BVV.s:7822   .bss.xYieldPending:00000000 $d
     /tmp/ccEd3BVV.s:7828   .bss.xPendedTicks:00000000 $d
     /tmp/ccEd3BVV.s:7834   .bss.xSchedulerRunning:00000000 $d
     /tmp/ccEd3BVV.s:7840   .bss.uxTopReadyPriority:00000000 $d
     /tmp/ccEd3BVV.s:7846   .bss.xTickCount:00000000 $d
     /tmp/ccEd3BVV.s:7852   .bss.uxCurrentNumberOfTasks:00000000 $d
     /tmp/ccEd3BVV.s:7858   .bss.xSuspendedTaskList:00000000 $d
     /tmp/ccEd3BVV.s:7864   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
     /tmp/ccEd3BVV.s:7870   .bss.xTasksWaitingTermination:00000000 $d
     /tmp/ccEd3BVV.s:7876   .bss.xPendingReadyList:00000000 $d
     /tmp/ccEd3BVV.s:7882   .bss.pxOverflowDelayedTaskList:00000000 $d
     /tmp/ccEd3BVV.s:7888   .bss.pxDelayedTaskList:00000000 $d
     /tmp/ccEd3BVV.s:7894   .bss.xDelayedTaskList2:00000000 $d
     /tmp/ccEd3BVV.s:7900   .bss.xDelayedTaskList1:00000000 $d
     /tmp/ccEd3BVV.s:7906   .bss.pxReadyTasksLists:00000000 $d
     /tmp/ccEd3BVV.s:7913   .bss.pxCurrentTCB:00000000 $d
     /tmp/ccEd3BVV.s:6501   .text.xTaskGenericNotify:00000051 $d
     /tmp/ccEd3BVV.s:6501   .text.xTaskGenericNotify:00000052 $t
     /tmp/ccEd3BVV.s:6786   .text.xTaskGenericNotifyFromISR:0000005f $d
     /tmp/ccEd3BVV.s:6786   .text.xTaskGenericNotifyFromISR:00000060 $t
                           .group:00000000 wm4.0.c552ae9005b0f2cca11872fae5d4b7f2
                           .group:00000000 wm4.ieeefp.h.77.bd5feb87d9990dd328793ced294f6a87
                           .group:00000000 wm4._newlib_version.h.4.411db44ea2338a62eca2f0777f81481b
                           .group:00000000 wm4.newlib.h.27.4b972ceed5d01f491020c20f1e546cab
                           .group:00000000 wm4.features.h.22.9dfb1293666eb4caf24cccb81c86a551
                           .group:00000000 wm4.config.h.224.10ee1ad185d877c6e334e6581faab44d
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.185.882514a1a6169ceba9142f401cbe27c6
                           .group:00000000 wm4.stddef.h.39.794fa375de48dda278c4aebb5c74aa5b
                           .group:00000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:00000000 wm4.cdefs.h.49.70fc7af612f78ddcace70fdd90b5623b
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.158.6f8e08a347b1cff664332fa350bfceb3
                           .group:00000000 wm4._types.h.127.3bdfe3ff8ea2d0985b03d9cbe93480e3
                           .group:00000000 wm4.reent.h.18.25503cdc8b7e55dd0d6ea7b3e5af7a03
ARM GAS  /tmp/ccEd3BVV.s 			page 283


                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.78.6b87466b04591b1f1cb88c14fdf2ba9e
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:00000000 wm4.stddef.h.158.eec8bf00b5213f43d095cb984c5f22e3
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.FreeRTOS.h.59.647b1b0da38e4e98108aae13c8abe9ee
                           .group:00000000 wm4.assert.h.11.db24e541f16414db224bf986d21017e2
                           .group:00000000 wm4.FreeRTOSConfig.h.59.2629c72cff9e6dbe880a2dc225eae516
                           .group:00000000 wm4.FreeRTOS.h.80.7742fabaf5accf3762dc12f7f259a8a0
                           .group:00000000 wm4.projdefs.h.30.55a824156f299c075c33148a9fdadb99
                           .group:00000000 wm4.portmacro.h.30.cbb4b2da41f551c2a9904f0d03a1ce3e
                           .group:00000000 wm4.portmacrocommon.h.30.d5cb67896ab50a95311be7e023da5c4f
                           .group:00000000 wm4.portmacro.h.68.4051ecf710d074fb55b16d91dfebeeaa
                           .group:00000000 wm4.portable.h.61.d557c57974d490f056246a26cdcddd6c
                           .group:00000000 wm4.mpu_wrappers.h.30.ccc5f1a6903f941a88c268f5f62af3fe
                           .group:00000000 wm4.portable.h.189.522b8bd52a171d3fd1432ef06d0caa63
                           .group:00000000 wm4.FreeRTOS.h.102.fb871f3e464d99c5a57b3115545a02ad
                           .group:00000000 wm4.list.h.59.bce6419520cd4f5f98779a1530bf2118
                           .group:00000000 wm4.task.h.56.84290139c73b47f5b9aac361361a2a31
                           .group:00000000 wm4.timers.h.57.6dc18d93eadf96866a61b56e192cd706
                           .group:00000000 wm4.stack_macros.h.30.db3ad6dc67b15c658de1ab15f96037bf

UNDEFINED SYMBOLS
vPortYield
vPortEnterCritical
uxListRemove
vPortExitCritical
vListInsert
ulSetInterruptMask
__assert_func
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vListInsertEnd
vPortValidateInterruptPriority
vClearInterruptMask
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
freertos_libc_init
TIM4_Config
xPortStartScheduler
vPortEndScheduler
TIM4_Get_Value
